(seq
	(load_entity "../howso.amlg" "howso" (false) (false))
	(call_entity "howso" "initialize" (assoc trainee_id "model"))

	(declare (assoc test_start (system_time)))

	(declare (assoc
		;set to true to see full output
		verbose (false)
		;set the amount of data to use
		dataset_size 10000  ; 10000 = full dataset size
		;set to true to also run analyze
		do_analyze (false)
		;set to true to force deviations in analyze
		use_deviations (null)
		;set to true to use case weights in analyze
		use_case_weights (false)

	    data (load "performance_data/mnist_10k.csv")
	))

	(declare (assoc
		features (map (lambda (concat (current_value))) (first data))
		training_data (tail data)
		start (system_time)
	))

	(declare (assoc
		all_features_key (apply "concat" (weave (sort features) "."))
		context_features_key (apply "concat" (weave (sort (trunc features)) "."))
	))

	(call_entity "howso" "set_params" (assoc
		hyperparameter_map
			(assoc
				".targetless" (associate all_features_key (assoc "robust" (assoc ".none" (assoc "k" 8 "p" 2 "dt" -1))))
				"target" (associate context_features_key (assoc "full" (assoc ".none" (assoc "k" 13 "p" 2 "dt" -1))))
			)
	))

	(call_entity "howso" "set_feature_attributes" (assoc
		feature_attributes
			(append
				(assoc "target" (assoc "type" "nominal" "data_type" "number"))
				(map
					(lambda (assoc "type" "ordinal"))
					(zip (trunc features))
				)
			)
	))

	(print "loading mnist ...\n")
	(call_entity "howso" "train" (assoc
		features features
		cases (trunc training_data (* .9 dataset_size))
	))

	(print "loaded mnist:  " (get (call_entity "howso" "get_num_training_cases") (list 1 "payload" "count")) "\n")

	(declare (assoc load_time (- (system_time) start) ))
	(print "load time: " load_time "\n")

	(if do_analyze
		(seq
			(print "analyzing mnist ...\n")
			(call_entity "howso" "analyze" (assoc
				context_features (trunc features)
				action_features (list (last features))
				targeted_mode "single_targeted"
				use_case_weights use_case_weights
				use_deviations use_deviations
			))
			(declare (assoc analyze_time (- (system_time) start) ))
			(print
				(call_entity "howso" "get_params" (assoc action_feature "target"))
			)
			(print "Analyze time: " analyze_time "\n")

		)

		;else skip analyze, only compute and cache expected values
		(seq
			(assign (assoc start (system_time) ))
			(call_entity (list "howso" "mnist") "UpdateInactiveFeatures")
			(call_entity (list "howso" "mnist") "CacheExpectedValuesAndProbabilities" (assoc
				features features
				use_case_weights use_case_weights
			))
			(print "Caching values time: " (- (system_time) start) "\n")
		)
	)

	(declare (assoc params (get (call_entity "howso" "get_params" (assoc action_feature (last features))) (list 1 "payload")) ))
	(if verbose (print "analyzed to: " (get params "hyperparameter_map")))

	(assign (assoc
		k (get params (list "hyperparameter_map" "k"))
		p (get params (list "hyperparameter_map" "p"))
	))
	(print "MNIST 10k params (k p): " k " " p "\n- - - - -\n")

	(print "Reacting ...\n")
	(assign (assoc start (system_time) ))
	(declare (assoc num_correct 0))
	||(map
		(lambda (let
			(assoc
				result
					(call_entity "howso" "single_react" (assoc
						context_features (trunc features)
						action_features (list (last features))
						context_values (trunc (current_value 2))
						use_case_weights use_case_weights
					))
			)
			; (print (get result (list "payload" "action_values" 0)) " vs " (last (current_value)) "\n")
			(if (= (get result (list 1 "payload" "action_values" 0)) (last (current_value)))
				(accum (assoc num_correct 1))
			)
		))
		(tail data (* .1 dataset_size))
	)
	(print "React time: " (- (system_time) start) "\n")
	(declare (assoc correct (/ num_correct (* .1 dataset_size))))
	(print "Accuracy: " correct "\n")
	(destroy_entities "mnist")
	(print "Total time: " (- (system_time) test_start) "\n")
	(print "MNIST 10k\n- - - - - \n")
)
