(seq
	(load_entity
		"../howso.amlg"
		"howso"
		(null)
		(false)
		{escape_resource_name (false) escape_contained_resource_names (false)}
	)
	(set_entity_permissions "howso" (true))
	(call_entity "howso" "initialize" (assoc trainee_id "model" filepath "../"))

	(declare (assoc test_start (system_time)))

	(declare (assoc
		;set to true to see full output
		verbose (false)
		;set to null to do full model
		submodel_size (null) ;10000
		;set to true to use case weights in analyze
		use_case_weights (false)

		;set number of lags to use for value feature
		num_lags 12

	    data (load "performance_data/m1_monthly_dataset.csv")
	))

	(declare (assoc
		features (first data)
		training_data (tail data)
		start (system_time)
	))

	(call_entity "howso" "set_feature_attributes" (assoc
		feature_attributes
			(assoc
				"id" (assoc "type" "nominal" "id_feature" (true))
				"x"
					(assoc
						type "continuous"
						time_series
							{
								type "rate"
								num_lags num_lags
							}
					)
				"time"
					(assoc
						type "continuous"
						date_time_format "%Y-%m-%d"
						original_type {"data_type" "datetime"}
						time_series {"time_feature" (true) "type" "delta"}
						bounds (assoc "allow_null" (false))
					)
			)
	))

	(call_entity "howso" "train" (assoc
		features features
		cases (if submodel_size (trunc training_data submodel_size) training_data)
	))

	(declare (assoc
		load_time (- (system_time) start)
		num_cases (get (call_entity "howso" "get_num_training_cases") (list 1 "payload" "count"))
	))
	(print "Loaded M1 Monthly: " num_cases "\n")
	(print "Load time: " load_time "\n")


	(if verbose (print "analyzing Bank ...\n"))
	(assign (assoc start (system_time) ))
	(call_entity "howso" "analyze" (assoc convergence_threshold 0))

	(declare (assoc analyze_time (- (system_time) start) ))
	(print "Analyze time: " analyze_time "\n" )

	(assign (assoc start (system_time) ))
	(call_entity "howso" "react_aggregate" (assoc
		num_samples 3000
		details (assoc prediction_stats (true))
		forecast_window_length (* 60 60 24 30 30)
		use_case_weights use_case_weights
	))

	(declare (assoc residuals_time (- (system_time) start) ))
	(print "Series Accuracy time: " residuals_time "\n")

	(assign (assoc start (system_time) ))

	(call_entity "howso" "react_series" (assoc
		action_features features
		desired_conviction 5
		use_case_weights use_case_weights
		generate_new_cases "no"
		num_series_to_generate 2000
	))

	(declare (assoc generate_time (- (system_time) start) ))
	(if verbose (print "\ntime: " generate_time "\n"))
	(print "Generate time: " generate_time "\n")

	(destroy_entities "model")
	(print "Total time: " (- (system_time) test_start) "\n")
	(print "Time-Series\n- - - - - \n")
	(destroy_entities "howso")
)
