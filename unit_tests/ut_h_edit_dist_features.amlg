(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_edit_dist_features.amlg" retries 2))

	(call_entity "howso" "create_trainee" (assoc trainee "model" ))
	(assign_to_entities "howso" (assoc trainee "model"))
	(call_entity "howso" "set_internal_parameters" (assoc
		trainee "model"
		default_hyperparameter_map (assoc "k" 3 "p" 1 "dt" -1)
	))
	(call_entity "howso" "set_feature_attributes" (assoc
		features
			(assoc
				"x" (assoc "type" "continuous" )
				"string" (assoc "type" "continuous" "data_type" "string_mixable")
				"amalgam" (assoc "type" "continuous" "data_type" "amalgam")
				"json" (assoc "type" "continuous" "data_type" "json")
				"yaml" (assoc "type" "continuous" "data_type" "yaml")
			)
	))

	(declare
		(assoc
			result (null)
			features (list "x" "string"		"amalgam" 		 "json"			"yaml")
			data
				(list
					(list 1 "banana" 		"(assoc a 5)"		"{ \"A\": 1, \"B\": 3, \"C\": [1,2] }" 		"a: 5")
					(list 1 "mango" 		"(assoc b 6)" 		"{ \"A\": 2, \"B\": 3, \"C\": [1] }"		"b: 6")
					(list 2 "papaya" 		"(assoc c 1)" 		"{ \"A\": 1, \"C\": 3 }"					"c: 1")
					(list 2 "watermelon" 	"(assoc c 5)" 		"{ \"A\": 6, \"B\": 6, \"C\": [1,2,3] }"	"c: 5")
					(list 3 "dewmelon" 		"(assoc a 4 b 2)" 	"{ \"X\": 1, \"Y\": 3, \"C\": [1,2] }"		"a: 4\nb: 2")
					(list 3 "guava" 		"(assoc a 4 c 1)" 	"{ \"X\": 4, \"Y\": 8, \"C\": 3 }"			"a: 4\nc: 1")
					(list 4 "orange" 		"(assoc a 5 b 7)" 	"{ \"A\": 1, \"B\": 6, \"C\": [2,3,4] }"	"a: 5\nb: 7")
					(list 4 "mango" 		"(assoc a 5)" 		"{ \"A\": 1 }"								"a: 5")
					(list 5 "lychee" 		"(assoc b 5)" 		"{ \"X\": 1, \"B\": 3, \"C\": [1,2] }"		"b: 5")
					(list 5 "banana" 		"(assoc a 7)" 		"{ \"A\": 2, \"B\": 3}"						"a: 7")
				)
	))

	(call_entity "howso" "train" (assoc
		features features
		input_cases data
		session "session1"
	))

	(print "Distance types set correctly: ")
	(call assert_same (assoc
		obs (retrieve_from_entity (list "howso" "model") "queryDistanceTypeMap")
		exp
			(assoc
				amalgam "code"
				json "code"
				yaml "code"
				string "string"
				x "continuous"
			)
	))

	(print "Edit distance feature types set correctly: ")
	(call assert_same (assoc
		obs (retrieve_from_entity (list "howso" "model") "editDistanceFeatureTypesMap")
		exp (assoc amalgam "amalgam" json "json" string "string_mixable" yaml "yaml" )
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "get_cases" (assoc case_indices (list (list "session1" 7))))
				(list "payload" "cases" 0)
			)
	))

	(print "Cases stored, encoded and then output correctly: ")
	(call assert_same (assoc
		obs result
		exp (list 4 "mango" "(assoc a 5)" "{\"A\":1}" "a: 5\n")
	))

	(call exit_if_failures (assoc msg "Edit Distance feature encoding."))

	(assign (assoc
	 	result
	 		(get
	 			(call_entity "howso" "react" (assoc
	 				context_features (list "string")
					context_values (list "melon")
					action_features (list "x")
					details (assoc "influential_cases" (true))
	 			))
	 			"payload"
	 		)
	))
	(print "String uses edit distance: ")
	(call assert_same (assoc
		obs (get result "action_values")
		exp (list (/ (+ 1 3 4) 3))
	))
	(print "Same distance to mangos and dewmelon: ")
	(call assert_same (assoc
		obs (get result (list "influential_cases" 0 ".influence_weight"))
		exp (/ 1 3)
	))

	(assign (assoc
	 	result
	 		(get
	 			(call_entity "howso" "react" (assoc
	 				context_features (list "x")
					context_values (list 2.6)
					action_features (list "string")
					details (assoc "influential_cases" (true))
	 			))
	 			"payload"
	 		)
	))
	(print "Interpolated to word: " (get result (list "action_values" 0)) ": ")
	;result should be a mix of guava, dew/water melon and papapya
	(call assert_same (assoc
		obs
			(remove
				(zip (explode
					(get result (list "action_values" 0))
				))
				(values
					(explode (concat "guava" "dew" "water" "melon" "papaya"))
					(true)
				)
			)
		exp (assoc)
	))

	(call exit_if_failures (assoc msg "Continuous String edit distance."))

	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					context_features (list "x" "string")
					context_values (list 3.2 "guavas")
					action_features (list "amalgam")
					details (assoc "hypothetical_values" (assoc "x" 4))
				))
				"payload"
			)
	))

	(declare (assoc parsed_assoc (parse (get result (list "hypothetical_values" "amalgam"))) ))

	;hypothetical value should be an assoc with the key 'a' or 'b' and some numeric value
	(print "Hypothetical values mixed correctly: ")
	(call assert_true (assoc
		obs
			(or
				(= "number" (get_type_string (get parsed_assoc "a")) )
				(= "number" (get_type_string (get parsed_assoc "b")) )
				(= (assoc) parsed_assoc)
			)
	))

	(assign (assoc
	 	result
	 		(get
	 			(call_entity "howso" "react" (assoc
	 				context_features (list "x")
					context_values (list 3.2)
					action_features (list "amalgam")
					details (assoc "influential_cases" (true))
	 			))
	 			(list "payload" "action_values" 0)
	 		)
	))
	(print "Interpolated to code that should be an assoc with 'a': " result ": ")
	(call assert_true (assoc
		obs (contains_index (parse result) "a")
	))


	(assign (assoc
	 	result
	 		(get
	 			(call_entity "howso" "react" (assoc
	 				context_features (list "x")
					context_values (list 3.2)
					action_features (list "yaml")
					details (assoc "influential_cases" (true))
	 			))
	 			(list "payload" "action_values" 0)
	 		)
	))
	(print "Interpolated to yaml that should have the key 'a': " result ": ")
	(call assert_true (assoc
		obs (contains_index (format result "yaml" "code") "a")
	))


	(assign (assoc
	 	result
	 		(get
	 			(call_entity "howso" "react" (assoc
	 				context_features (list "x")
					context_values (list 3)
					action_features (list "json")
	 			))
	 			(list "payload" "action_values" 0)
	 		)
	))
	(print "Interpolated to json that should be a dict with 'X','Y' and 'C': " result ": ")
	(call assert_true (assoc
		obs
			(and
				(contains_index (format result "json" "code") "X")
				(contains_index (format result "json" "code") "Y")
				(contains_index (format result "json" "code") "C")
			)
	))

	(call exit_if_failures (assoc msg "Continuous amalgam, yaml and json edit distance."))

	(assign (assoc
	 	result
	 		(get
	 			(call_entity "howso" "react" (assoc
	 				context_features (list "amalgam")
					context_values (list "(assoc a 5)" )
					action_features (list "json")
					details (assoc "influential_cases" (true))
	 			))
	 			"payload"
	 		)
	))

	(declare (assoc
		action_value
			(format
				(get result (list "action_values" 0))
				"json"
				"code"
			)
	))

	(print "Amalgam similarity and interpolated json are correct: ")
	(call assert_true (assoc obs (contains_index action_value "A") ))

	(print "Amalgam as context Influential cases correct:")
	(call assert_same (assoc
		exp (list 0 7 9)
		obs
			(list
				(get result (list "influential_cases" 0 ".session_training_index"))
				(get result (list "influential_cases" 1 ".session_training_index"))
				(get result (list "influential_cases" 2 ".session_training_index"))
			)
		unordered (true)
	))

	(assign (assoc
	 	result
	 		(get
	 			(call_entity "howso" "react" (assoc
	 				context_features (list "yaml")
					context_values (list "a: 5" )
					action_features (list "json")
					details (assoc "influential_cases" (true))
	 			))
	 			"payload"
	 		)
	))

	(print "Yaml as context Influential cases correct:")
	(call assert_same (assoc
		exp (list 0 7 9)
		obs
			(list
				(get result (list "influential_cases" 0 ".session_training_index"))
				(get result (list "influential_cases" 1 ".session_training_index"))
				(get result (list "influential_cases" 2 ".session_training_index"))
			)
		unordered (true)
	))


	(call exit_if_failures (assoc msg "Code similarity."))


	(call_entity "howso" "analyze" (assoc
		features features
		k_values (list 3)
		p_values (list 2)
	))

	(assign (assoc result (call_entity "howso" "get_internal_parameters") ))


	(call_entity "howso" "react_into_trainee" (assoc
		residuals (true)
		features features
	))

	(assign (assoc
		result (call_entity "howso" "get_prediction_stats" (assoc "stats" (list "r2" "rmse" "mae") ))
	))

	(print "Residuals and stats computed: ")
	(call assert_approximate (assoc
		obs (get result "payload")
		exp
			(assoc
				amalgam (assoc mae 1.8 rmse 2)
				yaml (assoc mae 1.8 rmse 2)
				json (assoc mae 4.5 rmse 3.7)
				string (assoc mae 4 rmse 4)
				x (assoc mae 1.7 r2 -0.8 rmse 1.8)
			)
		percent 0.6
	))

	(call_entity "howso" "react_into_trainee" (assoc
		mda (true)
		contributions (true)
		context_features  (list "x" "string" "amalgam" "yaml")
		action_feature "json"
	))
	(assign (assoc
		result (call_entity "howso" "get_prediction_stats" (assoc "stats" (list "mda") "action_feature" "json" ))
	))
	(print "MDA for json feature: ")
	(call assert_approximate (assoc
		obs (get result "payload")
		exp
			(assoc
				amalgam (assoc mda 0.1)
				yaml (assoc mda 0.1)
				string (assoc mda 0.2)
				x (assoc mda -0.2)
			)
		thresh 0.4
	))

	(assign (assoc
		result (call_entity "howso" "get_feature_contributions" (assoc "action_feature" "json" ))
	))
	(print "Contributions for json feature: ")
	(call assert_approximate (assoc
		obs (get result "payload")
		exp
			(assoc
				amalgam 3
				yaml 3
				string 3.5
				x 3
			)
		percent 0.6
	))

	(call exit_if_failures (assoc msg "MDA and contributions for json feature." ))

	(call_entity "howso" "react_into_trainee" (assoc
		mda (true)
		contributions (true)
		context_features (list "x" "amalgam" "json" "yaml")
		action_feature "string"
	))
	(assign (assoc
		result (call_entity "howso" "get_prediction_stats" (assoc "stats" (list "mda") "action_feature" "string" ))
	))
	(print "MDA for string feature: ")
	(call assert_approximate (assoc
		obs (get result "payload")
		exp
			(assoc
				amalgam (assoc mda 0.1)
				yaml (assoc mda 0.1)
				json (assoc mda 0.2)
				x (assoc mda -0.3)
			)
		thresh 0.6
	))

	(assign (assoc
		result (call_entity "howso" "get_feature_contributions" (assoc "action_feature" "string" ))
	))
	(print "Contributions for string feature: ")
	(call assert_approximate (assoc
		obs (get result "payload")
		exp
			(assoc
				amalgam 1
				yaml 1
				json 1
				x 1
			)
		percent 0.5
	))

	(call exit_if_failures (assoc msg "MDA and contributions for string feature." ))


	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					action_features features
					desired_conviction 2
					use_regional_model_residuals (false)
				))
				"payload"
			)
	))

	(assign (assoc result (zip (get result "action_features") (get result "action_values")) ))
	(print result)
	(print "Synthesis works: ")
	(call assert_true (assoc
		obs
			(and
				(> (total_size (parse (get result "amalgam"))) 0)
				(> (total_size (format (get result "json") "json" "code")) 0)
				(> (total_size (format (get result "yaml") "yaml" "code")) 0)
				(= "string" (get_type_string (get result "string")))
			)
	))


	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					action_features features
					desired_conviction 2
					use_regional_model_residuals (true)
				))
				"payload"
			)
	))

	(assign (assoc result (zip (get result "action_features") (get result "action_values")) ))
	(print result)
	(print "RMR Synthesis works: ")
	(call assert_true (assoc
		obs
			(and
				(> (total_size (parse (get result "amalgam"))) 0)
				(> (total_size (format (get result "json") "json" "code")) 0)
				(> (total_size (format (get result "yaml") "yaml" "code")) 0)
				(= "string" (get_type_string (get result "string")))
			)
	))


	(call exit_if_failures (assoc msg unit_test_name ))
)
