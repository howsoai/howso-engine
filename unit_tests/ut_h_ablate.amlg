(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_ablate.amlg"))

	(declare (assoc
		input_cases
			(list
				(list 0 0)
				(list 0 1)
                (list 1 0)
                (list 1 1)

                (list 10 10)
                (list 10 12)
                (list 11 10)
                (list 13 13)
			)
		features (list "A" "B")
	))

    (call_entity "howso" "set_auto_ablation_params" (assoc
        auto_ablation_enabled (true)
		minimum_model_size 8
    ))

	(call_entity "howso" "set_auto_analyze_params" (assoc
		auto_analyze_enabled (true)
		analyze_threshold 3
		analyze_growth_factor 2
	))

	(declare (assoc
		regular_train_payload
			(call_entity "howso" "train" (assoc
				features features
				input_cases input_cases
				session "unit_test"
			))
	))

	(print "first train call doesn't ablate: ")
	(call assert_same (assoc
		obs (get regular_train_payload (list 1 "payload" "ablated_indices"))
		exp (list)
	))

	(call exit_if_failures (assoc msg "Non-ablation train call") )

    (call_entity "howso" "analyze" (assoc
        context_features context_features
        k_values (list 3)
        p_values (list 1)
		targeted_model "targetless"

		;disable deviations as the small dataset leads to large deviations washing out
		;differences in distances. Disabling deviations makes the toy dataset evaluate
		;the ablation logic correctly.
		use_deviations (false)
    ))

	(declare (assoc
		ablate_train_payload
			(call_entity "howso" "train" (assoc
				features features
				input_cases
					(list
						(list 0.5 0.5)
						(list 11 11)
					)
				session "unit_test"
			))
	))

	(print "second train call ablates: ")
	(call assert_same (assoc
		obs (get ablate_train_payload (list 1 "payload" "ablated_indices"))
		exp (list 0)
	))

	(call exit_if_failures (assoc msg "Ablation train call") )

	(declare (assoc
		model_size
			(get
				(call_entity "howso" "get_num_training_cases")
				(list 1 "payload" "count")
			)
	))
	(print "model size after training and ablating is less than total train data: ")
    (call assert_same (assoc
		obs model_size
		exp 9
	))

	(call exit_if_failures (assoc msg "Model size is less than training data size") )

	(assign (assoc
		ablate_train_payload
			(call_entity "howso" "train" (assoc
				features features
				input_cases
					(list
						(list 0 0)
						(list 1 0)
					)
				session "unit_test"
			))
	))

	(print "third train call ablates all duplicates:")
	(call assert_same (assoc
		obs (get ablate_train_payload (list 1 "payload" "ablated_indices"))
		exp (list 0 1)
	))

	(call exit_if_failures (assoc msg "Duplicate cases ablation train call") )

	(declare (assoc
		point_five_cases
			(call_entity "howso" "get_cases" (assoc
				features (list "A" "B")
				condition (assoc A 0.5 B 0.5)
				precision "exact"
			))
	))

	(print "high entropy case is not in model: ")
	(call assert_same (assoc
		obs (get point_five_cases (list 1 "payload" "cases"))
		exp (list)
	))

	(declare (assoc
		eleven_cases
			(call_entity "howso" "get_cases" (assoc
				features (list "A" "B")
				condition (assoc A 11 B 11)
				precision "exact"
			))
	))

	(call exit_if_failures (assoc msg "High entropy case was ablated") )

	(print "low entropy case is in model: ")
	(call assert_same (assoc
		obs (get eleven_cases (list 1 "payload" "cases"))
		exp (list (list 11 11))
	))

	(print "High entropy case is not in model: ")
	(call assert_same (assoc
		obs (get point_five_cases (list 1 "payload" "cases"))
		exp (list)
	))

	(call exit_if_failures (assoc msg "Low entropy case was not ablated") )

	(call_entity "howso" "set_auto_ablation_params" (assoc
        auto_ablation_enabled (true)
		auto_ablation_weight_feature "test_weight"
		minimum_model_size 8
    ))

	(call_entity "howso" "analyze" (assoc
        context_features context_features
        k_values (list 3)
        p_values (list 1)
		targeted_model "targetless"
    ))

	(call_entity "howso" "train" (assoc
		features features
		input_cases (list
			(list 0.5 0.5)
			(list 11 11)
		)
		session "unit_test"
	))

	(declare (assoc
		alternate_weight_feature_payload
			(call_entity "howso" "get_cases" (assoc
				features (list "test_weight")
			))
	))


	(print "Alternative case weight feature is populated: ")
	(call assert_true (assoc
		obs
			(< 1 (size
					(filter
						(lambda (!= 1 (first (current_value))) )
						(get alternate_weight_feature_payload (list 1 "payload" "cases"))
					)
			))
	))

	(call assert_same (assoc
		obs
			(get (call_entity "howso" "get_auto_ablation_params") (list 1 "payload"))
		exp
			(assoc
				auto_ablation_enabled (true)
				auto_ablation_weight_feature "test_weight"
				minimum_model_size 8
				influence_weight_entropy_threshold 0.6
				exact_prediction_features (null)
				tolerance_prediction_threshold_map (null)
				relative_prediction_threshold_map (null)
				residual_prediction_features (null)
				conviction_upper_threshold (null)
				conviction_lower_threshold (null)
			)
	))

	(call exit_if_failures (assoc msg "Alternative case weight feature was not populated"))
	(call exit_if_failures (assoc msg unit_test_name) )
)