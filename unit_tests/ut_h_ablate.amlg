(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_ablate.amlg" retries 1))

	(call_entity "howso" "create_trainee" (assoc trainee "ablate"))
	(assign_to_entities "howso" (assoc trainee "ablate"))

	(declare (assoc
		input_cases
			(list
				(list 0 0)
				(list 0 1)
                (list 1 0)
                (list 1 1)

                (list 10 10)
                (list 10 12)
                (list 11 10)
                (list 13 13)
			)
		features (list "A" "B")
	))

    (call_entity "howso" "set_auto_ablate_params" (assoc
		trainee "ablate"
        auto_ablate_enabled (true)
    ))

	(declare (assoc
		regular_train_payload
			(call_entity "howso" "train" (assoc
				features features
				input_cases input_cases
				session "unit_test"
			))
	))

	(print "first train call doesn't ablate: ")
	(call assert_same (assoc
		obs (get regular_train_payload (list "payload" "ablated_indices"))
		exp (list)
	))

    (call_entity "howso" "analyze" (assoc
        context_features context_features
        k_values (list 3)
        p_values (list 1)
        use_case_weights (true)
        ; use_deviations (true)
		targeted_model "targetless"
    ))

	(declare (assoc
		ablate_train_payload
			(call_entity "howso" "train" (assoc
				features features
				input_cases (list
					(list 0.5 0.5)
					(list 11 11)
				)
				session "unit_test"
			))
	))

	(print "second train call ablates: ")
	(call assert_same (assoc
		obs (get ablate_train_payload (list "payload" "ablated_indices"))
		exp (list 0)
	))

	(declare (assoc
		model_size 
			(get 
				(call_entity "howso" "get_num_training_cases")
				(list "payload" "count")
			)
	))
	(print "model size after training and ablating is less than total train data: ")
    (call assert_same (assoc
		obs model_size
		exp 9
	))

	(declare (assoc
		point_five_cases
			(call_entity "howso" "get_cases" (assoc
				features (list "A" "B")
				condition (assoc A 0.5 B 0.5)
				precision "exact"
			))
	))

	(print "high entropy case is not in model: ")
	(call assert_same (assoc
		obs (get point_five_cases (list "payload" "cases"))
		exp (list)
	))

	(declare (assoc
		eleven_cases
			(call_entity "howso" "get_cases" (assoc
				features (list "A" "B")
				condition (assoc A 11 B 11)
				precision "exact"
			))
	))

	(print "low entropy case is in model: ")
	(call assert_same (assoc
		obs (get eleven_cases (list "payload" "cases"))
		exp (list (list 11 11))
	))

)