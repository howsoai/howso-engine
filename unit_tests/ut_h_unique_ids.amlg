(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_unique_ids.amlg"))

	(declare (assoc
		data
			(list
				(list 1  "a" 10 1)
				(list 2	 "b" 10 2)
				(list 3	 "c" 10 3)
				(list 4	 "d" 10 4)
				(list 5	 "e" 10 5)
				(list 6	 "f" 20 6)
				(list 7	 "g" 20 7)
				(list 8	 "h" 20 8)
				(list 9	 "i" 20 9)
				(list 10 "j" 20 10)
				(list 11 "k" 30 11)
				(list 12 "l" 30 12)
				(list 13 "m" 30 13)
				(list 14 "n" 30 14)
				(list 15 "o" 30 15)
				(list 16 "p" 40 16)
				(list 17 "q" 40 17)
				(list 18 "r" 40 18)
				(list 19 "s" 40 19)
				(list 20 "t" 40 20)
				(list 21 "u" 50 21)
				(list 22 "v" 50 22)
				(list 23 "w" 50 23)
				(list 24 "x" 50 24)
				(list 25 "y" 50 25)
			 )
	))
	(declare (assoc
		features (list "n_id" "s_id" "value" "count" )
		result (null)
	))

	(call_entity "howso" "set_internal_parameters" (assoc
		hyperparameter_map (assoc ".targetless" (assoc "robust" (assoc ".none" (assoc "k" 3 "p" 2 "dt" -1))))
	))

	(call_entity "howso" "set_feature_attributes" (assoc
		features
			(assoc
				"n_id"  (assoc "type" "nominal" "data_type" "number" "unique" (true))
				"s_id" (assoc "type" "nominal" "unique" (true))
				"value" (assoc "type" "continuous")
				"count" (assoc "type" "continuous")
			)
	))

	(call_entity "howso" "train" (assoc
		input_cases data
		features features
		session "session"
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					context_features (list "s_id" "value")
					context_values (list "k" 32)
					action_features (list "n_id")
				))
				(list 1 "payload" "action_values")
			)
	))
	(print "Discriminative react doesn't modify unique nominal:  ")
	(call assert_same (assoc obs (first result) exp 11))


	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					context_features (list "s_id" "value")
					context_values (list (list "k" 32))
					action_features (list "n_id")
					desired_conviction 1
				))
				(list 1 "payload" "action_values")
			)
	))

	(print "\nGenerate unique id works: ")
	(call assert_true (assoc obs (> (first result) 1000000000000000)))


	(assign (assoc
		result
			(get
				(call_entity "howso" "batch_react" (assoc
					context_features (list "value" "count")
					context_values (list (list 32 13))
					action_features (list "n_id" "s_id")
					desired_conviction 1
				))
				(list 1 "payload" "action_values" 0)
			)
	))

	(print "\nGenerate multiple unique id works:\n")
	(print "n_id: ")
	(call assert_true (assoc obs (> (first result) 1000000000000000)))
	(print "s_id: ")
	(call assert_true (assoc obs (> (last result) 1000000000000000)))
	(print "n_id != s_id : ")
	(call assert_true (assoc obs (!= (last result) (first result) )))


	(assign (assoc
		result
			(get
				(call_entity "howso" "batch_react" (assoc
					context_features (list "n_id" "value" "count")
					context_values (list (list 8 32 13))
					action_features (list "n_id" "s_id")
					desired_conviction 1
				))
				(list 1 "payload" "action_values" 0)
			)
	))
	(print "\nConditioning on unique keeps original value:\n")
	(print "n_id: ")
	(call assert_same (assoc obs (first result) exp 8))
	(print "s_id: ")
	(call assert_true (assoc obs (> (last result) 1000000000000000)))


	(assign (assoc
		result
			(call_entity "howso" "batch_react" (assoc
				context_features (list "n_id" "value" "count")
				context_values (list (list 8 32 13))
				action_features (list "n_id" "s_id")
				num_cases_to_generate 10
				desired_conviction 1
			))
	))
	(call keep_result_payload)
	(print "\nGenerates 10 uniques: \n")
	(print "n_id: ")
	(call assert_same (assoc obs (get result (list "action_values" 0  0)) exp 8))

	(declare (assoc
		unique_generated_ids
			(map
				(lambda (last (current_value)) )
				(get result "action_values")
			)
	))

	(print "s_ids: ")
	(call assert_same (assoc obs (size (zip unique_generated_ids)) exp 10))
	(print unique_generated_ids )
	(call assert_true (assoc obs (> (last unique_generated_ids) 1000000000000000)))


	(call exit_if_failures (assoc msg "Generated unique ids."))

	(assign (assoc
		result (call_entity "howso" "react_aggregate" (assoc details (assoc "prediction_stats" (true))))
	))
	(call keep_result_payload)
	(print "Prediction stats for unique features are null: ")
	(call assert_same (assoc
		exp
			(assoc
				n_id (assoc
						accuracy (null)
						mae (null)
						mcc (null)
						precision (null)
						recall (null)
					)
				s_id (assoc
						accuracy (null)
						mae (null)
						mcc (null)
						precision (null)
						recall (null)
					)
			)
		obs (keep result (list "n_id" "s_id"))
	))

	(call_entity "howso" "analyze" (assoc
		use_deviations (true)
		p_values (list 1)
	))

	(assign (assoc
		result (call_entity "howso" "get_internal_parameters")
	))
	(call keep_result_payload)
	(print "Weights for unique features are not 1: ")
	(call assert_same (assoc
		obs
			(keep
				(get result (list "hyperparameter_map" ".targetless" "count.n_id.s_id.value." "robust" ".none" "featureWeights"))
				(list "n_id" "s_id")
			)
		; 1 / 0.0392 = 25.5
		exp (assoc n_id 25.5 s_id 25.5)
	))
	(print "Deviations for unique features are non-0, fixed to a small value: ")
	(call assert_approximate (assoc
		obs
			(keep
				(get result (list "hyperparameter_map" ".targetless" "count.n_id.s_id.value." "robust" ".none" "featureDeviations"))
				(list "n_id" "s_id")
			)
		exp (assoc n_id 0.0392 s_id 0.0392)
	))
;
	(call exit_if_failures (assoc msg unit_test_name ))
)