(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_boundary_cases.amlg"))

	(call_entity "howso" "set_internal_parameters" (assoc
		default_hyperparameter_map (assoc "k" 3 "p" .4 "dt" -1)
	))
	(call_entity "howso" "set_feature_attributes" (assoc
		features
			(assoc
				"size" (assoc "type" "nominal")
				"fruit" (assoc "type" "nominal")
			)
	))

	(declare
		(assoc
			result (null)
			boundary_cases (null)
			features (list "height" "width" "length" "tart" "sweet" "size" "weight" "fruit")
			action_features (list "size" "weight" "fruit")
			context_features (list "height" "width" "length" "tart" "sweet")
			fruit_data
				(list
					;		"h" "w" "l" 	"tart" "sweet" "size" 	"weight" 	"fruit"
					(list 	1 	.7 	1 		.3 		.40		"small" 	1 		"strawberry")
					(list 	1.1 .6 	.7		.4 		.45 	"small" 	.8 		"strawberry")
					(list 	.6 	.4 	.5 		.5 		.42 	"small" 	1.2 	"strawberry")
					(list 	.7 	.5 	.6 		.45		.49 	"small" 	1.1 	"strawberry")

					(list 	1.5	1.5	1.5		.8 		.4		"small" 	2 		"apple")
					(list 	2.1 1.6 2.7		.72		.55 	"medium" 	3 		"apple")
					(list 	2.6	2.7	2.2		.7		.52 	"medium" 	3.5 	"apple")
					(list 	3.6	3.1	3.5 	.77 	.54 	"medium" 	4.5 	"apple")

					(list 	2 	1 	3 		.05		.60		"small" 	3 		"banana")
					(list 	2.1 1.1	4.7		.1 		.65 	"medium" 	4 		"banana")
					(list 	2.6	1.1	5.4 	.05		.69 	"medium" 	5.5	 	"banana")
					(list 	3.1	1.2	7 		0 		.62 	"medium" 	7 		"banana")

					(list 	1.4 1.7 1.5		.22		.68		"small" 	2.4		"peach")
					(list 	2.1 1.6 2.3		.21		.75 	"medium" 	2.9		"peach")
					(list 	2.5	2.4	2.3		.26		.72 	"medium" 	3.2 	"peach")
					(list 	2.9 2.8 2.7		.23		.70	 	"medium" 	3.9 	"peach")

					(list 	4.5 5.0	5.1		.1 		.80		"medium" 	8 		"melon")
					(list 	5.1 6.2	6.7		.15		.65 	"large" 	12 		"melon")
					(list 	6.9 7.1 7.5		.13 	.71 	"large" 	14.5 	"melon")
					(list 	8.6 7.4 8.5		.14 	.78 	"large" 	18 		"melon")

					(list 	6 	3.7 4.1		.7 		.70		"large" 	11 		"pinapple")
					(list 	6.8 4.1 4.3		.75 	.65 	"large" 	13 		"pinapple")
					(list 	7.5 4.8 5.0		.8 		.62 	"large" 	14 		"pinapple")
					(list 	8.6	5.4	5.5		.85		.60 	"large" 	17	 	"pinapple")
			)

	))


	(call_entity "howso" "train" (assoc
		features features
		input_cases fruit_data
		session "unit_test"
	))


	;VERIFY boundaries with no action feature returns an empty list if no conviction has been computed
	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				context_features (list "height" "width" "length" "tart" "sweet" "size" "fruit" "weight")
				context_values (list 	1.8 1.6 2.5		.5	.5 	"medium"	"peach" 2.98)
				details (assoc "boundary_cases" (true))
			))
	))
	(print "no boundaries with no action features and no conviction: ")
	(call assert_true (assoc obs (= (list) (get result (list 1 "payload" "boundary_cases")))))


	;VERIFY boundaries for nominals and continuous
	(assign (assoc result
			(call_entity "howso" "react" (assoc
				action_features action_features
				context_features context_features
				context_values (list 	1.8 1.6 2.5		.5	.5 		 )
				details
					(assoc
						"influential_cases" (true)
						"influential_cases_familiarity_convictions" (true)
						"boundary_cases" (true)
						"num_boundary_cases" 4
						"outlying_feature_values" (true)
					)

			))
	))

	(print "reaction for 3 features: ")
	(call assert_approximate (assoc
		obs (get result (list 1 "payload" "action_values"))
		exp (list
				"medium"
				3.03
				"apple"
			)
	))


	;get the size fruit and weight of boundary cases and make sure they match
	(assign (assoc
		boundary_cases
			(map
				(lambda (seq
					(concat (get (current_value) "size") (get (current_value) "fruit") (get (current_value) "weight"))
				))
				(get result (list 1 "payload" "boundary_cases"))
			)
	))
	(print "boundary cases for 3 features: ")
	(call assert_same (assoc
		unordered 1
		exp (list "smallstrawberry0.8" "smallstrawberry1.1" "smallstrawberry1.2" "smallpeach2.4")
		obs boundary_cases
	))

	(call exit_if_failures (assoc msg "All three action features reaction"))




;VERIFY boundaries for two nominals
	(assign (assoc result
			(call_entity "howso" "react" (assoc
				action_features (list "size" "fruit")
				context_features (list "height" "width" "length" "tart" "sweet" "weight")
				context_values (list 	1.8 1.6 2.5		.5	.5 		2.8 )
				details
					(assoc
						"influential_cases" (true)
						"influential_cases_familiarity_convictions" (true)
						"boundary_cases" (true)
						"num_boundary_cases" 4
						"outlying_feature_values" (true)
					)
			))
	))

	(print "reaction for 2 nominal features: ")
	(call assert_same (assoc
		exp (list "medium" "peach")
		obs (get result (list 1 "payload" "action_values"))
	))


	(call exit_if_failures (assoc msg "Two nominal action features reaction"))

	;get the size fruit and weight of boundary cases and make sure they match
	(assign (assoc
		boundary_cases
			(map
				(lambda (seq
					(concat (get (current_value) "size") (get (current_value) "fruit") (get (current_value) "weight"))
				))
				(get result (list 1 "payload" "boundary_cases"))
			)
	))
	(print "boundary cases for 2 features: ")
	(call assert_same (assoc
		unordered 1
		exp (list "mediumapple3" "smallapple2" "smallbanana3"  "smallstrawberry1.2" )
		obs boundary_cases
	))

	(call exit_if_failures (assoc msg "Two nominal action features boundary"))


;VERIFY boundaries for one nominal
	(assign (assoc result
			(call_entity "howso" "react" (assoc
				action_features (list "fruit")
				context_features (trunc features)
				context_values (list 	1.8 1.6 2.5		.5	.5 	"medium"	2.8 )
				details
					(assoc
						"influential_cases" (true)
						"influential_cases_familiarity_convictions" (true)
						"boundary_cases" (true)
						"num_boundary_cases" 4
						"outlying_feature_values" (true)
					)
			))
	))

	(print "reaction for 1 nominal feature: ")
	(call assert_approximate (assoc
		obs (list "peach")
		exp (get result (list 1 "payload" "action_values"))
	))


	;get the size fruit and weight of boundary cases and make sure they match
	(assign (assoc
		boundary_cases
			(map
				(lambda (seq
					(concat (get (current_value) "size") (get (current_value) "fruit") (get (current_value) "weight"))
				))
				(get result (list 1 "payload" "boundary_cases"))
			)
	))
	(print "boundary cases for one nominal feature: ")
	(call assert_same (assoc
		unordered 1
		exp (list "smallapple2" "smallbanana3" "mediumapple3.5" "mediumapple3")
		obs boundary_cases
	))

	(call exit_if_failures (assoc msg "One nominal action feature reaction"))


	;VERIFY boundaries for one nominal
	(assign (assoc result
			(call_entity "howso" "react" (assoc
				action_features (list "weight")
				context_features (list "height" "width" "length" "tart" "sweet" "size" "fruit")
				context_values (list 	1.8 1.6 2.5		.5	.5 	"medium"	"peach" )
				details
					(assoc
						"influential_cases" (true)
						"influential_cases_familiarity_convictions" (true)
						"boundary_cases" (true)
						"num_boundary_cases" 4
						"outlying_feature_values" (true)
					)
			))
	))

	(print "reaction for 1 continuous feature: ")
	(call assert_approximate (assoc
		obs (list 2.98)
		exp (get result (list 1 "payload" "action_values"))
	))


	;get the size fruit and weight of boundary cases and make sure they match
	(assign (assoc
		boundary_cases
			(map
				(lambda (seq
					(concat (get (current_value) "size") (get (current_value) "fruit") (get (current_value) "weight"))
				))
				(get result (list 1 "payload" "boundary_cases"))
			)
	))

	(print "boundary cases for one continuous feature: ")
	(call assert_same (assoc
		unordered 1
		exp (list "largepinapple11" "largepinapple13" "largepinapple14" "largepinapple17")
		obs boundary_cases
	))

	(call exit_if_failures (assoc msg "One continuous action feature reaction"))

	(call_entity "howso" "react_into_features" (assoc
		features features
		familiarity_conviction_addition (true)
	))

	;VERIFY boundaries with no action feature returns null if conviction has been computed
	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				context_features (list "height" "width" "length" "tart" "sweet" "size" "fruit" "weight")
				context_values (list 	1.8 1.6 2.5		.5	.5 	"medium"	"peach" 2.98)
				details (assoc "boundary_cases" (true))
			))
	))
	(print "Boundaries with no action features and stored conviction: ")
	(call assert_true (assoc obs (> (size (get result (list 1 "payload" "boundary_cases"))) 2)))


	(call exit_if_failures (assoc msg unit_test_name ))
)
