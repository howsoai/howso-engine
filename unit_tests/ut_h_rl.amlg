(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_rl.amlg"))

	(call_entity "howso" "create_trainee" (assoc trainee "model" ))
	(assign_to_entities "howso" (assoc trainee "model"))
	(call_entity "howso" "set_internal_parameters" (assoc
		trainee "model"
		default_hyperparameter_map (assoc "k" 2 "p" 2 "dt" -1)
	))
	(call_entity "howso" "set_feature_attributes" (assoc
		features
			(assoc
				"fruit" (assoc "type" "nominal")
				"size" (assoc "type" "nominal")
			)
	))

	(declare
		(assoc
			result (null)
			features (list "reward" "height" "width" "size" "fruit")
			action_features (list "height" "width" "size" "fruit")
			data
				(list

					(list 0	1 	.7 	"small" "strawberry")
					(list 0	1.1 .6 	"small" "strawberry")
					(list 0	.6 	.4 	"small" "strawberry")
					(list 0	.7 	.5 	"small" "strawberry")
					(list 0	1.8 1.9 "small" "peach")
					(list 0	1.5	1.5	"small" "apple")
					(list 0	2.1 1.6 "medium" "apple")
					(list 0	2.6	2.7	"medium" "apple")
					(list 0	6 	3.7 "large" "pinapple")
					(list 0	6.8 4.1 "large" "pinapple")
			)

	))


	(call_entity "howso" "train" (assoc
		features features
		input_cases data
		session "session1"
	))
	(set_entity_rand_seed (list "howso" " model") (rand))

	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					desired_conviction  1
					action_features action_features
					into_series_store "game1"
				))
				"payload"
			)
	))
	(print "series reacts output a pair of index and reaction: ")
	(call assert_true (assoc
		obs
			(and
				;store is of size 1
				(= 1 (size (get (retrieve_from_entity (list "howso" "model") "seriesStore") "game1")))
				;generated case has 4 values
				(= 4 (size (get result "action_values")))
			)
	))


	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					desired_conviction  1
					action_features action_features
					into_series_store "game1"
				))
				"payload"
			)
	))
	(print "series reacts increases index accordingly: ")
	(call assert_true (assoc
		obs
			(and
				;store is of size 2
				(= 2 (size (get (retrieve_from_entity (list "howso" "model") "seriesStore") "game1")))
				;generated case has 4 values
				(= 4 (size (get result "action_values")))
			)
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					desired_conviction  1
					action_features action_features
					into_series_store "game2"
				))
				"payload"
			)
	))
	(print "training new series resets index for that series: ")
	(call assert_true (assoc
		obs
			(and
				;store is of size 1
				(= 1 (size (get (retrieve_from_entity (list "howso" "model") "seriesStore") "game2")))
				;generated case has 4 values
				(= 4 (size (get result "action_values")))
			)
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					desired_conviction  1
					action_features action_features
					into_series_store "game1"
				))
				"payload"
			)
	))
	(print "training another increases correct series index: ")
	(call assert_true (assoc
		obs
			(and
				;store is of size 3
				(= 3 (size (get (retrieve_from_entity (list "howso" "model") "seriesStore") "game1")))
				;generated case has 4 values
				(= 4 (size (get result "action_values")))
			)
	))

	(call_entity "howso" "react" (assoc
		desired_conviction  1
		action_features action_features
		into_series_store "game3"
	))

	;train two entire cases into series directly
	(call_entity "howso" "append_to_series_store" (assoc
		context_features action_features
		context_values
			(list
				(list 4.4 4.0 "large" "apple")
				(list 4.8 4.1 "large" "apple")
			)
		series "game3"
	))

	;after training on the first session-game there should now be 13 cases
	(call_entity "howso" "train" (assoc
		features (list "reward")
		input_cases (list (list 10))
		session "session1"
		series "game1"
	))

	(assign (assoc
		result (get (call_entity "howso" "get_cases" (assoc session "session1" features features)) "payload")
	))

	(print "trained 3 cases for a total of 13: ")
	(call assert_same (assoc exp 13 obs (get (call_entity "howso" "get_num_training_cases") (list "payload" "count"))))

	(print "the 3 cases trained with a reward of 10: ")
	(call assert_true (assoc
		obs
			;the first value, the reward, of the 11th and 12th case should al be 10
			(apply "=" (list 10 (get result (list "cases" 10 0)) (get result (list "cases" 11 0)) (get result (list "cases" 12 0)) ))
	))


	(assign (assoc
		result
			(retrieve_from_entity (list "howso" "model") "seriesStore")
	))
	(print "series removed after training: ")
	(call assert_false (assoc obs (contains_index result "game1")))


	(assign (assoc
		result
			(call_entity "howso" "train" (assoc
				features (list "reward")
				input_cases (list (list 20) (list 30) (list 40) (list 50))
				session "session2"
				series "game3"
			))
	))
	(print "Failed to train on mismatching input vs series cases: ")
	(call assert_same (assoc
		obs (get result "payload")
		exp
			(assoc
				"num_trained" 0
				"ablated_indices" (list)
				"status" (null)
			)
	))
	(call assert_same (assoc
		obs (get result (list "errors" 0 "detail"))
		exp "input_cases do not match length of specified series"
	))

	(assign (assoc
		result
			(call_entity "howso" "train" (assoc
				features (list "reward")
				input_cases (list (list 20) (list 30) (list 40))
				session "session2"
				series "game3"
			))
	))
	(print "Successfully trained 3 cases from series: ")
	(call assert_same (assoc
		obs (get result "payload")
		exp
			(assoc
				"num_trained" 3
				"ablated_indices" (list)
				"status" (null)
			)
	))

	(call exit_if_failures (assoc msg "Training from series" ))

	(assign (assoc
		result (get (call_entity "howso" "get_cases" (assoc session "session2" features features)) "payload")
	))
	(print "each trained case has its individual reward: ")
	(call assert_true (assoc
		obs
			(and
				;the first value from the the 1st, 2nd and 3rd case, should match the rewards that were trained
				(= 20 (get result (list "cases" 0 0)))
				(= 30 (get result (list "cases" 1 0)))
				(= 40 (get result (list "cases" 2 0)))
			)
	))


	(call_entity "howso" "remove_series_store" (assoc "series" "game1"))
	(assign (assoc
		result
			(retrieve_from_entity (list "howso" "model") "seriesStore")
	))
	(print "calling remove series store to remove an entire session: ")
	(call assert_false (assoc obs (contains_index result "game1")))

	(call exit_if_failures (assoc msg "Removal of session series store" ))


	;set threshold to a low value
	(call_entity "howso" "set_auto_analyze_params" (assoc
		auto_analyze_enabled (true)
		analyze_threshold 3
		analyze_growth_factor 2
	))

	(assign (assoc
		result (retrieve_from_entity (list "howso" "model") "autoAnalyzeThreshold")
	))

	;model should be 15
	(print "Current model size: " (get (call_entity "howso" "get_num_training_cases" ) (list "payload" "count")) "\n")
	(print "Analyze threshold should be set to 3*2*2 = 12: ")
	(call assert_same (assoc obs result exp 12))


	(call_entity "howso" "react" (assoc
		desired_conviction  1
		action_features action_features
		into_series_store "game3"
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "train" (assoc
					features (list "reward")
					input_cases (list (list 25))
					session "session2"
					series "game3"
				))
				"payload"
			)
	))

	(print "Training should trigger an analyze and return 'analyzed' as a status: ")
	(call assert_same (assoc
		obs result
		exp
			(assoc
				"ablated_indices" (list)
				"num_trained" 1
				"status" "analyzed"
			)
	))

	(call_entity "howso" "set_auto_ablation_params" (assoc
		auto_ablation_enabled (true)
		minimum_model_size 10
		exact_prediction_features (list "fruit")
	))

	(assign (assoc
		result
			(call_entity "howso" "train" (assoc
				features (list "reward" "height" "width" "size" "fruit")
				input_cases (list
					(list 0 2.5 2.7 "medium" "strawberry")
					(list 0 1.1 .7 "small" "strawberry")
					(list 0 1.1 .8 "small" "strawberry")
				)
			))
	))

	(print "Trained the first and ablated the last two cases: ")
	(call assert_same (assoc
		obs (get result "payload")
		exp
			(assoc
				"ablated_indices" (list 1 2)
				"num_trained" 1
				"status" (null)
			)
	))


	;disable auto analyze
	(call_entity "howso" "set_auto_analyze_params" (assoc auto_analyze_enabled (false) ))
	(call_entity "howso" "set_auto_ablation_params" (assoc auto_ablation_enabled (false) ))

	(assign (assoc
		result
			(call_entity "howso" "train" (assoc
				features (list "reward" "height" "width" "size" "fruit")
				input_cases (list
					(list 0 2.6 2.7 "medium" "strawberry")
					(list 0 1.2 .7 "small" "strawberry")
					(list 0 1.2 .8 "small" "strawberry")
				)
				))
	))

	(print "Verify that auto-analyze is disabled: ")
	(call assert_same (assoc
		obs (get result "status")
		exp "ok" ;not 'analyze'
	))
	(print " ")
	(call assert_same (assoc
		obs (get result (list "payload" "num_trained"))
		exp 3
	))


	;enable auto analyze with default params
	(call_entity "howso" "set_auto_analyze_params" (assoc auto_analyze_enabled (true) ))

	(assign (assoc
		result (retrieve_from_entity (list "howso" "model") (list "autoAnalyzeEnabled" "autoAnalyzeThreshold" "autoAnalyzeGrowthFactorAmount"))

	))

	(print "Verify that auto-analyze is enabled with default params: ")
	(call assert_same (assoc
		obs result
		exp (list (true) 100 7.389056)
	))

	(call exit_if_failures (assoc msg unit_test_name ))
)
