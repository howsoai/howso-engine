(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_react_audit.amlg"))

	(call_entity "howso" "set_internal_parameters" (assoc
		default_hyperparameter_map (assoc "k" 2 "p" 0.4 "dt" -1)
	))

	(declare (assoc
		training_data
			(list
				(list 1 5 1 1 1)
				(list 2 1 1 2 2)
				(list 3 -30000 1 3 3)
				(list 3.1 2000 1 3 3)
			)
		context_features (list "A" "B" "C")
		action_features (list "D" "E")
	))

	;train on just the first case
	(map
		(lambda
			(call_entity "howso" "train" (assoc
				features (append context_features action_features)
				input_cases (list (current_value 2))
				session "my_session"
			))
		)
		(list (first training_data))
	)

	;train on the other 3 cases
	(map
		(lambda
			(call_entity "howso" "train" (assoc
				features (append context_features action_features)
				input_cases (list (current_value 2))
				session "my_session"
			))
		)
		(tail training_data 3)
	)


	;VERIFY AUDIT DATA 1
	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					context_features (list "A" "B" "C")
					context_values (list 1 2 3)
					action_features (list "D" "E")
					details (assoc "num_most_similar_cases" 3 "influential_cases" (true))
				))
				"payload"
			)
	))

	(print "React returns audit data: ")
	(call assert_same (assoc
		obs (size (get result "influential_cases"))
		;matches K parameter
		exp 2
	))

	(call assert_same (assoc
		obs (size (get result "most_similar_cases" ))
		;matches the requested amount
		exp 3
	))

	(print "React does not return conviction data: ")
	(call assert_null (assoc
		obs (get result "familiarity_conviction" )
	))
	(call exit_if_failures (assoc msg "React audit data 1"))



;VERIFY AUDIT DATA 2
	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					context_features (list "A" "B" "C")
					context_values (list 1 2 1)
					action_features (list "D" "E")
					details
						(assoc
							"influential_cases" (true)
							"influential_cases_familiarity_convictions" (true)
							"similarity_conviction" (true)
						)

				))
				"payload"
			)
	))

	;expect 2 cases because closestN is 2 and num exemplars wasn't explicitly specified
	(print "React returns exemplar data: ")
	(call assert_same (assoc
		exp 2
		obs (size (get result "influential_cases"))
	))

	(print "React returns conviction: ")
	(call assert_not_null (assoc
		obs (get result "similarity_conviction" )
	))
	(call assert_not_nan (assoc
		obs (get result "similarity_conviction" )
	))

	(call exit_if_failures (assoc msg "React audit data 2"))


;VERIFY AUDIT DATA 3
	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					context_features (list "A" "B" "C")
					context_values (list 1 2 1)
					action_features (list "D" "E")
					details
						(assoc
							"influential_cases" (true)
							"influential_cases_familiarity_convictions" (true)
							"boundary_cases" (true)
							"outlying_feature_values" (true)
						)
				))
				"payload"
			)
	))

	(print "React returns similar cases: ")
	(call assert_same (assoc
		exp 2
		obs (size (get result "influential_cases"))
	))

	(print "React returns boundary cases: ")
	(call assert_same (assoc
		exp 2
		obs (size (get result "boundary_cases"))
	))

	(call exit_if_failures (assoc msg "React audit data 3"))


	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					context_features (list "A" "B" "C")
					context_values (list 1 2 1)
					action_features (list "D" "E")
					details (assoc "num_boundary_cases" 2)
				))
				"payload"
			)
	))

	(print "Alacarte boundary cases only check: ")
	(call assert_true (assoc
		obs (= 2 (size (get result "boundary_cases")))
	))

	(call exit_if_failures (assoc msg unit_test_name))
)
