;initialize the howso entity for howso engine specific unit tests
;assumes that unit_test.amlg is already loaded up
;
;parameters:
; name: optional, name of unit test
; retries: optional, number of times the test will be retried if it fails. will be ignored if run with command line: no-retries
; skip_init: optional, when true will skip init of unit test framework and simply recreate the howso trainee
(declare
    (assoc
		name (null)
		retries 0
		skip_init (false)
		do_return_validation (true)
	)

	(if (not skip_init)
		(call init_unit_test (assoc name name))
	)

	;if unit_test_name is not defined, assume that the unit test framework hasn't been loaded
	(if (= (null) (get_value unit_test_name))
		(seq
			(print "ERROR: Unit test framework is not loaded.\nPlease direct_assign_to_entities the loaded unit_test.amlg into your unit test first.")
			(system "exit")
		)
	)
	;ensure any existing entities of same id don't exist and create a new/clean instance
	(destroy_entities "howso")

	;howso engine should be located one directory up from unit tests
	;TODO: pull path of test from argv, and auto-set howso path to be one directory up relative to the test

	(load_entity
		"../howso.amlg"
		"howso"
		(null)
		(false)
		{escape_resource_name (false) escape_contained_resource_names (false)}
	)
	(assign_to_entities "howso" (assoc filepath "../"))
	(call_entity "howso" "initialize" (assoc trainee_id "model"))

	(if do_return_validation
		(seq
			;cache api information in trainee
			(accum_entity_roots "howso"
				(assoc
					"apiOutput"
						(get (call_entity "howso" "get_api") [1 "payload"])
				)
			)

			;inject return validation code into !Return to use the return types of get_api
			(let
				(assoc
					former_return_code (call_entity "howso" "debug_label" (assoc label "!Return"))
				)

				(declare (assoc
					new_return_code
						(set_type
							(list (set_type
								(append
									(lambda
										(let
											(assoc
												label_name (first (get_labels (opcode_stack -1 (true))))
											)

											(declare (assoc
												type_schema (get apiOutput ["labels" label_name "returns"])
											))

											(if	(and
													(!= type_schema (null))
													(size
														(call !SingleTypeCheck (assoc
															exp_type (get type_schema "type")
															specification type_schema
															given_value payload
														))
													)
												)
												(seq
													(print "FAILED: Return value for " label_name ":\n" payload "\nDoes not match schema:\n" type_schema "\n")
													(print
														(call !SingleTypeCheck (assoc
															exp_type (get type_schema "type")
															specification type_schema
															given_value payload
														))
													)
													(system "exit")
												)
											)
										)
									)
									former_return_code
								)
								"seq"
							))
							"lambda"
						)
				))

				(accum_entity_roots "howso"
					(assoc
						"injectReturnValidation"
							(set_type [(assoc "!Return" new_return_code)] "assign_to_entities")
					)
				)
				(call_entity "howso" "injectReturnValidation")
			)
		)
	)

	;set permissions on howso engine so it has access to load and write files and to print output for debugging
	(set_entity_permissions "howso" {load (true) store (true) std_out_and_std_err (true)})

	;set the number of allowed_retries only if it's specified and hasn't been set already
	(if (and retries (= 0 allowed_retries))
		(assign_to_entities (assoc allowed_retries retries))
	)

	;create helper labels for use in howso unit testing to overwrite 'result' with just payload/warnings/errors
	(accum_entity_roots (assoc
		"keep_result_payload"
			(lambda (assign (assoc result (get (last result) "payload") )) )
		"keep_result_warnings"
			(lambda (assign (assoc result (get (last result) "warnings") )) )
		"keep_result_errors"
			(lambda (assign (assoc result (get (last result) "detail") )) )
	))

)