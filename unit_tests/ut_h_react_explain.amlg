(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_react_explain.amlg"))

	(call_entity "howso" "create_trainee" (assoc trainee "iris" ))
	(call_entity "howso" "set_feature_attributes" (assoc trainee "iris" features (assoc "E" (assoc "type" "nominal"))))

	(call_entity "howso" "set_internal_parameters" (assoc
		trainee "iris"
		default_hyperparameter_map (assoc "k" 3 "p" 0.4 "dt" -1 "paramPath" (list ".default") )
	))

	(declare (assoc
		iris_values
			(list
				(list 6.4 2.8 5.6 2.2 "virginica")
				(list 5.0 2.3 3.3 1.0 "versicolor")
				(list 4.9 2.5 4.5 1.7 "virginica")
				(list 4.9 3.1 1.5 0.1 "setosa")
				(list 5.7 3.8 1.7 0.3 "setosa")
				(list 4.4 3.2 1.3 0.2 "setosa")
				(list 5.4 3.4 1.5 0.4 "setosa")
				(list 6.9 3.1 5.1 2.3 "virginica")
				(list 6.7 3.1 4.4 1.4 "versicolor")
				(list 5.1 3.7 1.5 0.4 "setosa")
				(list 5.2 2.7 3.9 1.4 "versicolor")
				(list 6.9 3.1 4.9 1.5 "versicolor")
				(list 5.8 4.0 1.2 0.2 "setosa")
				(list 5.4 3.9 1.7 0.4 "setosa")
				(list 7.7 3.8 6.7 2.2 "virginica")
				(list 6.3 3.3 4.7 1.6 "versicolor")
				(list 6.8 3.2 5.9 2.3 "virginica")
				(list 7.6 3.0 6.6 2.1 "virginica")
				(list 6.4 3.2 5.3 2.3 "virginica")
				(list 5.7 4.4 1.5 0.4 "setosa")
				(list 6.7 3.3 5.7 2.1 "virginica")
				(list 6.4 2.8 5.6 2.1 "virginica")
				(list 5.4 3.9 1.3 0.4 "setosa")
				(list 6.1 2.6 5.6 1.4 "virginica")
				(list 7.2 3.0 5.8 1.6 "virginica")
				(list 5.2 3.5 1.5 0.2 "setosa")
				(list 5.8 2.6 4.0 1.2 "versicolor")
				(list 5.9 3.0 5.1 1.8 "virginica")
				(list 5.4 3.0 4.5 1.5 "versicolor")
				(list 6.7 3.0 5.0 1.7 "versicolor")
				(list 6.3 2.3 4.4 1.3 "versicolor")
				(list 5.1 2.5 3.0 1.1 "versicolor")
				(list 6.4 3.2 4.5 1.5 "versicolor")
				(list 6.8 3.0 5.5 2.1 "virginica")
				(list 6.2 2.8 4.8 1.8 "virginica")
				(list 6.9 3.2 5.7 2.3 "virginica")
				(list 6.5 3.2 5.1 2.0 "virginica")
				(list 5.8 2.8 5.1 2.4 "virginica")
				(list 5.1 3.8 1.5 0.3 "setosa")
				(list 4.8 3.0 1.4 0.3 "setosa")
				(list 7.9 3.8 6.4 2.0 "virginica")
				(list 5.8 2.7 5.1 1.9 "virginica")
				(list 6.7 3.0 5.2 2.3 "virginica")
				(list 5.1 3.8 1.9 0.4 "setosa")
				(list 4.7 3.2 1.6 0.2 "setosa")
				(list 6.0 2.2 5.0 1.5 "virginica")
				(list 4.8 3.4 1.6 0.2 "setosa")
				(list 7.7 2.6 6.9 2.3 "virginica")
				(list 4.6 3.6 1.0 0.2 "setosa")
				(list 7.2 3.2 6.0 1.8 "virginica")
				(list 5.0 3.3 1.4 0.2 "setosa")
				(list 6.6 3.0 4.4 1.4 "versicolor")
				(list 6.1 2.8 4.0 1.3 "versicolor")
				(list 5.0 3.2 1.2 0.2 "setosa")
				(list 7.0 3.2 4.7 1.4 "versicolor")
				(list 6.0 3.0 4.8 1.8 "virginica")
				(list 7.4 2.8 6.1 1.9 "virginica")
				(list 5.8 2.7 5.1 1.9 "virginica")
				(list 6.2 3.4 5.4 2.3 "virginica")
				(list 5.0 2.0 3.5 1.0 "versicolor")
				(list 5.6 2.5 3.9 1.1 "versicolor")
				(list 6.7 3.1 5.6 2.4 "virginica")
				(list 6.3 2.5 5.0 1.9 "virginica")
				(list 6.4 3.1 5.5 1.8 "virginica")
				(list 6.2 2.2 4.5 1.5 "versicolor")
				(list 7.3 2.9 6.3 1.8 "virginica")
				(list 4.4 3.0 1.3 0.2 "setosa")
				(list 7.2 3.6 6.1 2.5 "virginica")
				(list 6.5 3.0 5.5 1.8 "virginica")
				(list 5.0 3.4 1.5 0.2 "setosa")
				(list 4.7 3.2 1.3 0.2 "setosa")
				(list 6.6 2.9 4.6 1.3 "versicolor")
				(list 5.5 3.5 1.3 0.2 "setosa")
				(list 7.7 3.0 6.1 2.3 "virginica")
				(list 6.1 3.0 4.9 1.8 "virginica")
				(list 4.9 3.1 1.5 0.1 "setosa")
				(list 5.5 2.4 3.8 1.1 "versicolor")
				(list 5.7 2.9 4.2 1.3 "versicolor")
				(list 6.0 2.9 4.5 1.5 "versicolor")
				(list 6.4 2.7 5.3 1.9 "virginica")
				(list 5.4 3.7 1.5 0.2 "setosa")
				(list 6.1 2.9 4.7 1.4 "versicolor")
				(list 6.5 2.8 4.6 1.5 "versicolor")
				(list 5.6 2.7 4.2 1.3 "versicolor")
				(list 6.3 3.4 5.6 2.4 "virginica")
				(list 4.9 3.1 1.5 0.1 "setosa")
				(list 6.8 2.8 4.8 1.4 "versicolor")
				(list 5.7 2.8 4.5 1.3 "versicolor")
				(list 6.0 2.7 5.1 1.6 "versicolor")
				(list 5.0 3.5 1.3 0.3 "setosa")
				(list 6.5 3.0 5.2 2.0 "virginica")
				(list 6.1 2.8 4.7 1.2 "versicolor")
				(list 5.1 3.5 1.4 0.3 "setosa")
				(list 4.6 3.1 1.5 0.2 "setosa")
				(list 6.5 3.0 5.8 2.2 "virginica")
				(list 4.6 3.4 1.4 0.3 "setosa")
				(list 4.6 3.2 1.4 0.2 "setosa")
				(list 7.7 2.8 6.7 2.0 "virginica")
				(list 5.9 3.2 4.8 1.8 "versicolor")
				(list 5.1 3.8 1.6 0.2 "setosa")
				(list 4.9 3.0 1.4 0.2 "setosa")
				(list 4.9 2.4 3.3 1.0 "versicolor")
				(list 4.5 2.3 1.3 0.3 "setosa")
				(list 5.8 2.7 4.1 1.0 "versicolor")
				(list 5.0 3.4 1.6 0.4 "setosa")
				(list 5.2 3.4 1.4 0.2 "setosa")
				(list 5.3 3.7 1.5 0.2 "setosa")
				(list 5.0 3.6 1.4 0.2 "setosa")
				(list 5.6 2.9 3.6 1.3 "versicolor")
				(list 4.8 3.1 1.6 0.2 "setosa")
				(list 6.3 2.7 4.9 1.8 "virginica")
				(list 5.7 2.8 4.1 1.3 "versicolor")
				(list 5.0 3.0 1.6 0.2 "setosa")
				(list 6.3 3.3 6.0 2.5 "virginica")
				(list 5.0 3.5 1.6 0.6 "setosa")
				(list 5.5 2.6 4.4 1.2 "versicolor")
				(list 5.7 3.0 4.2 1.2 "versicolor")
				(list 4.4 2.9 1.4 0.2 "setosa")
				(list 4.8 3.0 1.4 0.1 "setosa")
				(list 5.5 2.4 3.7 1.0 "versicolor")
			)
		result (null)
		iris_features (list "A" "B" "C" "D" "E")
	))

	(call_entity "howso" "set_substitute_feature_values" (assoc
		trainee "iris"
		substitution_value_map (assoc "E" (assoc "versicolor" "ALPHA" "virginica" "BETA" ))
	))

	(call_entity "howso" "train" (assoc
		features iris_features
		input_cases iris_values
		trainee "iris"
	))

	(assign (assoc result
			(call_entity "howso" "react" (assoc
				trainee "iris"
				action_features (list "D" "E")
				context_features (list "A" "B" "C")
				context_values (list 6.9 3.2)
				action_order (list (list "D") ) ;will automatically do D then E
			))
	))

	;expecting a null
	(print "Null action_values due to mismatch of number of context_features vs context_values: ")
	(call assert_same (assoc obs (get result "payload") exp (assoc "action_features" (list "D" "E") "action_values" (null))))
	(call exit_if_failures (assoc msg "React null result context input mismatch"))

;VERIFY AUDIT LEVEL 1 AND ACTION ORDER
	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					trainee "iris"
					action_features (list "D" "E")
					context_features (list "A" "B" "C")
					context_values (list 6.9 3.2 4.7 )
					action_order (list (list "D") ) ;will automatically do D then E
					details (assoc "most_similar_cases" 8 )
				))
				"payload"
			)
	))

	(call assert_approximate (assoc
		obs (get result (list "action_values" 0))
		exp 1.4836
	))
	(call assert_same (assoc
		obs (get result (list "action_values" 1))
		exp "ALPHA"
	))

	(call exit_if_failures (assoc msg "React with action order"))

	(print "Size of audit data (" 8 "): ")
	(call assert_same (assoc
		obs (size (get result "most_similar_cases"))
		exp 8
	))

	(print "Distance of closest audit point (" 0.09999999999999962 "): ")
	(call assert_same (assoc
		obs (get (first (get result "most_similar_cases")) ".distance")
		exp 0.09999999999999962
	))

	(call exit_if_failures (assoc msg "React Lv1 returns num audit exemplars with distance"))

;VERIFY AUDIT LEVEL 2 AND REACTION VALUE
	(assign (assoc result
			(call_entity "howso" "react" (assoc
				trainee "iris"
				action_features (list "D" "E")
				context_features (list "A" "B" "C")
				context_values (list 6.9 3.2 4.7 )
				details (assoc "similarity_conviction" (true))
			))
	))

	(print "Prediction Similarity Conviction for React: ")
	(call assert_approximate (assoc
		obs (get result (list "payload" "similarity_conviction"))
		exp 3.43
		thresh .2
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					trainee "iris"
					action_features (list "D" "E")
					context_features (list "A" "B" "C")
					context_values (list 6.9 3.2 4.7 )
					details
						(assoc
							"hypothetical_values" (assoc "A" 7)
							"influential_cases" (true)
						)
				))
				"payload"
			)
	))
	(print "Hypothetical values are returned: ")
	(call assert_true (assoc
		obs (and
				(!= (null) (get result (list "hypothetical_values" "D")))
				(!= (null) (get result (list "hypothetical_values" "E")))
			)
	))

	(declare (assoc
		influentials (get result "influential_cases")
		sum_of_D 0
	))

	(map
		(lambda (accum (assoc sum_of_D (get (target_value 1) "D"))))
		influentials
	)

	(print "Hypothetical value for D is not same as avg influentials' value for D\n ")
	(print (/ sum_of_D (size influentials)) " vs " (get result (list "hypothetical_values" "D")) ": ")
	(call assert_true (assoc
		obs (!= (/ sum_of_D (size influentials))  (get result (list "hypothetical_values" "D")) )
	))

	(assign (assoc result
		(get
			(call_entity "howso" "react" (assoc
				trainee "iris"
				action_features (list "D" "E")
				context_features (list "A" "B" "C")
				context_values (list 6.9 3.2 4.7 )
				details
					(assoc
						"influential_cases" (true)
						"influential_cases_familiarity_convictions" (true)
					)
			))
			"payload"
		)
	))

	(print "React action values with Lv2: ")
	(call assert_approximate (assoc
		obs (get result (list "action_values" 0))
		exp 1.4836
	))
	(call assert_same (assoc
		obs (get result (list "action_values" 1))
		exp "ALPHA"
	))

	(call exit_if_failures (assoc msg "React value Lv2"))

	;num_exemplars wasn't specified, therefore using closest K = 3 instead
	(print "Size of audit data: ")
	(call assert_same (assoc
		obs (size (get result "influential_cases"))
		exp 3
	))

	(call exit_if_failures (assoc msg "React Lv2 returns num audit exemplars"))



;VERIFY FEATURE EXPLANATION
	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					trainee "iris"
					action_features (list (last iris_features))
					context_features (trunc iris_features)
					context_values (list 6.9 3.2 4.7 1.4)
					details
						(assoc
							"influential_cases" (true)
							"influential_cases_familiarity_convictions" (true)
							"boundary_cases" (true)
							"outlying_feature_values" (true)
						)
					extra_audit_features (list "familiarity_conviction")
				))
				"payload"
			)
	))

	(print "Lv3 Boundary cases conviction: ")
	(call assert_true (assoc obs (contains_index (get (get result "boundary_cases") 0) "familiarity_conviction")))
	(print "Lv3 influential cases conviction: ")
	(call assert_true (assoc obs (contains_index (get (get result "influential_cases") 0) "familiarity_conviction")))

	(call exit_if_failures (assoc msg "Lv3 convictions returned in exemplars"))


;VERIFY EXPLANATION VALUES

	(declare (assoc
		mda_result
			(get
				(call_entity "howso" "react" (assoc
					trainee "iris"
					action_features (list (last iris_features))
					context_features (trunc iris_features)
					context_values (list 6.9 3.2 4.7 1.4)
					details
						(assoc
							"feature_mda" (true)
						)
				))
				"payload"
			)
		mda_custom_result
			(get
				(call_entity "howso" "react" (assoc
					trainee "iris"
					action_features (list (last iris_features))
					action_values (list "virginica")
					context_features (trunc iris_features)
					context_values (list 6.9 3.2 4.7 1.4)
					details
						(assoc
							"feature_mda_ex_post" (true)
						)
				))
				"payload"
			)
		mda_actual_result
			(get
				(call_entity "howso" "react" (assoc
					trainee "iris"
					action_features (list (last iris_features))
					context_features (trunc iris_features)
					context_values (list 6.9 3.2 4.7 1.4)
					details
						(assoc
							"feature_mda_ex_post" (true)
						)
				))
				"payload"
			)
	))

	(print "Action values are correct: ")
	(call assert_same (assoc
		obs (get mda_custom_result (list "action_values"))
		exp (list "BETA")
	))
	(call assert_same (assoc
		obs (get mda_actual_result (list "action_values"))
		exp (list "ALPHA")
	))

	(print "MDA different when providing wrong action feature: ")
	(declare (assoc
		custom_mda (get mda_custom_result (list "feature_mda_ex_post" "D"))

		; should be off by a factor of 2
		predict_mda (get mda_actual_result (list "feature_mda_ex_post" "D"))

		react_mda (get mda_result (list "feature_mda" "D"))
	))
	(call assert_approximate (assoc
		obs (* 2 custom_mda)
		exp predict_mda
		thresh .15
	))

	; values should be same since the local model is the same
	(print "React MDA is same as Predicted MDA: ")
	(call assert_same (assoc
		obs react_mda
		exp predict_mda
	))


;VERIFY FEATURE RESIDUALS
	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					trainee "iris"
					action_features (list (last iris_features))
					context_features (trunc iris_features)
					context_values (list 6.9 3.2 4.7 1.4)
					details
						(assoc
							"influential_cases" (true)
							"boundary_cases" (true)
							"outlying_feature_values" (true)
							"feature_residuals" (true)
							"observational_errors" (true)
						)
				))
				"payload"
			)
	))

	(print "React Lv4 locally feature deviations returned: ")
	(call assert_same (assoc
		exp 5
		obs (size (get result "feature_residuals"))
	))
	(print "React Lv4 user specified feature deviations missing: ")
	(call assert_same (assoc
		exp (assoc)
		obs (get result  "observational_errors")
	))

	(call exit_if_failures (assoc msg "Lv4 feature residuals"))


;VERIFY FEATURE DEVIATIONS

	;manually set a feature error for feature A and C
	(declare (assoc feat_attr (get (call_entity "howso" "get_feature_attributes" (assoc trainee "iris" )) "payload")))
	(assign "feat_attr"
		(list "A" "observational_error") 0.94321
		(list "C" "observational_error") 0.05
	)
	(call_entity "howso" "set_feature_attributes" (assoc trainee "iris" features feat_attr))

	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					trainee "iris"
					action_features (list (last iris_features))
					context_features (trunc iris_features)
					context_values (list 6.9 3.2 4.7 1.4)
					details
						(assoc
							"influential_cases" (true)
							"boundary_cases" (true)
							"outlying_feature_values" (true)
							"feature_residuals" (true)
							"observational_errors" (true)
						)
				))
				"payload"
			)
	))

	(print "React Lv4 locally feature deviation value for A: ")
	(call assert_approximate (assoc
		exp .94321 ;expected user set value, bigger than residual
		obs (get result (list "feature_residuals" "A"))
	))
	(call exit_if_failures (assoc msg "Lv4 feature deviations for feature A"))

	(print "React Lv4 locally feature deviation value for C: ")
	(call assert_approximate (assoc
		exp .2 ;user set value of  .05 is smaller so should be ignored
		obs (get result (list "feature_residuals" "C"))
		percent 0.5
	))
	(call exit_if_failures (assoc msg "Lv4 feature deviations for feature C"))

	(print "React Lv4 user specified feature deviations: ")
	;verify the user specified values are returned with nulls for unspecified ones
	(call assert_same (assoc
		exp (list .94321 (null) .05 (null) (null))
		obs (unzip (get result (list "observational_errors")) iris_features)
	))
	(call exit_if_failures (assoc msg "Lv4 user specified feature deviations"))


;VERIFY CATEGORICAL ACTION PROBABILITIES
	(call_entity "howso" "set_internal_parameters" (assoc
		trainee "iris"
		default_hyperparameter_map (assoc "k" 10 "p" 0.4 "dt" -1 "paramPath" (list ".default"))
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					trainee "iris"
					action_features (list (last iris_features))
					context_features (trunc iris_features)
					context_values (list 6.9 3.2 4.7 1)
					details (assoc "categorical_action_probabilities" (true))
				))
				"payload"
			)
	))

	(print "Categorical Action Probabilities: ")
	(call assert_approximate (assoc
		exp (assoc "E"
				(assoc
					"ALPHA" 0.8
					"BETA" 0.09
				 )
			)
		obs (get result "categorical_action_probabilities")
		percent 0.5
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					trainee "iris"
					action_features (list (last iris_features))
					context_features (trunc iris_features)
					context_values (list 4.4 3.2 1.3 0.1)
				))
				"payload"
			)
	))

	(print "automatic substitution, not 'setosa': ")
	(call assert_false (assoc obs (= "setosa" (first (get result "action_values")))))
	(print "automatic substitution is a number: " (first (get result "action_values")) " ")
	(call assert_true (assoc
		obs (!= 0
				(+ (first (get result "action_values")))
			)
	))

	(assign (assoc
		result
			(call_entity (list "howso" "iris") "UnsubstituteFeatureValues" (assoc
				features (list "E")
				feature_values (list "ALPHA")
			))
	))
	(print "Unsubstitution works: ")
	(call assert_same (assoc obs (first result) exp "versicolor"))

;VERIFY INDIVIDUAL CONVICTION RELATED OUTPUT

	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					trainee "iris"
					action_features (list (last iris_features))
					context_features (trunc iris_features)
					context_values (list 6.9 3.2 4.7 1)
					details (assoc "similarity_conviction" (true) "prediction_residual_conviction" (true))
				))
				"payload"
			)
	))
	(print "Output only prediction conviction: ")
	(call assert_not_null (assoc obs (get result "similarity_conviction" )))
	(call assert_not_null (assoc obs (get result "prediction_residual_conviction" )))
	(call assert_null (assoc obs (get result "familiarity_conviction" )))
	(call assert_null (assoc obs (get result "distance_contribution")))

	(print "\n")

;VERIFY SUBSTITUTION INPUT AND OUTPUT
	(call_entity "howso" "train" (assoc
		features iris_features
		input_cases (list
			(list 7 7 7 7 "ALPHA")
		)
		input_is_substituted (true) ;should un-substitute to 'versicolor', tested below with reacts
		trainee "iris"
	))

	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				trainee "iris"
				action_features (list (last iris_features))
				context_features (trunc iris_features)
				context_values (list 7 7 7 7)
				substitute_output (false)
			))
	))
	(print "React without substitution and validate trained on substituted: " )
	(call assert_same (assoc
		obs (first (get result (list "payload" "action_values")))
		exp "versicolor"
	))

	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				trainee "iris"
				action_features (list (last iris_features))
				context_features (trunc iris_features)
				context_values (list 6.9 7 7 7)
			))
	))
	(print "React with 'default' substitution: " )
	(call assert_same (assoc
		obs (first (get result (list "payload" "action_values")))
		exp "ALPHA"
	))

	(call exit_if_failures (assoc msg "Prediction conviction and substitution."))

;VERIFY FEATURE RESIDUAL CONVICTION

	;remove previously set user limits for deviations
	(assign "feat_attr"
		(list "A" "observational_error") (null)
		(list "C" "observational_error") (null)
	)
	(call_entity "howso" "set_feature_attributes" (assoc trainee "iris" features feat_attr))

	(call_entity "howso" "react_into_trainee" (assoc trainee "iris" residuals (true) sample_model_fraction 1.0))

	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				trainee "iris"
				action_features (list (last iris_features))
				context_features (trunc iris_features)
				context_values (list 6.9 7 7 6)
				details (assoc
					"case_feature_residuals" (true)
					"local_case_feature_residual_convictions" (true)
					"global_case_feature_residual_convictions" (true)
				)
			))
	))

	(print "Standard case residuals and residual convictions for a prediction: ")
	(call assert_approximate (assoc
		obs (get result (list "payload" "case_feature_residuals"))
		exp (assoc
				"A" 0.07
				"B" 1.76
				"C" 0.89
				"D" 0.80
				"E" 0.25
		)
		percent .15
	))
	(print "standard local: ")
	(call assert_approximate (assoc
		obs (get result (list "payload" "local_case_feature_residual_convictions"))
		exp (assoc
				"A" 4.9
				"B" 1.05
				"C" 1.39
				"D" 6.46
				"E" 2.1
		)
		percent 0.1
	))
	(print "standard global: ")
	(call assert_approximate (assoc
		obs (get result (list "payload" "global_case_feature_residual_convictions"))
		exp (assoc
				"A" 4.5
				"B" 0.14
				"C" 0.27
				"D" 0.22
				"E" 0.34
		)
		percent 0.1
	))

	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				trainee "iris"
				action_features (list (last iris_features))
				context_features (trunc iris_features)
				context_values (list 6.9 7 7 6)
				details (assoc
					"robust_computation" (true)
					"case_feature_residuals" (true)
					"local_case_feature_residual_convictions" (true)
					"global_case_feature_residual_convictions" (true)
				)
			))
	))

	(print "Robust case residuals and residual convictions for a prediction: ")
	(call assert_approximate (assoc
		obs (get result (list "payload" "case_feature_residuals"))
		exp (assoc
				"A" 0.3
				"B" 2.0
				"C" 1.0
				"D" 1.8
				"E" 0.3
		)
		thresh 1.1
	))

	(print "robust local: ")
	(call assert_approximate (assoc
		obs (get result (list "payload" "local_case_feature_residual_convictions"))
		exp (assoc
				"A" 4
				"B" .7
				"C" 2
				"D" 4
				"E" 1.6
		)
		thresh
			(assoc
				"A" 4
				"B" .7
				"C" 2
				"D" 3
				"E" 1.5
			)
	))
	(print "robust global is null: ")
	(call assert_approximate (assoc
		obs (get result (list "payload" "global_case_feature_residual_convictions"))
		exp (null) ; should be null because we haven't computed robust global residuals yet
	))

	(call exit_if_failures (assoc msg "Full feature residual conviction."))

	;compute robust global here
	(call_entity "howso" "react_into_trainee" (assoc trainee "iris" residuals_robust (true)))

	(assign (assoc
		result (retrieve_from_entity (list "howso" "iris") "residualsMap")
	))

	;very that residualsMap has both paths stored in it
	(print "Stored residuals has full residuals for hyperparams: ")
	(call assert_true (assoc
		obs (get result "full.default")
	))

	(print "Stored residuals has robust residuals for hyperparams: ")
	(call assert_true (assoc
		obs (get result "robust.default")
	))

	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				trainee "iris"
				action_features (list (last iris_features))
				context_features (trunc iris_features)
				context_values (list 6.9 7 7 6)
				details (assoc
					"robust_computation" (true)
					"case_feature_residuals" (true)
					"local_case_feature_residual_convictions" (true)
					"global_case_feature_residual_convictions" (true)
				)
			))
	))

	(print "robust local - similar to previous: ")
	(call assert_approximate (assoc
		obs (get result (list "payload" "local_case_feature_residual_convictions"))
		exp (assoc
				"A" 4
				"B" .7
				"C" 1.5
				"D" 4
				"E" 1.6
		)
		thresh
			(assoc
				"A" 4
				"B" .7
				"C" 1.5
				"D" 3
				"E" 1.5
			)
	))
	(print "robust global has values: ")
	(call assert_approximate (assoc
		obs (get result (list "payload" "global_case_feature_residual_convictions"))
		exp
			(assoc
				"A" 3
				"B" 0.4
				"C" 0.7
				"D" 0.8
				"E" 2.4
			)
		percent 1.0
	))

	(call exit_if_failures (assoc msg "Robust feature residual conviction."))

	(assign (assoc
		 result
			 (call_entity "howso" "react" (assoc
				 trainee "iris"
				 preserve_feature_values iris_features
				case_indices (list "none" 120)
				leave_case_out (true)
				details (assoc
					"case_feature_residuals" (true)
				)
			 ))
	))
	(print "Case residuals and convictions for an existing case: ")
	(call assert_approximate (assoc
		obs (get result (list "payload" "case_feature_residuals"))
		exp (assoc
				"D" 5.532885154377776
				"E" 0.9010000120937572
				"A" 0.2636796565166062
				"B" 4.007784157785597
				"C" 2.3305316277552057
		)

	))

	(call exit_if_failures (assoc msg "Local residuals."))


	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
			trainee "iris"
			context_features (list "A" "B")
			context_values (list 6.3 3.3)
			action_features (list "E")
			details
				(assoc
					"categorical_action_probabilities" (true)
					"influential_cases" (true)
					"influence_weights" (true)
				)
		))
	))
	(print "Perfect match probability split evenly among perfect matches: ")
	(call assert_approximate (assoc
		obs (get result (list "payload" "categorical_action_probabilities" "E"))
		exp (assoc ALPHA 0.5 BETA 0.5)
	))
	(print "Perfect match influence split evenly among perfect matches: ")
	(call assert_approximate (assoc
		obs (get result (list "payload" "influential_cases" 0 ".influence_weight"))
		exp 0.5
	))
	(call assert_approximate (assoc
		obs (get result (list "payload" "influential_cases" 1 ".influence_weight"))
		exp 0.5
	))


	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				trainee "iris"
				context_features (list "A" "B")
				context_values (list 6.3 3.3)
				action_features (list "E")
				details
					(assoc
						"categorical_action_probabilities" (true)
						"influential_cases" (true)
						"influence_weights" (true)
					)
				use_case_weights (true)
				weight_feature "D"
			))
	))
	;weighted perfect match takes into account case weight for probabilities and influence
	(print "Perfect match probability split un-evenly among perfect matches: ")
	(call assert_approximate (assoc
		obs (get result (list "payload" "categorical_action_probabilities" "E"))
		exp (assoc ALPHA 0.39 BETA 0.61)
	))
	(print "Perfect match influence split un-evenly among perfect matches: ")
	(call assert_approximate (assoc
		obs (get result (list "payload" "influential_cases" 0 ".influence_weight"))
		exp 0.61
	))
	(print "Perfect match influence split un-evenly among perfect matches: ")
	(call assert_approximate (assoc
		obs (get result (list "payload" "influential_cases" 1 ".influence_weight"))
		exp 0.39
	))

	(call exit_if_failures (assoc msg "Weighted influence/probabilities for perfect matches."))

	(call exit_if_failures (assoc msg unit_test_name ))
)
