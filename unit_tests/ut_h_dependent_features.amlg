(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_dependent_features.amlg"))

	(call_entity "howso" "create_trainee" (assoc trainee "model" ))
	(assign_to_entities "howso" (assoc trainee "model"))

	(declare
		(assoc
			bad_case (null)
			extreme_values (list)
			features (list "age"	"balance"	"education"	"measure_type"	"units"	"measure_value")
			data
				(list
					(list 30	40	3	"heartrate"	"bpm"	56)
					(list 30	40	3	"bmi"		"ratio"	15)
					(list 30	0	3	"creatine"	"mg/dL"	1.1)
					(list 50	-20	4	"heartrate"	"bpm"	65)
					(list 50	-20	4	"bmi"		"ratio"	22)
					(list 50	20	4	"xray"		"mSv"	0.1)
					(list 50	-20	4	"creatine"	"mg/dL"	0.85)
					(list 22	300	3	"heartrate"	"bpm"	50)
					(list 22	150	3	"bmi"		"ratio"	10)
					(list 22	50	3	"creatine"	"mg/dL"	1.4)
					(list 22	0	2	"heartrate"	"bpm"	70)
					(list 22	30	2	"bmi"		"ratio"	30)
					(list 22	0	2	"creatine"	"mg/dL"	0.6)
					(list 19	-80	1	"heartrate"	"bpm"	58)
					(list 19	-40	1	"bmi"		"ratio"	18)
					(list 19	0	1	"creatine"	"mg/dL"	1)
					(list 65	400	2	"heartrate"	"bpm"	80)
					(list 65	400	2	"bmi"		"ratio"	24)
					(list 65	400	2	"creatine"	"mg/dL"	0.85)
					(list 42	0	2	"heartrate"	"bpm"	65)
					(list 42	0	2	"bmi"		"ratio"	24)
					(list 42	80	2	"xray"		"mSv"	0.005)
					(list 19	-80	1	"heartrate"	"bpm"	58)
					(list 19	-40	1	"bmi"		"ratio"	18)
					(list 19	0	1	"creatine"	"mg/dL"	0.95)
					(list 70    180 3   (null) "ratio" 17)
					(list 70    190 3   (null) "ratio" 17.5)
					(list 70    180 3   (null) "ratio" (null))
					(list 80    200 1   "bmi" (null) 27)
					(list 80    200 1   "bmi" (null) 32)
					(list 80    230 1   "bmi" (null) (null))
			)
	))


	(call_entity "howso" "set_feature_attributes" (assoc
		features
			(assoc
				"measure_type"
					(assoc
						"type" "nominal"
						"dependent_features" (list "units" "measure_value")
						"null_is_dependent" (true)
					)
				"education" (assoc "type" "ordinal")
				"units"
					(assoc
						"type" "nominal"
						"dependent_features" (list "measure_type" "measure_value")
						"null_is_dependent" (true)
					)
				"measure_value"
					(assoc
						"type" "continuous"
						"bounds" (assoc "min" 0 "max" 220)
						"null_is_dependent" (true)
					)
			)
	))

	(call_entity "howso" "train" (assoc
		features features
		input_cases data
		session "unit_test"
	))

	(call_entity "howso" "analyze" (assoc
		context_features features
		targeted_model "targetless"
		k_values (list 8)
		use_deviations(false)
	))

	(print "Verify dependendents boundary map is properly set: \n")
	(declare (assoc result (retrieve_from_entity (list "howso" "model") "dependentsBoundaryMap")))
	(call assert_same (assoc
		obs (get result (list "measure_value" "bmi" "ratio"))
		exp (list 10 30)
	))

	;null continuous values are explicitly allowed for these nominal combination
	(call assert_same (assoc
		obs (get result (list "measure_value" "bmi" .nas))
		exp (list 27 (null) 32)
	))
	(call assert_same (assoc
		obs (get result (list "measure_value" .nas "ratio"))
		exp (list 17 (null) 17.5)
	))
	(call assert_same (assoc
		obs (get result (list "measure_value" "creatine" "mg/dL"))
		exp (list 0.6 1.4)
	))
	(call assert_same (assoc
		obs (get result (list "measure_value" "heartrate" "bpm"))
		exp (list 50 80)
	))
	(call assert_same (assoc
		obs (get result (list "measure_value" "xray" "mSv"))
		exp (list 0.005 0.1)
	))

	(print "Verify dependendent combinations are properly set: \n")
	(assign (assoc result (retrieve_from_entity (list "howso" "model") "dependentValuesCombinationsMap")))
	(call assert_true (assoc
		obs
			(and
				(contains_value (get result "measure_value") (list "heartrate" "bpm"))
				(contains_value (get result "measure_value") (list "creatine" "mg/dL"))
				(contains_value (get result "measure_value") (list "bmi" "ratio"))
				(contains_value (get result "measure_value") (list "bmi" .nas))
				(contains_value (get result "measure_value") (list .nas "ratio"))
				(contains_value (get result "measure_value") (list "xray" "mSv"))
			)
	))

	(call exit_if_failures (assoc msg "Dependent attributes configuration."))

	(range
		(lambda (let
			(assoc
				case
					(get
						(call_entity "howso" "react" (assoc
							action_features features
							desired_conviction 5
							use_regional_model_residuals (false)
						))
						"payload"
					)
				measure (null)
				unit (null)
				value (null)

			)
			(assign (assoc
				measure (get case (list "action_values" 3))
				unit (get case (list "action_values" 4))
				value (get case (list "action_values" 5))
			))

			;bmi can have null units and null values
			(if (= measure "bmi")
				(if (and (!= unit "ratio") (!= unit (null)))
					(assign (assoc bad_case case))

					(and (< value 2) (!= value (null)))
					(accum (assoc extreme_values (list case)))
				)

				(= measure "heartrate")
				(if (!= unit "bpm")
					(assign (assoc bad_case case))

					(< value 25)
					(accum (assoc extreme_values (list case)))
				)

				(= measure "creatine")
				(if (!= unit "mg/dL")
					(assign (assoc bad_case case))

					(> value 15)
					(accum (assoc extreme_values (list case)))
				)

				(= measure "xray")
				(if (!= unit "mSv")
					(assign (assoc bad_case case))
				)

				(= measure (null))
				(if (!= unit "ratio")
					(assign (assoc bad_case case))

					(print "Got NULL measure with value: " value "\n")
				)
			)
		))
		1 100 1
	)

	(print "Only generated dependent nominals: ")
	(call assert_null (assoc
		obs bad_case
	))

	(print "Extreme values: " extreme_values "\n")

	(print "Limited extreme values generated for dependent features: ")
	(call assert_true (assoc
		obs (< (size extreme_values) 5)
	))

	(call exit_if_failures (assoc msg "Dependent feature synth." ))


	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					context_features  (list "age" "balance"	"education"	"measure_type" "measure_value")
					context_values (list 33	0	2	"creatine"	1.4)
					action_features (list "units")
					desired_conviction 5
					use_regional_model_residuals (false)
				))
				"payload"
			)
	))

	(print "Conditioned generation generates correct units: ")
	(call assert_same (assoc
		obs (get result (list "action_values" 0))
		exp "mg/dL"
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					context_features  (list "age" "balance"	"education"	"measure_type" "measure_value")
					context_values (list 33	0	2	"creatine"	1.4)
					action_features (list "units")
					desired_conviction 5
					use_regional_model_residuals (true)
				))
				"payload"
			)
	))

	(print "Conditioned generation generates correct units w RMR: ")
	(call assert_same (assoc
		obs (get result (list "action_values" 0))
		exp "mg/dL"
	))


	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					context_features  (list "age" "balance"	"education"	"measure_type" "units")
					context_values (list 33	0	2	"creatine"	"mg/dL")
					action_features (list "measure_value")
					desired_conviction 5
					use_regional_model_residuals (false)
				))
				"payload"
			)
	))

	(print "Conditioned nominal generation: ")
	(call assert_approximate (assoc
		obs (get result (list "action_values" 0))
		;creatine leves are around 1.0
		exp 1.0
		thresh 1.0
	))

	(call exit_if_failures (assoc msg "Conditioned Dependent feature synth." ))



	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					context_features  (list "age" "balance"	"education"	"measure_type" "measure_value")
					context_values (list 33	0	2	"creatine"	1.4)
					action_features (list "units")
					use_regional_model_residuals (false)
				))
				"payload"
			)
	))

	(print "Conditioned react predicts correct units: ")
	(call assert_same (assoc
		obs (get result (list "action_values" 0))
		exp "mg/dL"
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					context_features  (list "age" "balance"	"education"	"measure_type" "measure_value")
					context_values (list 33	0	2	"creatine"	1.4)
					action_features (list "units")
					use_regional_model_residuals (true)
				))
				"payload"
			)
	))

	(print "Conditioned react predicts correct units w RMR: ")
	(call assert_same (assoc
		obs (get result (list "action_values" 0))
		exp "mg/dL"
	))


	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					context_features  (list "age" "balance"	"education"	"measure_type" "units")
					context_values (list 33	0	2	"creatine"	"mg/dL")
					action_features (list "measure_value")
					use_regional_model_residuals (false)
				))
				"payload"
			)
	))

	(print "Conditioned nominal react: ")
	(call assert_approximate (assoc
		obs (get result (list "action_values" 0))
		;creatine leves should be ~.9, some variation due to different hyperparameters
		exp 0.8
		thresh 0.22
	))

	(call exit_if_failures (assoc msg "Conditioned Dependent feature predictions." ))


	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					context_features  (list "age" "balance"	"education"	"measure_type" "measure_value")
					context_values (list 81	201	1	"bmi" 31)
					action_features (list "units")
					allow_nulls (true)
				))
				"payload"
			)
	))

	(print "Output null for dependent nominal: ")
	(call assert_true (assoc
		obs (= (list (null)) (get result "action_values"))
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					context_features  (list "age" "balance"	"education"	"units" "measure_value")
					context_values (list 71	182	3	"ratio" 17.2)
					action_features (list "measure_type")
					allow_nulls (true)
				))
				"payload"
			)
	))

	(print "Output null for dependent nominal: ")
	(call assert_true (assoc
		obs (= (list (null)) (get result "action_values"))
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					context_features  (list "age" "balance"	"education"	"measure_type" )
					context_values (list 80	230	1 "bmi"	)
					action_features (list "units" "measure_value")
					desired_conviction 50
				))
				"payload"
			)
	))

	(print "Generates nulls: ")
	(call assert_true (assoc
		obs (contains_value (get result "action_values") (null))
	))

	(call exit_if_failures (assoc msg "Nominal and Continuous dependents" ))


	(call_entity "howso" "delete" (assoc trainee "model" ))
	(call_entity "howso" "create_trainee" (assoc trainee "model" ))

	(call_entity "howso" "set_feature_attributes" (assoc
		features
			(assoc
				"NOM"
					(assoc
						"type" "nominal"
						"dependent_features" (list "DEP")
					)
				"DEP" (assoc "type" "nominal" )
			)
	))

	(call_entity "howso" "train" (assoc
		features (list "num1" "num2" "num3" "NOM" "DEP" "num4")
		session "unit_test"
		input_cases
			(list
				(list 30	40	3	"A"	"X"	56)
				(list 30	40	3	"A"	"Y"	15)
				(list 30	0	3	"A"	"Z"	1.1)
				(list 50	-20	4	"B"	"W"	65)
				(list 50	-20	4	"B"	"H"	22)
				(list 50	20	4	"B"	"H"	0.1)
				(list 50	-20	4	"B"	"W"	0.85)
				(list 22	300	3	"A"	"X"	50)
				(list 22	150	3	"A"	"Z"	10)
				(list 22	50	3	"A"	"Y"	1.4)
				(list 22	0	2	"A"	"X"	70)
				(list 22	30	2	"C"	"Y"	30)
				(list 22	0	2	"C"	"O"	0.6)
				(list 19	-80	1	"C"	"Y"	58)
				(list 19	-40	1	"C" "O"	18)
				(list 19	0	1	"C"	"H"	1)
				(list 65	400	2	"C"	"H"	80)
			)
	))

	(call_entity "howso" "analyze" (assoc
		context_features (list "num1" "num2" "num3" "NOM" "DEP" "num4")
		targeted_model "targetless"
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "batch_react" (assoc
					action_features (list "num1" "num2" "num3" "NOM" "DEP" "num4")
					desired_conviction 5
					use_regional_model_residuals (false)
					num_cases_to_generate 100
				))
				(list "payload" "action_values")
			)
	))

	;verify that if:
	; NOM is A, DEP is (X,Y,Z)
	; NOM is B, DEP is (W,H)
	; NOM is C, DEP is (O,Y,H)
	(print "Generates nominal only dependents correctly: ")
	(call assert_same (assoc
		exp (list)
		obs
			;this should filter out all the expected matches, leaving an empty list.  any 'bad' values will remain
			(filter (map
				(lambda (let
					(assoc
						nom (get (current_value 1) 3)
						dep (get (current_value 1) 4)
					)
					(if (or
							(and (= nom "A") (contains_value (list "X" "Y" "Z") dep) )
							(and (= nom "B") (contains_value (list "W" "H") dep) )
							(and (= nom "C") (contains_value (list "O" "Y" "H") dep) )
						)
						(null)
						;else badly generated dependent value, generated a value that wasn't dependent
						(list nom dep)
					)
				))
				result
			))
	))

	(call exit_if_failures (assoc msg "Nominal only dependents." ))

	(call exit_if_failures (assoc msg unit_test_name ))
)

