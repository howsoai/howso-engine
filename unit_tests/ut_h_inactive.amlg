(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_inactive.amlg"))

	(call_entity "howso" "set_feature_attributes" (assoc
		feature_attributes (assoc "B" (assoc "type" "nominal") )
	))

	(declare (assoc
		data
			(list
				(list 10	"A"		(null) 2 ) ;0
				(list 10	(null)	(null) 2 ) ;1
				(list 10	"B"		(null) 2 ) ;2
				(list 20	"C"		(null) 2 ) ;3
				(list 20	"A"		(null) 2 ) ;4
				(list 20	"B"		(null) 2 ) ;5
				(list 30	"D"		(null) 2 ) ;6
				(list 30	(null)	(null) 2 ) ;7
				(list 30	"D"		(null) 2 ) ;8
				(list 40 	"D"		(null) 2 ) ;9
				(list 50	"E"		(null) 2 ) ;10
				(list 50	"E"		(null) 2 ) ;11
				(list 40	(null)	(null) 2 ) ;12
				(list 50	(null)	(null) 2 ) ;13
				(list 100	"E"		(null) 2 ) ;14

			)
		features (list "A" "B" "C" "D")
		result (null)
	))

	(call_entity "howso" "train" (assoc
		features features
		cases data
	))

	(call_entity "howso" "analyze")

	(declare (assoc
		opt_hp_map
			(get
				(call_entity "howso" "get_params")
				(list 1 "payload" "hyperparameter_map" "targetless" "A.B.C.D." ".none")
			)
	))

	(print "Inactive features all have 0's for weights: ")
	(call assert_true (assoc
		obs
			(apply "=" (append
				.true
				(map
					;check that value may be within epsilon of 0, which is practically 0
					(lambda (< (current_value) 1e-15))
					[
						(get opt_hp_map ["featureMdaMap" "A" "C"])
						(get opt_hp_map ["featureMdaMap" "A" "D"])
						(get opt_hp_map ["featureMdaMap" "B" "C"])
						(get opt_hp_map ["featureMdaMap" "B" "D"])
						(get opt_hp_map ["featureMdaMap" "C" "D"])
						(get opt_hp_map ["featureMdaMap" "D" "C"])
					]
				)
			))
	))
	(print "Inactive feature deviations are set to the smallest residual 1 / (num_cases + 0.5) : ")
	(call assert_true (assoc
		obs
			(=
				(/ 1 15.5)
				(get opt_hp_map ["featureDeviations" "C"])
				(get opt_hp_map ["featureDeviations" "D"])
			)
	))

	(assign (assoc
		result
			(call_entity "howso" "react_aggregate" (assoc
				feature_influences_action_feature "A"
				prediction_stats_action_feature "A"
				details
					{
						"feature_deviations" .true
						"feature_full_residuals" .true
						"feature_robust_residuals" .true
						"prediction_stats" .true
						"feature_full_accuracy_contributions" .true
						"feature_robust_accuracy_contributions" .true
						"feature_full_prediction_contributions" .true
						"feature_robust_prediction_contributions" .true
					}
			))
	))
	(call keep_result_payload)
	(print "React aggregate appropriately fixed values for inactives: ")
	(call assert_true (assoc
		obs
			(apply "=" (append
				.true
				(map
					;check that value may be within epsilon of 0, which is practically 0
					(lambda (< (current_value) 1e-15))
					[
						(get result ["adjusted_smape" "C"])
						(get result ["adjusted_smape" "D"])
						(get result ["smape" "C"])
						(get result ["smape" "D"])
						(get result ["rmse" "C"])
						(get result ["rmse" "D"])
						(get result ["mae" "C"])
						(get result ["mae" "D"])
						(get result ["feature_robust_prediction_contributions" "C"])
						(get result ["feature_robust_prediction_contributions" "D"])
						(get result ["feature_robust_directional_prediction_contributions" "C"])
						(get result ["feature_robust_directional_prediction_contributions" "D"])
						(get result ["feature_robust_accuracy_contributions" "A" "C"])
						(get result ["feature_robust_accuracy_contributions" "A" "D"])
						(get result ["feature_full_accuracy_contributions" "C"])
						(get result ["feature_full_accuracy_contributions" "D"])
						(get result ["feature_full_directional_prediction_contributions" "C"])
						(get result ["feature_full_directional_prediction_contributions" "D"])
						(get result ["feature_full_directional_prediction_contributions" "C"])
						(get result ["feature_full_directional_prediction_contributions" "D"])
					]
				)
			))
	))
	(call assert_true (assoc
		obs
			(= 1
				(get result ["r2" "C"])
				(get result ["r2" "D"])
				(get result ["spearman_coeff" "C"])
				(get result ["spearman_coeff" "D"])
			)
	))
	(call assert_true (assoc
		obs
			(= 0.06451612903225806
				(get result ["feature_deviations" "C"])
				(get result ["feature_deviations" "D"])
				(get result ["feature_robust_residuals" "C"])
				(get result ["feature_robust_residuals" "D"])
			)
	))

	(call exit_if_failures (assoc msg "Inactive Features weights and stats." ))


	(call_entity "howso" "train" (assoc
		features features
		cases
			[
				[100 "E" 2000 2]
				[120 "E" 2100 2]
			]
	))

	(call_entity "howso" "analyze")

	(assign (assoc
		opt_hp_map
			(get
				(call_entity "howso" "get_params")
				(list 1 "payload" "hyperparameter_map" "targetless" "A.B.C.D." ".none")
			)
	))

	(print "Feature C has values, feature D is still inactive: ")
	(call assert_true (assoc
		obs
			(apply "=" (append
				.true
				(map
					;check that value may be within epsilon of 0, which is practically 0
					(lambda (< (current_value) 1e-15))
					[
						(get opt_hp_map ["featureMdaMap" "A" "D"])
						(get opt_hp_map ["featureMdaMap" "B" "D"])
						(get opt_hp_map ["featureMdaMap" "C" "D"])
					]
				)
			))
	))
	(call assert_true (assoc
		obs
			(and
				(= (null) (get opt_hp_map ["featureWeights"]) )
				(!= 0 (get opt_hp_map ["featureDeviations" "C"]) )
				(!= 0 (get opt_hp_map ["featureDeviations" "D"]) )
				(!= 0 (get opt_hp_map ["featureMdaMap" "A" "C"]) )
				(!= 0 (get opt_hp_map ["featureMdaMap" "B" "C"]) )
				(!= 0 (get opt_hp_map ["featureMdaMap" "D" "C"]) )
			)
	))

	(call exit_if_failures (assoc msg "Reactivated Features weights and stats." ))

	(call exit_if_failures (assoc msg unit_test_name ))
)
