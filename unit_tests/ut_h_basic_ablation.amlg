(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_basic_ablation.amlg"))

	;Set a non-default hyperparameter map since ablation checks for non-default
	; hyperparameters.
	(call_entity "howso" "set_params" (assoc
		hyperparameter_map
			{targetless { "A.B.C.D.E." { ".none"
				{k 2 p 0.4 dt -1}
			}}}
	))

	(declare (assoc
		training_data
			(list
				(list 1 5 1 1 1)
				(list 2 1 1 2 2)
				(list 3 -30000 1 3 3)
				(list 3.1 2000 1 3 3)
			)
		context_features (list "A" "B" "C")
		action_features (list "D" "E")
	))

	;train
	(map
		(lambda
			(call_entity "howso" "train" (assoc
				features (append context_features action_features)
				cases (list (current_value 2))
				session "my_session"
			))
		)
		training_data
	)


;VERIFY CONVICTION CALCULATIONS OF FEATURES
	(declare (assoc
		expected_feature_convictions
			(assoc
				"A" 1146
				"B" .2
				"C" .infinity
				"D" 1094
				"E" 1094
			)
		feature_convictions
			(get
				(call_entity "howso" "get_feature_conviction" (assoc
					features (list "A" "B" "C" "D" "E")
				))
				(list 1 "payload" "familiarity_conviction_addition")
			)
	))

	(print "Conviction of features: ")
	;C should be infinity or really large, may be not be infinity due to floating point precision errors
	(call assert_approximate (assoc
		obs feature_convictions
		exp expected_feature_convictions
		infinity_threshold 1e12
	))

	(call exit_if_failures (assoc msg "Conviction of features"))

	(print "conviction value of new case: "
		(call_entity "howso" "react_group" (assoc
			familiarity_conviction_addition (true)
			features (append context_features)
			new_cases (list (list (list 1 2 1)))
		))
		"\n"
	)

	(print "Model size: "
		#!get_num_cases
		(get (call_entity "howso" "get_num_training_cases") (list 1 "payload" "count"))
		"\n"
	)

;VERIFY CONVICTION UPPER THRESHOLD
	(call_entity "howso" "set_auto_ablation_params" (assoc
		auto_ablation_enabled (true)
		conviction_upper_threshold 0.9
		min_num_cases 0
	))
	(assign (assoc dataset_size (call !get_num_cases) ))

	;this should not be added to the dataset b/c conviction of this case is > 0.9
	(call_entity "howso" "train" (assoc
		features (list "A" "B" "C")
		cases (list (list 1 2 1))
		session "my_session"
	))

	(print "Unchanged model size after threshold filter: ")
	(call assert_same (assoc
		exp dataset_size
		obs (call !get_num_cases)
	))

	(print "conviction value of new case: "
		(call_entity "howso" "react_group" (assoc
			features (append context_features action_features )
			new_cases (list (list (list 1 2 1 3 3)))
			familiarity_conviction_addition (true)
		))
		"\n"
	)

	(call_entity "howso" "set_auto_ablation_params" (assoc
		auto_ablation_enabled (true)
		conviction_upper_threshold 2
		min_num_cases 0
	))

	;this should be added to the dataset b/c conviction of this case is < 2
	(call_entity "howso" "train" (assoc
		features (list "A" "B" "C" "D" "E")
		cases (list (list 1 2 1 3 3))
		session "my_session"
	))
	(print "New model size after threshold filter: ")
	(call assert_same (assoc
		exp (+ 1 dataset_size)
		obs (call !get_num_cases)
	))

	(call exit_if_failures (assoc msg "Conviction upper threshold"))

;VERIFY ABSOLUTE THRESHOLD
	(assign (assoc dataset_size (call !get_num_cases) ))

	(call_entity "howso" "set_auto_ablation_params" (assoc
		auto_ablation_enabled (true)
		tolerance_prediction_threshold_map (assoc "D" (list 0.5 0.5))
		min_num_cases 0
	))

	;this should not be added to the dataset
	(call_entity "howso" "train" (assoc
		features (list "A" "B" "C" "D" "E")
		cases (list (list 1 5 2 1 1))
		session "my_session"
	))
	(print "Unchanged model size after absolute threshold filter: ")
	(call assert_same (assoc
		exp dataset_size
		obs (call !get_num_cases)
	))

	(call_entity "howso" "set_auto_ablation_params" (assoc
		auto_ablation_enabled (true)
		tolerance_prediction_threshold_map (assoc "D" (list 0.01 0.01))
		min_num_cases 0
	))


	;this should  be added to the dataset
	(call_entity "howso" "train" (assoc
		features (list "A" "B" "C" "D" "E")
		cases (list (list 1 5.1 2 1 1))
		session "my_session"
	))
	(print "New model size after absolute threshold filter: ")
	(call assert_same (assoc
		exp (+ 1 dataset_size)
		obs (call !get_num_cases)
	))

	(call exit_if_failures (assoc msg "Absolute value threshold"))


;VERIFY RELATIVE THRESHOLD
	(assign (assoc dataset_size (call !get_num_cases) ))

	(call_entity "howso" "set_auto_ablation_params" (assoc
		auto_ablation_enabled (true)
		;reaction is 1, action is 1.1, so: |1 - 1.1| / 1 = 0.1 which is < .2, so this case should be filtered
		relative_prediction_threshold_map (assoc "E" 0.2)
		min_num_cases 0
	))

	;this should not be added to the dataset
	(call_entity "howso" "train" (assoc
		features (list "A" "B" "C" "D" "E")
		cases (list (list 1 5 3 1.1 1.1))
		session "my_session"
	))
	(print "Unchanged model size after relative threshold filter: ")
	(call assert_same (assoc
		exp dataset_size
		obs (call !get_num_cases)
	))


	(call_entity "howso" "set_auto_ablation_params" (assoc
		auto_ablation_enabled (true)
		;reaction is 1, action is 1.1, so: ; |1 - 1.1| / 1 = 0.1 which is > .02, should be trained on
		relative_prediction_threshold_map (assoc "E" 0.02)
		min_num_cases 0
	))

	;this should  be added to the dataset
	(call_entity "howso" "train" (assoc
		features (list "A" "B" "C" "D" "E")
		cases (list (list 1 5 3 1.1 1.1))
		session "my_session"
	))
	(print "New model size after relative threshold filter: ")
	(call assert_same (assoc
		exp (+ 1 dataset_size)
		obs (call !get_num_cases)
	))

	(call exit_if_failures (assoc msg "Relative value threshold "))

;VERIFY CONVICTION OF NEW CASE DOES NOT MATCH CONVICTION OF CASE USING KNOCKOUT - because the avg entropy is different for new vs in dataset
	(declare (assoc cases_without_new (get (call_entity "howso" "get_cases") (list 1 "payload" "cases")) ))
	(assign (assoc
		conv1
			(get
				(call_entity "howso" "react_group" (assoc
					features (list "A" "B" "C" "D" "E")
					new_cases (list (list (list 1 2.5 1 3 3)))
					familiarity_conviction_addition (true)
				))
				(list 1 "payload" "familiarity_conviction_addition")
			)
	))

	(call_entity "howso" "train" (assoc
		features (append context_features action_features)
		cases (list (list 1 2.5 1 3 3))
		session "my_session"
	))

	(declare (assoc cases_with_new (get (call_entity "howso" "get_cases") (list 1 "payload" "cases")) ))
	(declare (assoc
		added_case (filter (lambda (not (contains_value cases_without_new (current_value)))) cases_with_new)
	))

	(assign (assoc
		conv2
			(get
				(call_entity "howso" "react_group" (assoc ;"!ComputeCaseAdditionFamiliarityConviction" (assoc
					features (list "A" "B" "C" "D" "E")
					new_cases (list added_case)
					familiarity_conviction_addition (true)
				))
				(list 1 "payload" "familiarity_conviction_addition")
			)
	))

	(print "Conviction of new case v conviction of existing case: ")
	(call assert_true (assoc obs (!= conv1 conv2)))
	(print "Conviction of new case: ")
	(call assert_approximate (assoc obs (first conv1) exp .89354))
	(print "Conviction of existing case: ")
	(call assert_approximate (assoc obs (first conv2) exp .8507))

	(call exit_if_failures (assoc msg "Conviction of new case vs knockout"))

	(declare (assoc
		compute_train_payload
			(get
				(call_entity "howso" "compute_train_payload" (assoc
					features (append context_features action_features)
					cases
						[
							[ 1 2.4 2 3 3]
							[ 2 2.6 2 3 4]
							[ 1 2.6 2 2 3]
						]
					accumulate_weight_feature ".case_weight"
					allow_training_reserved_features (true)
				))
				[1 "payload"]
			)
	))

	(declare (assoc
		cases_preweight_map
			(map
				(lambda (retrieve_from_entity ["howso" (current_index 1)] ".case_weight") )
				(get compute_train_payload ["weight_accumulation_maps" 0])
			)
		pre_num_cases
			(get
				(call_entity "howso" "get_num_training_cases")
				[1 "payload" "count"]
			)
	))
	(print compute_train_payload)
	(call_entity "howso" "process_train_payload" compute_train_payload)

	(print "Cases weights are increased as expected using precompute/postcompute: ")
	(map
		(lambda
			(call assert_true (assoc
				obs
					(>
						(retrieve_from_entity ["howso" (current_index 2)] ".case_weight")
						(current_value 1)
					)
			))
		)
		cases_preweight_map
	)

	(print "\nThe right amount of cases are trained in postcompute:\n")
	(call assert_same (assoc
		exp (+ pre_num_cases (size (get compute_train_payload "cases")))
		obs
			(get
				(call_entity "howso" "get_num_training_cases")
				[1 "payload" "count"]
			)
	))
	(call exit_if_failures (assoc msg "Split training for distributed ablation"))

	(call exit_if_failures (assoc msg unit_test_name))
)
