(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_id_features.amlg" retries 1))

	(call_entity "howso" "set_feature_attributes" (assoc
		features
			(assoc
				;data_types should be ignored because they are not in the set of number or boolean
				"color" (assoc "type" "nominal" "id_feature" (true) "data_type" "string")
				"size" (assoc "type" "nominal" "id_feature" (true) "data_type" "garbage")
			)
	))

	(declare
		(assoc
			result (null)
			context_key (null)
			features (list "height" "width" "length" "size" "color")
			data
				(list
					;		"h" "w" "l" 	"size" 	"color"
					(list 	1 	.7 	1 		"small" 	"red")
					(list 	1.1 .6 	.7		"small" 	"red")
					(list 	.6 	.4 	.5 		"small" 	"red")
					(list 	.7 	.5 	.6 		"small" 	"green")

					(list 	1.5	1.5	1.5		"small" 	"yellow")
					(list 	2.1 1.6 2.7		"small" 	"blue")
					(list 	2.6	2.7	2.2		"medium" 	"blue")
					(list 	3.6	3.1	3.5 	"medium" 	"red")

					(list 	2 	1 	3 		"medium" 	"red")
					(list 	2.1 1.1	4.7		"medium" 	"yellow")

					(list 	7.5 4.8 5.0		"large" 	"red")
					(list 	8.6	5.4	5.5		"large" 	"green")
			)
	))


	(call_entity "howso" "train" (assoc
		features features
		input_cases data
		session "unit_test"
	))

	(call_entity "howso" "analyze" (assoc
		context_features (trunc features)
		action_features (list (last features))
		targeted_model "single_targeted"
		k_values (list 3 5 8)
		p_values (list 0.1 0.5 1 2)
		use_case_weights (true)

	))
	(assign (assoc
		context_key (apply "concat" (weave (sort (trunc features)) "."))
		result (call_entity "howso" "debug_label" (assoc label "!hyperparameterMetadataMap"))
	))

	(print "single target has expected attributes: ")
	(call assert_true (assoc
		obs
			(and
				(!= (null) (get result (list "color" context_key "full" ".case_weight" "k")))
				(!= (null) (get result (list "color" context_key "full" ".case_weight" "p")))
				(!= (null) (get result (list "color" context_key "full" ".case_weight" "dt")))
			)
	))

	(assign (assoc
		result
			(call_entity "howso" "get_cases" (assoc
				features (list ".session_training_index" ".case_weight")
				session "unit_test"
			))

	))

	(print "calculated case and id feature weights: ")
	(call assert_same (assoc
		obs (get result (list 1 "payload" "cases"))
		exp
			(list
				(list 0 0.027777777777777776)
				(list 1 0.027777777777777776)
				(list 2 0.027777777777777776)
				(list 3 0.08333333333333333)
				(list 4 0.08333333333333333)
				(list 5 0.08333333333333333)
				(list 6 0.125)
				(list 7 0.041666666666666664)
				(list 8 0.041666666666666664)
				(list 9 0.125)
				(list 10 0.08333333333333333)
				(list 11 0.25)
			)
	))

	(call_entity "howso" "analyze" (assoc
		context_features (trunc features)
		action_features (list (last features))
		targeted_model "single_targeted"
		use_case_weights (true)
		weight_feature "width"
	))
	(assign (assoc
		result (call_entity "howso" "debug_label" (assoc label "!hyperparameterMetadataMap"))
	))

	(print "now has color weight attributes: ")
	(call assert_true (assoc
		obs
			(and
				(!= (null) (get result (list "color" context_key "full" "width" "k")))
				(!= (null) (get result (list "color" context_key "full" "width" "p")))
				(!= (null) (get result (list "color" context_key "full" "width" "dt")))
			)
	))

	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				context_features (trunc features)
				action_features (list (last features))
				context_values (list 5 5 5 "medium")
			))
	))
	(print "should be 'red' without weights: ")
	(call assert_same (assoc
		exp "red"
		obs (get result (list 1 "payload" "action_values" 0))
	))


	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				context_features (trunc features)
				action_features (list (last features))
				context_values (list 5 5 5 "medium")
				use_case_weights (true)
			))
	))
	(print "should be 'green' with weights because it's rarer: ")
	(call assert_same (assoc
		exp "green"
		obs (get result (list 1 "payload" "action_values" 0))
	))


	(call exit_if_failures (assoc msg "ID weighted analyze and discriminative react"))


	(call_entity "howso" "analyze" (assoc
		context_features features
		targeted_model "targetless"
		inverse_residuals_as_weights (true)
		use_case_weights (true)
	))
	(assign (assoc
		context_key (apply "concat" (weave (sort features) "."))
		result (call_entity "howso" "debug_label" (assoc label "!hyperparameterMetadataMap"))
	))

	(print ".targetless has .case_weight attributes: ")
	(call assert_true (assoc
		obs
			(and
				(!= (null) (get result (list ".targetless" context_key "robust" ".case_weight" "k")))
				(!= (null) (get result (list ".targetless" context_key "robust" ".case_weight" "p")))
				(!= (null) (get result (list ".targetless" context_key "robust" ".case_weight" "dt")))
			)
	))


	(declare (assoc
		small 0
		medium 0
		large 0
		red 0
		green 0
		blue 0
		yellow 0
		joint_map (assoc)
	))

	(range
		(lambda (let
			(assoc
				case
					(get
						(call_entity "howso" "react" (assoc
							action_features features
							desired_conviction 5
							use_regional_model_residuals (false)
							;use_case_weights (true)
						))
						(list 1 "payload" "action_values")
					)
			)
			(if
				(= "small" (get case 3))
				(accum (assoc small 1))

				(= "medium" (get case 3))
				(accum (assoc medium 1))

				(= "large" (get case 3))
				(accum (assoc large 1))
			)

			(if
				(= "red" (get case 4))
				(accum (assoc red 1))

				(= "green" (get case 4))
				(accum (assoc green 1))

				(= "blue" (get case 4))
				(accum (assoc blue 1))

				(= "yellow" (get case 4))
				(accum (assoc yellow 1))
			)

			(accum (assoc
				joint_map
					(associate
						(concat (get case 3) (get case 4))
							(+ 1 (or (get joint_map (concat (get case 3) (get case 4)))))
					)
			))
		))
		1 1000 1
	)

	(print "expected approximately original distribution of all nominals: \n")
	(print "small " small " ")
	(call assert_approximate (assoc
		obs small
		exp 500
		percent .33
	))
	(print "medium " medium " ")
	(call assert_approximate (assoc
		obs medium
		exp 333
		percent .33
	))
	(print "large " large " ")
	(call assert_approximate (assoc
		obs large
		exp 167
		percent .33
	))

	(print "red " red " ")
	(call assert_approximate (assoc
		obs red
		exp 500
		percent .33
	))
	(print "green " green " ")
	(call assert_approximate (assoc
		obs green
		exp 167
		percent .33
	))

	(print "blue " blue " " )
	(call assert_approximate (assoc
		obs blue
		exp 167
		percent .33
	))
	(print "yellow " yellow " ")
	(call assert_approximate (assoc
		obs yellow
		exp 167
		percent .33
	))


	(print "small-red should be a quarter: ")
	(call assert_approximate (assoc
		obs (get joint_map "smallred")
		exp 250
		percent .33
	))

	(print "large-green should be LESS than a twelvth: ")
	(call assert_approximate (assoc
		obs (get joint_map "largegreen")
		exp 69
		thresh 30
	))


	(call exit_if_failures (assoc msg "non-weighted targetless analyze and generation"))

	(assign (assoc
		small 0
		medium 0
		large 0
		red 0
		green 0
		blue 0
		yellow 0
		joint_map (assoc)
	))

	(map
		(lambda (let
			(assoc
				case
					(get
						(call_entity "howso" "react" (assoc
							action_features features
							desired_conviction 2
							use_regional_model_residuals (false)
							use_case_weights (true)
						))
						(list 1 "payload" "action_values")
					)
			)
			(if
				(= "small" (get case 3))
				(accum (assoc small 1))

				(= "medium" (get case 3))
				(accum (assoc medium 1))

				(= "large" (get case 3))
				(accum (assoc large 1))
			)

			(if
				(= "red" (get case 4))
				(accum (assoc red 1))

				(= "green" (get case 4))
				(accum (assoc green 1))

				(= "blue" (get case 4))
				(accum (assoc blue 1))

				(= "yellow" (get case 4))
				(accum (assoc yellow 1))
			)

			(accum (assoc
				joint_map
					(associate
						(concat (get case 3) (get case 4))
						(+ 1 (or (get joint_map (concat (get case 3) (get case 4)))))
					)
			))
		))
		(range 1 2000)
	)

	(print "expected approximately equally weighted distribution of all nominals: \n")
	(print "small " small " ") ;expected: .33
	(call assert_approximate (assoc
		obs small
		exp 667
		percent .33
	))
	(print "medium " medium " ") ;expected: .33
	(call assert_approximate (assoc
		obs medium
		exp 667
		percent .33
	))
	(print "large " large " ") ;expected: .33
	(call assert_approximate (assoc
		obs large
		exp 667
		percent .33
	))

	(print "red " red " ")  ;expected: .25
	(call assert_approximate (assoc
		obs red
		exp 500
		percent .33
	))
	(print "green " green " ") ;expected: .25
	(call assert_approximate (assoc
		obs green
		exp 500
		percent .33
	))

	(print "blue " blue " ") ;expected: .25
	(call assert_approximate (assoc
		obs blue
		exp 500
		percent .33
	))
	(print "yellow " yellow " " ) ;expected: .25
	(call assert_approximate (assoc
		obs yellow
		exp 500
		percent .33
	))


	(print "small-red should be much LESS than a quarter: " (get joint_map "smallred") " ")
	(call assert_true (assoc
		obs (< (get joint_map "smallred") 250)
	))

	(print "large-green should be MORE than a twelvth: " (get joint_map "largegreen") " ")
	(call assert_true (assoc
		obs (> (get joint_map "largegreen") 140)
	))


	(call exit_if_failures (assoc msg "ID weighted targetless analyze and generation"))

	(call exit_if_failures (assoc msg unit_test_name ))
)

