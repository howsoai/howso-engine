(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_stats.amlg" retries 2))

	(call_entity "howso" "set_feature_attributes" (assoc
		feature_attributes
			(assoc
				"size" (assoc "type" "nominal")
				"fruit" (assoc "type" "nominal")
			)
	))

	(declare (assoc
		result (null)
		features (list "height" "width" "length" "tart" "sweet" "size" "weight" "fruit")
		action_features (list  "fruit")
		context_features (list "height" "width" "length" "tart" "sweet" "size" "weight")
		fruit_data
			(list
				;		"h" "w" "l" 	"tart" "sweet" "size" 	"weight" 	"fruit"
				(list 	1 	.7 	1 		.3 		.40		"small" 	1 		(null))
				(list 	1.1 .6 	.7		.4 		.45 	"small" 	.8 		"strawberry")
				(list 	.6 	.4 	.5 		.5 		.42 	"small" 	1.2 	"strawberry")
				(list 	.7 	.5 	.6 		.45		.49 	"small" 	1.1 	"strawberry")

				(list 	1.5	1.5	1.5		.8 		.4		"small" 	2 		"apple")
				(list 	2.1 1.59 2.701	.72		.55 	"medium" 	3 		"apple")
				(list 	2.6	2.7	2.2		.7		.52 	"medium" 	3.5 	"apple")
				(list 	3.6	3.1	3.5 	.77 	.54 	"medium" 	4.5 	"apple")

				(list 	2 	1 	3 		.05		.60		"small" 	3 		"banana")
				(list 	2.1 1.1	4.7		.1 		.65 	"medium" 	4 		"banana")
				(list 	2.6	1.1	5.4 	.051	.69 	"medium" 	5.5	 	"banana")
				(list 	3.1	1.2	7 		0 		.62 	"medium" 	7 		"banana")

				(list 	1.4 1.7 1.501		.22		.68		"small" 	2.4		"peach")
				(list 	2.1 1.6 2.3		.21		.75 	"medium" 	2.9		"peach")
				(list 	2.5	2.4	2.3		.26		.72 	"medium" 	3.2 	"peach")
				(list 	2.9 2.8 2.7		.23		.70	 	"medium" 	3.9 	"peach")

				(list 	4.5 5.0	5.1		.101 	.80		"medium" 	8 		"peach")
				(list 	5.1 6.2	6.7		.15		.65 	"large" 	12 		"melon")
				(list 	6.9 7.1 7.5		.13 	.71 	"large" 	14.5 	"melon")
				(list 	8.6 7.4 8.5		.14 	.78 	"large" 	18 		"melon")

				(list 	6 	3.7 4.1		.699	.70		"large" 	11 		"pineapple")
				(list 	6.8 4.1 4.3		.75 	.65 	"large" 	13 		"pineapple")
				(list 	7.5 4.8 5.0		.8 		.62 	"large" 	14 		"pineapple")
				(list 	8.6	5.4	5.5		.85		.60 	"large" 	17	 	"pineapple")
		)
	))


	(call_entity "howso" "train" (assoc
		features features
		cases fruit_data
		session "unit_test"
	))

	;explicitly allow access to internal method for this test
	(accum_entity_roots "howso" (list
		(set_labels
			(lambda
				(call !ConfusionMatrixToSDM (assoc
					confusion_matrix confusion_matrix
					feature feature
					confusion_matrix_min_count confusion_matrix_min_count
				))
			)
			(list "ConfusionMatrixToSDM")
		)
	))

	(assign (assoc
		result
			(call_entity "howso" "ConfusionMatrixToSDM" (assoc
				feature "size"
				confusion_matrix
					(assoc
						small (assoc small 4 medium 1 large 9)
						medium (assoc large 17)
						large (assoc small 6 medium 6 large 39)
					)
				confusion_matrix_min_count 10
			))
	))
	(print "SDM with values less than threshold: ")
	(call assert_approximate (assoc
		obs result
		exp
			(list
				(assoc
					large
						(list
							(assoc large 0.030195)
							0.98490
						)
					medium
						(list
							(assoc large 0.50877 medium 0.50877)
							0.98246
						)
					small
						(list
							(assoc small 0.12239)
							0.93881
						)
				)
				0.52439
			)
	))

	(assign (assoc
		result
			(call_entity "howso" "ConfusionMatrixToSDM" (assoc
				feature "size"
				confusion_matrix
					(assoc
						small (assoc small 65 medium 5 )
						medium (assoc small 100 medium 15 )
						large (assoc large 100)
					)
				confusion_matrix_min_count 10
			))
	))
	(print "SDM with values from design spreadsheet: ")
	(call assert_approximate (assoc
		obs result
		exp
			(list
				(assoc
					large
						(list
							(assoc large 0.00692)
							0.99654
						)
					medium
						(list
							(assoc small 0.501736 medium 0.501736)
							0.996528
						)
					small
						(list
							(assoc small 0.007449)
							0.996276
						)
				)
				0.368421
			)
	))

	(call exit_if_failures (assoc msg "Sparse deviation matrix computed correctly."))


	;explicitly allow access to internal method for this test
	(accum_entity_roots "howso" (list
		(set_labels
			(lambda
				(call !SparsifyConfusionMatrices (assoc
					confusion_matrix_map confusion_matrix_map
					confusion_matrix_min_count confusion_matrix_min_count
				))
			)
			(list "SparsifyConfusionMatrices")
		)
	))

	(assign (assoc
	 	result
			(call_entity "howso" "SparsifyConfusionMatrices" (assoc
				confusion_matrix_min_count 30
				confusion_matrix_map
					(assoc
						"boop"
							(assoc
								"A" (assoc "A" 560 "B" 25 "C" 20)
								"B" (assoc "A" 60 "B" 300 "C" 0)
								"C" (assoc "A" 0 "B" 15 "C" 20)
							)
					)
			))
	))

	(print "Sparsifying a confusion matrix: ")
	(call assert_same (assoc
		obs result
		exp
			(assoc
				boop
					(assoc
						matrix
							(assoc
								A (assoc A 560)
								B (assoc A 60 B 300)
							)
						leftover_correct 20
						leftover_incorrect 15
						other_counts (assoc A 45)
					)
			)
	))


	(call exit_if_failures (assoc msg "Sparsifying a confusion matrix works correctly."))


	(assign (assoc
		result (call_entity "howso" "get_marginal_stats")
	))
	(call keep_result_payload)
	(print "Correct Marginal Stats: ")
	(call assert_approximate (assoc
		obs result
		exp
			(assoc
				fruit 	(assoc count 23 max (null) mean (null) median (null) min (null) mode "peach" percentile_25 (null) percentile_75 (null) uniques 6 mean_absdev (null) variance (null) stddev (null) skew (null) kurtosis (null) entropy 1.7757)
				height 	(assoc count 24 max 8.6 mean 3.579 	median 2.6 		min 0.6 mode 2.1 	percentile_25 1.875	percentile_75 5.325	uniques 20 mean_absdev 2.115 variance 6.169 stddev 2.483 skew 0.768547 kurtosis -0.73246 entropy (null))
				length 	(assoc count 24 max 8.5 mean 3.679 	median 3.25 	min 0.5 mode 2.3 	percentile_25 2.025	percentile_75 5.175	uniques 23 mean_absdev 1.944 variance 5.132 stddev 2.265 skew 0.39888 kurtosis -0.83650 entropy (null))
				size 	(assoc count 24 max (null) mean (null) median (null) min (null) mode "medium" percentile_25 (null) percentile_75	(null) uniques 3 mean_absdev (null) variance (null) stddev (null) skew (null) kurtosis (null) entropy 1.0835)
				sweet 	(assoc count 24 max 0.8 mean 0.612 	median 0.635 	min 0.4 mode 0.65 	percentile_25 0.535	percentile_75 0.7	uniques 18 mean_absdev 0.09590 variance 0.01334 stddev 0.11550 skew -0.40942 kurtosis -0.834944 entropy (null))
				tart 	(assoc count 24 max 0.85 mean 0.39 	median 0.28 	min 0 	mode 0.8 	percentile_25 0.1375	percentile_75 0.705	uniques 23 mean_absdev 0.26161 variance 0.08282 stddev 0.28780 skew 0.31001 kurtosis -1.499 entropy (null))
				weight 	(assoc count 24 max 18 	mean 6.52	median 3.95 	min 0.8 mode 3 		percentile_25 2.775	percentile_75 11.25	uniques 23 mean_absdev 4.651 variance 28.766 stddev 5.363 skew 0.82349 kurtosis -0.74241 entropy (null))
				width 	(assoc count 24 max 7.4 mean 2.82 	median 2.05 	min 0.4 mode 1.1 	percentile_25 1.1	percentile_75 4.275	uniques 23 mean_absdev 1.784 variance 4.468 stddev 2.113 skew 0.77638 kurtosis -0.61359 entropy (null))
			)
		percent 0.01
	))

	(assign (assoc
		result (call_entity "howso" "get_marginal_stats" (assoc condition (assoc fruit "pineapple")))
	))
	(call keep_result_payload)
	(print "Correct Conditioned Marginal Stats: ")
	(call assert_equal (assoc
		obs (unzip (get result  "fruit") (list "count" "mode" "uniques" "entropy"))
		exp (list 4 "pinenapple" 1 0)
	))
	(call assert_equal (assoc
		obs (unzip (get result "weight") (list "count" "uniques" "max" "min" "mean"))
		exp (list 4 4 17 11 13.75)
	))

	(call_entity "howso" "analyze" (assoc
		context_features context_features
		action_features (list (last features))
		targeted_model "single_targeted"
	))

	(assign (assoc
		result
			(call_entity "howso" "react_aggregate" (assoc
				context_features features
				action_feature "fruit"
				details (assoc
					prediction_stats (true)
					selected_prediction_stats (list "confusion_matrix")
				)
			))
	))

	(call keep_result_payload)

	(print "`fruit` correct class has most predictions in confusion matrix: \n")
	(map
		(lambda
			(seq
				(print "  `" (current_index) "`: ")
				(call assert_same (assoc
					obs (get (apply "max" (values (current_value 1))))
					exp (get (current_value 1) (current_index 1))
				))

			)
		)
		(get result (list "fruit" "confusion_matrix" "matrix"))
	)

	(print "`size` correct class has most predictions in confusion matrix: \n")
	(map
		(lambda
			(seq
				(print "  `" (current_index) "`: ")
				(call assert_same (assoc
					obs (get (apply "max" (values (current_value 1))))
					exp (get (current_value 1) (current_index 1))
				))

			)
		)
		(get result (list "size" "confusion_matrix" "matrix"))
	)

	(assign (assoc
		result
			(call_entity "howso" "react_aggregate" (assoc
				action_feature "fruit"
				details (assoc
					selected_prediction_stats (list "mae")
					prediction_stats (true)
					feature_residuals_full (true)
					feature_residuals_robust (true)
				)
			))
	))
	(call keep_result_payload)

	(print "Assert full feature residuals is the same as mae: ")
	(call assert_equal
		obs (get result ["tart" "mae"])
		exp (get result ["tart" "feature_residuals_full"])
	)

	(print "Robust and full residuals are different: ")
	(call assert_true (assoc
		obs (!= (get result ["tart" "feature_residuals_robust"]) (get result ["tart" "feature_residuals_full"]))
	))

	(assign (assoc
		result
			(call_entity "howso" "react_aggregate" (assoc
				action_feature "fruit"
				details (assoc
					prediction_stats (true)
					selected_prediction_stats (list "accuracy" "precision" "recall" "mae" "spearman_coeff" "mcc" "rmse")
				)
			))
	))

	(call keep_result_payload)

	(print "Output all (not r2) prediction stats correctly: ")
	(call assert_approximate (assoc
		obs result
		exp
			(assoc
				fruit
					(assoc
						accuracy 0.9
						precision 0.9
						recall 0.9
						mae 0.19
						mcc 0.89
					)
				height
					(assoc
						mae 0.6
						rmse 0.85
						spearman_coeff 0.85
					)
				length
					(assoc
						mae 0.73
						rmse 0.9
						spearman_coeff 0.85
					)
				size
					(assoc
						accuracy 0.7
						precision 0.7
						recall 0.8
						mae 0.29
						mcc 0.73
					)
				sweet
					(assoc
						mae 0.06
						rmse 0.08
						spearman_coeff 0.6
					)
				tart
					(assoc
						mae 0.16
						rmse 0.21
						spearman_coeff 0.43
					)
				weight
					(assoc
						mae 1.1
						rmse 1.8
						spearman_coeff 0.9
					)
				width
					(assoc
						mae 0.8
						rmse 1
						spearman_coeff 0.8
					)
			)
		percent 0.45
	))

	(assign (assoc
		result
			(call_entity "howso" "react_aggregate" (assoc
				action_feature "fruit"
				details (assoc
					prediction_stats (true)
					selected_prediction_stats (list "r2")
				)
			))
	))
	(call keep_result_payload)

	(print "Output all r2 stats correctly: ")
	(call assert_approximate (assoc
		obs result
		exp
			(assoc
				height (assoc r2 0.86)
				length (assoc r2 0.80)
				sweet (assoc r2 0.58)
				tart (assoc r2 0.3)
				weight (assoc r2 0.9)
				width (assoc r2 0.8)
			)
		thresh 0.25
	))

	(call_entity "howso" "train" (assoc
		features features
		cases (list (list 	.7 	.6 	.6 		.46		.5 	"small" 	1.4 	"strawberry"))
		session "unit_test2"
	))

	(print "Marginal stats cleared after model change: ")
	(call assert_same (assoc
		exp (assoc)
		obs (call_entity "howso" "debug_label" (assoc label "!featureMarginalStatsMap"))
	))

	(call_entity "howso" "analyze" (assoc
		targeted_model "targetless"
		p_values (list 0.5 1)
		k_values (list 8 13)
	))

	(assign (assoc
		result
			(call_entity "howso" "react_aggregate" (assoc
				details (assoc
					prediction_stats (true)
					selected_prediction_stats (list "accuracy" "precision" "recall" "mae" "r2")
					action_condition (assoc "fruit" (list "peach" "melon") )
				)
			))
	))
	(call keep_result_payload)

	(print "Output all action conditioned prediction stats correctly: ")
	(call assert_approximate (assoc
		obs result
		exp
			(assoc
				fruit
					(assoc
						accuracy 0.7
						precision 0.7
						recall 0.3
						mae 0.59
					)
				height
					(assoc
						r2 0.77
						mae 0.85
					)
				length
					(assoc
						r2 0.73
						mae 1.09
					)
				size
					(assoc
						accuracy 0.87
						mae 0.34
						precision 0.61
						recall 0.63
					)
				sweet
					(assoc
						r2 -3.47
						mae 0.09
					)
				tart
					(assoc
						r2 -15.33
						mae 0.20
					)
				weight
					(assoc
						r2 0.86
						mae 1.44
					)
				width
					(assoc
						r2 0.56
						mae 1.27
					)
			)
		percent 0.5
	))

	(assign (assoc
		result
			(call_entity "howso" "react_aggregate" (assoc
				details (assoc
					prediction_stats (true)
					selected_prediction_stats (list "accuracy" "precision")
					action_condition (assoc "fruit" (list "apple"))
					context_condition (assoc "fruit" (list "strawberry" "banana"))
				)
			))
	))
	(call keep_result_payload)

	; holding out all of one fruit type should result in not being able to predict that fruit correctly
	(print "Output conditioned prediction stats for fruits with disjoint datasets correctly: ")
	(call assert_same (assoc
		obs (get result "fruit")
		exp (assoc accuracy 0 precision 0)
	))

	(assign (assoc
		result
			(call_entity "howso" "react_aggregate" (assoc
				details (assoc
					prediction_stats (true)
					selected_prediction_stats (list "accuracy" "precision" "recall" "confusion_matrix")
					action_condition (assoc "size" (list "small"))
					context_condition (assoc "size" (list "medium"))
				)
				confusion_matrix_min_count 0
			))
	))
	(call keep_result_payload)

	; Using only medium fruits to predict small fruits should result in 3/7 correct, which is every fruit with both small and medium sizes.
	(print "Output conditioned prediction stats for fruits with overlap correctly: ")
	(call assert_approximate (assoc
		obs (get result "fruit")
		exp (assoc
			accuracy 0.42
			recall 0.75
			precision 0.55
			confusion_matrix
				(assoc
					matrix
						(assoc
							apple (assoc apple 1)
							banana (assoc banana 1)
							peach (assoc peach 1)
							strawberry (assoc apple 4)
						)
					leftover_correct 0
					leftover_incorrect 0
					other_counts 0
				)
			)
		percent 0.05
	))

	(assign (assoc
		result
			(call_entity "howso" "react_aggregate" (assoc
				details (assoc
					prediction_stats (true)
					selected_prediction_stats (list "accuracy" "precision" "recall" "confusion_matrix")
					context_condition (assoc "size" (list "medium"))
					action_condition (assoc "size" (list "small"))
				)
			))
	))
	(call keep_result_payload)

	;same result as previous except confusion matrix should be sparsified and only leftover counts returned
	(print "Output conditioned prediction stats with sparsified confusion matrix: ")
	(call assert_approximate (assoc
		obs (get result "fruit")
		exp (assoc
			accuracy 0.42
			recall 0.75
			precision 0.55
			confusion_matrix
				(assoc
					matrix {}
					leftover_correct 3
					leftover_incorrect 0
					other_counts {strawberry 4}
				)
			)
		percent 0.05
	))

	(assign (assoc
		result
			(call_entity "howso" "react_aggregate" (assoc
				details (assoc
					prediction_stats (true)
					selected_prediction_stats (list "accuracy")
					prediction_stats_features (list "size" "fruit")
				)
			))
	))
	(call keep_result_payload)

	; Uses only fruits to predict size and vice versa
	; 4 Pineapple and 3 Melon only have large size, thus large should be 7/7 correct.
	; Fruits with medium size have medium being the majority size,
	;	 thus all true 10/10 mediums should be correct.
	; Fruits with small sizes have small being the minority size outside of strawberry.
	; 	4/8 should be correct (all strawberries)
	;	3/8 should be incorrect (apple, banana, peach)
	;	1/8 should be random (1 null)
	; There are 2 extra cases due to resampling for nulls.
	; Min of 21/27 correct and max of 24/27 correct
	(print "Output prediction stats selected features correctly: ")
	(call assert_approximate
		(assoc
			obs (get result "size")
			exp (assoc
				accuracy 0.83
				)
			thresh 0.06
		)
	)

	(assign (assoc
		result
			(call_entity "howso" "react_aggregate" (assoc
				action_feature "fruit"
				details (assoc
					prediction_stats (true)
					selected_prediction_stats (list "accuracy")
					action_condition (assoc "weight" (list 0 0.9))
					context_condition (assoc "weight" (list 1 20))
					prediction_stats_features (list "size")
				)
			))
	))
	(call keep_result_payload)

	(print "Output prediction stats with mismatched features: ")
	; Tests whether have conditions of features that are not selected
	; with 'features' returns prediction stats. Also tests whether having
	; an 'action_feature' that overlaps with 'features' returns correct
	; stats. Accuracy should be one since should only predict one case correctly.
	(call assert_exact
		(assoc
			obs result
			exp (assoc
				fruit (assoc accuracy 1)
				size (assoc accuracy 1)
			)
		)
	)

	(call exit_if_failures (assoc msg unit_test_name ))
)