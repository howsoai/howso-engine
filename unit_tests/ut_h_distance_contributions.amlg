(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_distance_contributions.amlg"))

	(call_entity "howso" "train" (assoc
		features (list "f1" "f2")
		input_cases
			(list
				(list 1 1)
				(list 4 1)
				(list 6 2)
				(list 7 2)
				(list 8 3)
				(list 9 4)
				(list 12 4)
				(list 12 4)
				(list 12 4)
				(list 16 6)
				(list 16 6)
				(list 16 6)
				(list 16 6)
				(list 16 6)
				(list 18 8)
			)
	))

	(call_entity "howso" "set_internal_parameters" (assoc
		default_hyperparameter_map
			(assoc
				allFeatureResidualsCached (true)
				dt -1
				k 5
				p 1
				paramPath (list ".default")
			)
	))

	(declare (assoc
		result
			(get
				(call_entity "howso" "batch_react_group" (assoc
					features (list "f1" "f2")
					new_cases
						(list
							(list (list 12 4))
						)
					distance_contributions (true)
				))
				(list 1 "payload" "distance_contribution" 0)
			)
		result2
			(get
				(call_entity "howso" "react" (assoc
					context_features (list "f1" "f2")
					context_values (list 12 4)
					details (assoc "distance_contribution" (true))
				))
				(list 1 "payload" "distance_contribution")
			)
	))

	; [12,4] => [9,4] and [8,3] -> 2 / (1/3 + 1/5) = 3.75 harmonic mean of the two non-zero dist neighbors
	; 3.75 / (1 + 3 perfect matches) = 3.75 / 4 = 9.375
	(print "Same DC with 3 (k=5) perfect matches: " )
	(call assert_true (assoc obs (= 0.9375 result result2)))


	(assign (assoc
		result
			(get
				(call_entity "howso" "batch_react_group" (assoc
					features (list "f1" "f2")
					new_cases
						(list
							(list (list 12 5))
						)
					distance_contributions (true)
				))
				(list 1 "payload" "distance_contribution" 0)
			)
		result2
			(get
				(call_entity "howso" "react" (assoc
					context_features (list "f1" "f2")
					context_values (list 12 5)
					details (assoc "distance_contribution" (true))
				))
				(list 1 "payload" "distance_contribution")
			)
	))
	(print "Same DC with no (k=5) perfect matches: ")
	(call assert_approximate (assoc
		obs result
		exp 1.4634146
		percent 0.01
	))
	(call assert_approximate (assoc
		obs result2
		exp 1.4634146
		percent 0.01
	))

	(call exit_if_failures (assoc msg "Distance Contribution without expansion." ))


	(call_entity "howso" "set_internal_parameters" (assoc
		default_hyperparameter_map
			(assoc
				allFeatureResidualsCached (true)
				dt -1
				k 2
				p 1
				paramPath (list ".default")
			)
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "batch_react_group" (assoc
					features (list "f1" "f2")
					new_cases
						(list
							(list (list 1 2))
						)
					distance_contributions (true)
				))
				(list 1 "payload" "distance_contribution" 0)
			)
		result2
			(get
				(call_entity "howso" "react" (assoc
					context_features (list "f1" "f2")
					context_values (list 1 2)
					details (assoc "distance_contribution" (true))
				))
				(list 1 "payload" "distance_contribution")
			)
	))

	;[1,2] => [1,1] and [4,1] -> 2 / (1 + 1/4) = 1.6 harmonic mean of two nearest neighbors
	(print "Same DC with no (k=2) perfect matches: ")
	(call assert_true (assoc obs (= 1.6 result result2)))


	(assign (assoc
		result
			(get
				(call_entity "howso" "batch_react_group" (assoc
					features (list "f1" "f2")
					new_cases
						(list
							(list (list 16 6))
						)
					distance_contributions (true)
				))
				(list 1 "payload" "distance_contribution" 0)
			)
		result2
			(get
				(call_entity "howso" "react" (assoc
					context_features (list "f1" "f2")
					context_values (list 16 6)
					details (assoc "distance_contribution" (true))
				))
				(list 1 "payload" "distance_contribution")
			)
	))

	;closest non-zero is [18,8] with a dist of 4
	;search had to expand to K=6, so DC is 4/6 = 0.666666
	(print "Same DC with 6 (k=2) perfect matches: ")
	(call assert_approximate (assoc
		obs result
		exp 0.666666
		percent 0.01
	))
	(call assert_approximate (assoc
		obs result2
		exp 0.666666
		percent 0.01
	))

	(call exit_if_failures (assoc msg "Distance Contribution with expanded K." ))

	(call exit_if_failures (assoc msg unit_test_name ))
)