(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_update_htest.amlg" do_return_validation .false))

	(declare (assoc result (null)))

	(call_entity "howso" "create_subtrainee" (assoc path ["A"] child_id "A"))

	(call_entity "howso" "create_subtrainee" (assoc path ["A" "b"] child_id "b" ))

	(call_entity "howso" "create_subtrainee" (assoc path ["A" "b" "c1"] child_id "c1" ))

	(call_entity "howso" "create_subtrainee" (assoc path ["A" "b" "c2"] child_id "c2" ))


	(call_entity "howso" "train" (assoc
		features (list "a" "b" "c")
		cases
			(list
				(list 10 20 30)
				(list 11 22 33)
				(list 12 24 36)
				(list 13 26 39)
			)
	))

	(call_entity "howso" "execute_on_subtrainee" (assoc
		path ["A"]
		method "train"
		payload
			(assoc
				features (list "x" "y")
				cases
					(list
						(list 1 1)
						(list 2 1)
					)
			)
	))

	(call_entity "howso" "execute_on_subtrainee" (assoc
		path ["A" "b"]
		method "train"
		payload
			(assoc
				features (list "x" "y")
				cases
					(list
						(list 3 3)
						(list 4 4)
						(list 5 5)
					)
			)
	))

	(call_entity "howso" "execute_on_subtrainee" (assoc
		path ["A" "b" "c1"]
		method "train"
		payload
			(assoc
				features (list "x" "y" "z")
				cases
					(list
						(list 1 1 3)
						(list 1 2 4)
						(list 1 3 5)
					)
			)
	))

	(call_entity "howso" "execute_on_subtrainee" (assoc
		path ["A" "b" "c2"]
		method "train"
		payload
			(assoc
				features (list "x" "y" "w")
				cases
					(list
						(list 4 4 4)
						(list 5 5 5)
					)
			)
	))

	(store_entity "./htest.amlg" "howso" "amlg" .false {flatten .true})

	;reset howso entity to be blank trainee
	(call (load "unit_test_howso.amlg")
		(assoc name "ut_h_update_htest.amlg" skip_init .true do_return_validation .false)
	)

	(call_entity "howso" "upgrade_trainee" (assoc
		trainee "htest"
		root_filepath "../"
		trainee_amlg_filepath "./"
	))

	(print (call_entity "howso" "get_hierarchy"))

	;Checking feature attributes
	(assign (assoc
		result
			(call_entity "howso" "execute_on_subtrainee" (assoc
				path ["A" "b" "c2"]
				method "get_feature_attributes"
				payload {}
			))
	))
	(call keep_result_payload)
	(print "Feature Attributes of c2 preserved: ")
	(call assert_same (assoc
		obs (zip (indices result))
		exp (zip ["x" "y" "w"])
	))

	(assign (assoc
		result
			(call_entity "howso" "execute_on_subtrainee" (assoc
				path ["A" "b"]
				method "get_feature_attributes"
				payload {}
			))
	))
	(call keep_result_payload)
	(print "Feature Attributes of b preserved: ")
	(call assert_same (assoc
		obs (zip (indices result))
		exp (zip ["x" "y"])
	))

	(assign (assoc
		result (call_entity "howso" "get_feature_attributes" {})
	))
	(call keep_result_payload)
	(print "Feature Attributes of root preserved: ")
	(call assert_same (assoc
		obs (zip (indices result))
		exp (zip ["a" "b" "c"])
	))

	(call exit_if_failures {
		msg "Feature Attributes not preserved correctly."
		cleanup_method cleanup_htest
	})

	;Checking Parent IDs
	(assign (assoc
		result
			(call_entity "howso" "execute_on_subtrainee" (assoc
				path ["A" "b"]
				method "debug_label"
				payload {label "!parentId"}
			))
	))
	(print "Parent of b: ")
	(call assert_same (assoc
		obs result
		exp "A"
	))

	(assign (assoc
		result
			(call_entity "howso" "execute_on_subtrainee" (assoc
				path ["A" "b" "c1"]
				method "debug_label"
				payload {label "!parentId"}
			))
	))
	(print "Parent of c1: ")
	(call assert_same (assoc
		obs result
		exp "b"
	))

	(call exit_if_failures {
		msg "Parent Ids not preserved correctly."
		cleanup_method cleanup_htest
	})

	;Checking num cases
	(assign (assoc
		result
			(call_entity "howso" "execute_on_subtrainee" (assoc
				path ["A" "b"]
				method "get_num_training_cases"
				payload {}
			))
	))
	(call keep_result_payload)
	(print "Num training cases in b: ")
	(call assert_same (assoc
		obs (get result "count")
		exp 3
	))

	(assign (assoc
		result
			(call_entity "howso" "execute_on_subtrainee" (assoc
				path ["A" "b" "c2"]
				method "get_num_training_cases"
				payload {}
			))
	))
	(call keep_result_payload)
	(print "Num training cases in c2: ")
	(call assert_same (assoc
		obs (get result "count")
		exp 2
	))

	(call exit_if_failures {
		msg "Cases not preserved correctly."
		cleanup_method cleanup_htest
	})

	#cleanup_htest
	(if (= (system "os") "Windows")
		(system "system" "del htest.amlg")

		;else posix
		(system "system" "rm htest.amlg")
	)

	(call exit_if_failures (assoc msg unit_test_name ))
)
