; example usage, to load the library do:
; #unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
; (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
; (call assert_same (assoc obs assoc1 exp assoc2))
; (call assert_approximate (assoc obs (list 100 92) exp (list 95 94) percent 6))
; (print "should be 1: " (call is_approximate (assoc obs (list 102 92) exp (list 94 92) percent 8)) "\n")

(null

	;verbosity of assert output
	; 0 : minimal
	; 1 : displays what exactly failed each assert
	; 2 : display the satck at each failed assert
	; to set default: (assign_to_entities (assoc verbose_mode 1))
	#verbose_mode 0

	;counter of the number of failed asserts
	#num_failed_asserts 0

	;if set to true will auto-output verbose on any fail
	#verbose_on_fail (true)

	;name of unit test
	#unit_test_name (null)

	;test start time
	#unit_test_start_time (null)

	;number of allowed retries for a test.
	;will be ignored if run with command line: no-retries
	#allowed_retries 0

	;number of times this test has been retried
	#unit_test_retries 0

	;boilerplate check that unit test is loaded and initalizes unit test values
	;parameters
	; name : string, optional name of unit test. If unspecified defaults to name of file.
	#init_unit_test
		(declare
			(assoc name (null) )

			;parse out filename being run to use as name if name isn't specified
			(if (= (null) name)
				(let
					(assoc script_path (first argv) )
					(assign (assoc
						;split script path by backslash and slash since Windows allows both
            			name (last (split (last (split script_path "/")) "\\\\"))
					))
				)
			)

			(assign_to_entities (assoc
				unit_test_name name
				unit_test_start_time (system_time)
			))
			(print ">> " unit_test_name " >> unit test loaded:\n")

			;self-check
			(call assert_true (assoc obs (!= (null) unit_test_name)))
			(call assert_false (assoc obs (= (null) unit_test_name)))
			(call exit_if_failures (assoc quiet_pass (true) msg "Unit test framework Failed to load!"))

			(print "=====================================\n")
		)

	; returns true (1) if the passed in numbers are within the specified percent of each other, otherwise returns false (0)
	; note: when comparing lists, compares each number at each index as an individual pair of numbers, not the two lists as a whole
	; obs: observed, the number or list or assoc of numbers to check / test
	; exp: expected, the number(s) to check against
	; percent : the allowed relative error (eg, 0.056 = obs  must be within 5.6% of exp)
	; thresh : the allowed absolute error (eg, 0.56 = obs must be +/- 0.56 of exp, if specified, percent is ignored. may be an assoc with same keys as obs.
	; infinity_threshold : when we can approximately consider numbers higher than this threshold to be infinity
	#is_approximate
		(declare
			(assoc
				percent .05
				thresh (null)
				infinity_threshold 1e200
			)

			(assign (assoc threshhold (abs percent)))

			;if it's a string, convert it to number (.nan for string)
			(if (= (get_type_string obs) "string")
				(assign (assoc obs (+ obs)))
			)
			(if (= (get_type_string exp) "string")
				(assign (assoc exp (+ exp)))
			)

			(if (= (get_type_string obs) "number")
				(if (and (= obs .nan) (= exp .nan))
					(true)

					(!= thresh (null)) ;if absolute threshhold is specified, the difference in the numbers must be less than that
					(<= (abs (- exp obs)) (abs thresh))

					(and (= obs .infinity) (= exp .infinity))
					(true)

					(and (= obs -.infinity) (= exp -.infinity))
					(true)

					;treat numbers that should be infinity but instead are really large due to floating point errors as infinity
					(and (= obs .infinity) (>= exp infinity_threshold))
					(true)

					;treat numbers that should be infinity but instead are really large due to floating point errors as infinity
					(and (= exp .infinity) (>= obs infinity_threshold))
					(true)

					(= 0 exp obs)
					(true)

					(let
						(assign (assoc diff (/ (abs (- exp obs)) exp)))
						(>= threshhold diff)
					)
				)

				;else if list, iterate over the list and remove all values from obs that approximately match those in exp
				;if resulting list has no items, both lists are approximately same
				(or (= (get_type_string obs) "list") (= (get_type_string obs) "assoc"))
				(and
					;size must match
					(= (size obs) (size exp))
					;contents must match
					(= 0
						(size (filter
							(lambda (let
								(assoc
									threshold_amount
										(if (= "number" (get_type_string thresh))
											thresh
											;else it's a list or assoc, use corresponding threshold for index
											(get thresh (target_index 1))
										)

								)
								(!= (true)
									(call is_approximate (assoc
										obs (target_value 1)
										exp (get exp (target_index 1))
										percent percent
										thresh threshold_amount
										infinity_threshold infinity_threshold
									))
								)
							))
							obs
						))
					)
				)

				;all are null
				(= (null) obs exp)
				(true)

				;else booleans, check if same
				(= obs exp)
				(true)

				;else not valid
				(false)
			)
		)

	;return true if either verbose_mode is set or a text failed with verbose_on_fail to auto-print the last failed assertion
	#verbose_output (or verbose_mode (and verbose_on_fail (> num_failed_asserts 0)))

	;asserts whether the passed in numbers or lists of numbers are approximately the same, within the specified percent
	; obs: observed, the number or list or assoc of numbers to check / test
	; exp: expected, the number or list of numbers to check against
	; percent : the allowed relative error  (eg, 0.056 = must be within 5.6% of exp)
	; thresh : the allowed absolute error (eg, 0.56 = obs must be +/- 0.56 of exp, if specified, percent is ignored. may be an assoc with same keys as obs.
	; infinity_threshold : when we can approximately consider numbers higher than this threshold to be infinity
	#assert_approximate
		(declare
			(assoc
				percent .05
				thresh (null)
				infinity_threshold 1e200
			)

			;for approximate comparison, order isn't important so we sort both inputs just in case
			(assign (assoc
				obs (sort obs)
				exp (sort exp)
			))

			(if
				(call is_approximate (assoc
					obs obs
					exp exp
					percent percent
					thresh thresh
					infinity_threshold infinity_threshold
				))
				(print "PASSED (approximate)")

				(call failed_assert_output (assoc msg "FAILED: assert_approximate"))
			)

			(if (call verbose_output) (let
				(assoc
					threshold_type
						(if (!= (null) thresh)
							"Threshhold: "
							"Percent: "
						)
					threshold
						(if (!= (null) thresh)
							thresh
							percent
						)
				)
				(print ", Expected: " exp "  Observed: " obs "  " threshold_type threshold)
			))
			(print "\n")

		)

	;asserts if two items are equal
	; obs : item 1
	; exp : item 2
	; unordered : if true, order doesn't matter
	#assert_same
		(seq
			;when testing an unordered assoc, means its values can be unordered
			(if (and unordered (= (get_type_string obs) "assoc"))
				(let
					(assoc
						same_keys (= (sort (indices obs)) (sort (indices exp)) )
					    differents
							(filter
								(lambda
									;leave any values that don't match
									(!= (sort (target_value)) (sort (get obs (target_index))) )
								)
								obs
							)
					)

					;expect keys to be same and no differences
					(if (and same_keys (= 0 (size differents)) )
						(assign (assoc obs exp))
					)
				)
			)

			(if unordered
				;sort both lists so they can be compared using =
				(assign (assoc obs (sort obs) exp (sort exp)))
			)

			(if (= obs exp)
				(print "PASSED (same)")

				(call failed_assert_output (assoc msg "FAILED: assert_same"))
			)

			(if (call verbose_output) (print ", Expected: " exp "  Observed: " obs))
			(print "\n")
		)


	;asserts that the obs parameter is true
	; obs : item to check if true
	#assert_true
		(seq
			(if obs
				(print "PASSED (true)")

				(call failed_assert_output (assoc msg "FAILED: assert_true"))
			)
			(if (call verbose_output) (print ", Expected: true  Observed: " obs))
			(print "\n")
		)


	;asserts that the obs parameter is false
	; obs : item to check if false
	#assert_false
		(seq
			(if (not obs)
				(print "PASSED (false)")

				(call failed_assert_output (assoc msg "FAILED: assert_false"))
			)
			(if (call verbose_output) (print ", Expected: false  Observed: " obs))
			(print "\n")
		)


	;asserts that the obs parameter is null
	; obs : item to check if null
	#assert_null
		(seq
			(if (= (null) obs)
				(print "PASSED (null)")

				(call failed_assert_output (assoc msg "FAILED: assert_null"))
			)
			(if (call verbose_output) (print ", Expected: null  Observed: " obs))
			(print "\n")
		)
	;asserts that the obs parameter is not null
	; obs : item to check if not null
	#assert_not_null
		(seq
			(if (!= (null) obs)
				(print "PASSED (not null)")

				(call failed_assert_output (assoc msg "FAILED: assert_not_null"))
			)
			(if (call verbose_output) (print ", Expected: not null  Observed: " obs))
			(print "\n")
		)

	;asserts that the obs parameter is not nan
	; obs : item to check if not nan
	#assert_not_nan
		(seq
			(if (!= .nan obs)
				(print "PASSED (not nan)")

				(call failed_assert_output (assoc msg "FAILED: assert_not_nan"))
			)
			(if (call verbose_output) (print ", Expected: not nan  Observed: " obs))
			(print "\n")
		)


	;exit run if there are any assert failures ( requires entity to run with root priveledge)
	; msg : optional message to display, defaults to name of unit test
	; quiet_pass : flag, optional. if true and there's no failure, will not print out passed.
	#exit_if_failures
		(if (> num_failed_asserts 0)
			(seq
				(print "Number of failed asserts: " num_failed_asserts " \n")
				(if (!= (null) msg)
					(print "[FAILED: " msg "]\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n")
				)
				(if unit_test_name
					(print "\nFAILED >> " unit_test_name " <<\n\n")
				)

				(if unit_test_retries
					(print "Retried test: " unit_test_retries "\n")
				)

				(if (and (!= allowed_retries unit_test_retries) (not (contains_value argv "no-retries")) )
					(seq
						(assign_to_entities (assoc num_failed_asserts 0))
						(accum_to_entities (assoc unit_test_retries 1))
						(print "RETRYING " unit_test_name " from the start...\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n")
						(call retry_unit_test)
					)

					(system "exit")
				)
			)

			(if (and (!= (null) msg) (!= (true) quiet_pass))
				(seq
					(print "[PASSED: " msg "]\n")
					(if (= msg unit_test_name)
						(print
							"Total execution time: " (- (system_time) unit_test_start_time) " s\n"
							(if unit_test_retries
								(concat "Number of times this test was retried: " unit_test_retries "\n")
								""
							)
						)
					)
					(print "\n")
				)
			)
		)

	;method to automatically reload and re-run the unit test
	;will load the unit test file by the unit_test_name
	;and remove the code labeled with #unit_test from the loaded test to prevent infinite loops of retries
	#retry_unit_test
		(seq
			(call (rewrite
				(lambda
					(if (!= (get_labels (target_value 1)) (list "unit_test"))
						(target_value)
					)
				)
				(load unit_test_name)
			))
			;return a conclude to prevent execution of the rest of the original failed script if retrying
			(conclude)
		)


	;method used by others to display failure message and increase the number of failed asserts
	; msg : the message to display
	#failed_assert_output
		(seq
			(assign_to_entities (assoc num_failed_asserts (+ 1 num_failed_asserts)))
			(print msg)
			(if (= 2 verbose_mode)
				(print " at\n" (stack)) ;TODO: figure out a less verbose/more concise way to give feedback as to where exactly the failure occured
			)
		)

)