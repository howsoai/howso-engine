(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_type_hints.amlg"))

    ;explicitly allow access to internal method for this test
	(accum_entity_roots "howso" (assoc
		"BuildParameterValidationMap" (lambda (call !BuildParameterValidationMap) )
	))

    (declare (assoc
        ;this method returns True if the validation map is built succesfully, returns a list of invalid type hints if not built successfully
        invalid_type_hints (call_entity "howso" "BuildParameterValidationMap")
    ))
    (call assert_true (assoc
        ;the list will be a "truthy" so specifically check if it is (true)
        obs (= (true) invalid_type_hints)
    ))

    ;check that all return types are valid TypeSchemas
    (accum_entity_roots "howso" (assoc
		"SingleTypeCheck" (lambda (call !SingleTypeCheck) )
	))

    (let
        (assoc
            labels_map (get (call_entity "howso" "get_api") [1 "payload" "labels"])
        )

        (declare (assoc
            valid_return_type_map
                (map
                    (lambda
                        (seq
                            (if (get (current_value) "returns")
                                (= (size
                                    (call_entity "howso" "SingleTypeCheck" (assoc
                                        given_value (get (current_value 1) "returns")
                                        specification (get (call_entity "howso" "debug_label" (assoc label "!customTypes")) "TypeSchema")
                                    ))
                                ) 0)

                                ;else return true
                                (true)
                            )
                        )

                    )
                    labels_map
                )
        ))

        (declare (assoc
            invalid_return_type_labels
                (indices (filter
                    (lambda (not (current_value)))
                    valid_return_type_map
                ))
        ))

        (call assert_same (assoc exp 0 obs (size invalid_return_type_labels)))
        (call exit_if_failures (assoc
            msg (concat "Invalid Return Type Hints: " (apply "concat" (trunc (weave invalid_return_type_labels ", "))) )
        ))

        (declare (assoc
            undescribed_parameters
                (apply
                    "append"
                    (values (map
                        (lambda
                            (map
                                (lambda
                                    (concat (current_index 1) "/" (current_value))
                                )
                                (indices (filter
                                    (lambda
                                        (= "" (get (current_value) "description"))
                                    )
                                    (get (current_value) "parameters")
                                ))
                            )
                        )
                        labels_map
                    ))
                )
        ))
        (print "No undescribed parameters: ")
        (call assert_same (assoc exp 0 obs (size undescribed_parameters)))
        (call exit_if_failures (assoc
            msg (concat "Undescribed parameters: " (apply "concat" (trunc (weave undescribed_parameters ", "))) )
        ))
    )



    (call exit_if_failures (assoc
        msg (concat "Invalid Parameter/Schema Type Hints: " (apply "concat" (trunc (weave invalid_type_hints ", "))) )
    ))

    (declare (assoc
		result
			(call_entity "howso" "react" (assoc
				context_features (list "A" 34 "C")
                exclude_novel_nominals_from_uniqueness_check (true)
			))
	))

    (call assert_same (assoc
        obs 0
        exp (first result)
    ))

    (assign (assoc
		result
			(call_entity "howso" "train" (assoc
				features (list "A" "B" "C")
                cases (list (list 1 2 3))

                fake_param "hahahah"
			))
	))

    (call assert_same (assoc
        obs 0
        exp (first result)
    ))

    (call exit_if_failures (assoc msg unit_test_name ))
)