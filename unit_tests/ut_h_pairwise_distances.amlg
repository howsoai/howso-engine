(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_pairwise_distances.amlg"))

	(declare (assoc
		data1 (list
			(list 0 0)
			(list 1 1)
			(list 2 2)
			(list 3 3)
			(list 4 4)
			(list 5 5)
		)
		data2 (list
			(list 6 6)
			(list 7 7)
			(list 8 8)
			(list 9 9)
			(list 10 10)
			(list 11 11)
		)
	))
	(declare (assoc
		features (list "x" "y")
		result (null)
		result2 (null)
	))

	(call_entity "howso" "train" (assoc
		cases data1
		features features
		session "session"
	))

	(call_entity "howso" "train" (assoc
		cases data2
		features features
		session "session2"
	))

	(call_entity "howso" "set_params" (assoc
		hyperparameter_map
			(assoc
				"y" (assoc "x." (assoc "full" (assoc ".none" (assoc "k" 5 "p" 2 "dt" -1))))
				".targetless" (assoc "x.y." (assoc "robust" (assoc ".none" (assoc "k" 3 "p" 1 "dt" -1))))
			)
	))

	(assign (assoc
		result
			(call_entity "howso" "get_pairwise_distances" (assoc
				features (list "x")
				action_feature "y"
				from_case_indices (list (list "session" 0) (list "session" 0) (list "session" 0))
				to_case_indices (list (list "session" 0) (list "session" 1) (list "session2" 3))
			))
	))
	(call keep_result_payload)
	(print "Pairwise distances using targeted hp: ")
	(call assert_same (assoc obs result exp (list 0 1 9)))


	(assign (assoc
		result
			(call_entity "howso" "get_pairwise_distances" (assoc
				features (list "x" "y")
				from_case_indices (list (list "session" 0) (list "session" 0) (list "session" 0))
				to_case_indices (list (list "session" 0) (list "session" 1) (list "session2" 3))
			))
	))
	(call keep_result_payload)
	(print "Pairwise distances using targetless hp: ")
	(call assert_same (assoc obs result exp (list 0 2 18)))


	(assign (assoc
		result
			(call_entity "howso" "get_pairwise_distances" (assoc
				features (list "x")
				action_feature "y"
				from_values (list (list 1))
				to_case_indices (list (list "session" 0) (list "session" 1) (list "session2" 3))
			))
	))
	(call keep_result_payload)
	(print "Pairwise distances using one from_values: ")
	(call assert_same (assoc obs result exp (list 1 0 8)))


	(assign (assoc
		result
			(call_entity "howso" "get_pairwise_distances" (assoc
				features (list "x")
				action_feature "y"
				from_values (list (list 2) (list 5))
				to_values (list (list 10) (list 20))
			))
	))
	(call keep_result_payload)
	(print "Pairwise distances using from_values and to_values: ")
	(call assert_same (assoc obs result exp (list 8 15)))

	(call exit_if_failures (assoc msg "Pairwise distances list." ))

	(assign (assoc
		result
			(call_entity "howso" "get_distances" (assoc
				features (list "x")
				action_feature "y"
				case_indices (list (list "session" 0) (list "session" 1) (list "session2" 3))
			))
	))
	(call keep_result_payload)

	(print "pairwise distances for case_indices: ")
	(call assert_same (assoc
		obs (get result "distances")
		exp (list
				(list 0 1 9)
				(list 1 0 8)
				(list 9 8 0)
			)
	))
	(call assert_same (assoc
		obs (get result "column_case_indices")
		exp (list (list "session" 0) (list "session" 1) (list "session2" 3) )
	))
	(call assert_same (assoc
		obs (get result "row_case_indices")
		exp (list (list "session" 0) (list "session" 1) (list "session2" 3) )
	))
	(print "\n")


	(assign (assoc
		result
			(call_entity "howso" "get_distances" (assoc
				features (list "x")
				action_feature "y"
				case_indices (list (list "session" 0))
			))
	))
	(call keep_result_errors)


	(print "Invalid case_indices parameter: ")
	(call assert_same (assoc
		obs result
		exp "If providing case_indices, must provide at least 2 cases for computation."
	))


	(call exit_if_failures (assoc msg "Distances with case_indices." ))

	(assign (assoc
		result
			(call_entity "howso" "get_distances" (assoc
				features (list "x" "y")
				feature_values (list 4.9 4.9)
			))
	))
	(call keep_result_payload)

	(print "pairwise distances for feature_values: ")
	(call assert_same (assoc
		obs (get result "distances")
		exp (list
				(list 0 2 4)
				(list 2 0 2)
				(list 4 2 0)
			)
	))
	;nearest 3 neighbors are 4, 5 and 6 (which has index 0 for session2)
	(call assert_same (assoc
		obs (get result "column_case_indices")
		exp (list (list "session" 4) (list "session" 5) (list "session2" 0) )
	))
	(call assert_same (assoc
		obs (get result "row_case_indices")
		exp (list (list "session" 4) (list "session" 5) (list "session2" 0) )
	))
	(print "\n")


	(assign (assoc
		result (call_entity "howso" "get_distances" (assoc features (list "x" "y") ))
	))
	(call keep_result_payload)

	(print "pairwise distances for full dataset: ")
	(call assert_same (assoc
		obs (get result "distances")
		exp
			 (list
				(list 0 2 4 6 8 10 12 14 16 18 20 22)
				(list 2 0 2 4 6 8 10 12 14 16 18 20)
				(list 4 2 0 2 4 6 8 10 12 14 16 18)
				(list 6 4 2 0 2 4 6 8 10 12 14 16)
				(list 8 6 4 2 0 2 4 6 8 10 12 14)
				(list 10 8 6 4 2 0 2 4 6 8 10 12)
				(list 12 10 8 6 4 2 0 2 4 6 8 10)
				(list 14 12 10 8 6 4 2 0 2 4 6 8)
				(list 16 14 12 10 8 6 4 2 0 2 4 6)
				(list 18 16 14 12 10 8 6 4 2 0 2 4 )
				(list 20 18 16 14 12 10 8 6 4 2 0 2 )
				(list 22 20 18 16 14 12 10 8 6 4 2 0 )
			)
	))
	(call assert_same (assoc
		obs (get result "column_case_indices")
		exp (list
				(list "session" 0)
				(list "session" 1)
				(list "session" 2)
				(list "session" 3)
				(list "session" 4)
				(list "session" 5)
				(list "session2" 0)
				(list "session2" 1)
				(list "session2" 2)
				(list "session2" 3)
				(list "session2" 4)
				(list "session2" 5)
		)
	))
	(print "\n")

	(assign (assoc
		result
			(call_entity "howso" "get_distances" (assoc
				features (list "x" "y")
				column_offset 8
				;will only return 4 since 5 goes past the boundary of the dataset
				column_count 5
				row_offset 6
				row_count 5
			))
	))
	(call keep_result_payload)
	(print "pairwise distances with offsets: ")
	(call assert_same (assoc
		obs (get result "distances")
		exp
			 (list
			 	(list 4 6 8 10)
				(list 2 4 6 8)
				(list 0 2 4 6)
				(list 2 0 2 4 )
				(list 4 2 0 2 )
			)
	))
	(call assert_same (assoc
		obs (get result "column_case_indices")
		exp (list
				(list "session2" 2)
				(list "session2" 3)
				(list "session2" 4)
				(list "session2" 5)
		)
	))
	(call assert_same (assoc
		obs (get result "row_case_indices")
		exp (list
				(list "session2" 0)
				(list "session2" 1)
				(list "session2" 2)
				(list "session2" 3)
				(list "session2" 4)

		)
	))
	(print "\n")

	(call exit_if_failures (assoc msg "Continuous pairwise distances."))

	(assign (assoc
		data1 (list
			(list 0 "a")
			(list 1 "a")
			(list 2 "a")
			(list 3 "a")
			(list 4 "b")
			(list 5 "b")
			(list 6 "b")
			(list 7 "b")
			(list 8 "b")
			(list 9 "c")
			(list 10 "c")
			(list 11 "c")
		)
	))

	;create a new trainee from scratch
	(destroy_entities "howso")
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_pairwise_distances.amlg" skip_init (true)) )

	(call_entity "howso" "set_feature_attributes" (assoc
		feature_attributes (assoc
			"y" (assoc "type" "nominal")
		)
	))

	(call_entity "howso" "train" (assoc
		cases data1
		features features
		session "session"
	))

	(assign (assoc
		result
			(call_entity "howso" "get_pairwise_distances" (assoc
				features (list "x" "y")
				from_values (list (list 2 "a"))
				to_values (list (list 10 "c"))
			))
	))
	(call keep_result_payload)

	(assign (assoc
		result2
			(get
				(call_entity "howso" "get_pairwise_distances" (assoc
					features (list "x" "y")
					from_values (list (list 0 "a") (list 2 "a"))
					to_values (list (list 1 "a") (list 10 "c"))
				))
				(list 1 "payload")
			)
	))

	;computing a single distance with encoded features computes to be same as when computed in a batch
	(print "Encoded pairwise distances: ")
	(call assert_same (assoc
		obs (first result)
		exp (last result2)
	))

	;validate actual computed values
	(call assert_same (assoc
		obs result2
		exp (list 1 3056.8689029638276)
	))

	(call exit_if_failures (assoc msg unit_test_name ))
)