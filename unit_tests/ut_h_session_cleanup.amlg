(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_session_cleanup.amlg.amlg"))

	(declare (assoc
		training_data
			(list
				(list 3 -30000 1 3 3)
				(list 3.1 2000 1 3 3)
			)
		training_data2
			(list
				(list 8 15 8 4 4)
				(list 12 11 11 12 12)
				(list 12 11 11 12 12)
			)
		training_data3
			(list
				(list 1 5 1)
				(list 2 1 1)
			)

		context_features (list "A" "B" "C")
		action_features (list "D" "E")
	))

	;train
	(call_entity "howso" "train" (assoc
		input_cases training_data
		features (append context_features action_features)
		session "session_A"
	))
	(call_entity "howso" "train" (assoc
		input_cases training_data2
		features (append context_features action_features)
		session "session_B"
	))
	(call_entity "howso" "train" (assoc
		input_cases training_data3
		features context_features
		session "session_C"
	))

	(create_entities (list "howso" "INVALID_ENTITY")
		(lambda (null ##Bad_label 86))
	)

	(declare (assoc result (contained_entities "howso")))

	(print "has invalid entity: ")
	(call assert_true (assoc obs (contains_value result "INVALID_ENTITY")))

	;removes entities that aren't cases or sessions
	(call_entity "howso" "clean_data")

	(assign (assoc result (contained_entities "howso")))

	(print "has no invalid entities: ")
	(call assert_false (assoc obs (contains_value result "INVALID_ENTITY")))


	;VERIFY TRAINING AND MODEL SIZE
	(print "new model size: ")
	(assign (assoc model_size (call_entity "howso" "get_num_training_cases")))
	(call assert_same (assoc
		exp 5
		obs (get model_size (list 1 "payload" "count"))
	))

	(call exit_if_failures (assoc msg "Removal of incomplete cases"))

	;removes any replay steps that are non-existent cases
	(print "session_C has been cleared out: ")

	(call assert_null (assoc
		obs (retrieve_entity_root (list "howso" "session_C"))
	))


	(call exit_if_failures (assoc msg "Removal of invalid replay steps"))

	;removes duplicate (identical) cases
	(call_entity "howso" "clean_data" (assoc remove_duplicates (true)))

	;VERIFY TRAINING AND MODEL SIZE
	(print "new model size after dupe removal: ")
	(assign (assoc model_size (call_entity "howso" "get_num_training_cases")))
	(call assert_same (assoc
		exp 4
		obs (get model_size (list 1 "payload" "count"))
	))

	(call exit_if_failures (assoc msg "Duplicate case removal"))


	(destroy_entities (list "howso" "session_B"))

	;removes cases with null or invalid sessions
	(call_entity "howso" "clean_data")

	;VERIFY TRAINING AND MODEL SIZE
	(print "model size after session removal and case cleanup: ")
	(assign (assoc model_size (call_entity "howso" "get_num_training_cases")))
	(call assert_same (assoc
		exp 2
		obs (get model_size (list 1 "payload" "count"))
	))

	(print "empty session_C removed, only session_A remains: ")
	(assign (assoc result (call_entity "howso" "get_sessions")))
	(call assert_same  (assoc
		exp (list (assoc id "session_A"))
		obs (get result (list 1 "payload"))
	))


	(call exit_if_failures (assoc msg "Removal of unreferenced sessions and case cleanup"))

	(call exit_if_failures (assoc msg unit_test_name))
)
