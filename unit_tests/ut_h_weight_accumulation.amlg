(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_weight_accumulation.amlg"))

	(call_entity "howso" "create_trainee" (assoc trainee "model_cont" ))

	(call_entity "howso" "set_feature_attributes" (assoc
		trainee "model_nominal"
		features (assoc "C" (assoc "type" "nominal" "data_type" "number") )
	))

	(declare (assoc
		data
			(list
				(list 1 1 1)  ;0
				(list 2 1 1)
				(list 1 2 1)
				(list 2 2 1)
				(list 2 3 1)
				(list 3 2 1)  ;5
				(list 3 4 2)
				(list 3 5 2)
				(list 4 4 2)
				(list 4 5 2)
				(list 5 5 (null))  ;10
				(list 6 6 3)	   ;11
				(list 6 4 (null))  ;12
				(list 6 7 3)
				(list 7 7 3)
				(list 9 7 3)
				(list 9 8 3)
				(list 9 9 4)
				(list 10 9 4)
				(list 10 10 4) ;19
			)
	))

	(declare (assoc
		features (list "X" "Y" "C")
		ctx_features (list "X" "Y")
		act_features (list "C")
		result (null)
	))

	(call_entity "howso" "train" (assoc
		features features
		input_cases data
		trainee "model_cont"
	))

	(call_entity "howso" "set_internal_parameters" (assoc
		trainee "model_cont"
		hyperparameter_map (assoc ".targetless" (assoc "robust" (assoc ".none" (assoc "k" 3 "p" 2 "dt" -1))))
	))


	(call_entity "howso" "train" (assoc
		features features
		input_cases (list
				(list 7 7 3)
				(list 8 8 3)
				(list 3 3 2)
		)
		trainee "model_cont"
		train_weights_only  (true)
		accumulate_weight_feature ".case_weight"
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "get_cases" (assoc trainee "model_cont" features (append features ".case_weight")))
				(list "payload" "cases")
			)
	))
	(print "Weight cases are not trained: ")
	(call assert_same (assoc
		obs (size result)
		exp 20
	))

	(print "Neighbors weights are accumulated: ")
	(call assert_approximate (assoc
		;pull only the neighbors that had weights accumulated
		obs (unzip result (list 4 5 6 14 15 16))
		exp
			(list
				(list 2 3 1 1.2928932)
				(list 3 2 1 1.2928932)
				(list 3 4 2 1.4142135)
				(list 7 7 3 2.2928932)
				(list 9 7 3 1.2928932)
				(list 9 8 3 1.4142135)
			)
		percent 0.01
	))

	(call_entity "howso" "set_auto_ablate_params" (assoc
		trainee "model_cont"
		exact_prediction_features (list "C")
		minimum_model_size 10
	))

	(call_entity "howso" "train" (assoc
		features features
		input_cases (list
				(list 7 7 3)
		)
		trainee "model_cont"
	))


	(assign (assoc
		result
			(get
				(call_entity "howso" "get_cases" (assoc trainee "model_cont" features (append features ".case_weight")))
				(list "payload" "cases")
			)
	))
	(print "Case is ablated: ")
	(call assert_same (assoc
		obs (size result)
		exp 20
	))

	(print "Neighbor weight accumulated from ablatement: ")
	(call assert_approximate (assoc
		obs (get result 14) ;pull the 14th case, 7,7,3
		exp (list 7 7 3 3.2928932)

		percent 0.01
	))

	(call_entity "howso" "move_cases" (assoc
		trainee "model_cont"
		num_cases 1
		precision "exact"
		condition (assoc "X" 7)
		distribute_weight_feature ".case_weight"
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "get_cases" (assoc trainee "model_cont" features (append features ".case_weight")))
				(list "payload" "cases")
			)
	))
	(print "One case is removed (7,7,3): ")
	(call assert_same (assoc
		obs (size result)
		exp 19
	))

	(print "Neighbors weights are distributed: ")
	(call assert_approximate (assoc
		;pull only the neighbors that had weights distributed to them
		obs (unzip result (list 11 13 14))
		exp
			(list
				(list 6 6 3 2.0549680)
				(list 6 7 3 2.4919501)
				(list 9 7 3 2.0388682)
			)
		percent 0.01
	))

	(call exit_if_failures (assoc msg unit_test_name ))
)
