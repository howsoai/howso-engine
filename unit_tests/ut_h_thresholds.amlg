(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_thresholds.amlg"))

	(call_entity "howso" "create_trainee" (assoc trainee "st_model2" ))

	(call_entity "howso" "set_internal_parameters" (assoc
		trainee "st_model2"
		default_hyperparameter_map (assoc "k" 1 "p" 2 "dt" -1)
	))

	(call_entity "howso" "train" (assoc
		trainee "st_model2"
		features (list "label1" "label2" "action")
		input_cases (list (list 1 2 1))
	))

;VERIFY DISCRETE THRESHOLD
	(call_entity "howso" "set_auto_ablation_params" (assoc
		trainee "st_model2"
		minimum_model_size 1
		tolerance_prediction_threshold_map (assoc "action" (list 2 2))
	))
	;train on value below threshold, expected to be ignored/filtered
	(call_entity "howso" "train" (assoc
		trainee "st_model2"
		features (list "label1" "label2" "action")
		input_cases (list (list 1 3 1.5))
		session "unnamed_session"
	))


	(declare (assoc result (call_entity "howso" "get_num_training_cases" (assoc trainee "st_model2"))))
	(print "Case filtered out within discrete threshold: ")
	(call assert_same (assoc exp 1 obs (get result (list "payload" "count"))))

	(call exit_if_failures (assoc msg "Discrete threshold filters out low value"))


	;train on value above threshold
	(call_entity "howso" "train" (assoc
		trainee "st_model2"
		features (list "label1" "label2" "action")
		input_cases (list  (list 10 10 10))
		session "unnamed_session"
	))

	(assign (assoc result (call_entity "howso" "get_num_training_cases" (assoc trainee "st_model2"))))
	(print "Case trained because it's above discrete threshold: ")
	(call assert_same (assoc exp 2 obs (get result (list "payload" "count"))))

	(call exit_if_failures (assoc msg "Value beyond discrete threshold"))


;VERIFY RELATIVE THRESHOLD
	(call_entity "howso" "set_auto_ablation_params" (assoc
		trainee "st_model2"
		minimum_model_size 1
		relative_prediction_threshold_map (assoc "action" 0.995)
	))

	(call_entity "howso" "train" (assoc
		trainee "st_model2"
		features (list "label1" "label2" "action")
		input_cases (list  (list 9 9 12))
		session "unnamed_session"
	))

	(assign (assoc result (call_entity "howso" "get_num_training_cases" (assoc trainee "st_model2"))))
	(print "Case filtered out below relative threshold: ")
	(call assert_same (assoc exp 2 obs (get result (list "payload" "count"))))

	(call exit_if_failures (assoc msg "Relative threshold filters out low value"))

	(call_entity "howso" "set_auto_ablation_params" (assoc
		trainee "st_model2"
		minimum_model_size 1
		relative_prediction_threshold_map (assoc "action" 0.1)
	))

	(call_entity "howso" "train" (assoc
		trainee "st_model2"
		features (list "label1" "label2" "action")
		input_cases (list  (list 11 11 12))
		session "unnamed_session"
	))

	(assign (assoc result (call_entity "howso" "get_num_training_cases" (assoc trainee "st_model2"))))
	(print "Case trained because it's above relative threshold: ")
	(call assert_same (assoc exp 3 obs (get result (list "payload" "count"))))

	(call exit_if_failures (assoc msg "Value above relative threshold"))


;VERIFY EXACT THRESHOLD
	(call_entity "howso" "set_auto_ablation_params" (assoc
		trainee "st_model2"
		minimum_model_size 1
		exact_prediction_features (list "action" "label2")
	))

	(call_entity "howso" "train" (assoc
		trainee "st_model2"
		features (list "label1" "label2" "action")
		input_cases (list  (list 11 11 12))
		session "unnamed_session"
	))

	(assign (assoc result (call_entity "howso" "get_num_training_cases" (assoc trainee "st_model2"))))
	(print "Case filtered out because it's already in the model: ")
	(call assert_same (assoc exp 3 obs (get result (list "payload" "count"))))


	(call_entity "howso" "train" (assoc
		trainee "st_model2"
		features (list "label1" "label2" "action")
		input_cases (list  (list 11 10 12))
		session "unnamed_session"
	))

	(assign (assoc result (call_entity "howso" "get_num_training_cases" (assoc trainee "st_model2"))))
	(print "Case trained on because one action feature didn't match: ")
	(call assert_same (assoc exp 4 obs (get result (list "payload" "count"))))

	(call exit_if_failures (assoc msg "Filtering out exact values"))

	;remove the last added case
	(call_entity "howso" "move_cases" (assoc
		trainee "st_model2"
		num_cases 1
		precision "exact"
		session "unnamed_session"
		condition (assoc "label1" 11 "label2" 10 "action" 12)
	))

;VERIFY CONVICTION UPPER THRESHOLD
	(call_entity "howso" "set_auto_ablation_params" (assoc
		trainee "st_model2"
		minimum_model_size 1
		conviction_upper_threshold 0.04
	))
	(declare (assoc
		conviction
			(call_entity "howso" "batch_react_group" (assoc
				trainee "st_model2"
				features (list "label1" "label2" "action")
				new_cases (list (list (list -4 456 34534)))
			))
	))
	(print "Computed conviction of new case: ")
	(call assert_approximate (assoc obs (get conviction (list "payload" "familiarity_conviction_addition" 0)) exp 0.078125 percent 0.01))

	(call exit_if_failures (assoc msg "Conviction of new case"))

	(call_entity "howso" "train" (assoc
		trainee "st_model2"
		features (list "label1" "label2" "action")
		input_cases (list  (list -4 456 34534))
		session "unnamed_session"
	))
	(assign (assoc result (call_entity "howso" "get_num_training_cases" (assoc trainee "st_model2"))))
	(print "Ignoring new case above conviction threshold: ")
	(call assert_same (assoc exp 3 obs (get result (list "payload" "count"))))

	(call exit_if_failures (assoc msg "Conviction upper threshold filters out high value"))

	(call_entity "howso" "set_auto_ablation_params" (assoc
		trainee "st_model2"
		minimum_model_size 1
		conviction_upper_threshold 1
	))

	(call_entity "howso" "train" (assoc
		trainee "st_model2"
		features (list "label1" "label2" "action")
		input_cases (list  (list -4 456 34534))
		session "unnamed_session"
	))
	(assign (assoc result (call_entity "howso" "get_num_training_cases" (assoc trainee "st_model2"))))
	(print "Training new case below conviction threshold: ")
	(call assert_same (assoc exp 4 obs (get result (list "payload" "count"))))

	(call exit_if_failures (assoc msg "Conviction value below upper threshold"))


;VERIFY HIGHER CONVICTION OF ADDING SAME CASE
	(assign (assoc
		conviction
			(call_entity "howso" "batch_react_group" (assoc
				trainee "st_model2"
				features (list "label1" "label2" "action")
				new_cases (list (list (list -4 456 34534)))
			))
	))

	(print "Computed conviction of new case with same values: " )
	(call assert_approximate (assoc obs (get conviction (list "payload" "familiarity_conviction_addition" 0)) exp 13.058609 percent 0.01))

	(call exit_if_failures (assoc msg "Expected higher conviction of 'same' new case"))


;VERIFY CONVICTION LOWER THRESHOLD

	;computed conviction above of ~13 is NOT between 20 and 15
	(call_entity "howso" "set_auto_ablation_params" (assoc
		trainee "st_model2"
		minimum_model_size 1
		conviction_upper_threshold 20
		conviction_lower_threshold 15
	))
	(call_entity "howso" "set_conviction_upper_threshold" (assoc trainee "st_model2" conviction_upper_threshold 20))
	(call_entity "howso" "set_conviction_lower_threshold" (assoc trainee "st_model2" conviction_lower_threshold 15))


	(call_entity "howso" "train" (assoc
		trainee "st_model2"
		features (list "label1" "label2" "action")
		input_cases (list  (list -4 456 34534))
		session "unnamed_session"
	))
	(assign (assoc result (call_entity "howso" "get_num_training_cases" (assoc trainee "st_model2"))))
	(print "Ignoring new case below conviction threshold: ")
	(call assert_same (assoc exp 4 obs (get result (list "payload" "count"))))

	(call exit_if_failures (assoc msg "Conviction lower threshold filters out low value"))

	; ~13 is between 10 and 15 therefore this case should be trained on
	(call_entity "howso" "set_auto_ablation_params" (assoc
		trainee "st_model2"
		minimum_model_size 1
		conviction_upper_threshold 15
		conviction_lower_threshold 10
	))
	(call_entity "howso" "train" (assoc
		trainee "st_model2"
		features (list "label1" "label2" "action")
		input_cases (list  (list -4 456 34534))
		session "unnamed_session"
	))
	(assign (assoc result (call_entity "howso" "get_num_training_cases" (assoc trainee "st_model2"))))
	(print "Training new case between conviction thresholds: ")
	(call assert_same (assoc exp 5 obs (get result (list "payload" "count"))))

	(call exit_if_failures (assoc msg "Trained case with conviction between thresholds"))


;VERIFY REMOVE CASE
	(call_entity "howso" "move_cases" (assoc
		trainee "st_model2"
		num_cases 1
		condition (assoc "label1" -4 "label2" 456 "action" 34534)
	))
	(assign (assoc result (call_entity "howso" "get_num_training_cases" (assoc trainee "st_model2"))))
	(print "Removal of previous case: ")
	(call assert_same (assoc exp 4 obs (get result (list "payload" "count"))))

	(call exit_if_failures (assoc msg "Removed a case"))

;VERIFY CONVICTION OF NEW CASE WITH WEIGHTS
	(declare (assoc
		int_params
			(get
				(call_entity "howso" "get_internal_parameters" (assoc trainee "st_model2"))
				(list "payload" "default_hyperparameter_map")
			)
	))

	;set weights
	(accum (assoc
		int_params
			(assoc
				"featureWeights" (assoc
					"label1" 10
					"label2" .02
					"action" .00000003
				)
			)
	))

	(call_entity "howso" "set_internal_parameters" (assoc
		trainee "st_model2"
		default_hyperparameter_map int_params
	))

	(assign (assoc
		conviction
			(call_entity "howso" "batch_react_group" (assoc
				trainee "st_model2"
				features (list "label1" "label2" "action")
				new_cases (list (list (list -4 456 34534)))
			))
	))

	(print "Updated conviction of the adding the same case again: ")
	(call assert_approximate (assoc obs (get conviction (list "payload" "familiarity_conviction_addition" 0))exp 4.17385 percent 0.01))

	(call exit_if_failures (assoc msg "Updated new case conviction with weights"))

	(call exit_if_failures (assoc msg unit_test_name))
)