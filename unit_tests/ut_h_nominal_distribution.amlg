(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_nominal_distribution.amlg"))

	(declare (assoc
		model_data
			(list
				(list "x" "y")
				(list "A" "B")
				(list "A" "B")
				(list "A" "B")
				(list "A" "B")
				(list "A" "A")
				(list "A" "A")
				(list "B" "B")
				(list "B" "B")
				(list "B" "B")
				(list "B" "B")
				(list "B" "A")
				(list "B" "A")
			)

	))
	(declare (assoc
		data (tail model_data)
		features (first model_data)
		aa 0 ;2
		ab 0 ;4
		ba 0 ;2
		bb 0 ;4
		n 3000
	))

	(call_entity "howso" "set_internal_parameters" (assoc
		hyperparameter_map (assoc ".targetless" (assoc "robust" (assoc ".none" (assoc "k" 2 "p" 2 "dt" -1))))
	))

	(call_entity "howso" "set_feature_attributes" (assoc
		features
			(assoc
				"x" (assoc "type" "nominal")
				"y" (assoc "type" "nominal")
			)
	))

	(call_entity "howso" "train" (assoc
		input_cases data
		features features
		session "session1"
	))


	(range (lambda
		(seq
			(assign (assoc
				output
					(get
						(call_entity "howso" "react" (assoc
							desired_conviction 3
							action_features features
						))
						(list "payload" "action_values")
					)
			))


			(if (= output (list "A" "B"))
				(accum (assoc ab 1))

				(= output (list "A" "A"))
				(accum (assoc aa 1))

				(= output (list "B" "B"))
				(accum (assoc bb 1))

				(= output (list "B" "A"))
				(accum (assoc ba 1))
			)

		 ))
		1 n 1
	)
	(print "counts:\naa " aa " " (/ aa n) "\nab " ab " " (/ ab n) "\nbb " bb " " (/ bb n) "\nba " ba " " (/ ba n) "\n")

	(print "AA: ")
	(call assert_approximate (assoc obs aa exp 500 percent .4))
	(print "AB: ")
	(call assert_approximate (assoc obs ab exp 1000 percent .33))
	(print "BA: ")
	(call assert_approximate (assoc obs ba exp 500 percent .4))
	(print "BB: ")
	(call assert_approximate (assoc obs bb exp 1000 percent .33))

	(call exit_if_failures (assoc msg unit_test_name ))
)


