(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_ablate_ts.amlg"))

	(declare (assoc
		;201 cases for training 20 batches of 20 and 1 batch of 1
		dataset (trunc (load "unit_test_data/example_timeseries.csv") 202)
		feature_attributes
			(append
				(load "unit_test_data/example_timeseries.features.json")
				;add feature attributes for the index column appended to the dataset
				{
					"index"
						{
							"type" "continuous"
							"data_type" "number"
							"decimal_places" 0
							"bounds" {"allow_null" (false)}
						}
				}
			)
	))
	(declare (assoc
		features (append (first dataset) "index")
		expected_warnings []
	))

	(null
		#train_and_ablate
		(let
			(assoc
				session "unit_test"
				trained_cases (null)
				ablated_indices []
				warnings []
				train_statuses []
			)

			;create a fresh trainee
			(destroy_entities "howso")
			(call (load "unit_test_howso.amlg") (assoc name "ut_h_ablate_ts.amlg" skip_init (true)) )

			(call_entity "howso" "set_feature_attributes" (assoc feature_attributes feature_attributes))

			(call_entity "howso" "set_auto_ablation_params" (assoc
				auto_ablation_enabled (true)
				min_num_cases 10
				batch_size 1
			))

			(call_entity "howso" "set_auto_analyze_params" (assoc
				auto_analyze_enabled (true)
				analyze_threshold 10
				analyze_growth_factor 1.5
			))

			;train the cases in batches of up to 20
			(range
				(lambda (let
					(assoc
						response
							(call_entity "howso" "train" (assoc
								session session
								features features
								cases
									;batch up to 20 (filter out nulls if batch exceeds remaining cases)
									(filter (unzip
										cases
										(range (current_index 2) (+ (current_index 2) 19))
									))
							))
					)
					(accum (assoc
						train_statuses (get response 0)
						warnings (or (get response [1 "warnings"]) [])
						ablated_indices
							(map
								;offset index by the batch position
								(lambda (+ (current_value) (current_index 2)))
								(get response [1 "payload" "ablated_indices"])
							)
					))

				))
				0 (size cases) 20
			)

			;verify all trains were successful
			(print "All train batches returned success status: ")
			(call assert_same (assoc
				obs (size (filter (lambda (= 0 (current_value))) train_statuses))
				exp 0
			))
			(call exit_if_failures (assoc msg "Trains completed succssfully"))

			(if (size expected_warnings)
				;match that at least one of the expected warnings is raised, and no others
				(seq
					(declare (assoc
						matched_warnings
							(filter
								(lambda (size
									;at least one of the expected warnings should be matched
									(filter
										(lambda (contains_value (current_value 1) (current_value)) )
										expected_warnings
									)
								))
								warnings
							)
					))
					(print "Expected warnings were raised: ")
					(call assert_true (assoc
						obs (> (size matched_warnings) 0)
					))
					(print "No unexpected warnigs were raised: ")
					(call assert_same (assoc
						obs (size matched_warnings)
						exp (size warnings)
					))
				)

				;else expect no warnings
				(seq
					(print "No warnings were raised: ")
					(call assert_same (assoc
						obs (size warnings)
						exp 0
					))
				)
			)
			(call exit_if_failures (assoc msg "Only expected warnings raised"))

			;retrieve the trained case index values
			(assign (assoc
				trained_cases
					(get
						(call_entity "howso" "get_cases" (assoc
							session session
							features ["ID" "date" "index" ".session_training_index" ".series_index" ".series_progress"]
						))
						[1 "payload" "cases"]
					)
				id_feature_index 0
				time_feature_index 1
				original_index 2
				session_train_index 3
				series_index 4
				series_progress_index 5
			))
			(declare (assoc
				original_indices (map (lambda (get (current_value) original_index)) trained_cases)
				session_training_indices (map (lambda (get (current_value) session_train_index)) trained_cases)
				series_indices (map (lambda (get (current_value) series_index)) trained_cases)
				id_feature_values (values (map (lambda (get (current_value) id_feature_index)) trained_cases) (true))
			))

			(print "All cases were trained: ")
			(call assert_same (assoc
				obs (+ (size trained_cases) (size ablated_indices))
				exp (size cases)
			))

			(print "Ablated indices do not contain nulls: ")
			(call assert_false (assoc
				obs (contains_value ablated_indices (null))
			))

			(print "Ablated indices are unique: ")
			(call assert_same (assoc
				obs (size (values abalted_indices (true)))
				exp (size abalted_indices)
			))

			(print "Session training indices match original indices: ")
			(call assert_same (assoc
				obs original_indices
				exp session_training_indices
			))

			(print "Session training indices do not contain nulls: ")
			(call assert_false (assoc
				obs (contains_value session_training_indices (null))
			))

			(print "Session training indices are unique: ")
			(call assert_same (assoc
				obs (size (values session_training_indices (true)))
				exp (size trained_cases)
			))

			(print "Ablated indices are not found in the session training indices: ")
			(call assert_same (assoc
				obs
					(size
						(filter
							(lambda (contains_value session_training_indices (current_value)))
							abalted_indices
						)
					)
				exp 0
			))

			(print "Series indices do not contain nulls: ")
			(call assert_false (assoc
				obs (contains_value series_indices (null))
			))

			;sort trained cases by the date column
			(assign (assoc
				trained_cases
					(sort
						(lambda (let
							(assoc
								a (current_value 1)
								b (current_value 2)
							)

							(if (~ 0 (get a time_feature_index))
								(- (get a time_feature_index) (get b time_feature_index) )
								(> (get a time_feature_index) (get b time_feature_index) )
							)
						))
						trained_cases
					)
			))

			;per series checks
			(map
				(lambda (let
					(assoc
						series_cases
							(filter
								(lambda (= (current_value 2) (get (current_value) id_feature_index)))
								trained_cases
							)
					)

					(print (concat "Series " (current_value) " indices are unique: "))
					(call assert_same (assoc
						obs
							(size (values
								(map (lambda (get (current_value) series_index)) series_cases)
								(true)
							))
						exp (size series_cases)
					))

					(print (concat "Series " (current_value) " indices are in order: "))
					(call assert_same (assoc
						obs
							(size (filter
								(lambda
									(if (!= 0 (current_index))
										;match when previous value is >= the current value
										(>=
											(get series_cases [(- (current_index 1) 1) series_index])
											(get (current_value) series_index)
										)
									)
								)
								series_cases
							))
						;if cases are in order, there should be none returned by the filter
						exp 0
					))

					(print (concat "Series " (current_value) " progress are in order: "))
					(call assert_same (assoc
						obs
							(size (filter
								(lambda
									(if (!= 0 (current_index))
										;match when previous value is >= the current value
										(>=
											(get series_cases [(- (current_index 1) 1) series_progress_index])
											(get (current_value) series_progress_index)
										)
									)
								)
								series_cases
							))
						;if cases are in order, there should be none returned by the filter
						exp 0
					))
				))
				id_feature_values
			)

			(call exit_if_failures (assoc msg "Train with time series ablation"))
		)
	)

	(print "Test sequential time series ablation\n")
	(call train_and_ablate (assoc
		cases
			(map
				;map in the expected session training index
				(lambda (append (current_value) (current_index)) )
				(tail dataset)
			)
	))

	(print "Test sequential but mixed time series ablation\n")
	(call train_and_ablate (assoc
		cases
			(map
				;map in the expected session training index
				(lambda (append (current_value) (current_index)) )
				;mixed indices such that each series is still sequential but most train batches include both series
				(unzip
					(tail dataset)
					[
						0 1 2 3 4 5 6 7 8 9 10 116 117 118 119 120 121 122 123 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
						26 27 28 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 29 30 31 32 33 34 35 36 37 38 39
						40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 139 140 141 142 143 144 145 146 147
						148 149 150 151 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 152 153 154 155 156 157
						158 159 160 161 162 163 164 165 166 167 82 83 84 85 86 87 88 89 90 91 168 169 170 171 172 92 93 94
						95 96 97 173 174 175 176 177 178 179 180 181 182 183 98 99 100 101 102 103 104 105 106 107 108 109
						110 111 112 113 114 115 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200
					]
				)
			)
	))

	(print "Test out of order time series ablation\n")
	(call train_and_ablate (assoc
		;sort the cases randomly so they are out of order
		cases
			(map
				;map in the expected session training index
				(lambda (append (current_value) (current_index)) )
				(sort (lambda (- (rand) (rand))) (tail dataset))
			)
		expected_warnings ["Training time series cases out of sequence with ablation enabled.*"]
	))

	(call exit_if_failures (assoc msg unit_test_name) )
)