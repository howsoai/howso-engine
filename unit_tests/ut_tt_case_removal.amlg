(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call init_unit_test (assoc name "ut_tt_case_removal.amlg"))

	;load a trainee, call the model "model4"
	(print "loaded model: " (load_entity "../trainee_template.amlg" "model4" (false) (false)) "\n")
	(call_entity "model4" "Initialize")
	(assign_to_entities "model4" (assoc
		defaultHyperparameters (assoc "k" 2 "p" 0.4 "dt" -1)
	))

	(declare (assoc
		training_data
			(list
				(list 1 5 1 1 1)
				(list 2 1 1 2 2)
				(list 3 -30000 1 3 3)
				(list 3.1 2000 1 3 3)
				(list 1 2 1 3 3)
				(list 1 5 2 1 1)
				(list 1 5 3 1 1)
			)
		context_features (list "A" "B" "C")
		action_features (list "D" "E")
	))

	;train
	(map (lambda
		(call_entity "model4" "Train" (assoc
			features (append context_features action_features)
			input_cases (list (current_value 2))
			session "my_session"
		))
		 )
		training_data
	)

	;increase case count on select cases
	(call_entity "model4" "ReactDiscriminative" (assoc
		action_features action_features
		context_features context_features
		context_values (list 2 2 1)
		case_access_count_label "access_count"
	))
	(call_entity "model4" "ReactDiscriminative" (assoc
		action_features action_features
		context_features context_features
		context_values (list 1 5 3)
		case_access_count_label "access_count"
	))

	(call_entity "model4" "ReactDiscriminative" (assoc
		action_features action_features
		context_features context_features
		context_values (list 2.5 -20000 2)
		case_access_count_label "access_count"
	))

	(assign_to_entities "model4" (assoc
		closestN 5
		lpSpaceParameter .4
	))

;VERIFY CASE REMOVAL
	(call_entity "model4" "RemoveLeastInformativeTrainingCases" (assoc
		features (list "A" "B" "C" "D" "E")
		num_cases_to_remove 1
	))

	(call_entity "model4" "remove_invalid_and_unreferenced_replay_steps")

	(assign (assoc cases_left (call_entity "model4" "AllCases")))
	(print "Model size after removal: ")
	(call assert_same (assoc
		exp 6
		obs (size cases_left)
	))

	(call exit_if_failures (assoc msg "Least informative case removal"))


;VERIFY LEAST USED CASES
	(call_entity "model4" "RemoveLeastUsedTrainingCases" (assoc
		case_access_count_label "access_count"
		num_cases_to_remove 1
	))

	(assign (assoc c_a_r (call_entity "model4" "GetNumTrainingCases")))
	(print "Model size after remove least used: ")
	;verify 1 case was removed
	(call assert_same (assoc exp 5 obs c_a_r))

	(call exit_if_failures (assoc msg "Least used cases removal"))


;VERIFY RETRIEVE CASE VALUES FOR A FEATURE
	(print "Retrieve case values for a feature: ")
	(assign (assoc result
			(values (call_entity "model4" "RetrieveCaseValues" (assoc feature "A")))
	))
	(call assert_same (assoc
		exp (list 1 3 1 1 2)
		unordered 1
		obs result
	))

	(call exit_if_failures (assoc msg "Retrieve case values for feature"))

;VERIFY REMOVE SOME CASE VALUES FOR A FEATURE
	(print "Remove a feature for one case: ")

	;find total number where E isn't 3
	(declare (assoc
		num_E_not_3 (compute_on_contained_entities "model4" (list
						(query_not_equals "E" 3)
						(query_count)
					))
	))

	(call_entity "model4" "RemoveFeature" (assoc feature "A" condition (assoc "E" 3)))

	;see if any entities have label A
	(assign (assoc result
			(contained_entities "model4" (list
				(query_exists "A")
			))
	))

	;make sure the correct number of cases were removed
	(call assert_same (assoc
		exp num_E_not_3
		obs (size result)
	))


;VERIFY REMOVE ALL CASE VALUES FOR A FEATURE
	(print "Remove a feature for all cases: ")
	(call_entity "model4" "RemoveFeature" (assoc feature "A"))

	;see if any entities have label A
	(assign (assoc result
			(contained_entities "model4" (list
				(query_exists "A")
			))
	))

	(call assert_same (assoc
		exp (list)
		obs result
	))

	(call exit_if_failures (assoc msg "Remove all case values for a feature"))

	(call exit_if_failures (assoc msg unit_test_name))
)
