;basic tests of scale.amlg / compute_train_payload / process_train_payload
(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_scale.amlg"))

    (call_entity "howso" "set_feature_attributes" (assoc
        feature_attributes (assoc
            "x" (assoc "type" "continuous")
            "y" (assoc "type" "continuous")
        )
    ))

    (print "process_train_payload requires auto-ablation to be on: ")
    (call assert_same (assoc
        obs (call_entity "howso" "process_train_payload" (assoc))
        exp (list 0 (assoc
            detail "`process_train_payload` should only be used on a Trainee that has auto-ablation enabled."
        ))
    ))
    (call exit_if_failures (assoc msg "Precondition checking."))

    (call_entity "howso" "set_auto_ablation_params" (assoc
        auto_ablation_enabled (true)
    ))

    (print "compute_train_payload: ")
    (declare (assoc
        train_payload
            (call_entity "howso" "compute_train_payload" (assoc
                cases (list (list 1 1) (list 2 4))
                features (list "x" "y")
                session "unit_test"
            ))
    ))
    (call assert_same (assoc obs (first train_payload) exp 1))

    (print "process_train_payload: ")
    (call assert_same (assoc
        obs (call_entity "howso" "process_train_payload" (get train_payload (list 1 "payload")))
        exp
            (list
                1
                (assoc payload (assoc num_trained 2 status (null)))
            )
    ))

    (print "get_cases to verify: ")
    (call assert_same (assoc
        obs (call_entity "howso" "get_cases" (assoc features (list "x" "y" ".case_weight")))
        exp (list 1 (assoc
                payload (assoc
                    features (list "x" "y" ".case_weight")
                    cases (list (list 1 1 1) (list 2 4 1))
                )
            ))
    ))
    (call exit_if_failures (assoc msg "Split training path."))

    (print "process_train_payload with nonexistent weight entity: ")
    (call assert_same (assoc
        obs (call_entity "howso" "process_train_payload" (assoc
            weight_accumulation_maps (list
                (assoc "_invalid_entity_id_" 1)
            )
            session "unit_test"
        ))
        exp (list 0 (assoc
            "detail" "Missing related training case"
            "code" "conflict"
        ))
    ))

    (print "process_train_payload with nonexistent edit case entity: ")
    (call assert_same (assoc
        obs (call_entity "howso" "process_train_payload" (assoc
            case_edit_map (assoc
                "_invalid_entity_id_" (assoc x 3 y 9)
            )
            session "unit_test"
        ))
        exp (list 0 (assoc
            "detail" "Missing related training case"
            "code" "conflict"
        ))
    ))
    (call exit_if_failures (assoc msg "Nonexistent entities in train payload."))

    (call exit_if_failures (assoc msg unit_test_name))
)
