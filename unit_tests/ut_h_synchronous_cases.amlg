(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_synchronous_cases.amlg" debug (false) retries 1))

	(declare (assoc
		;This dataset contains series with timesteps that have the same time value within the same series.
		;These synchronous cases are predictable, we want these cases to not break the series functionality
		;and also be synthesized properly.
		data (tail (load "unit_test_data/synchronous_events.csv"))
		features (list "store" "time" "day_of_week" "value")
		result (null)
		result_features (null)
	))

	(call_entity "howso" "set_feature_attributes" (assoc
		feature_attributes
			(assoc
				"store"
					(assoc
						"type" "nominal"
						"id_feature" (true)
					)

				"time"
					(assoc
						"type" "continuous"
						"decimal_places" 0
						"time_series" (assoc "time_feature" (true) "type" "delta" "universal" (false))
						"bounds"
							(assoc
								"allow_null" (false)
								"min" 1
								"max" 30
							)
					)
				"day_of_week"
					(assoc
						"type" "nominal"
						"time_series" (assoc "num_lags" 2)
					)
				"value"
					(assoc
						"type" "continuous"
						"decimal_places" 0
						"time_series" (assoc "type" "rate" "num_lags" 2)
						"bounds"
							(assoc
								"allow_null" (false)
								"min" 80
								"max" 125
							)
					)
			)
	))


	(call_entity "howso" "train" (assoc
		cases data
		features features
		session "session"
	))
	(call_entity "howso" "analyze")

	(assign (assoc
		result
			(call_entity "howso" "react_series" (assoc
				desired_conviction (null)
				action_features ["store" "day_of_week" "time" "value"]
				continue_series (true)
				series_context_features ["store" "day_of_week" "time" "value"]
				series_context_values
					[[
						["Z" "friday" 3 100]
						["Z" "monday" 6 100]
					]]
				output_new_series_ids (false)
			))
	))
	(call keep_result_payload)

	(declare (assoc
		generated_series (get result ["action_values" 0] )
	))
	(print generated_series)

	(print "The 3rd and 4th row of the forecast should be \"thursday\": ")
	(call assert_true (assoc
		obs (= "thursday" (get generated_series [2 1]) (get generated_series [3 1]))
	))

	(print "These rows should also have the same rounded time values: ")
	(call assert_true (assoc
		obs (= (get generated_series [2 2]) (get generated_series [3 2]))
	))

	(call exit_if_failures (assoc msg unit_test_name))
)