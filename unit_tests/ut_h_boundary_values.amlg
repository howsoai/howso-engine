(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_boundary_cases.amlg"))

	(call_entity "howso" "set_feature_attributes" (assoc
		feature_attributes
			(assoc
				"ord_string" (assoc "type" "ordinal" "bounds" (assoc "allowed" (list "low" "high")))
				"ord" (assoc "type" "ordinal" "data_type" "number")
				"nom" (assoc "type" "nominal")
			)
	))

	(declare (assoc
		result (null)
		features (list "f1" "f2" "ord" "ord_string" "nom")
		data
			;the concept is that the data has a clear boundary across the middle here
			(list
				;"f1"	"f2"	"ord"	"ord_string" "nom"
				[5		10 		2		"low"			"A"] ;section 1 starts here
				[6		9 		3		"low"			"B"]
				[7		8 		2		"low"			"C"]
				[8		7 		3		"low"			"A"]
				[9		6 		2		"low"			"B"]
				[10		5 		3		"low"			"C"]
				[11		21 		6		"high"			"D"] ;section 2 starts here
				[12		22 		7		"high"			"E"]
				[13		23 		6		"high"			"F"]
				[14		24 		7		"high"			"D"]
				[15		25 		6		"high"			"E"]
				[16		26 		7		"high"			"F"]
				[17		27 		6		"high"			"D"]
				[18		28 		7		"high"			"E"]
			)
	))

	(call_entity "howso" "train" (assoc
		cases data
		features features
		session "session"
	))

	(call_entity "howso" "analyze" (assoc
		k_values [3]
		p_values [0.1]
		use_deviations (false)
	))

	;use f1 to predict f2
	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				context_features ["f1"]
				context_values [[13]]
				action_features ["f2"]
				details
					{
						"boundary_value_context_features" ["f1"]
						"boundary_value_action_outcome"
							{
								;at what boundary value does f2 start to be predicted between 0-10?
								"f2" [0 10]
							}
					}
			))
	))
	(call keep_result_payload)

	(print "Continuous context to continuous action, known boundary: \n")
	(print "Lesser Bound: ")
	(call assert_approximate (assoc
		exp 9.5
		obs (get result ["boundary_values" 0 "f1" 0])
		thresh 1.0
	))

	(print "Greater Bound: ")
	(call assert_null (assoc
		obs (get result ["boundary_values" 0 "f1" 1])
	))


	;use ord to predict ord_string
	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				context_features ["ord"]
				context_values [[7]]
				action_features ["nom"]
				details
					{
						"boundary_value_context_features" ["ord"]
						"boundary_value_action_outcome"
							{
								;at what boundary value does f2 start to be predicted as "low"?
								"nom" ["A" "B" "C"]
							}
					}
			))
	))
	(call keep_result_payload)

	(print "Numeric ordinal context to nominal action, known boundary: \n")
	(print "Lesser Bound: ")
	(call assert_approximate (assoc
		exp 4
		obs (get result ["boundary_values" 0 "ord" 0])
		thresh 1.0
	))

	(print "Greater Bound: ")
	(call assert_null (assoc
		obs (get result ["boundary_values" 0 "ord" 1])
	))



	(- 22.1)
)