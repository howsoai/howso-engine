(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_boundary_cases.amlg"))

	(call_entity "howso" "set_feature_attributes" (assoc
		feature_attributes
			(assoc
				"ord_string" (assoc "type" "ordinal" "bounds" (assoc "allowed" (list "low" "high1" "high2")))
				"ord" (assoc "type" "ordinal" "data_type" "number")
				"nom" (assoc "type" "nominal")
			)
	))

	(declare (assoc
		result (null)
		features (list "f1" "f2" "ord" "ord_string" "nom")
		data
			;the concept is that the data has a clear boundary across the middle here
			(list
				;"f1"	"f2"	"ord"	"ord_string" "nom"
				[5		10 		2		"low"			"A"] ;section 1 starts here
				[6		9 		3		"low"			"B"]
				[7		8 		2		"low"			"C"]
				[8		7 		3		"low"			"A"]
				[9		6 		2		"low"			"B"]
				[10		5 		3		"low"			"C"]
				[11		21 		6		"high1"			"D"] ;section 2 starts here
				[12		22 		7		"high2"			"E"]
				[13		23 		6		"high1"			"F"]
				[14		24 		7		"high2"			"D"]
				[15		25 		6		"high1"			"E"]
				[16		26 		7		"high2"			"F"]
				[17		27 		6		"high1"			"D"]
				[18		28 		7		"high2"			"E"]
			)
	))

	(call_entity "howso" "train" (assoc
		cases data
		features features
		session "session"
	))

	(call_entity "howso" "analyze" (assoc
		k_values [3]
		p_values [0.1]
		use_deviations (false)
	))

	;use f1 to predict f2
	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				context_features ["f1"]
				context_values [[13]]
				action_features ["f2"]
				details
					{
						"boundary_value_context_features" ["f1"]
						"boundary_value_action_outcome"
							{
								;at what boundary value does f2 start to be predicted between 0-10?
								"f2" [0 10]
							}
					}
			))
	))
	(call keep_result_payload)

	(print "Continuous context to continuous action, known boundary: \n")
	;This should be just below 10 because that's when the influential cases should all start
	;to belong to the other side
	(print "Lesser Bound: ")
	(call assert_approximate (assoc
		exp 9.5
		obs (get result ["boundary_values" 0 "f1" 0])
		thresh 1.0
	))

	(print "Greater Bound: ")
	;No value greater than 13 will bring down the value of f2 to below 10
	(call assert_null (assoc
		obs (get result ["boundary_values" 0 "f1" 1])
	))

	;use ord to predict ord_string
	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				context_features ["ord"]
				context_values [[7]]
				action_features ["nom"]
				details
					{
						"boundary_value_context_features" ["ord"]
						"boundary_value_action_outcome"
							{
								;at what boundary value does nom start to be predicted as A, B, or C?
								"nom" ["A" "B" "C"]
							}
					}
			))
	))
	(call keep_result_payload)

	(print "Numeric ordinal context to nominal action, known boundary: \n")
	;ordinals 2/3 will have the desired nominal classes, so I expect a boundary of 4
	(print "Lesser Bound: ")
	(call assert_approximate (assoc
		exp 4
		obs (get result ["boundary_values" 0 "ord" 0])
		thresh 0.5
	))

	(print "Greater Bound: ")
	;There are no ordinal values above 7
	(call assert_null (assoc
		obs (get result ["boundary_values" 0 "ord" 1])
	))

	;using nom to predict f2, known boundary
	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				context_features ["ord_string"]
				context_values [["high1"]]
				action_features ["f2"]
				details
					{
						"boundary_value_context_features" ["ord_string"]
						"boundary_value_action_outcome"
							{
								;at what boundary value does f2 start to be predicted 0-10?
								"f2" [0 10]
							}
					}
			))
	))
	(call keep_result_payload)

	(print "ordinal string context to continuous action, known boundary: \n")
	;ord_string "low", will have all the f2 values 10 and below
	(print "Lesser Bound: ")
	(call assert_same (assoc
		exp "low"
		obs (get result ["boundary_values" 0 "ord_string" 0])
	))

	(print "Greater Bound: ")
	;"high2" will not cross the boundary, so null
	(call assert_null (assoc
		obs (get result ["boundary_values" 0 "ord" 1])
	))

	;using nom to predict f2 and ord, unknown boundary
	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				context_features ["nom"]
				context_values [["B"]]
				action_features ["f2" "ord"]
				details
					{
						"boundary_value_context_features" ["nom"]
					}
			))
	))
	(call keep_result_payload)

	(print "Nominal context to predict 2 action features, unknown boundary: ")
	;"A" and "C" should return fairly similar predictions while any of D, E, and F, cross the data boundary
	(call assert_true (assoc
		obs (contains_value ["D" "E" "F"] (get result ["boundary_values" 0 "nom"]))
	))


	;using f1 to predict f2, unknown boundary
	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				context_features ["f1"]
				context_values [[6]]
				action_features ["f2"]
				details
					{
						"boundary_value_context_features" ["f1"]
					}
			))
	))
	(call keep_result_payload)

	(print "continuous context to continuous action, unknown boundary: \n")
	(print "Lesser Bound: ")
	;the value is too close to the lower bound, so null
	(call assert_null (assoc
		obs (get result ["boundary_values" 0 "f1" 0])
	))

	(print "Greater Bound: ")
	(call assert_approximate (assoc
		exp 10
		obs (get result ["boundary_values" 0 "f1" 1])
		thresh 3
	))

	(call exit_if_failures (assoc msg unit_test_name))
)