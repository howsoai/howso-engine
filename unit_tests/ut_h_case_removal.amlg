(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_case_removal.amlg"))

	(call_entity "howso" "set_internal_parameters" (assoc
		default_hyperparameter_map (assoc "k" 2 "p" 0.4 "dt" -1)
	))

	(declare (assoc
		training_data
			(list
				(list 1 5 1 1 1)
				(list 2 1 1 2 2)
				(list 3 -30000 1 3 3)
				(list 3.1 2000 1 3 3)
				(list 1 2 1 3 3)
				(list 1 5 2 1 1)
				(list 1 5 3 1 1)
			)
		context_features (list "A" "B" "C")
		action_features (list "D" "E")
	))

	;train
	(map
		(lambda
			(call_entity "howso" "train" (assoc
				features (append context_features action_features)
				input_cases (list (current_value 2))
				session "my_session"
			))
		)
		training_data
	)

;VERIFY CASE REMOVAL

;VERIFY REMOVE SOME CASE VALUES FOR A FEATURE
	(print "Remove a feature for one case: ")

	;find total number where E isn't 3
	(declare (assoc
		num_E_not_3
			(compute_on_contained_entities "howso" (list
				(query_not_equals "E" 3)
				(query_count)
			))
	))

	(call_entity "howso" "remove_feature" (assoc feature "A" condition (assoc "E" 3)))

	;see if any entities have label A
	(assign (assoc
		result
			(contained_entities "howso" (list
				(query_exists "A")
			))
	))

	;make sure the correct number of cases were removed
	(call assert_same (assoc
		exp num_E_not_3
		obs (size result)
	))


;VERIFY REMOVE ALL CASE VALUES FOR A FEATURE
	(print "Remove a feature for all cases: ")
	(call_entity "howso" "remove_feature" (assoc feature "A"))

	;see if any entities have label A
	(assign (assoc
		result
			(contained_entities "howso" (list
				(query_exists "A")
			))
	))

	(call assert_same (assoc
		exp (list)
		obs result
	))

	(call exit_if_failures (assoc msg "Remove all case values for a feature"))

	(call exit_if_failures (assoc msg unit_test_name))
)
