(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_time_series_gravity.amlg" debug .false retries 0))

	(declare (assoc
		csv_data (load "unit_test_data/gravity.csv")
	))

	(declare (assoc
		data (tail csv_data)
		features (first csv_data)
		result (null)
		result_features (null)
	))

	(call_entity "howso" "set_feature_attributes" (assoc
		feature_attributes
			(assoc
				"id"
					(assoc
						"type" "nominal"
						"id_feature" .true
					)
				"time"
					(assoc
						"type" "continuous"
						"time_series" (assoc "time_feature" .true "type" "delta" "universal" .false)
						"bounds"
							(assoc
								"allow_null" .false
								"min" 0
								"max" 5
							)
					)
				"y"
					(assoc
						"type" "continuous"
						"time_series" (assoc "type" "covariate" "num_lags" 2)
						"bounds"
							(assoc
								"allow_null" .false
								"min" -1
								"max" 50
							)
					)
				"height_nom"
					(assoc
						"type" "nominal"
						"time_series" (assoc num_lags 1)
					)
			)
	))

	(call_entity "howso" "train" (assoc
		cases data
		features features
		session "session"
	))
	(call_entity "howso" "analyze")

	(assign (assoc
		result
			(call_entity "howso" "react_series" (assoc
				desired_conviction 10
				action_features ["id" "time" "y" "height_nom"]
				num_series_to_generate 5
			))
	))
	(call keep_result_payload)
	(declare (assoc
		first_and_last_rows
			(apply "append" (map
				(lambda
					(unzip (current_value) [0 -1])
				)
				(get result "action_values")
			))

		all_generated_timesteps (apply "append" (get result "action_values"))
	))

	(print "All beginning and end rows should be \"low\":\n")
	(call assert_true (assoc
		obs
			(apply "=" (append
				["low"]
				(map (lambda (last (current_value))) first_and_last_rows)
			))
	))

	(print "All rows should have y values defined properly:\n")
	(call assert_true (assoc
		obs
			(not (contains_value
				(map (lambda (get (current_value) 2)) all_generated_timesteps)
				(null)
			))
	))

	(print "All timesteps with y > 35 should be \"high\":\n")
	(call assert_true (assoc
		obs
			(apply "=" (append
				["high"]
				;the height_nom value of each of these timesteps
				(map
					(lambda (last (current_value)))
					;all timesteps y > 35
					(filter (lambda (< 35 (get (current_value) 2)) ) all_generated_timesteps)
				)
			))
	))


	(call exit_if_failures (assoc msg unit_test_name))
)