(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_goal_features_agg.amlg" retries 1))

	(declare (assoc
		model_data (load "unit_test_data/fake_housing.csv")
	))
	;This dataset is a toy dataset describing residential real estate and whether each
	;house sold. Houses that have "upper" = "yes" represent higher-class houses and
	;they are sold if they have enough country clubs near them or a wine cellar.
	;In contrast, houses with "upper" = "no" do not depend on those features at
	;all for whether they sell, they depend on public transportation and grocery
	;stores.
	;
	;The motivation here is that when goal features are specified in react_aggregate,
	;to evaluate what features are important to sell a house while maximizing price,
	;the engine accurately reports that wine cellars and country clubs are more important.
	;Conversely, when the goal features are not specified, we should see these features be
	;not nearly as important (there are far less "upper"="yes" homes than not).
	(declare (assoc
		data (tail model_data)
		features (first model_data)
	))

	(call_entity "howso" "set_feature_attributes" (assoc
		feature_attributes
			(assoc
				"city" (assoc "type" "nominal")
				"sold" (assoc "type" "nominal")
				"public_transportation" (assoc "type" "nominal")
				"wine_cellar" (assoc "type" "nominal")
				"upper" (assoc "type" "nominal")
			)
	))

	(call_entity "howso" "train" (assoc
		cases data
		features features
		session "session1"
	))

	(call_entity "howso" "analyze")

	(declare (assoc
		ungoaled_results
			(get
				(call_entity "howso" "react_aggregate" (assoc
					feature_influences_action_feature "sold"
					context_features ["city" "price" "country_clubs" "grocery_stores" "public_transportation" "wine_cellar"]
					details {
						"feature_robust_accuracy_contributions" (true)
					}
					num_robust_accuracy_contributions_samples 3000
				))
				[1 "payload" "feature_robust_accuracy_contributions" "sold"]
			)
	))

	(declare (assoc
		goaled_results
			(get
				(call_entity "howso" "react_aggregate" (assoc
					feature_influences_action_feature "sold"
					context_features ["city" "price" "country_clubs" "grocery_stores" "public_transportation" "wine_cellar"]
					details {
						"feature_robust_accuracy_contributions" (true)
					}
					num_robust_accuracy_contributions_samples 3000
					goal_features_map {"price" {"goal" "max"}}
					goal_dependent_features ["city"]
				))
				[1 "payload" "feature_robust_accuracy_contributions" "sold"]
			)
	))

	(print
		"Goaled: " (get goaled_results "country_clubs") "\n"
		"UnGoaled: " (get ungoaled_results "country_clubs") "\n"
	)

	(print "Goaled RAC is larger: ")
	(call assert_true (assoc
		obs (> (get goaled_results "country_clubs") (* 1.6 (get ungoaled_results "country_clubs")) )
	))

	(call exit_if_failures (assoc msg "Aggregate with goal features."))

	(call exit_if_failures (assoc msg unit_test_name))
)