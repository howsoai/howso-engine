(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_post_process.amlg"))


	(declare (assoc
		;set to true to see full output
		verbose (false)
		;set to null to do full model
	    data (load "unit_test_data/iris.csv")

		num_tries 0
		max_tries 2

		obs (false)
		generated (null)
		digits_list (null)
	))

	(declare (assoc
		features (first data)
		training_data (tail data)
		start (system_time)
	))

	(while (and (< num_tries max_tries) (not obs))
		(call_entity "howso" "set_feature_attributes" (assoc
			features
				(assoc
					"petal_length" (assoc "type" "continuous" "bounds" (assoc max 10.0) "post_process" "(+ #petal_length 0 40.0)")
					"sepal_length" (assoc "type" "continuous")
					"sepal_width" (assoc "type" "continuous")
					"petal_width"
						(assoc
							"type" "continuous"
							; Assigning a post_process that stores digits 1,3,2,0 in base 4 between digits 2 and 5 (indexed from most significant digit)
							; into the value of petal_width after synth.
							"post_process" "(set_digits #petal_width 0 4 (list 1 3 2 0) 2 5 (false))"
							"decimal_places" 8
						)
					"target"
						(assoc
							"type" "nominal"
							"post_process" "(while (true) (% 5 2))"
						)
				)
		))

		(call_entity "howso" "train" (assoc
			features features
			input_cases training_data
		))

		(assign (assoc
			generated
				(call_entity "howso" "batch_react" (assoc
					desired_conviction 1
					action_features (list "petal_length" "petal_width" "sepal_length" "sepal_width" "target")
					num_cases_to_generate 50
				))
		))

		;petal_length values should get bounded
		(call assert_true (assoc
			obs (apply "and" (map (lambda (= 10.0 (get (current_value) 0)) ) (get generated [1 "payload" "action_values"])))
		))

		(assign (assoc
			target_list
				(map
					(lambda (let
						(assoc
							case_values (current_value 1)
						)
						; Extracting digits between digits 2 and 5 in base-4 (indexed from most significant digit)
						(get case_values 4)
					))
					(get generated (list 1 "payload" "action_values"))
				)
		))

		; infinite looping post process should cancel early and return (null) every time
		(call assert_true (assoc
			obs (apply "=" (append target_list (null)))
		))

		(assign (assoc
			digits_list
				(map
					(lambda (let
						(assoc
							case_values (current_value 1)
						)
						; Extracting digits between digits 2 and 5 in base-4 (indexed from most significant digit)
						(get_digits (get case_values 1) 4 2 5 (false))
					))
					(get generated (list 1 "payload" "action_values"))
				)
		))

		(assign (assoc
			obs (apply "=" (append digits_list (list (list 1 3 2 0)) ))
		))

		(accum (assoc
			num_tries 1
		))
	)

	(print "Number of tries: " num_tries "\n")
	(print "Checking digits:\n")
	(call assert_true (assoc
		; Checking that the extracted digits match 1,3,2,0 which were the digits originally specified in the post_process attribute
		obs (apply "=" (append digits_list (list (list 1 3 2 0)) ))
	))

	(if (> num_failed_asserts 0)
		(print (get generated (list 1 "payload" "action_values")) " " digits_list)
	)

	(call exit_if_failures (assoc msg unit_test_name))
)
