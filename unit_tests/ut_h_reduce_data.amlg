(seq
    #unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
    (call (load "unit_test_howso.amlg") (assoc name "ut_h_reduce_data.amlg" do_return_validation (false)))

    (declare (assoc
        training_data
			(list
				(list 6.4 2.8 5.6 2.2 "virginica")
				(list 5.0 2.3 3.3 1.0 "versicolor")
				(list 4.9 2.5 4.5 1.7 "virginica")
				(list 4.9 3.1 1.5 0.1 "setosa")
				(list 5.7 3.8 1.7 0.3 "setosa")
				(list 4.4 3.2 1.3 0.2 "setosa")
				(list 5.4 3.4 1.5 0.4 "setosa")
				(list 6.9 3.1 5.1 2.3 "virginica")
				(list 6.7 3.1 4.4 1.4 "versicolor")
				(list 5.1 3.7 1.5 0.4 "setosa")
				(list 5.2 2.7 3.9 1.4 "versicolor")
				(list 6.9 3.1 4.9 1.5 "versicolor")
				(list 5.8 4.0 1.2 0.2 "setosa")
				(list 5.4 3.9 1.7 0.4 "setosa")
				(list 7.7 3.8 6.7 2.2 "virginica")
				(list 6.3 3.3 4.7 1.6 "versicolor")
				(list 6.8 3.2 5.9 2.3 "virginica")
				(list 7.6 3.0 6.6 2.1 "virginica")
				(list 6.4 3.2 5.3 2.3 "virginica")
				(list 5.7 4.4 1.5 0.4 "setosa")
				(list 6.7 3.3 5.7 2.1 "virginica")
				(list 6.4 2.8 5.6 2.1 "virginica")
				(list 5.4 3.9 1.3 0.4 "setosa")
				(list 6.1 2.6 5.6 1.4 "virginica")
				(list 7.2 3.0 5.8 1.6 "virginica")
				(list 5.2 3.5 1.5 0.2 "setosa")
				(list 5.8 2.6 4.0 1.2 "versicolor")
				(list 5.9 3.0 5.1 1.8 "virginica")
				(list 5.4 3.0 4.5 1.5 "versicolor")
				(list 6.7 3.0 5.0 1.7 "versicolor")
				(list 6.3 2.3 4.4 1.3 "versicolor")
				(list 5.1 2.5 3.0 1.1 "versicolor")
				(list 6.4 3.2 4.5 1.5 "versicolor")
				(list 6.8 3.0 5.5 2.1 "virginica")
				(list 6.2 2.8 4.8 1.8 "virginica")
				(list 6.9 3.2 5.7 2.3 "virginica")
				(list 6.5 3.2 5.1 2.0 "virginica")
				(list 5.8 2.8 5.1 2.4 "virginica")
				(list 5.1 3.8 1.5 0.3 "setosa")
				(list 4.8 3.0 1.4 0.3 "setosa")
				(list 7.9 3.8 6.4 2.0 "virginica")
				(list 5.8 2.7 5.1 1.9 "virginica")
				(list 6.7 3.0 5.2 2.3 "virginica")
				(list 5.1 3.8 1.9 0.4 "setosa")
				(list 4.7 3.2 1.6 0.2 "setosa")
				(list 6.0 2.2 5.0 1.5 "virginica")
				(list 4.8 3.4 1.6 0.2 "setosa")
				(list 7.7 2.6 6.9 2.3 "virginica")
				(list 4.6 3.6 1.0 0.2 "setosa")
				(list 7.2 3.2 6.0 1.8 "virginica")
				(list 5.0 3.3 1.4 0.2 "setosa")
				(list 6.6 3.0 4.4 1.4 "versicolor")
				(list 6.1 2.8 4.0 1.3 "versicolor")
				(list 5.0 3.2 1.2 0.2 "setosa")
				(list 7.0 3.2 4.7 1.4 "versicolor")
				(list 6.0 3.0 4.8 1.8 "virginica")
				(list 7.4 2.8 6.1 1.9 "virginica")
				(list 5.8 2.7 5.1 1.9 "virginica")
				(list 6.2 3.4 5.4 2.3 "virginica")
				(list 5.0 2.0 3.5 1.0 "versicolor")
				(list 5.6 2.5 3.9 1.1 "versicolor")
				(list 6.7 3.1 5.6 2.4 "virginica")
				(list 6.3 2.5 5.0 1.9 "virginica")
				(list 6.4 3.1 5.5 1.8 "virginica")
				(list 6.2 2.2 4.5 1.5 "versicolor")
				(list 7.3 2.9 6.3 1.8 "virginica")
				(list 4.4 3.0 1.3 0.2 "setosa")
				(list 7.2 3.6 6.1 2.5 "virginica")
				(list 6.5 3.0 5.5 1.8 "virginica")
				(list 5.0 3.4 1.5 0.2 "setosa")
				(list 4.7 3.2 1.3 0.2 "setosa")
				(list 6.6 2.9 4.6 1.3 "versicolor")
				(list 5.5 3.5 1.3 0.2 "setosa")
				(list 7.7 3.0 6.1 2.3 "virginica")
				(list 6.1 3.0 4.9 1.8 "virginica")
				(list 4.9 3.1 1.5 0.1 "setosa")
				(list 5.5 2.4 3.8 1.1 "versicolor")
				(list 5.7 2.9 4.2 1.3 "versicolor")
				(list 6.0 2.9 4.5 1.5 "versicolor")
				(list 6.4 2.7 5.3 1.9 "virginica")
				(list 5.4 3.7 1.5 0.2 "setosa")
				(list 6.1 2.9 4.7 1.4 "versicolor")
				(list 6.5 2.8 4.6 1.5 "versicolor")
				(list 5.6 2.7 4.2 1.3 "versicolor")
				(list 6.3 3.4 5.6 2.4 "virginica")
				(list 4.9 3.1 1.5 0.1 "setosa")
				(list 6.8 2.8 4.8 1.4 "versicolor")
				(list 5.7 2.8 4.5 1.3 "versicolor")
				(list 6.0 2.7 5.1 1.6 "versicolor")
				(list 5.0 3.5 1.3 0.3 "setosa")
				(list 6.5 3.0 5.2 2.0 "virginica")
				(list 6.1 2.8 4.7 1.2 "versicolor")
				(list 5.1 3.5 1.4 0.3 "setosa")
				(list 4.6 3.1 1.5 0.2 "setosa")
				(list 6.5 3.0 5.8 2.2 "virginica")
				(list 4.6 3.4 1.4 0.3 "setosa")
				(list 4.6 3.2 1.4 0.2 "setosa")
				(list 7.7 2.8 6.7 2.0 "virginica")
				(list 5.9 3.2 4.8 1.8 "versicolor")
				(list 5.1 3.8 1.6 0.2 "setosa")
				(list 4.9 3.0 1.4 0.2 "setosa")
				(list 4.9 2.4 3.3 1.0 "versicolor")
				(list 4.5 2.3 1.3 0.3 "setosa")
				(list 5.8 2.7 4.1 1.0 "versicolor")
				(list 5.0 3.4 1.6 0.4 "setosa")
				(list 5.2 3.4 1.4 0.2 "setosa")
				(list 5.3 3.7 1.5 0.2 "setosa")
				(list 5.0 3.6 1.4 0.2 "setosa")
				(list 5.6 2.9 3.6 1.3 "versicolor")
				(list 4.8 3.1 1.6 0.2 "setosa")
				(list 6.3 2.7 4.9 1.8 "virginica")
				(list 5.7 2.8 4.1 1.3 "versicolor")
				(list 5.0 3.0 1.6 0.2 "setosa")
				(list 6.3 3.3 6.0 2.5 "virginica")
				(list 5.0 3.5 1.6 0.6 "setosa")
				(list 5.5 2.6 4.4 1.2 "versicolor")
				(list 5.7 3.0 4.2 1.2 "versicolor")
				(list 4.4 2.9 1.4 0.2 "setosa")
				(list 4.8 3.0 1.4 0.1 "setosa")
				(list 5.5 2.4 3.7 1.0 "versicolor")
			)
        context_labels (list "sepal_length" "sepal_width" "petal_length" "petal_width")
        action_labels (list "species")
    ))

    #!EmptyAndTrain
	(declare
		(assoc
			enable_auto_ablation (false)	
			max_num_cases (null)
		)
        (call (load "unit_test_howso.amlg")
            (assoc name "ut_h_reduce_data.amlg" skip_init (true) do_return_validation (false))
        )
        (call_entity "howso" "set_feature_attributes" (assoc
            feature_attributes (assoc species (assoc type "nominal"))
        ))

        (call_entity "howso" "set_auto_analyze_params" (assoc
            auto_analyze_enabled (true)
            use_case_weights (true)
        ))

        (call_entity "howso" "set_auto_ablation_params" (assoc
            auto_ablation_enabled enable_auto_ablation
            min_num_cases 20
			max_num_cases max_num_cases
            batch_size 10
        ))
        (call_entity "howso" "train" (assoc
            features (append context_labels action_labels)
            cases training_data
            session "iris_session"
            skip_auto_analyze (false)
        ))
        (call_entity "howso" "analyze" (assoc
            use_case_weights (true)
        ))
    )

    (print "Initial train of training data successful: ")
    (call assert_same (assoc
        exp (size training_data)
        obs (get (call_entity "howso" "get_num_training_cases") (list 1 "payload" "count"))
    ))

    (print "reduce_data with no thresholds reduces down to minimum model size: ")
    (call_entity "howso" "reduce_data")
    (call assert_same (assoc
        exp
            (get
                (call_entity "howso" "get_auto_ablation_params")
                (list 1 "payload" "min_num_cases")
            )
        obs
            (get (call_entity "howso" "get_num_training_cases") (list 1 "payload" "count"))
    ))
    (call exit_if_failures (assoc msg "reduce_data with no thresholds reduced as expected"))
    (call !EmptyAndTrain)

    (print "reduce_data with very liberal thresholds reduces down to minimum model size: ")
    (call_entity "howso" "reduce_data" (assoc
        abs_threshold_map (assoc accuracy (assoc species 0.1))
        delta_threshold_map (assoc accuracy (assoc species 0.5))
        rel_threshold_map (assoc accuracy (assoc species 0.5))
    ))
    (call assert_same (assoc
        exp
            (get
                (call_entity "howso" "get_auto_ablation_params")
                (list 1 "payload" "min_num_cases")
            )
        obs
            (get (call_entity "howso" "get_num_training_cases") (list 1 "payload" "count"))
    ))
    (call exit_if_failures (assoc msg "reduce_data with liberal thresholds reduced as expected"))
    (call !EmptyAndTrain)

    (print "reduce_data with conservative thresholds reduces to above minimum model size: ")
    (call_entity "howso" "reduce_data" (assoc
        abs_threshold_map (assoc accuracy (assoc species 1))
        delta_threshold_map (assoc accuracy (assoc species 0.001))
        rel_threshold_map (assoc accuracy (assoc species 0.001))
    ))
    (call assert_same (assoc
        exp
            (-
                (size training_data)
                (call_entity "howso""debug_label" (assoc label "!ablationBatchSize"))
            )
        obs
            (get (call_entity "howso" "get_num_training_cases") (list 1 "payload" "count"))
    ))
    (call exit_if_failures (assoc msg "reduce_data with conservative thresholds reduced as expected"))

	(print "a basic train automatically calls reduce_data when the threshold is low enough, resulting in min. model size w/ no threshold maps: ")
    (call !EmptyAndTrain (assoc enable_auto_ablation (true) max_num_cases 120))
    (call assert_same (assoc
        exp
            (get
                (call_entity "howso" "get_auto_ablation_params")
                (list 1 "payload" "min_num_cases")
            )
        obs
            (get (call_entity "howso" "get_num_training_cases") (list 1 "payload" "count"))
    ))
    (call exit_if_failures (assoc msg "train with auto-ablation calls reduce_data automatically when the threshold is reached"))

    (call exit_if_failures (assoc msg unit_test_name) )
)