(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_goal_features.amlg"))

	(call_entity "howso" "create_trainee" (assoc trainee "model"))

	(declare (assoc
		model_data (load "unit_test_data/iris.csv")
	))
	(declare (assoc
		data (tail model_data)
		features (first model_data)
	))
	(declare (assoc action_features (list (last features))))

	(assign_to_entities "howso" (assoc trainee "model"))

	(call_entity "howso" "set_feature_attributes" (assoc
		feature_attributes (assoc "target" (assoc "type" "nominal" "data_type" "number") )
	))

	(call_entity "howso" "train" (assoc
		cases data
		features features
		session "session1"
	))

	(call_entity "howso" "analyze" (assoc
		context_features features
		k_values [8]
		p_values [1]
		use_deviations (true)
	))

	(declare (assoc
		result
			(call_entity "howso" "react" (assoc
				context_features ["sepal_length" "target"]
				context_values [[ 5.1 0 ]]
				action_features ["sepal_width"]
				goal_features_map { "sepal_width" { "goal" "max"}}
			))
	))
	(call keep_result_payload)
	(print "large sepal_width when maximing: ")
	(call assert_approximate (assoc
		obs (get result ["action_values" 0 0])
		exp 3.7
	))

	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				context_features ["sepal_length" "target"]
				context_values [[ 5.1 0 ]]
				action_features ["sepal_width"]
				goal_features_map { "sepal_width" { "goal" "min"}}
			))
	))
	(call keep_result_payload)
	(print "small sepal_width when maximing: ")
	(call assert_approximate (assoc
		obs (get result ["action_values" 0 0])
		exp 3.4
		percent .1
	))

	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				context_features ["sepal_length" "target"]
				context_values [[ 5.1 0 ]]
				action_features ["sepal_width"]
			))
	))
	(call keep_result_payload)
	(print "expected sepal_width without goal: ")
	(call assert_approximate (assoc
		obs (get result ["action_values" 0 0])
		exp 3.6
	))


	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				context_features ["sepal_length" "sepal_width"]
				context_values [[ 6.3 2.9 ]]
				action_features ["petal_length"]
				goal_features_map { "target" { "value" 1}}
			))
	))
	(call keep_result_payload)
	(print "small petal_length when value goal target is 1: ")
	(call assert_approximate (assoc
		obs (get result ["action_values" 0 0])
		exp 4.5
		percent .1
	))


	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				context_features ["sepal_length" "sepal_width"]
				context_values [[ 6.3 2.9 ]]
				action_features ["petal_length"]
				goal_features_map { "target" { "value" 2}}
			))
	))
	(call keep_result_payload)
	(print "large petal_length when value goal target is 2: ")
	(call assert_approximate (assoc
		obs (get result ["action_values" 0 0])
		exp 5.3
		percent .1
	))

	(call exit_if_failures (assoc msg "Discriminative react with goal features."))


	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				context_features ["sepal_length" ]
				context_values [[ 5.7  ]]
				action_features ["sepal_width"]
				goal_features_map { "sepal_width" { "goal" "min"}}
				desired_conviction 5
				num_cases_to_generate 100
			))
	))
	(call keep_result_payload)
	(print "generate small average sepal_width when maximing: ")
	(call assert_approximate (assoc
		obs
			(/
				(apply "+" (map (lambda (first (current_value))) (get result ["action_values"])) )
				100
			)
		exp 2.9
		percent .1
	))

	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				context_features ["sepal_length" ]
				context_values [[ 5.7  ]]
				action_features ["sepal_width"]
				goal_features_map { "sepal_width" { "goal" "max"}}
				desired_conviction 5
				num_cases_to_generate 100
			))
	))
	(call keep_result_payload)
	(print "generate large average sepal_width when maximing: ")
	(call assert_approximate (assoc
		obs
			(/
				(apply "+" (map (lambda (first (current_value))) (get result ["action_values"])) )
				100
			)
		exp 3.6
		thresh .4
	))

	(call exit_if_failures (assoc msg "Generative react with goal features."))

	(call exit_if_failures (assoc msg unit_test_name))
)