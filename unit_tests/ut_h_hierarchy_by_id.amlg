(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_hierarchy_by_id.amlg"))

	(declare (assoc result (null)))


	(call_entity "howso" "create_subtrainee" (assoc path ["A"] child_id "A1" ))

	(call_entity "howso" "create_subtrainee" (assoc path ["A" "b"] child_id "b2" ))

	(call_entity "howso" "create_subtrainee" (assoc path ["A" "c"] child_id "c2"))

	(call_entity "howso" "create_subtrainee" (assoc path ["A" "c" "e"] child_id "e3"))

	;creating a dupe
	(assign (assoc
		result (call_entity "howso" "create_subtrainee" (assoc path ["A" "c" "e"] child_id "e3"))
	))
	(print "Creating an existing trainee: ")
	(call assert_same (assoc
		obs (get result (list 1 "detail"))
		exp "Specified trainee is already in the hierarchy."
	))

	(assign (assoc
		result
			(call_entity "howso" "execute_on_subtrainee" (assoc
				method "create_subtrainee"
				payload (assoc path ["A" "c" "e"] child_id "e3")
			))
	))
	(print "Subtrainee method via execute_on_subtrainee: ")
	(call assert_same (assoc
		obs (get result (list 1 "detail"))
		exp "Please call subtrainee methods directly on the root trainee with the appropriate path."
	))

	(call exit_if_failures (assoc msg "Creating subtrainees."))


	(assign (assoc
		result
			(call_entity "howso" "copy_subtrainee" (assoc
				target_path ["c_copy"]
				source_id "invalid"
			))
	))
	(print "Can't copy - bad child: ")
	(call assert_same (assoc
		obs (get result (list 1 "detail"))
		exp "The following parameters contain invalid values: \"target_id\"."
	))

	(assign (assoc
		result
			(call_entity "howso" "copy_subtrainee" (assoc
				target_path ["invalid" "c_copy" ]
				target_id "uniqueid"
				source_id "c2"
			))
	))
	(print "Can't copy - bad parent: ")
	(call assert_same (assoc
		obs (get result (list 1 "detail"))
		exp "Invalid path specified."
	))

	(assign (assoc
		result
			(call_entity "howso" "copy_subtrainee" (assoc
				target_path ["A"]
				target_id "uniqueid"
				source_id "c2"
			))
	))
	(print "Can't copy - duplicate child: ")
	(call assert_same (assoc
		obs (get result (list 1 "detail"))
		exp "Specified trainee is already in the hierarchy."
	))


	(call_entity "howso" "copy_subtrainee" (assoc
		target_path ["c_copy"]
		target_id "deleteme"
		source_id "c2"
	))

	(call exit_if_failures (assoc msg "Creating subtrainees."))


	(assign (assoc
		result
			(call_entity "howso" "rename_subtrainee" (assoc
				child_id "invalid"
				label "AA"
			))
	))
	(print "Can't rename - invalid child: ")
	(call assert_same (assoc
		obs (get result (list 1 "detail"))
		exp "Invalid trainee id specified."
	))

	(assign (assoc
		result
			(call_entity "howso" "rename_subtrainee" (assoc
				child_id "c2"
				label "b"
			))
	))
	(print "Can't rename - duplicate name: ")
	(call assert_same (assoc
		obs (get result (list 1 "detail"))
		exp "Trainee with specified label already exists."
	))

	(call_entity "howso" "rename_subtrainee" (assoc
		child_id "A1"
		label "AA"
	))

	(call_entity "howso" "rename_subtrainee" (assoc
		child_id "c2"
		label "big_C"
	))

	(assign (assoc
		result (call_entity "howso" "get_hierarchy")
	))
	(call keep_result_payload)

	(print "Renames and copies: ")
	(call assert_same (assoc
		obs result
		exp
			(assoc
				AA (assoc
						b (assoc)
						big_C (assoc e (assoc))
					)
				c_copy (assoc e (assoc))
			)
	))

	(call exit_if_failures (assoc msg "Renaming."))



	(call_entity "howso" "train" (assoc
		features (list "a" "b" "c")
		cases
			(list
				(list 10 20 30)
				(list 11 22 33)
				(list 12 24 36)
				(list 13 26 39)
			)
	))

	(call_entity "howso" "execute_on_subtrainee" (assoc
		child_id "A1"
		method "train"
		payload
			(assoc
				features (list "x" "y")
				cases
					(list
						(list 1 1)
						(list 2 1)
						(list 3 3)
						(list 4 4)
						(list 5 5)
						(list 6 6)
					)
			)
	))


	(call_entity "howso" "move_cases" (assoc
		source_id "A1"
		target_id "b2"
		num_cases 2
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "get_num_training_cases")
				(list 1 "payload" "count")
			)
	))

	(print "Cases in model: ")
	(call assert_same (assoc
		obs result
		exp 4
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "execute_on_subtrainee" (assoc
					child_id "A1"
					method "get_num_training_cases"
				))
				(list 1 "payload" "count")
			)
	))

	(print "Cases in child A1: ")
	(call assert_same (assoc
		obs result
		exp 4
	))


	(assign (assoc
		result
			(get
				(call_entity "howso" "execute_on_subtrainee" (assoc
					child_id "b2"
					method "get_num_training_cases"
				))
				(list 1 "payload" "count")
			)
	))

	(print "Cases in grandchild b2: ")
	(call assert_same (assoc
		obs result
		exp 2
	))

	(call exit_if_failures (assoc msg "Excute method and move cases."))

	(call_entity "howso" "save_subtrainee" (assoc
		filename "deleteme"
		filepath "./"
		as_external (true)
		path ["c_copy"]
		child_id "deleteme"
	))

	(assign (assoc
		result
			(call_entity "howso" "save_subtrainee" (assoc
				filename "deleteme"
				filepath "./"
				as_external (true)
				path ["c_copy"]
				child_id "deleteme"
			))
	))

	(print "Save fails since it is now outside trainee: ")
	(call assert_same (assoc
		obs (get result (list 1 "detail"))
		exp "Specified an independently stored trainee."
	))

	(assign (assoc
		result (call_entity "howso" "get_hierarchy")
	))
	(call keep_result_payload)
	(print "Updated is_contained_map has all the c_copy trainees as not contained: ")
	(call assert_same (assoc
		obs result
		exp
			(assoc
				AA (assoc
						b (assoc)
						big_C (assoc e (assoc))
					)
				c_copy (false)
			)
	))

	;load into trainee AA
	(call_entity "howso" "load_subtrainee" (assoc
		path ["AA" "loaded"]
		child_id "loaded"
		filename "deleteme"
		filepath "./"
	))

	(assign (assoc
		result
			(call_entity "howso" "load_subtrainee" (assoc
				path ["AA" "b" "child_of_b"]
				as_external (true)
				filename "deleteme"
				filepath "./"
			))
	))
	(print "Must specify id when loading external: ")
	(call assert_same (assoc
		obs (get result (list 1 "detail"))
		exp "The following parameters contain invalid values: \"child_id\"."
	))

	(assign (assoc
		result
			(call_entity "howso" "load_subtrainee" (assoc
				path ["AA" "b" "child_of_b"]
				child_id "A1"
				as_external (true)
				filename "deleteme"
				filepath "./"
			))
	))
	(print "Can't use an already loaded id:")
	(call assert_same (assoc
		obs (get result (list 1 "detail"))
		exp  "A trainee with this id is already loaded."
	))

	(assign (assoc
		result
			(call_entity "howso" "load_subtrainee" (assoc
				path ["AA" "b" "child_of_b"]
				child_id "deleteme2"
				as_external (true)
				filename "deleteme"
				filepath "./"
			))
	))

	(assign (assoc
		result (call_entity "howso" "get_hierarchy")
	))
	(call keep_result_payload)

	(print "Hierarchy for model after save and load is correct: ")
	(call assert_same (assoc
		obs result
		exp
			(assoc
				AA (assoc
						b (assoc child_of_b (false))
						big_C (assoc e (assoc))
						loaded (assoc e (assoc))
					)
				c_copy (false)
			)
	))

	;cleanup saved test model
	(if (= (system "os") "Windows")
		(system "system" "del deleteme.*")

		;else posix
		(system "system" "rm -rf deleteme*")
	)

	(call exit_if_failures (assoc msg "save and load" ))


	(assign (assoc
		result
			(call_entity "howso" "execute_on_subtrainee" (assoc
				child_id "deleteme2"
				method "get_num_training_cases"
			))
	))

	(print "execute fails on an independent trainee: ")
	(call assert_same (assoc
		obs (get result (list 1 "detail"))
		exp "Specified an independently stored trainee."
	))

	(assign (assoc
		result
			(call_entity (list "howso" ".trainee_container" "AA" ".trainee_container" "loaded") "debug_label" (assoc
				label "!parentId"
			))

	))
	(print "sanity check !parentId of 'loaded' trainee: ")
	(call assert_same (assoc
		obs result
		exp "A1"
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "delete_subtrainee" (assoc
					path ["AA" "b" "child_of_b"]
				))
				(list 1 "warnings" 0 )
			)
	))

	(print "delete only removes references since grandchild is outside trainee: ")
	(call assert_same (assoc
		obs result
		exp "Hierarchy has been updated but child trainee was not removed because it is stored independently of this trainee."
	))

	(call_entity "howso" "delete_subtrainee" (assoc
		path ["AA" "loaded" "e"]
	))

	(assign (assoc
		result (call_entity "howso" "get_hierarchy")
	))
	(call keep_result_payload)

	(print "Hierarchy for model after deletion: ")
	(call assert_same (assoc
		obs result
		exp
			(assoc
				AA (assoc
						b (assoc)
						big_C (assoc e (assoc))
						loaded (assoc)
					)
				c_copy (false)
			)
	))

	(call exit_if_failures (assoc msg "delete trainees." ))


	(call exit_if_failures (assoc msg unit_test_name ))
)
