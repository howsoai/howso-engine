(seq

	#howso_test_load_point (null)
	(declare (assoc
		ut_h_start_time (system_time)
		unit_test_retries_map (assoc)
	))

	(declare (assoc
		test_files
			(list
				"ut_h_ablate.amlg"
				"ut_h_params.amlg"
				"ut_h_impute_sparse.amlg"
				"ut_h_conviction.amlg"
				"ut_h_react_explain.amlg"
				"ut_h_move_remove.amlg"
				"ut_h_boundary_cases.amlg"
				"ut_h_synthetic_dataset1.amlg"
				"ut_h_feature_conviction.amlg"
				"ut_h_influential_cases.amlg"
				"ut_h_case_generation.amlg"
				"ut_h_analyze_feature_weights.amlg"
				"ut_h_box_conviction.amlg"
				"ut_h_cyclic_dataset.amlg"
				"ut_h_nominal_distribution.amlg"
				"ut_h_continuous_distribution.amlg"
				"ut_h_case_generation_preserving.amlg"
				"ut_h_rounding.amlg"
				"ut_h_datetimeformat.amlg"
				"ut_h_rl.amlg"
				"ut_h_substitute_gen.amlg"
				"ut_h_analyze.amlg"
				"ut_h_id_features.amlg"
				"ut_h_input_validation.amlg"
				"ut_h_unique_ids.amlg"
				"ut_h_derive_start_end.amlg"
				"ut_h_derive_custom.amlg"
				"ut_h_time_series_datetime.amlg"
				"ut_h_time_series.amlg"
				"ut_h_time_series_stock.amlg"
				"ut_h_string_ordinals.amlg"
				"ut_h_pairwise_distances.amlg"
				"ut_h_dependent_features.amlg"
				"ut_h_null_react.amlg"
				"ut_h_null_null_react.amlg"
				"ut_h_case_mda.amlg"
				"ut_h_weight_accumulation"
				"ut_h_react_distance_ratio.amlg"
				"ut_h_null_residual_convictions.amlg"
				"ut_h_synthetic_sum.amlg"
				"ut_h_distance_contributions.amlg"
				"ut_h_warnings.amlg"
				"ut_h_evaluate.amlg"
				"ut_h_post_process.amlg"
				"ut_h_stats.amlg"
				"ut_h_edit_dist_features.amlg"

				;should always be last
				"ut_h_migration.amlg"
			)
	))

	;iterate over each test file, load it into howso_test_load_point, run it and then clear it out
	(map
		(lambda (let
			(assoc test_file_name (current_value 1))

			(direct_assign_to_entities (assoc howso_test_load_point (load test_file_name)))
			(call howso_test_load_point)
			(print "############################################################\n")
			(if unit_test_retries
				(seq
					(accum (assoc
						unit_test_retries_map
							(associate test_file_name (retrieve_from_entity "unit_test_retries"))
					))
					(assign_to_entities (assoc unit_test_retries 0))
				)
			)
			(direct_assign_to_entities (assoc howso_test_load_point (null)))
		))
		test_files
	)

	(print "Total Howso execution time: " (- (system_time) ut_h_start_time) " s\n")
	(map
		(lambda (print "- " (current_index) " was retried " (current_value) " time" (if (> (current_value) 1) "s" "") "\n") )
		unit_test_retries_map
	)
)
