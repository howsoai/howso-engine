(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_case_generation.amlg"))

	(call_entity "howso" "create_trainee" (assoc trainee "model" ))
	(assign_to_entities "howso" (assoc trainee "model"))
	(call_entity "howso" "set_internal_parameters" (assoc
		trainee "model"
		default_hyperparameter_map (assoc "k" 3 "p" 2 "dt" -1)
	))

	(call_entity "howso" "set_feature_attributes" (assoc
		trainee "model"
		features
			(assoc
				"size" (assoc "type" "nominal")
				"fruit" (assoc "type" "nominal")
			)
	))

	(declare
		(assoc
			result (null)
			features (list "height" "width" "size" "fruit")
			action_features (list "fruit")
			context_features (list "height" "width" "size")
			data
				(list

					(list 	1 	.7 	"small" "strawberry")
					(list 	1.1 .6 	"small" "strawberry")
					(list 	.6 	.4 	"small" "strawberry")
					(list 	.7 	.5 	"small" "strawberry")
					(list 	1.8 1.9 "small" "peach")
					(list 	1.5	1.5	"small" "apple")
					(list 	2.1 1.6 "medium" "apple")
					(list 	2.6	2.7	"medium" "apple")
					(list 	6 	3.7 "large" "pinapple")
					(list 	6.8 4.1 "large" "pinapple")
			)

	))


	(call_entity "howso" "train" (assoc
		features features
		input_cases data
		session "unit_test"
	))

	(declare (assoc
		small 0
		medium 0
		large 0
		huge 0
	))

	(call_entity "howso" "set_random_seed" (assoc
		trainee "model"
		seed "1234556"
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					desired_conviction  1
					action_features features
					feature_bounds_map (assoc "size" (assoc "allowed" (list "1" )))
				))
				(list "payload" "action_values")
			)
	))
	(print "generates nonexistent value for nominal feature: ")
	(call assert_same (assoc exp "1" obs (get result 2)))

	(print "Generates about 3x smalls as medium...\n")
	(range
		(lambda (let
			(assoc
				case
					(get
						(call_entity "howso" "react" (assoc
							action_features features
							use_regional_model_residuals (true)
							desired_conviction 5
						 	; empty allowed list should be ignored
							feature_bounds_map (assoc "size" (assoc "allowed" (list)))
						))
						(list "payload" "action_values")
					)
			)
			(if
				(= "small" (get case 2))
				(accum (assoc small 1))

				(= "medium" (get case 2))
				(accum (assoc medium 1))

				(= "large" (get case 2))
				(accum (assoc large 1))

				(= "huge" (get case 2))
				(accum (assoc huge 1))
			)
		))

		1 2000 1
	)

	(print "counts: " small " " medium " " large " " huge "\n")

	(call assert_approximate (assoc obs small exp 1200 thresh 200))
	(call assert_approximate (assoc obs medium exp 400 thresh 100))
	(call assert_approximate (assoc obs large exp 400 thresh 100))

	;should not generate any huge because conviction is 1
	(call assert_same (assoc obs huge exp 0 ))



	(print "\nGenerates smalls, medium and some huge ...\n")
	(assign (assoc
		small 0
		medium 0
		large 0
		huge 0
	))

	(map
		(lambda (let
			(assoc
				case
					(get
						(call_entity "howso" "react" (assoc
							action_features features
							feature_bounds_map (assoc "size" (assoc "allowed" (list "medium"  "huge" "small")))
							desired_conviction .93
							use_regional_model_residuals (false)
						))
						(list "payload" "action_values")
					)
			)
			(if
				(= "small" (get case 2))
				(accum (assoc small 1))

				(= "medium" (get case 2))
				(accum (assoc medium 1))

				(= "large" (get case 2))
				(accum (assoc large 1))

				(= "huge" (get case 2))
				(accum (assoc huge 1))
			)
		))

		(range 1 2000)
	)
	(print "counts: " small " " medium " " large " " huge "\n")
	(call assert_approximate (assoc obs small exp 1300 thresh 200))
	(call assert_approximate (assoc obs medium exp 540 thresh 200))
	(call assert_same (assoc obs large exp 0 ))
	(call assert_approximate (assoc obs huge exp 160 thresh 100))

	(call exit_if_failures (assoc msg "Generation of nominal values"))


	(declare (assoc
		generated_case
			(get
				(call_entity "howso" "react" (assoc
					desired_conviction 1
					action_features features
					context_features (list "height")
					context_values (list 2)
				))
				(list "payload" "action_values")
			)
	))
	(print "Generate outputs initial values: ")
	(call assert_true (assoc
		obs (= 4 (size generated_case))
	))
	(print "height is 2: ")
	(call assert_same (assoc exp 2 obs (get generated_case 0)))

	(assign (assoc
		result
			(get
				(call_entity "howso" "batch_react" (assoc
					desired_conviction .2
					action_features features
					details
						(assoc
							"influential_cases" (true)
							"categorical_action_probabilities" (true)
						)
					num_cases_to_generate 2
					generate_new_cases "always"
				))
				"payload"
			)
	))
	(print "Attribution for synthed cases: ")
	(call assert_true (assoc
		obs (and
				(>= (size (get result (list "influential_cases" 0))) 3)
				(>= (size (get result (list "influential_cases" 1))) 3)
			)
	))

	(print "Influential cases weight sum ~ 1.0 for first case: ")
	(call assert_approximate (assoc
		obs
			(apply "+" (map
				(lambda (get (current_value) ".influence_weight"))
				(get result (list "influential_cases" 0))
			))
		exp 0.995
		thresh 0.006
	))

	(print "Influential cases weight sum ~ 1.0 for second case: ")
	(call assert_approximate (assoc
		obs
			(apply "+" (map
				(lambda (get (current_value) ".influence_weight"))
				(get result (list "influential_cases" 1))
			))
		exp 0.995
		thresh 0.006
	))

	(print "Categorical Action probabilities for synthed case 1: ")
	(call assert_true (assoc
		obs
			(and
				(= (size (get result (list "categorical_action_probabilities" 0))) 2)
				(contains_index (get result (list "categorical_action_probabilities" 0)) "fruit")
				(contains_index (get result (list "categorical_action_probabilities" 0)) "size")
			)
	))


	(print "Categorical Action probabilities for synthed case 2: ")
	(call assert_true (assoc
		obs
			(and
				(= (size (get result (list "categorical_action_probabilities" 1))) 2)
				(contains_index (get result (list "categorical_action_probabilities" 1)) "fruit")
				(contains_index (get result (list "categorical_action_probabilities" 1)) "size")
			)
	))

	(call exit_if_failures (assoc msg "Generated attribution and C.A.P."))

	(call_entity "howso" "set_substitute_feature_values" (assoc
		substitution_value_map (assoc "fruit"  (null))
	))
	(assign (assoc
		result (get (call_entity "howso" "get_substitute_feature_values") (list "payload" "fruit"))
	))

	(print "set and get auto-generated substitute values: ")
	(call assert_same (assoc
		obs (indices result)
		exp (list "strawberry" "apple" "pinapple" "peach")
		unordered (true)

	))

	(print "auto-generated values are unique values: ")
	(call assert_true (assoc
		obs
			(and
				(!= .nan (get result "strawberry" )) (!= (null) (get result "strawberry"))
				(!= .nan (get result "apple" )) (!= (null) (get result "apple"))
				(!= .nan (get result "pinapple" )) (!= (null) (get result "pinapple"))
				(!= .nan (get result "peach" )) (!= (null) (get result "peach"))
				(apply "!=" (values result))
			)
	))

	(call exit_if_failures (assoc msg "Auto-generated substitution" ))


	(call_entity "howso" "set_internal_parameters" (assoc
		trainee "model"
		default_hyperparameter_map (assoc "k" 4 "p" 2 "dt" -1)
	))

	(call_entity "howso" "train" (assoc
		features (list "ctx" "act")
		input_cases
			(list
				(list 0  2)
				(list 10 2)
				(list 20 2)
				(list 30 4)
				(list 40 4)
				(list 50 (null))
				(list 60 (null))
				(list 70 5)
				(list 80 5)
				(list 90 6)
			)
		session "null_testing"
	))

	(declare (assoc num_nulls 0))

	(range
		(lambda
			(let
				(assoc
					gen
						(get
							(call_entity "howso" "react" (assoc
								desired_conviction 1
								action_features (list "ctx" "act")
								context_features (list "ctx")
								context_values (list 65)
								feature_bounds_map (assoc "act" (assoc "allow_null" (true)))
							))
							(list "payload" "action_values")
						)
				)
				(if (= (null) (get gen 1))
					(accum (assoc num_nulls 1))
				)
			)

		)
		1 1000 1
	)

	(print "generated approx 500 nulls, " num_nulls " : ")
	(call assert_approximate (assoc
		obs num_nulls
		exp 500
		thresh 80
	))


	(assign (assoc num_nulls 0))
	(map
		(lambda
			(let
				(assoc
					gen
						(get
							(call_entity "howso" "react" (assoc
								desired_conviction 1
								action_features (list "ctx" "act")
								context_features (list "ctx")
								context_values (list 65)
								feature_bounds_map (assoc "act" (assoc "allow_null" (false)))
							))
							(list "payload" "action_values")
						)
				)
				(if (= (null) (get gen 1))
					(accum (assoc num_nulls 1))
				)
			)

		)
		(range 1 1000)
	)

	(print "generated 0 continuous nulls, " num_nulls " : ")
	(call assert_approximate (assoc
		obs num_nulls
		exp 0
		thresh 0
	))


	; retrain the dataset with nominals
	(call_entity "howso" "clean_data")
	(call_entity "howso" "set_feature_attributes" (assoc
		features
			(assoc
				"act" (assoc "type" "nominal" "data_type" "number")
			)
	))
	(call_entity "howso" "train" (assoc
		features (list "ctx" "act")
		input_cases
			(list
				(list 0  2)
				(list 10 2)
				(list 20 2)
				(list 30 4)
				(list 40 4)
				(list 50 (null))
				(list 60 (null))
				(list 70 5)
				(list 80 5)
				(list 90 6)
			)
		session "null_testing"
	))

	(assign (assoc num_nulls 0))
	(range
		(lambda
			(let
				(assoc
					gen
						(get
							(call_entity "howso" "react" (assoc
								desired_conviction 1
								action_features (list "ctx" "act")
								context_features (list "ctx")
								context_values (list 65)
								feature_bounds_map (assoc "act" (assoc "allow_null" (false)))
							))
							(list "payload" "action_values")
						)
				)
				(if (= (null) (get gen 1))
					(accum (assoc num_nulls 1))
				)
			)

		)
		1 1000 1
	)

	(print "generated 0 nominal nulls, " num_nulls " : ")
	(call assert_approximate (assoc
		obs num_nulls
		exp 0
		thresh 0
	))



	(assign (assoc num_nulls 0))

	(map
		(lambda
			(let
				(assoc
					gen
						(get
							(call_entity "howso" "react" (assoc
								desired_conviction 1
								action_features (list "ctx" "act")
								context_features (list "ctx")
								context_values (list 65)
								use_regional_model_residuals (true)
							))
							(list "payload" "action_values")
						)
				)
				(if (= (null) (get gen 1))
					(accum (assoc num_nulls 1))
				)
			)

		)
		(range 1 1000)
	)

	;desired conviction of 1 using regional residuals increases the chance of global probabilities being used,
	;thus instead of expecting ~500 nulls (local model is 50% null), since global model only has 20% null, there
	;won't be as many nulls generated
	(print "generated approx 400 nominal nulls, " num_nulls " : ")
	(call assert_approximate (assoc
		obs num_nulls
		exp 400
		thresh 80
	))


	;specifically leaving 2 out so it auto-generates a translation
	(call_entity "howso" "set_substitute_feature_values" (assoc
		substitution_value_map (assoc "act" (assoc 4 "ALPHA" 5 "BETA" 6 "GAMMA"))
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					;ensure that the original reaction value is used w/o adding noise because we want to guarantee
					;output of nominal value of '2' to ensure that a new value is generated for the substitution map
					desired_conviction .infinity
					action_features (list "ctx" "act")
					context_features (list "ctx")
					context_values (list 10)
				))
				(list "payload" "action_values")
			)
	))
	(declare (assoc
		auto_generated_sub (get result 1)
	))

	(print "auto generated substitution: ")
	(assign (assoc
		result (get (call_entity "howso" "get_substitute_feature_values") "payload")
	))
	(call assert_same (assoc
		obs result
		exp (assoc "act" (assoc 4 "ALPHA" 5 "BETA" 6 "GAMMA" 2 auto_generated_sub))
	))

	(declare (assoc allowed_subs (append (values (get result "act")) (list (null)))))

	(print "substitution values: " allowed_subs )

	(assign (assoc
		result
			(range
				(lambda
					(let
						(assoc
							gen
								(get
									(call_entity "howso" "react" (assoc
										desired_conviction 1
										action_features (list "ctx" "act")
									))
									(list "payload" "action_values")
								)
						)
						(contains_value allowed_subs (get gen 1))
					)

				)
				1 100 1
			)
	))
	(print "generates allowed substitution values only: ")
	;all values should be true
	(call assert_true (assoc obs (apply "=" (append result (true)))))

	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					desired_conviction 10
					action_features (list "ctx" "act")
					case_indices (list "null_testing" 3) ;the 4th case's act value is 4 which is 'ALPHA'
					preserve_feature_values (list "act")
				))
				(list "payload" "action_values")
			)
	))
	(print "Ensure the substituted preserved feature values are correctly encoded: ")
	(call assert_same (assoc exp "ALPHA" obs (last result)))

	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					desired_conviction 10
					action_features (list "ctx" "act")
					context_features (list "act")
				    context_values (list "ALPHA")
				    input_is_substituted (true)
				))
				(list "payload" "action_values")
			)
	))

	(print "Ensure substituted context input is correctly encoded: ")
	(call assert_same (assoc exp "ALPHA" obs (last result)))


	(call exit_if_failures (assoc msg "Generation with substitution values" ))

	; VALIDATE GENERATION OF original cases ONLY

	(call_entity "howso" "create_trainee" (assoc trainee "original" ))
	(call_entity "howso" "set_feature_attributes" (assoc
		trainee "original"
		features
			(assoc
				"a" (assoc "type" "nominal")
				"z" (assoc "type" "nominal")
			)
	))
	(call_entity "howso" "train" (assoc
		trainee "original"
		features (list "a" "z")
		input_cases
			(list
				(list "A" "W")
				(list "A" "X")
				(list "A" "Y")
				(list "A" "Z")
				(list "B" "W")
				(list "B" "X")
				(list "B" "Y")
				;(list "B" "Z") ; expected original
				(list "C" "W")
				(list "C" "X")
				;(list "C" "Y") ; expected original
				(list "C" "Z")
			)
		session "unit_test"
	))

	(call_entity "howso" "set_random_seed" (assoc trainee "original" seed "abcdef"))

	(assign (assoc
		result
			(map
				(lambda
					(let
						(assoc
							gen
								(get
									(call_entity "howso" "react" (assoc
										trainee "original"
										desired_conviction 2
										action_features (list "a" "z")
										generate_new_cases "always"
									))
									(list "payload" "action_values")
								)
						)
						gen
					)
				)
				(range 1 100)
			)
	))

	(declare (assoc
		num_original_cases (size (filter result))
	))
	(print "Expected to only generate original cases. Generated " num_original_cases ": ")
	(call assert_true (assoc obs (> num_original_cases 0)))

	; filter out all expected values and nulls, an empty list should remain
	(declare (assoc
		unexpected_cases
			(filter
				(lambda (and
					(!= (list "B" "Z") (current_value))
					(!= (list "C" "Y") (current_value))
					(!= (null) (current_value))
				))
				result
			)
	))

	(print "After nulls removed: ")
	(call assert_same (assoc obs unexpected_cases exp (list)))


	(assign (assoc
		result
			(range
				(lambda
					(let
						(assoc
							gen
								(get
									(call_entity "howso" "react" (assoc
										trainee "original"
										desired_conviction 10
										action_features (list "a" "z")
										generate_new_cases "always"
									))
									(list "payload" "action_values")
								)
						)
						gen
					)
				)
				1 100 1
			)
	))

	; filter out all expected values, a list with some nulls should remain
	(assign (assoc
		unexpected_cases
			(filter
				(lambda (and
					(!= (list "B" "Z") (current_value))
					(!= (list "C" "Y") (current_value))
				))
				result
			)
	))

	; filtering out nulls should now leave an empty list
	(declare (assoc
		nulls_filtered_list (filter unexpected_cases)
	))

	(print "Failed to generate all original, generated some nulls: ")
	(call assert_true (assoc obs (> (size unexpected_cases) 0)))

	(print "Generated only originals and nulls: ")
	(call assert_same (assoc obs nulls_filtered_list exp (list)))


	(assign (assoc
		result
			(map
				(lambda
					(let
						(assoc
							gen
								(get
									(call_entity "howso" "react" (assoc
										trainee "original"
										desired_conviction 10
										action_features (list "a" "z")
										;may generate non-originals
										generate_new_cases "attempt"
									))
									(list "payload" "action_values")
								)
						)
						gen
					)
				)
				(range 1 100)
			)
	))

	; filter out all the expected original cases, shouldn't have any nulls though
	(assign (assoc
		unexpected_cases
			(filter
				(lambda (and
					(!= (list "B" "Z") (current_value))
					(!= (list "C" "Y") (current_value))
				))
				result
			)
	))

	; there should be no nulls, therefore the result shouldn't change and we should have some non-original cases
	(assign (assoc
		nulls_filtered_list
			(filter
				(lambda (!= (list (null) (null)) (current_value)))
				unexpected_cases
			)
	))

	(print "Expected to generate cases with no nulls: ")
	(call assert_same (assoc obs unexpected_cases exp nulls_filtered_list))
	(print "Generated some non-original cases: ")
	(call assert_true (assoc obs (> (size nulls_filtered_list) 0)))

	(call exit_if_failures (assoc msg "Original case always/yes flag generation" ))

	(call exit_if_failures (assoc msg unit_test_name ))
)
