(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_params.amlg"))

;VERIFY VERSION EXISTS
	(assign (assoc result (call_entity "howso" "version" )))
	(print "Howso Version: " result "\n")
	(call assert_true (assoc obs (!= (null) result)))

	(call exit_if_failures (assoc msg "Version is set"))


;VERIFY GET INTERNAL PARAMETERS
	(assign (assoc
		result
			(call_entity "howso" "set_internal_parameters" (assoc
				hyperparameter_map (assoc "single_targeted" (assoc "k" 5 "p" 2 "dt" -1))
			))
	))
	(print "bad hyperparameter map: ")
	(call assert_same (assoc exp 0 obs (first result)))
	(print "1 error: ")
	(call assert_same (assoc exp "string" obs (get_type_string (get result (list 1 "detail"))) ))


	(assign (assoc
		result
			(call_entity "howso" "set_internal_parameters" (assoc
				hyperparameter_map
					(assoc ".targetless" (assoc "A.B.C." (assoc "robust" (assoc ".none" (assoc "k" 5 "p" 2 "dt" -1)))))
			))
	))
	(print "good hyperparameter map: ")
	(call assert_same (assoc exp 1 obs (first result) ))

	(assign (assoc result (call_entity "howso" "get_internal_parameters" )))
	(print "Test get_internal_parameters: ")
	(call assert_same (assoc exp (assoc "k" 5  "p" 2 "dt" -1) obs (get result (list 1 "payload" "hyperparameter_map" ".targetless" "A.B.C." "robust" ".none"))))

	(assign (assoc result (call_entity "howso" "get_internal_parameters" (assoc action_feature ".targetless"))))
	(print "Test get_internal_parameters with GetHyperparameters logic: ")
	(call assert_same (assoc exp (assoc "k" 5  "p" 2 "dt" -1) obs (get result (list 1 "payload" "hyperparameter_map"))))

	(call exit_if_failures (assoc msg "Test get_internal_parameters"))


;VERIFY BASIC OBSERVE AND GET NUM TRAINING CASES
	(declare (assoc session_name "invalid id *?\right@dawn :32"))
	(call_entity "howso" "train" (assoc
		features (list "label1" "label2" "action")
		input_cases (list (list 1 2 1))
		session session_name
	))

	(assign (assoc result (call_entity "howso" "get_num_training_cases")))
	(print "Number of training cases: ")
	(call assert_same (assoc exp 1 obs (get result (list 1 "payload" "count"))))

	(call exit_if_failures (assoc msg "Observed one training case"))

;VERIFY SET NOMINAL
	(call_entity "howso" "set_feature_attributes" (assoc features (assoc "action" (assoc "type" "nominal"))))
	(print "Set and get nominal features: ")
	(call assert_same (assoc
		obs (get (call_entity "howso" "get_feature_attributes" ) (list 1 "payload"))
		exp (assoc "action" (assoc "type" "nominal"))
	))

	(call exit_if_failures (assoc msg "Set and get nominal features"))


;VERIFY RANDOM SEED
	(print "Set random seed: " )
	(assign (assoc result (call_entity "howso" "set_random_seed" (assoc seed "12345"))))
	(call assert_same (assoc obs (first result) exp 1))

	(call exit_if_failures (assoc msg "Set random seed"))

	(call_entity "howso" "set_metadata" (assoc
		metadata (assoc "arbitrary" (list "a" "B" 3))
	))

;VERIFY SAVE AND LOAD
	(declare (assoc save_model_filename "ut/ test_model \* 1<>2?"))

	(assign (assoc
		result (store (concat "./" save_model_filename ".amlg") (flatten_entity "howso" (false)) )
	))
	(print "Invalid filename check works: ")
	(call assert_same (assoc
		exp (false)
		obs result
	))

	(assign (assoc save_model_filename "ut_test_model"))
	(assign (assoc
		result (store (concat "./" save_model_filename ".amlg") (flatten_entity "howso" (false)) )
	))

	(print "saved trainee: ")
	(call assert_same (assoc
		exp (true)
		obs result
	))

	(call exit_if_failures (assoc msg "Save and load trainee"))


;VERIFY DELETE TRAINEE
	(print "Delete trainee: ")
	(destroy_entities "howso")
	(call assert_same (assoc exp (list) obs (contained_entities) ))

	(call exit_if_failures (assoc msg "Deleted trainee"))

	(declare (assoc loaded (call (load (concat "./" save_model_filename ".amlg"))) ))
	(move_entities loaded "howso")


	(print "Number of loaded cases in model: ")
	(declare (assoc
		num_loaded_cases
			(get
				(call_entity "howso" "get_num_training_cases")
				(list 1 "payload" "count")
			)
	))
	(call assert_same (assoc exp 1 obs num_loaded_cases))

	(print "Replay sessions: ")
	(assign (assoc result (call_entity "howso" "get_sessions")))
	(call assert_same (assoc exp (assoc "id" session_name) obs (get result (list 1 "payload" 0) ) ))

	(call_entity "howso" "set_session_metadata" (assoc
		session session_name
		metadata
			(assoc
				"name" "blah"
				"creation_date" "blah3"
				"modified_date" "blah4"
			)
	))

	(print "Properly updated session metadata: ")
	(assign (assoc result (call_entity "howso" "get_session_metadata" (assoc session session_name)) ))
	(call assert_same (assoc
		exp
			(assoc
				"creation_date" "blah3"
				"name" "blah"
				"modified_date" "blah4"
			)
		obs (get result (list 1 "payload"))
	))

	(print "Get sessions returns id and name: ")
	(call assert_same (assoc
		obs
			(get
				(call_entity "howso" "get_sessions" (assoc attributes (list "name") ))
				(list 1 "payload")
			)
		exp (list (assoc "id" session_name "name" "blah"))
	))

    ;cleanup saved test model
    (if (= (system "os") "Windows")
        (system "system" "del ut_test_model.*")

        ;else posix
		(system "system" "rm -rf ut_20test_5fmodel*")
    )

	(if (> num_loaded_cases 1)
		(print "* * *\nNOTE: Try to run this test again. It's likely this failure was\n      due to unremoved saved test model that should be gone now.\n* * *\n")
	)

	(call exit_if_failures (assoc msg "Delete and load after"))

;VERIFY ANALYZE omni_targeted stores parameters in a map
	(call_entity "howso" "train" (assoc
		features (list "label1" "label2" "action")
		input_cases
			(list
				(list 2 2 2)
				(list 3 2 3)
				(list 2 3 2)
				(list 3 3 3)
				(list 1.5 3 2)
			)
	))

	(call_entity "howso" "analyze" (assoc
		context_features (list "label1" "label2" "action")
	))
	(assign (assoc result (call_entity "howso" "get_internal_parameters" )))
	(print "no action features results in targetless analysis: ")
	(call assert_true (assoc
		obs (contains_index (get result (list 1 "payload" "hyperparameter_map")) ".targetless")
	))

	(call_entity "howso" "analyze" (assoc
		context_features (list "label1" "label2" "action")
		targeted_model "omni_targeted"
	))


	(assign (assoc result (get (call_entity "howso" "get_internal_parameters") (list 1 "payload" "hyperparameter_map")) ))
	(print "omni_targeted analysis parameters: " )
	(call assert_true (assoc
		obs
			(and
				(contains_index result "label1")
				(contains_index result "label2")
				(contains_index result "action")
				(contains_index (list result "label1" "full") "k")
				(contains_index (list result "label1" "full") "p")
				(contains_index (list result "label1" "full") "dt")
				(contains_index (list result "label2" "full") "k")
				(contains_index (list result "label2" "full") "p")
				(contains_index (list result "label2" "full") "dt")
				(contains_index (list result "action" "full") "k")
				(contains_index (list result "action" "full") "p")
				(contains_index (list result "action" "full") "dt")
			)
	))

;VERIFY RETURNED ATTRIBUTES. The action feature was previously stored as nominal.
	(assign (assoc
		result
			(call_entity "howso" "set_feature_attributes" (assoc features (assoc "action" (assoc "type" "ordinal"))))
	))
	(call keep_result_payload)
	(print "Set and get feature attributes: ")
	(call assert_same (assoc
		obs (get (call_entity "howso" "get_feature_attributes" ) (list 1 "payload"))
		exp (assoc "action" (assoc "type" "ordinal"))
	))

	(call assert_same (assoc
		obs result
		exp (assoc "action" (assoc "type" "ordinal"))
	))

	(call exit_if_failures (assoc msg unit_test_name))
)