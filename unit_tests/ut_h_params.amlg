(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_params.amlg"))

	(call_entity "howso" "create_trainee" (assoc trainee "st_model1"))

;VERIFY VERSION EXISTS
	(assign (assoc result (call_entity "howso" "version" )))
	(print "Howso Version: " result "\n")
	(call assert_true (assoc obs (!= (null) result)))

	(call exit_if_failures (assoc msg "Version is set"))


;VERIFY GET INTERNAL PARAMETERS
	(assign (assoc
		result
			(call_entity "howso" "set_internal_parameters" (assoc
				trainee "st_model1"
				hyperparameter_map
					(assoc "single_targeted" (assoc "k" 5 "p" 2 "dt" -1))
			))
	))
	(print "bad hyperparameter map: ")
	(call assert_same (assoc exp "error" obs (get result "status")))
	(print "1 error: ")
	(call assert_same (assoc exp 1 obs (size (get result "errors"))))


	(assign (assoc
		result
			(call_entity "howso" "set_internal_parameters" (assoc
				trainee "st_model1"
				hyperparameter_map
					(assoc ".targetless" (assoc "A.B.C." (assoc "robust" (assoc ".none" (assoc "k" 5 "p" 2 "dt" -1)))))
			))
	))
	(print "good hyperparameter map: ")
	(call assert_same (assoc exp "ok" obs (get result "status")))

	(assign (assoc result (call_entity "howso" "get_internal_parameters" (assoc trainee "st_model1"))))
	(print "Test get_internal_parameters: ")
	(call assert_same (assoc exp (assoc "k" 5  "p" 2 "dt" -1) obs (get result (list "payload" "hyperparameter_map" ".targetless" "A.B.C." "robust" ".none"))))

	(assign (assoc result (call_entity "howso" "get_internal_parameters" (assoc trainee "st_model1" action_feature ".targetless"))))
	(print "Test get_internal_parameters with GetHyperparameters logic: ")
	(call assert_same (assoc exp (assoc "k" 5  "p" 2 "dt" -1) obs (get result (list "payload" "hyperparameter_map"))))

	(call exit_if_failures (assoc msg "Test get_internal_parameters"))


;VERIFY BASIC OBSERVE AND GET NUM TRAINING CASES
	(declare (assoc session_name "invalid id *?\right@dawn :32"))
	(call_entity "howso" "train" (assoc
		trainee "st_model1"
		features (list "label1" "label2" "action")
		input_cases (list (list 1 2 1))
		session session_name
	))

	(assign (assoc result (call_entity "howso" "get_num_training_cases" (assoc trainee "st_model1"))))
	(print "Number of training cases: ")
	(call assert_same (assoc exp 1 obs (get result (list "payload" "count"))))

	(call exit_if_failures (assoc msg "Observed one training case"))

;VERIFY SET NOMINAL
	(call_entity "howso" "set_feature_attributes" (assoc trainee "st_model1" features (assoc "action" (assoc "type" "nominal"))))
	(print "Set and get nominal features: ")
	(call assert_same (assoc
		obs (get (call_entity "howso" "get_feature_attributes" (assoc trainee "st_model1")) "payload")
		exp (assoc "action" (assoc "type" "nominal"))
	))

	(call exit_if_failures (assoc msg "Set and get nominal features"))


;VERIFY RANDOM SEED
	(print "Set random seed: " )
	(assign (assoc result (call_entity "howso" "set_random_seed" (assoc trainee "st_model1" seed "12345"))))
	(call assert_same (assoc obs (get result "status") exp "ok"))

	(call exit_if_failures (assoc msg "Set random seed"))

	(call_entity "howso" "set_metadata" (assoc
		trainee "st_model1"
		metadata (assoc "arbitrary" (list "a" "B" 3))
	))

;VERIFY SAVE AND LOAD
	(declare (assoc save_model_filename "ut/ test_model \* 1<>2?"))

	(assign (assoc
		result
			(call_entity "howso" "save" (assoc
				trainee "st_model1"
				filepath "./"
				filename save_model_filename
			))
	))
	(print "Invalid filename check works: ")
	(call assert_same (assoc
		exp "Failed to save trainee as ut/ test_model * 1<>2?"
		obs (get result (list "errors" 0 "detail") )
	))

	(assign (assoc save_model_filename "ut test_model"))
	(call_entity "howso" "save" (assoc
		trainee "st_model1"
		filepath "./"
		filename save_model_filename
		separate_files (true)
	))

	(print "Get loaded trainees: ")
	(declare (assoc trainees (call_entity "howso" "get_loaded_trainees")))
	(call assert_same (assoc exp (list "st_model1") obs (get trainees "payload")))

	(call exit_if_failures (assoc msg "Save and load trainee"))


;VERIFY COPY TRAINEE
	(print "Copy trainee: ")
	(assign (assoc result (call_entity "howso" "copy" (assoc trainee "st_model1" target_trainee "clone"))))
	(call assert_same (assoc exp "clone" obs (get result (list "payload" "name")) ))

	(print "Copied cases: ")
	(assign (assoc result (call_entity "howso" "get_num_training_cases" (assoc trainee "clone"))))
	(call assert_same (assoc exp 1 obs (get result (list "payload" "count")) ))

	(call exit_if_failures (assoc msg "Copy trainee"))

	(print "Copy fails if target exists: ")
	(assign (assoc result (call_entity "howso" "copy" (assoc trainee "st_model1" target_trainee "clone"))))
	(call assert_same (assoc exp "error" obs (get result "status") ))

	(print "Loaded trainees: ")
	(assign (assoc trainees (call_entity "howso" "get_loaded_trainees")))
	(call assert_same (assoc exp (list "clone" "st_model1") obs (sort (get trainees "payload")) ))

	(call exit_if_failures (assoc msg "Copy trainee fails accordingly"))


	(print "Verify metada persists after loading and copying: ")
	(call assert_same (assoc
		exp (assoc "arbitrary" (list "a" "B" 3))
		obs (get (call_entity "howso" "get_metadata" (assoc trainee "clone")) "payload")
	))

;VERIFY RESET DEFAULTS
	(print "Hypeparameters pre reset: ")
	(assign (assoc result (call_entity "howso" "get_internal_parameters" (assoc trainee "clone"))))
	;parameters should be same as st_model1 since clone was copied from it
	(call assert_same (assoc
		obs (get result (list "payload" "hyperparameter_map" ".targetless" "A.B.C." "robust" ".none"))
		exp (assoc "k" 5 "p" 2 "dt" -1 "featureDomainAttributes" (assoc "action" 0) )
	))

	(print "Hypeparameters post reset: ")
	(call_entity "howso" "reset_parameter_defaults" (assoc trainee "clone"))
	(assign (assoc result (call_entity "howso" "get_internal_parameters" (assoc trainee "clone"))))
	(call assert_same (assoc
		obs (get result (list "payload" "hyperparameter_map"))
		exp (assoc)
	))

	(call assert_same (assoc
		obs (get result (list "payload" "default_hyperparameter_map"))
		exp
			(assoc
				"k" 8
				"p" 0.1
				"dt" -1
				"featureWeights" (null)
				"featureDeviations" (null)
				"allFeatureResidualsCached" (false)
			)
	))

	(call exit_if_failures (assoc msg "Reset parameters to  defaults"))


;VERIFY DELETE TRAINEE
	(call_entity "howso" "delete" (assoc trainee "clone"))
	(call_entity "howso" "delete" (assoc trainee "st_model1"))
	(print "Delete trainees: ")
	(assign (assoc trainees (call_entity "howso" "get_loaded_trainees")))
	(call assert_same (assoc exp (list) obs (get trainees "payload") ))

	(call exit_if_failures (assoc msg "Deleted trainee"))


	(call_entity "howso" "load" (assoc
		filename save_model_filename
		trainee "st_model1"
		filepath "./"
		separate_files (true)
	))
	(print "Get loaded trainees after delete: ")
	(assign (assoc trainees (call_entity "howso" "get_loaded_trainees")))
	(call assert_same (assoc exp (list "st_model1") obs (get trainees "payload") ))

	(print "Number of loaded cases in model: ")
	(declare (assoc
		num_loaded_cases
			(get
				(call_entity "howso" "get_num_training_cases" (assoc trainee "st_model1"))
				(list "payload" "count")
			)
	))
	(call assert_same (assoc exp 1 obs num_loaded_cases))

	(print "Replay sessions: ")
	(assign (assoc result (call_entity (list "howso" "st_model1") "GetSessionIds")))
	(call assert_same (assoc exp (list session_name) obs result))

	(call_entity "howso" "set_session_metadata" (assoc
		trainee "st_model1"
		session session_name
		metadata
			(assoc
				"name" "blah"
				"creation_date" "blah3"
				"modified_date" "blah4"
			)
	))

	(print "Properly updated session metadata: ")
	(assign (assoc result (call_entity "howso" "get_session_metadata" (assoc trainee "st_model1" session session_name)) ))
	(call assert_same (assoc
		exp
			(assoc
				"creation_date" "blah3"
				"name" "blah"
				"modified_date" "blah4"
			)
		obs (get result "payload")
	))

	(print "Get sessions returns id and name: ")
	(call assert_same (assoc
		obs
			(get
				(call_entity "howso" "get_sessions" (assoc trainee "st_model1" attributes (list "name") ))
				"payload"
			)
		exp (list (assoc "id" session_name "name" "blah"))
	))

	(print "Case by replay: ")
	(assign (assoc result (call_entity (list "howso" "st_model1") "GetCaseGivenReplaySession" (assoc session session_name session_index 0))))
	(call assert_not_null (assoc obs result))


    ;cleanup saved test model
    (if (= (system "os") "Windows")
        (seq
            (system "system" "rmdir /S /Q ut_20test_5fmodel")
            (system "system" "del ut_20test_5fmodel.*")
			(system "system" "del \"ut test_modelVersion.txt\"")
        )

        ;else posix
		(seq
			(system "system" "rm -rf ut_20test_5fmodel*")
			(system "system" "rm \"ut test_modelVersion.txt\"")
		)
    )

	(if (> num_loaded_cases 1)
		(print "* * *\nNOTE: Try to run this test again. It's likely this failure was\n      due to unremoved saved test model that should be gone now.\n* * *\n")
	)

	(call exit_if_failures (assoc msg "Delete and load after"))

;VERIFY ANALYZE omni_targeted stores parameters in a map
	(call_entity "howso" "train" (assoc
		trainee "st_model1"
		features (list "label1" "label2" "action")
		input_cases
			(list
				(list 2 2 2)
				(list 3 2 3)
				(list 2 3 2)
				(list 3 3 3)
				(list 1.5 3 2)
			)
	))

	(call_entity "howso" "analyze" (assoc
		trainee "st_model1"
		context_features (list "label1" "label2" "action")
	))
	(assign (assoc result (call_entity "howso" "get_internal_parameters" (assoc trainee "st_model1"))))
	(print "no action features results in targetless analysis: ")
	(call assert_true (assoc
		obs (contains_index (get result (list "payload" "hyperparameter_map")) ".targetless")
	))

	(call_entity "howso" "analyze" (assoc
		trainee "st_model1"
		context_features (list "label1" "label2" "action")
		targeted_model "omni_targeted"
	))


	(assign (assoc result (get (call_entity "howso" "get_internal_parameters" (assoc trainee "st_model1")) (list "payload" "hyperparameter_map")) ))
	(print "omni_targeted analysis parameters: " )
	(call assert_true (assoc
		obs
			(and
				(contains_index result "label1")
				(contains_index result "label2")
				(contains_index result "action")
				(contains_index (list result "label1" "full") "k")
				(contains_index (list result "label1" "full") "p")
				(contains_index (list result "label1" "full") "dt")
				(contains_index (list result "label2" "full") "k")
				(contains_index (list result "label2" "full") "p")
				(contains_index (list result "label2" "full") "dt")
				(contains_index (list result "action" "full") "k")
				(contains_index (list result "action" "full") "p")
				(contains_index (list result "action" "full") "dt")
			)
	))

	(call exit_if_failures (assoc msg unit_test_name))
)