(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_null_residual_convictions.amlg" retries 1))

	(call_entity "howso" "set_feature_attributes" (assoc
		feature_attributes (assoc "class" (assoc "type" "nominal")  )
	))

	(declare (assoc dataset (load "unit_test_data/iris_nulls.csv")))

	(declare (assoc
		result (null)
		features (first dataset)
		data (tail dataset)
	))
	(declare (assoc
		context_features (trunc features)
		action_features (list (last features))
	))

	(call_entity "howso" "train" (assoc
		features features
		cases data
		session "session1"
	))

	(call_entity "howso" "analyze")
	(call_entity "howso" "react_aggregate" (assoc
		details (assoc feature_full_residuals (true))
	))

	(assign (assoc
		result
			(call_entity "howso" "single_react" (assoc
				case_indices (list "session1" 10) ; a setosa case with null for 'sepal_width'
				preserve_feature_values features
				leave_case_out (true)
				details
					(assoc
						feature_full_residual_convictions_for_case (true)
					)
			))
	))
	(call keep_result_payload)

	;dataset has nulls for 20 of the setosa cases for 'sepal_width'
	(print "Continuous feature local residual conviction: ")
	(call assert_approximate (assoc
		obs (get result (list "feature_full_residual_convictions_for_case" "sepal_width"))
		exp 1.1
		thresh 0.5
	))

	(assign (assoc
		result
			(call_entity "howso" "single_react" (assoc
				case_indices (list "session1" 149) ;a virginica case with null for 'class'
				preserve_feature_values features
				leave_case_out (true)
				details
					(assoc
						feature_full_residual_convictions_for_case (true)
					)
			))
	))
	(call keep_result_payload)

	;dataset has nulls for 20 of the virginica cases for 'class'
	(print "Nominal feature local residual conviction: ")
	(call assert_approximate (assoc
		obs (get result (list "feature_full_residual_convictions_for_case" "class"))
		exp 0.4
		thresh 0.35
	))

	(call exit_if_failures (assoc msg unit_test_name ))
)
