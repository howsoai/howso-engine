(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_time_series_stock.amlg" debug (false)))

	(declare (assoc
		data
			(list
				(list "stk_A"	8	100)
				(list "stk_A"	9	101)
				(list "stk_A"	10	103)
				(list "stk_A"	11	105)
				(list "stk_A"	12	104)
				(list "stk_A"	13	106)
				(list "stk_A"	14	104)
				(list "stk_A"	15	103)
				(list "stk_A"	16	105)
				(list "stk_A"	17	106)
				(list "stk_A"	18	107)
				(list "stkB"	8	110)
				(list "stkB"	9	109)
				(list "stkB"	10	110)
				(list "stkB"	11	109)
				(list "stkB"	12	108)
				(list "stkB"	13	109)
				(list "stkB"	14	108)
				(list "stkB"	15	106)
				(list "stoC"	5	94)
				(list "stoC"	6	96)
				(list "stoC"	7	95)
				(list "stoC"	8	93)
				(list "stoC"	9	95)
				(list "stoC"	10	98)
				(list "stoC"	11	99)
				(list "stoC"	12	98)
				(list "stoC"	13	95)
				(list "stoC"	14	96)
				(list "stoC"	15	94)
				(list "stoC"	16	93)
				(list "stoC"	17	91)
				(list "stoC"	18	92)
				(list "stoC"	19	90)
				(list "stoC"	20	91)
				(list "stoC"	21	89)
				(list "stoC"	22	91)
			)

		features (list "stock" "time" "value")
		result (null)
		result_features (null)
	))

	(call_entity "howso" "create_trainee" (assoc trainee "temp"))

	(call_entity "howso" "set_internal_parameters" (assoc
		trainee "temp"
		default_hyperparameter_map (assoc "k" 3 "p" .1 "dt" -1)
	))

	(call_entity "howso" "set_feature_attributes" (assoc
		trainee "temp"
		features
			(assoc
				"stock"
					(assoc
						"type" "nominal"
						"id_feature" (true)
						"time_series"
					)

				"time"
					(assoc
						"type" "continuous"
						"decimal_places" 0
						"time_series" (assoc "time_feature" (true) "type" "delta")
						"bounds"
							(assoc
								"allow_null" (false)
								"min" 1
								"max" 30
							)
					)
				"value"
					(assoc
						"type" "continuous"
						"decimal_places" 0
						"time_series" (assoc "type" "delta" "num_lags" 2)
						"bounds"
							(assoc
								"allow_null" (true)
								"min" 80
								"max" 125
							)
					)
			)
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "get_feature_attributes" (assoc trainee "temp"))
				"payload"
			)
	))
	(print "Progress features derived correctly: ")
	(call assert_same (assoc
		obs (get result ".series_progress_delta")
		exp
			(assoc
				bounds (assoc "max" 1 "min" 0)
				type "continuous"
			)
	))

	(call assert_same (assoc
		obs (get result ".series_progress")
		exp
			(assoc
				auto_derive_on_train (assoc derive_type "progress" series_id_features (list "stock") )
				bounds (assoc min 0)
				derived_feature_code "(min 1 (+ #.series_progress 1 #.series_progress_delta 1))"
				max_row_lag 1
				type "continuous"
			)
	))

	(call_entity "howso" "train" (assoc
		trainee "temp"
		input_cases (trunc data 16)
		features features
		session "session"
	))

	;break up the train into two separate calls where the second train trains only part of a series
	(call_entity "howso" "train" (assoc
		trainee "temp"
		input_cases (tail data 21)
		features features
		session "session"
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "batch_react_series" (assoc
					trainee "temp"
					num_series_to_generate 30
					action_features (list "stock" "time" "value")
					desired_conviction 5
					use_regional_model_residuals (false)
				))
				"payload"
			)
	))

	(declare (assoc series_list (get result "series") ))

	(declare (assoc
		series_lengths
			(map
				(lambda (size (current_value)))
				series_list
			)
	))

	(print "Average series length matches original lengths: ")
	(call assert_approximate (assoc
		obs (/ (apply "+" series_lengths) (size series_lengths))
		exp 12.5
		thresh 3.5
	))

	(call exit_if_failures (assoc msg "Expected series length synthesised."))

	(assign (assoc
		result
			(get
				(call_entity "howso" "batch_react_series" (assoc
					trainee "temp"
					num_series_to_generate 30
					action_features (list "stock" "time" "value")
					desired_conviction 5
					use_regional_model_residuals (false)
					continue_series (true)
				))
				"payload"
			)
	))

	(assign (assoc series_list (get result "series") ))

	(assign (assoc
		series_lengths
			(map
				(lambda (size (current_value)))
				series_list
			)
	))

	(print "Continue series initial time steps correct: ")
	(call assert_same (assoc
		exp (range (true) 1 30 1)
		obs
			;should results in a list of 30 (true) statemenents
			(map
				(lambda (let
					(assoc first_series_case (first (current_value 1)) )
					;the time step of the first case in each synthed series is one of the next
					;3 possible timesteps for each of the 3 originally trained series
					;where each case is a list of [id, time, value]
					(contains_value (list 16 19 23) (get first_series_case 1))
				))
				series_list
			)
	))

	(print "Continued average series length is notably shorter: ")
	(call assert_approximate (assoc
		obs (/ (apply "+" series_lengths) (size series_lengths))
		exp 5
		thresh 1.5
	))

	(call exit_if_failures (assoc msg "Unconditioned continue series."))

	(assign (assoc
		result
			(get
				(call_entity "howso" "batch_react_series" (assoc
					trainee "temp"
					num_series_to_generate 30
					action_features (list "stock" "time" "value")
					desired_conviction 5
					use_regional_model_residuals (false)
					continue_series (true)
					init_time_steps (list 13)

				))
				"payload"
			)
	))

	(assign (assoc series_list (get result "series") ))

	(assign (assoc
		series_lengths
			(map
				(lambda (size (current_value)))
				series_list
			)
	))

	(print "Continue series initial time steps correct: ")
	(call assert_same (assoc
		exp (range (true) 1 30 1)
		obs
			;should results in a list of 30 (true) statemenents
			(map
				(lambda (let
					(assoc first_series_case (first (current_value 1)) )
					;the time step of the first case in each synthed series is 14
					;where each case is a list of [id, time, value]
					(= 13 (get first_series_case 1))
				))
				series_list
			)
	))

	(print "Continued average series length from middle is medium length: ")
	(call assert_approximate (assoc
		obs (/ (apply "+" series_lengths) (size series_lengths))
		exp 6
		thresh 2.6
	))

	(call exit_if_failures (assoc msg "Conditioned start continue series."))

	(assign (assoc
		result
			(get
				(call_entity "howso" "batch_react_series" (assoc
					trainee "temp"
					num_series_to_generate 30
					action_features (list "stock" "time" "value" ".value_lag_2")
					desired_conviction 5
					use_regional_model_residuals (false)
					continue_series (true)
					init_time_steps (list 10)
					final_time_steps (list 17)

				))
				"payload"
			)
	))

	(assign (assoc series_list (get result "series") ))

	(assign (assoc
		series_lengths
			(map
				(lambda (size (current_value)))
				series_list
			)
	))

	;validate that each series stats with 10, and that the first two cases both have the correct previous 2-lag values
	(print "Continue series initial time and two lags are correct: ")
	(call assert_same (assoc
		exp (range (true) 1 30 1)
		obs
			(map
				(lambda (let
					(assoc
						first_series_case (first (current_value 1))
						second_series_case (get (current_value 1) 1)
					)
					;
					(if (!= 10 (get first_series_case 1))
						(false)

						(or
							;two .value_lag_2 values for stk_A
							(and
								(= 100 (last first_series_case))
								(= 101 (last second_series_case))
							)

							;two .value_lag_2 values for stkB
							(and
								(= 110 (last first_series_case))
								(= 109 (last second_series_case))
							)
							;two .value_lag_2 values stoC
							(and
								(= 93 (last first_series_case))
								(= 95 (last second_series_case))
							)
						)
					)
				))
				series_list
			)
	))

	(print "Continued average series length from start to end: ")
	;should all be ~8
	(call assert_approximate (assoc
		obs (/ (apply "+" series_lengths) (size series_lengths))
		exp 8
		thresh 1
	))

	(call exit_if_failures (assoc msg "Continue series initial and final time with two lags."))

	(assign (assoc
		result
			(get
				(call_entity "howso" "batch_react_series" (assoc
					trainee "temp"
					num_series_to_generate 5
					action_features (list "stock" "time" "value" ".value_lag_2")
					desired_conviction 5
					use_regional_model_residuals (false)
					continue_series (true)
					init_time_steps (list 10)
					output_new_series_ids (false)
					initial_features (list "stock")
					initial_values (list (list "stk_A") (list "stk_A") (list "stkB") (list "stkB") (list "stoC"))
				))
				"payload"
			)
	))

	(assign (assoc series_list (get result "series") ))

	(print "Continue for specific IDs and start times: ")
	(call assert_true (assoc
		obs
			(and
				;check that each series has at least one case where first feature is series ID and it is correct
				(=
					"stk_A"
					(get series_list (list 0 0 0))
					(get series_list (list 1 0 0))
				)
				(=
					"stkB"
					(get series_list (list 2 0 0))
					(get series_list (list 3 0 0))
				)
				(=
					"stoC"
					(get series_list (list 4 0 0))
				)
			)
	))

	(call exit_if_failures (assoc msg "Continue conditioned on IDs and start time."))

	(assign (assoc
		result
			(call_entity "howso" "batch_react_series" (assoc
				trainee "temp"
				num_series_to_generate 1
				action_features (list "stock" "time" "value" ".value_lag_2")
				desired_conviction 5
				use_regional_model_residuals (false)
				continue_series (true)
				init_time_steps (list 10)
				output_new_series_ids (false)
				initial_features (list "stock")
				initial_values (list (list "fake_stock"))
			))
	))

	(print "Warning given when using an ID that was not trained: ")
	(call assert_same (assoc
		exp (list (assoc detail "There is no series trained with the set of IDs:\nstock: fake_stock\n"))
		obs (get result "warnings")
	))

	;set attributes to verify that continue doesn't work on terminated series
	(call_entity "howso" "set_feature_attributes" (assoc
		trainee "temp"
		features
			(assoc
				"stock"
					(assoc
						"type" "nominal"
						"id_feature" (true)
						"time_series"
							(assoc
								"series_has_terminators" (true)
								"stop_on_terminator" (true)
							)
					)

				"time"
					(assoc
						"type" "continuous"
						"decimal_places" 0
						"time_series" (assoc "time_feature" (true) "type" "delta")
						"bounds" (assoc "allow_null" (false) "min" 1 "max" 30)
					)
				"value"
					(assoc
						"type" "continuous"
						"decimal_places" 0
						"time_series" (assoc "type" "delta" "num_lags" 2)
						"bounds" (assoc "allow_null" (true) "min" 80 "max" 125)
					)
			)
	))

	(assign (assoc
		result
			(call_entity "howso" "batch_react_series" (assoc
				trainee "temp"
				num_series_to_generate 3
				action_features (list "stock" "time" "value")
				desired_conviction 5
				use_regional_model_residuals (false)
				continue_series (true)
			))
	))

	(print "Batch react series failed to continue series with a warning: ")
	(call assert_same (assoc
		obs result
		exp
			(assoc
				errors (null)
				payload
					(assoc
						action_features (list "stock" "time" "value")
						;3 nulls, one for each series
						series (list (null) (null) (null))
					)
				status "ok"
				;only one warning
				warnings (list (assoc detail "Can't continue terminated series.") )
			)
	))

	(assign (assoc
		result
			(call_entity "howso" "react_series" (assoc
				trainee "temp"
				action_features (list "stock" "time" "value")
				desired_conviction 5
				use_regional_model_residuals (false)
				continue_series (true)
			))
	))

	(print "Single react series failed to continue series with a warning: ")
	(call assert_same (assoc
		obs result
		exp
			(assoc
				errors (null)
				payload
					(assoc
						action_features (list "stock" "time" "value")
						series (null)
					)
				status "ok"
				warnings (list (assoc detail "Can't continue terminated series.") )
			)
	))


	(call exit_if_failures (assoc msg "Don't continue terminated series."))

	(call exit_if_failures (assoc msg unit_test_name))
)