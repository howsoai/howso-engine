(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_string_ordinals.amlg"))

	(declare (assoc
		data
			(list
				(list 1  "one"   1  1 .true .true  1 )
				(list 2	 "one"   2  1 .true .true  1 )
				(list 3	 "one"   3  1 .true .true  1 )
				(list 4	 "one"   4  1 .true .true  1 )
				(list 5	 "one"   5  1 .true .true  1 )
				(list 6	 "two"   6  2 .true .true  1 )
				(list 7	 "two"   7  2 .true .true  1 )
				(list 8	 "two"   8  2 .true .true  1 )
				(list 9	 "two"   9  2 .true .true  1 )
				(list 10 "two"   10 2 .true .true  1 )
				(list 11 "three" 11 3 .false .false 1 )
				(list 12 "three" 12 3 .false .false 1 )
				(list 13 "three" 13 3 .true .true  1 )
				(list 14 "three" 14 3 .true .true  1 )
				(list 15 "three" 15 3 .true (null)  1 )
				(list 16 "four"  16 4 .true (null)  1 )
				(list 17 "four"  17 4 .true (null)  1 )
				(list 18 "four"  18 4 .false (null) 1 )
				(list 19 "four"  19 4 .false .false 1 )
				(list 20 "four"  20 4 .true .false 1 )
				(list 21 "five"  21 5 .true .false 1 )
				(list 22 "five"  22 5 .true .false 1 )
				(list 23 "five"  23 5 .true .false 1 )
				(list 24 "five"  24 5 .true .true  1 )
				(list 25 "five"  25 5 .true .true  1 )
				(list 26 "five"  26 5 .true .true  1 )
			 )
	))
	(declare (assoc
		features (list "id" "value" "count"  "num_nom" "bool" "bool_nom" "inactive")
		result (null)
	))

	(call_entity "howso" "set_params" (assoc
		default_hyperparameter_map (assoc "k" 3 "p" 2 "dt" -1)
	))

	(call_entity "howso" "set_feature_attributes" (assoc
		feature_attributes
			(assoc
				"id"  (assoc "type" "nominal" "data_type" "number" "unique" .true)
				"value" (assoc "type" "ordinal" "bounds" (assoc "allowed" (list "one" "two" "three" "four" "five")))
				"count" (assoc "type" "continuous")
				"num_nom" (assoc "type" "nominal" "data_type" "number")
				"bool" (assoc "type" "nominal") ;stored as stringified booleans, ie "true" and "false"
				"bool_nom" (assoc "type" "nominal" "data_type" "boolean")
				"inactive" (assoc "type" "continuous")
			)
	))

	(print "Properly set ordinal lookup: ")
	(call assert_same (assoc
		obs (call_entity "howso" "debug_label" (assoc label "!ordinalStringToOrdinalMap"))
		exp
			(assoc
				"value"
					(assoc
						"one" 1
						"two" 2
						"three" 3
						"four" 4
						"five" 5
				 )
			)
	))

	(call_entity "howso" "train" (assoc
		cases data
		features features
		session "session"
	))


	(assign (assoc
		result
			(get
				(call_entity "howso" "single_react" (assoc
					context_features (list "value" "count")
					context_values (list "three" 11)
					action_features (list "num_nom" "bool" "bool_nom")
				))
				(list 1 "payload" "action_values")
			)
	))

	(print "Proper nominals data_type is preserved: ")
	;bool is converted to a sting because it wasn't specified as data_type : boolean
	(call assert_same (assoc obs result exp (list 3 ".false" .false)))


	(assign (assoc
		result
			(get
				(call_entity "howso" "single_react" (assoc
					context_features (list "bool" "bool_nom")
					;bool will be treated as a string
					context_values (list ".true" .false)
					action_features (list "value" )
				))
				(list 1 "payload" "action_values")
			)
	))

	(print "Proper nominal boolean encoding on input: ")
	(call assert_same (assoc obs result exp (list "five")))


	(assign (assoc
		result
			(get
				(call_entity "howso" "single_react" (assoc
					context_features (list "value" "count" "num_nom")
					context_values (list "four" 17 4)
					action_features (list "bool_nom")
					use_differential_privacy .true
					desired_conviction 100

				))
				(list 1 "payload" "action_values")
			)
	))

	(print "Nominal boolean generates nulls correctly: ")
	(call assert_same (assoc obs result exp (list (null))))


	(assign (assoc
		result
			(get
				(call_entity "howso" "single_react" (assoc
					context_features (list "value" "count")
					context_values (list "one" 11)
					action_features (list "id")
				))
				(list 1 "payload" "action_values")
			)
	))

	(print "expected ID of 11 because it's between 'ones' and less than count of 11: ")
	(call assert_same (assoc obs (first result) exp 10))

	(assign (assoc
		result
			(get
				(call_entity "howso" "single_react" (assoc
					context_features (list "count")
					context_values (list 18.5)
					action_features (list "value")
				))
				(list 1 "payload" "action_values")
			)
	))

	(print "18.5 is close to 'four': ")
	(call assert_same (assoc obs (first result) exp "four"))


	(assign (assoc
		result
			(get
				(call_entity "howso" "single_react" (assoc
					desired_conviction 1
					action_features features
					feature_bounds_map (assoc "value" (assoc "allowed" (list "two" "four")))
				))
				(list 1 "payload" "action_values")
			)
	))

	(print "Generates string ordinals " (get result 1) " : ")
	(call assert_true (assoc
		obs (contains_value (list "two" "four" ) (get result 1))
	))

	(print "expected value is cached correctly for string ordinal feature: ")
	 (call assert_same (assoc
	 	exp 5
	 	obs
			(get
				(call_entity "howso""debug_label" (assoc label "!expectedValuesMap"))
				[".none" "value" "expected_value"]
			)
	))

	(call exit_if_failures (assoc msg "String ordinals." ))


	(call_entity "howso" "analyze")

	(assign (assoc
		result (call_entity "howso" "get_params")
	))
	(call keep_result_payload)

	(declare (assoc hp_map (get result ["hyperparameter_map" "targetless" "bool.bool_nom.count.id.inactive.num_nom.value." ".none"]) ))


	(print "Unique ID feature and inactive feature have the smallest theoretical deviation: ")
	(call assert_approximate (assoc
		exp 0.037746
		obs (get hp_map ["featureDeviations" "id"])
	))
	(call assert_approximate (assoc
		exp 0.037746
		obs (get hp_map ["featureDeviations" "inactive"])
	))

	(print "Inactive feature has weights but does not have id (unique) feature: ")
	(call assert_same (assoc
		exp  {
				bool 1
				bool_nom 1
				count 1
				inactive 0
				num_nom 1
				value 1
			}
		obs (get hp_map ["featureMdaMap" "inactive"])
	))

	(print "id feature does not have weights assigned since it's unique: ")
	(call assert_true (assoc
		obs (not (contains_index (get hp_map "featureMdaMap") "id"))
	))

	(call exit_if_failures (assoc msg unit_test_name ))
)