(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_analyze.amlg" retries 1))

	(call_entity "howso" "create_trainee" (assoc trainee "analyze" ))
	(assign_to_entities "howso" (assoc trainee "analyze"))

	(call_entity "howso" "set_feature_attributes" (assoc
		features
			(assoc
				"size" (assoc "type" "nominal")
				"fruit" (assoc "type" "nominal")
			)
	))

	(declare
		(assoc
			result (null)
			features (list "height" "width" "length" "tart" "sweet" "size" "weight" "fruit")
			action_features (list  "fruit")
			context_features (list "height" "width" "length" "tart" "sweet" "size" "weight")
			fruit_data
				(list
					;		"h" "w" "l" 	"tart" "sweet" "size" 	"weight" 	"fruit"
					(list 	1 	.7 	1 		.3 		.40		"small" 	1 		"strawberry")
					(list 	1.1 .6 	.7		.4 		.45 	"small" 	.8 		"strawberry")
					(list 	.6 	.4 	.5 		.5 		.42 	"small" 	1.2 	"strawberry")
					(list 	.7 	.5 	.6 		.45		.49 	"small" 	1.1 	"strawberry")

					(list 	1.5	1.5	1.5		.8 		.4		"small" 	2 		"apple")
					(list 	2.1 1.6 2.7		.72		.55 	"medium" 	3 		"apple")
					(list 	2.6	2.7	2.2		.7		.52 	"medium" 	3.5 	"apple")
					(list 	3.6	3.1	3.5 	.77 	.54 	"medium" 	4.5 	"apple")

					(list 	2 	1 	3 		.05		.60		"small" 	3 		"banana")
					(list 	2.1 1.1	4.7		.1 		.65 	"medium" 	4 		"banana")
					(list 	2.6	1.1	5.4 	.05		.69 	"medium" 	5.5	 	"banana")
					(list 	3.1	1.2	7 		0 		.62 	"medium" 	7 		"banana")

					(list 	1.4 1.7 1.5		.22		.68		"small" 	2.4		"peach")
					(list 	2.1 1.6 2.3		.21		.75 	"medium" 	2.9		"peach")
					(list 	2.5	2.4	2.3		.26		.72 	"medium" 	3.2 	"peach")
					(list 	2.9 2.8 2.7		.23		.70	 	"medium" 	3.9 	"peach")

					(list 	4.5 5.0	5.1		.1 		.80		"medium" 	8 		"melon")
					(list 	5.1 6.2	6.7		.15		.65 	"large" 	12 		"melon")
					(list 	6.9 7.1 7.5		.13 	.71 	"large" 	14.5 	"melon")
					(list 	8.6 7.4 8.5		.14 	.78 	"large" 	18 		"melon")

					(list 	6 	3.7 4.1		.7 		.70		"large" 	11 		"pinapple")
					(list 	6.8 4.1 4.3		.75 	.65 	"large" 	13 		"pinapple")
					(list 	7.5 4.8 5.0		.8 		.62 	"large" 	14 		"pinapple")
					(list 	8.6	5.4	5.5		.85		.60 	"large" 	17	 	"pinapple")
			)

	))


	(call_entity "howso" "train" (assoc
		features features
		input_cases fruit_data
		session "unit_test"
	))


	(call_entity "howso" "analyze" (assoc
		context_features features
		action_features (list (last features))
		targeted_model "single_targeted"

	))
	(assign (assoc
		defaults (retrieve_from_entity (list "howso" "analyze") "defaultHyperparameters")
		hp_map (retrieve_from_entity (list "howso" "analyze") "hyperparameterMetadataMap")
	))

	(print "single target doesn't modify default: ")
	(call assert_same (assoc
		obs defaults
		exp
			(assoc
				"paramPath" (list ".default")
				"featureDomainAttributes" (assoc "fruit" 6 "size" 3)
				"featureWeights" (null)
				"useDeviations" (false)
				"p" 0.1
				"dt" -1
				"k" 8
				"featureDeviations" (null)
				"allFeatureResidualsCached" (false)
			)

	))

	(print "single target has expected attributes: ")
	(call assert_true (assoc
		obs
			(and
				(!= (null) (get hp_map (list "fruit" "height.length.size.sweet.tart.weight.width." "full" ".none" "k")))
				(!= (null) (get hp_map (list "fruit" "height.length.size.sweet.tart.weight.width." "full" ".none" "p")))
				(!= (null) (get hp_map (list "fruit" "height.length.size.sweet.tart.weight.width." "full" ".none" "dt")))
				(> (size (get hp_map (list "fruit" "height.length.size.sweet.tart.weight.width." "full" ".none" "featureWeights"))) 0)
			)
	))

	;default analyze will run targetless analysis
	(call_entity "howso" "analyze")

	(assign (assoc
		result (retrieve_from_entity (list "howso" "analyze") "hyperparameterMetadataMap")
	))

	(print "targetless analyzed with weights: ")
	(call assert_true (assoc
		obs
			(and
				(!= (null) (get result (list ".targetless" "fruit.height.length.size.sweet.tart.weight.width." "robust" ".none" "k")))
				(!= (null) (get result (list ".targetless" "fruit.height.length.size.sweet.tart.weight.width." "robust" ".none" "p")))
				(!= (null) (get result (list ".targetless" "fruit.height.length.size.sweet.tart.weight.width." "robust" ".none" "dt")))
				(> (size (get result (list ".targetless" "fruit.height.length.size.sweet.tart.weight.width." "robust" ".none" "featureWeights"))) 0)
				(> (size (get result (list ".targetless" "fruit.height.length.size.sweet.tart.weight.width." "robust" ".none" "featureDeviations" ))) 0)
			)
	))


	(call_entity "howso" "analyze" (assoc
		context_features (trunc features 6)
		action_features (tail features 2)
		targeted_model "single_targeted"

	))
	(assign (assoc
		result (retrieve_from_entity (list "howso" "analyze") "hyperparameterMetadataMap")
	))

	(print "multi-target fruit is full, has attributes: ")
	(call assert_true (assoc
		obs
			(and
				(!= (null) (get result (list "fruit" "height.length.size.sweet.tart.weight.width." "full" ".none" "k")))
				(!= (null) (get result (list "fruit" "height.length.size.sweet.tart.weight.width." "full" ".none" "p")))
				(!= (null) (get result (list "fruit" "height.length.size.sweet.tart.weight.width." "full" ".none" "dt")))
				(!= (null) (get result (list "fruit" "height.length.size.sweet.tart.weight.width." "full" ".none" "useDeviations")))
			)
	))

	(print "multi-target weight has robust attributes: ")
	(call assert_true (assoc
		obs
			(and
				(!= (null) (get result (list "weight" "height.length.size.sweet.tart.width." "robust" ".none" "k")))
				(!= (null) (get result (list "weight" "height.length.size.sweet.tart.width." "robust" ".none" "p")))
				(!= (null) (get result (list "weight" "height.length.size.sweet.tart.width." "robust" ".none" "dt")))
			)
	))


	(call_entity "howso" "analyze" (assoc
		context_features (append context_features action_features)
		action_features (list "height" "width")
		targeted_model "omni_targeted"
	))
	(assign (assoc
		result (retrieve_from_entity (list "howso" "analyze") "hyperparameterMetadataMap")
	))
	(print "omni-target height is full, has attributes: ")
	(call assert_true (assoc
		obs
			(and
				(!= (null) (get result (list "height" "fruit.length.size.sweet.tart.weight.width." "full" ".none" "k")))
				(!= (null) (get result (list "height" "fruit.length.size.sweet.tart.weight.width." "full" ".none" "p")))
				(!= (null) (get result (list "height" "fruit.length.size.sweet.tart.weight.width." "full" ".none" "dt")))
			)
	))
	(print "omni-target width is full, has attributes: ")
	(call assert_true (assoc
		obs
			(and
				(!= (null) (get result (list "width" "fruit.height.length.size.sweet.tart.weight." "full" ".none" "k")))
				(!= (null) (get result (list "width" "fruit.height.length.size.sweet.tart.weight." "full" ".none" "p")))
				(!= (null) (get result (list "width" "fruit.height.length.size.sweet.tart.weight." "full" ".none" "dt")))
			)
	))

	(call exit_if_failures (assoc msg "Analyzed Hyperparameters" ))

	(call_entity "howso" "add_feature" (assoc
		feature "TEST"
		feature_value 2
		condition_session "unit_test"
	))
	(assign (assoc
		result (retrieve_from_entity (list "howso" "analyze") "hyperparameterMetadataMap")
	))

	(print "test feature is added to hyperparameters: " )
	(call assert_true (assoc
		obs
			(and
				(= (false) (get result (list "weight" "height.length.size.sweet.tart.width." "robust" ".none" "allFeatureResidualsCached")) )
				(= (false) (get result (list "width" "fruit.height.length.size.sweet.tart.weight." "full" ".none" "allFeatureResidualsCached")) )
				(= (false) (get result (list ".targetless" "fruit.height.length.size.sweet.tart.weight.width." "robust" ".none" "allFeatureResidualsCached")) )
				(= (false) (get result (list "fruit" "height.length.size.sweet.tart.weight.width." "full" ".none" "allFeatureResidualsCached")) )
				(= (false) (get result (list "height" "fruit.length.size.sweet.tart.weight.width." "full" ".none" "allFeatureResidualsCached")) )
				; TEST is in the weights map
				(= 1 (get result (list ".targetless" "fruit.height.length.size.sweet.tart.weight.width." "robust" ".none" "featureWeights" "TEST")) )
			)
	))

	(print "test feature is added to default features: ")
	(call assert_true (assoc
		obs (contains_value (retrieve_from_entity (list "howso" "analyze") "defaultFeatures") "TEST")
	))

	(declare (assoc
		result2
			(call_entity "howso" "add_feature" (assoc
				feature "TEST"
				feature_value 2
				condition_session "unit_test"
				feature_attributes (assoc "type" "continuous")
			))
	))
	(print "test feature is NOT added and error is returned: ")
	(call assert_true (assoc
		obs (= 1 (size (get result2 "errors")))
	))

	(call_entity "howso" "add_feature" (assoc
		feature "TEST_NOM"
		feature_value "two"
		condition_session "unit_test"
		feature_attributes (assoc "type" "nominal")
	))

	(print "Adding nominal feature updates existing query type map: ")
	(call assert_same (assoc
		obs (retrieve_from_entity (list "howso" "analyze") "queryDistanceTypeMap")
		exp
			(assoc
				"TEST" "continuous_numeric"
				"TEST_NOM" "nominal_string"
				"fruit" "nominal_string"
				"size" "nominal_string"
			)
	))


	(print "Adding nominal feature updates existing counts map: ")
	(call assert_same (assoc
		obs (retrieve_from_entity (list "howso" "analyze") "nominalsMap")
		exp
			(assoc
				fruit 6
				size 3
				TEST_NOM 1
			)
	))

	; if analyzes to have featureDeviations, validate the value
	(if (contains_index result (list "width" "fruit.height.length.size.sweet.tart.weight." "full" ".none" "featureDeviations" "TEST"))
		(call assert_approximate (assoc
			obs (get result (list "width" "fruit.height.length.size.sweet.tart.weight." "full" ".none" "featureDeviations" "TEST"))
			exp 0.0416666
		))
	)

	(call assert_approximate (assoc
		obs (get result (list ".targetless" "fruit.height.length.size.sweet.tart.weight.width." "robust" ".none" "featureDeviations" "TEST"))
		exp 0.0416666
	))


	(call_entity "howso" "add_feature" (assoc
		feature "TEST_NOM"
		feature_value 2
	))
	(assign (assoc
		result (get (call_entity "howso" "get_feature_attributes") "payload")
	))
	(print "Feature attributes aren't modified for existing features: ")
	(call assert_same (assoc
		exp (assoc "type" "nominal")
		obs (get result "TEST_NOM")
	))

	(call exit_if_failures (assoc msg "Hyperparameters with added features" ))


	(assign (assoc result (call_entity "howso" "get_feature_mda" (assoc action_feature "fruit"))))

	(print "Verify error to user if no MDA is cached: ")
	(call assert_same (assoc
		obs result
		exp
			(assoc
        		errors
					(list
                        (assoc detail "Feature MDA has not been computed for this trainee. Please call 'react_into_trainee' with appropriate parameters to compute and store MDA prior to calling this method.")
                	)
        		status "error"
				warnings (null)
        		payload (null)
			)
	))


	;remove any preiously cached residuals from analyze
	(call_entity "howso" "react_into_trainee" (assoc
		context_features features
		residuals (false)
		action_feature "height"
	))
	(call_entity "howso" "react_into_trainee" (assoc
		context_features features
		residuals (false)
		action_feature "width"
	))
	(call_entity "howso" "react_into_trainee" (assoc
		context_features features
		residuals_robust (false)
		action_feature "weight"
	))
	(call_entity "howso" "react_into_trainee" (assoc
		context_features features
		residuals_robust (false)
	))
	(call_entity "howso" "react_into_trainee" (assoc
		context_features features
		residuals_robust (false)
		action_feature "fruit"
	))


	(print "All Residuals have been cleared out: ")
	(call assert_null (assoc
		obs (get (call_entity "howso" "get_feature_residuals") "payload" )
	))

	;cache both residuals - this caches targetless full and robust
	(call_entity "howso" "react_into_trainee" (assoc
		context_features features
		residuals (true)
		residuals_robust (true)
	))

	;cache the two types of mda
	(call_entity "howso" "react_into_trainee" (assoc
		context_features features
		mda (true)
		mda_robust_permutation (true)
		action_feature "fruit"
	))

	;cache residuals for the specific action feature, full
	(call_entity "howso" "react_into_trainee" (assoc
		context_features features
		residuals (true)
		action_feature "fruit"
	))

	(declare (assoc
		residuals_map (retrieve_from_entity (list "howso" "analyze") "residualsMap")
		prediction_stats_map (retrieve_from_entity (list "howso" "analyze") "featurePredictionStatsMap")
	))

	;concatenate the values which were used to compute residuals into one string, from each residual set, and sort for consistent validation
	(print "Three types of residuals cached: ")
	(call assert_same (assoc
		obs (sort (sort (indices residuals_map)))
		exp (list "full.targetlessrobust.none" "fullfruitfull.none" "robust.targetlessrobust.none")
	))

	(print "Three types of prediction stats cached: ")
	(call assert_same (assoc
		obs (sort (sort (indices prediction_stats_map)))
		exp (list "full.targetlessrobust.none" "fullfruitfull.none" "robust.targetlessrobust.none")
	))

	(declare (assoc
		mda_map (retrieve_from_entity (list "howso" "analyze") "mdaMap")
		mda_permutation_map (retrieve_from_entity (list "howso" "analyze") "mdaPermutationMap")
	))

	;concatenate the values which were used to compute MDA into one string, from each MDA set, and sort for consistent validation
	(print "Two types of MDA cached: ")
	(call assert_same (assoc
		obs (sort (indices mda_map))
		exp (list "full.nonefruit")
	))
	(call assert_same (assoc
		obs (sort (indices mda_permutation_map))
		exp (list "robust.nonefruit")
	))

	(assign (assoc
		result (get (call_entity "howso" "get_feature_residuals") "payload" )
	))
	(print "Targetless robust residuals returned by default: ")
	(call assert_same (assoc
		obs (get result "width")
		exp (get residuals_map (list  "robust.targetlessrobust.none" "width"))
	))

	(assign (assoc
		result (get (call_entity "howso" "get_feature_residuals" (assoc "robust" (false))) "payload" )
	))
	(print "Targetless full residuals returned when non-robust requested by user: ")
	(call assert_same (assoc
		obs (get result "width")
		exp (get residuals_map (list  "full.targetlessrobust.none" "width"))
	))


	(assign (assoc
		result (get (call_entity "howso" "get_feature_residuals" (assoc "action_feature" "fruit")) "payload" )
	))
	(print "Targeted action_feature residuals returned when requested by user: ")
	(call assert_same (assoc
		obs (get result "width")
		exp (get residuals_map (list  "fullfruitfull.none" "width"))
	))

	(assign (assoc
		result (call_entity "howso" "get_feature_residuals" (assoc "action_feature" "fruit" "robust" (true)))
	))
	(print "Targeted returns null and error when non-computed residuals requested by user: ")
	(call assert_null (assoc
		obs (get result "payload")
	))
	(call assert_same (assoc
		obs (size (get result "errors"))
		exp 1
	))

	(call exit_if_failures (assoc msg "Caching and getting residuals and MDA" ))

	;remove one of the residuals and one of the mda's
	(call_entity "howso" "react_into_trainee" (assoc
		context_features features
		action_feature "fruit"
		residuals (false)

		mda_robust_permutation (false)
	))

	(assign (assoc
		residuals_map (retrieve_from_entity (list "howso" "analyze") "residualsMap")
		prediction_stats_map (retrieve_from_entity (list "howso" "analyze") "featurePredictionStatsMap")
		mda_map (retrieve_from_entity (list "howso" "analyze") "mdaMap")
		mda_permutation_map (retrieve_from_entity (list "howso" "analyze") "mdaPerutationMap")
	))

	(print "Only two residual sets remain: ")
	(call assert_same (assoc
		exp 2
		obs (size residuals_map)
	))

	(print "Only two prediction stats sets remain: ")
	(call assert_same (assoc
		exp 2
		obs (size prediction_stats_map)
	))

	(print "Only one MDA set remain: ")
	(call assert_same (assoc
		exp 1
		obs (size mda_map)
	))
	(call assert_same (assoc
		exp 0
		obs (size mda_permutation_map)
	))

	(print "The two types of residuals remaining in cache: ")
	(call assert_same (assoc
		obs (sort (indices residuals_map))
		exp (list "full.targetlessrobust.none" "robust.targetlessrobust.none")
	))

	(print "The remaining MDA: ")
	(call assert_same (assoc
		obs (indices mda_map)
		exp (list "full.nonefruit")
	))

	(call exit_if_failures (assoc msg "Getting and removing residuals and MDA" ))


	(call_entity "howso" "react_into_trainee" (assoc
		context_features features
		contributions (true)
		action_feature "fruit"
		sample_model_fraction 1.0
	))
	(assign (assoc result (call_entity "howso" "get_feature_contributions" (assoc action_feature "fruit"))  ))
	(print "computed contributions: ")
	(call assert_same (assoc
		obs (sort (indices (get result "payload")))
		exp (list "height" "length" "size" "sweet" "tart" "weight" "width")
	))
	(call assert_approximate (assoc
		obs (get result "payload")
		exp
		 	(assoc
				height 0.005
				length 0.04
				size 0.005
				sweet 0.06
				tart 0.17
				weight 0.028
				width 0.14
			)
		thresh  ;specific thresholds per feature
			(assoc
				height 0.03
				length 0.04
				size 0.04
				sweet 0.03
				tart 0.1
				weight 0.027
				width 0.1
			)
	))

	(call_entity "howso" "react_into_trainee" (assoc
		context_features features
		contributions (true)
		action_feature "fruit"
		hyperparameter_param_path (list "width" "fruit.height.length.size.sweet.tart.weight." "full" ".none")
		sample_model_fraction 1.0
	))
	(assign (assoc result2 (call_entity "howso" "get_feature_contributions" (assoc action_feature "fruit")) ))
	(print "computed contributions with custom hp map: ")
	(call assert_same (assoc
		obs (sort (indices (get result2 "payload")))
		exp (list "height" "length" "size" "sweet" "tart" "weight" "width")
	))

	(print "results are different due to different HP used: ")
	(call assert_true (assoc
		obs (!= result result2)
	))

	(call_entity "howso" "react_into_trainee" (assoc
		context_features features
		contributions (false)
		action_feature "fruit"
		sample_model_fraction 1.0
	))
	(assign (assoc result (call_entity "howso" "get_feature_contributions" (assoc action_feature "fruit")) ))
	(print "Removed cached contributions: ")
	(call assert_same (assoc
		obs (get result (list "errors" 0 "detail"))
		exp "Feature contributions have not been computed for this trainee. Please call 'react_into_trainee' with appropriate parameters to compute and store contributions prior to calling this method."
	))


	(call_entity "howso" "react_into_trainee" (assoc
		context_features features
		contributions (true)
		action_feature "height"
		sample_model_fraction 1.0
	))
	(assign (assoc result (call_entity "howso" "get_feature_contributions" (assoc action_feature "height")) ))
	(print "Computed contributions for action feature height: ")
	(call assert_approximate (assoc
		obs (get result "payload")
		exp  (assoc
				fruit 0.03
				length 0.11
				size 0.04
				sweet 0.0006
				tart 0.015
				weight 0.44
				width 0.18
			)
		thresh  ;specific thresholds per feature
			(assoc
				fruit 0.04
				length 0.07
				size 0.04
				sweet 0.003
				tart 0.015
				weight 0.1
				width 0.1
			)
	))

	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				preserve_feature_values context_features
				context_features context_features
				action_features action_features
				leave_case_out (true)
				case_indices (list "unit_test" 7)
				details
					(assoc
						"robust_influences" (false)
						"feature_contributions" (true)
					)
			))
	))

	(print "Local full feature contributions:")
	(call assert_approximate (assoc
		obs (keep (get result (list "payload" "feature_contributions")) (list "height" "tart" "width"))
		exp
			(assoc
				height 0.1
				tart 0.5
				width 0.3
			)
		thresh 0.1
	))

	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				preserve_feature_values context_features
				context_features context_features
				action_features action_features
				leave_case_out (true)
				case_indices (list "unit_test" 0)
				details
					(assoc
						;should default to robust influences
						"feature_contributions" (true)
						"case_feature_contributions" (true)
					)
			))
	))

	(print "Local robust feature contributions:")
	(call assert_approximate (assoc
		obs (get result (list "payload" "feature_contributions"))
		exp
			(assoc
				height 0.09
				length 0.15
				size 0.04
				sweet 0.09
				tart 0.15
				weight 0.13
				width 0.23
			)
		thresh
			(assoc
				height 0.08
				length 0.14
				size 0.04
				sweet 0.088
				tart 0.14
				weight 0.12
				width 0.21
			)
	))

	(print "Case robust feature contributions:")
	(call assert_approximate (assoc
		obs (get result (list "payload" "case_feature_contributions"))
		exp
			(assoc
				height 0.09
				length 0.08
				size 0.04
				sweet 0.05
				tart 0.12
				weight 0.13
				width 0.27
			)
		thresh
			(assoc
				height 0.08
				length 0.07
				size 0.04
				sweet 0.049
				tart 0.11
				weight 0.12
				width 0.21
			)
	))

	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				preserve_feature_values context_features
				context_features context_features
				action_features action_features
				leave_case_out (true)
				case_indices (list "unit_test" 0)
				details
					(assoc
						;should default to robust
						"feature_contributions" (true)
						"case_feature_contributions" (true)
						"num_robust_influence_samples_per_case" 4
					)
			))
	))

	;using small num_robust_influence_samples_per_case we expect results to be large, compared to values
	;computed by adding expected to threshold, from the call above that uses default num_robust_influence_samples_per_case
	;if values are too big or too small, they are 'bad'
	(print "Poorly computed local robust feature contributions :")
	(call assert_true (assoc
		obs
			(or
				(> (get result (list "payload" "feature_contributions" "height")) .17 )
				(> (get result (list "payload" "feature_contributions" "length")) .15 )
				(> (get result (list "payload" "feature_contributions" "size"))   .08 )
				(> (get result (list "payload" "feature_contributions" "sweet"))  .09 )
				(> (get result (list "payload" "feature_contributions" "tart"))   .23 )
				(> (get result (list "payload" "feature_contributions" "weight")) .25 )
				(> (get result (list "payload" "feature_contributions" "width"))  .48 )

				(< (get result (list "payload" "feature_contributions" "height")) .01 )
				(< (get result (list "payload" "feature_contributions" "length")) .01 )
				(< (get result (list "payload" "feature_contributions" "size"))   .001 )
				(< (get result (list "payload" "feature_contributions" "sweet"))  .001 )
				(< (get result (list "payload" "feature_contributions" "tart"))   .01 )
				(< (get result (list "payload" "feature_contributions" "weight")) .01 )
				(< (get result (list "payload" "feature_contributions" "width"))  .05 )
			)
	))

	(call exit_if_failures (assoc msg "Feature Contributions"))

	(call exit_if_failures (assoc msg unit_test_name ))
)
