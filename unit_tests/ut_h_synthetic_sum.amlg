(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_synthetic_sum.amlg" retries 2))

	(declare (assoc
		data_values
			(range
				(lambda (let
					(assoc
						num1 (rand 1000)
						num2 (rand 1000)
						num3 (rand 1000)
						num4 (rand 1000)
					)
					(list num1 num2 num3 num4 (+ num1 num2 num3))
				))
				1 2000 1
			)

		result (null)
		features (list "A" "B" "C" "D" "sum")
	))


	(call_entity "howso" "train" (assoc
		features features
		input_cases data_values
	))

	(print "Analyzing Synthetic Sum...\n")
	(call_entity "howso" "analyze" (assoc
		action_features (list (last features))
		context_features (trunc features)
	))

	(call_entity "howso" "react_into_trainee" (assoc
		context_features (trunc features)
		num_samples 4000
		action_feature "sum"
		mda (true)
		contributions (true)
	))

	(assign (assoc
		result
			(call_entity "howso" "get_feature_mda" (assoc
				action_feature "sum"
			))
	))

	(print "MDA is negligible for noisy D feature: ")
	(call assert_approximate (assoc
		exp 0
		obs (get result (list "payload" "D"))
		thresh 15
	))

	(print "MDA for features A,B and C: ")
	(call assert_approximate (assoc
		exp (assoc "A" 230 "B" 230 "C" 230 "D" 0)
		obs (get result "payload")
		thresh 50
	))

	(assign (assoc
		result
			(call_entity "howso" "get_feature_contributions" (assoc
				action_feature "sum"
			))
	))

	(print "Contribution is negligible for noisy D feature: ")
	(call assert_true (assoc
		obs (< (get result (list "payload" "D")) 22)
	))

	(print "Contributions for features A,B and C: ")
	(call assert_approximate (assoc
		exp (assoc "A" 230 "B" 230 "C" 230 "D" 0)
		obs (get result "payload")
		thresh 50
	))

	(assign (assoc
		result
			(call_entity "howso" "get_feature_contributions" (assoc
				action_feature "sum"
				directional (true)
			))
	))

	;Expected directional contributions should be 0 because they should be equally negative and positive
	(print "Directional Contributions for all features: ")
	(call assert_approximate (assoc
		exp (assoc "A" 0 "B" 0 "C" 0 "D" 0)
		obs (get result "payload")
		thresh 15
	))

	(call exit_if_failures (assoc msg unit_test_name ))
)
