(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_synthetic_sum.amlg" retries 2))

	(declare (assoc
		data_values
			(range
				(lambda (let
					(assoc
						num1 (rand 1000)
						num2 (rand 1000)
						num3 (rand 1000)
						num4 (rand 1000)
					)
					(list num1 num2 num3 num4 (+ num1 num2 num3))
				))
				1 2000 1
			)

		result (null)
		features (list "A" "B" "C" "D" "sum")
	))


	(call_entity "howso" "train" (assoc
		features features
		cases data_values
	))

	(call_entity "howso" "set_params" (assoc numerical_precision "fast" ))
	(assign (assoc
		result (call_entity "howso" "get_params")
	))
	(call keep_result_payload)
	(print "Set numerical_precision to 'fast': " )
	(call assert_same (assoc
		obs (get result "numerical_precision")
		exp "fast"
	))

	(print "Analyzing Synthetic Sum...\n")
	(call_entity "howso" "analyze" (assoc
		action_features (list (last features))
		context_features (trunc features)
	))

	(assign (assoc
		result
			(call_entity "howso" "react_aggregate" (assoc
				context_features (trunc features)
				num_samples 4000
				action_feature "sum"
				details (assoc
					feature_full_accuracy_contributions (true)
					feature_full_prediction_contributions (true)
				)
			))
	))
	(call keep_result_payload)
	(print "MDA is negligible for noisy D feature: ")
	(call assert_approximate (assoc
		exp 0
		obs (get result ["feature_full_accuracy_contributions" "D"])
		thresh 15
	))

	(print "MDA for features A,B,C and D: ")
	(call assert_approximate (assoc
		exp (assoc "A" 230 "B" 230 "C" 230 "D" 0)
		obs (map (lambda (get result ["feature_full_accuracy_contributions" (current_index 1)])) (zip ["A" "B" "C" "D"]) )
		thresh 50
	))

	(print "Contribution is negligible for noisy D feature: ")
	(call assert_true (assoc
		obs (< (get result ["feature_full_prediction_contributions" "D"]) 22)
	))

	(print "Contributions for features A,B and C: ")
	(call assert_approximate (assoc
		exp (assoc "A" 230 "B" 230 "C" 230 "D" 0)
		obs (map (lambda (get result ["feature_full_prediction_contributions" (current_index 1)])) (zip ["A" "B" "C" "D"]) )
		thresh 50
	))

	;Expected directional contributions should be 0 because they should be equally negative and positive
	(print "Directional Contributions for all features: ")
	(call assert_approximate (assoc
		exp (assoc "A" 0 "B" 0 "C" 0 "D" 0)
		obs (map (lambda (get result ["feature_full_directional_prediction_contributions" (current_index 1)])) (zip ["A" "B" "C" "D"]) )
		thresh 15
	))

	(call exit_if_failures (assoc msg unit_test_name ))
)
