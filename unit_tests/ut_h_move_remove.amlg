(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_move_remove.amlg"))
	(call_entity "howso" "set_feature_attributes" (assoc
		features (assoc "color" (assoc "type" "nominal") )
	))

	(declare (assoc
		values
			(list
				(list  0 1 1 1 "red")
				(list  1 2 1 1 "red")
				(list  2 1 2 1 "red")
				(list  3 1 1 2 "red")
				(list  4 4 4 0 "green")
				(list  5 5 4 1 "green")
				(list  6 4 5 1 "green")
				(list  7 5 5 2 "green")
				(list  8 4 4 5 "blue")
				(list  9 5 4 6 "blue")
				(list 10 4 5 5 "blue")
				(list 11 5 5 5 "blue")
				(list 12 2 2 6 "yellow")
				(list 13 2 1 5 "yellow")
				(list 14 1 2 5 "yellow")
				(list 15 1 1 6 "yellow")
			)
		result (null)
		features (list "idx" "x" "y" "z" "color")
	))

	(call_entity "howso" "train" (assoc
		features features
		input_cases values
	))

;VERIFY NUM CASES PRE MOVE
	(assign (assoc result (call_entity "howso" "get_num_training_cases")))
	(print "Full model size pre-move: ")
	(call assert_same (assoc obs (get result (list "payload" "count")) exp 16))

	(call exit_if_failures (assoc msg "Model size pre-move"))


;VERIFY MOVE FAILS WITHOUT TARGET TRAINEE
	(print "Move without existing target trainee: ")
	(call_entity "howso" "move_cases" (assoc
		target_id "target"
		num_cases 0
		condition
			(assoc
				"idx" (list 1 4)
				"color" "red"
			)
	))
	(assign (assoc result (call_entity "howso" "get_num_training_cases")))
	;should fail to move any cases
	(call assert_same (assoc obs (get result (list "payload" "count")) exp 16))

	(call exit_if_failures (assoc msg "Move fails without existing target trainee"))

;VERIFY MOVE UNSPECIFIED EXACT CASES
	(print "Move unspecified number exact cases: ")
	(declare (assoc
		moved_cases
			(call_entity "howso" "get_cases" (assoc
				num_cases 0
				condition
					;should return 3 cases, indices 1,2 and 3 because only those 3 have color 'red'
					(assoc
						"idx" (list 1 4)
						"color" "red"
					)
			))
	))
	(call_entity "howso" "remove_cases" (assoc
		num_cases 0
		condition
			;should remove 3 cases, indices 1,2 and 3 because only those 3 have color 'red'
			(assoc
				"idx" (list 1 4)
				"color" "red"
			)
	))

	(assign (assoc result (call_entity "howso" "get_num_training_cases")))
	;should create the target trainee and move 3 cases
	(call assert_same (assoc obs (get result (list "payload" "count")) exp 13))

	(call exit_if_failures (assoc msg "Move unspecified number exact cases"))


	(print "Session training indices missing 1,2 and 3: ")
	(call assert_same (assoc
		obs (get (call_entity "howso" "get_session_training_indices" (assoc session "none")) "payload")
		exp (list 0 4 5 6 7 8 9 10 11 12 13 14 15)
	))

	(print "Session indices updated: ")
	(call assert_same (assoc
		obs (get (call_entity "howso" "get_session_indices" (assoc session "none")) "payload")
		exp (list 0 1 2 3 4 5 6 7 8 9 10 11 12)
	))

	(print "Total trained count is unchanged: ")
	(call assert_same (assoc
		obs (retrieve_from_entity (list "howso" "none") ".trained_instance_count")
		exp 16
	))

	(print "Trained indices are removed: ")
	(call assert_same (assoc
		obs (size (retrieve_from_entity (list "howso" "none") ".indices_map"))
		exp 13
	))

	(call exit_if_failures (assoc msg "Move specified number exact cases"))


;VERIFY MOVE SPECIFIED FUZZY CASES
	(print "Move unspecified number exact cases: ")
	(assign (assoc
		result
			(call_entity "howso" "get_cases" (assoc
				num_cases 5
				precision "similar"
				session "unit_test"
				; there are 4 cases with value of 5, but with index of less than 10, because exact_match is false, should just find the num_cases amount
				condition
					(assoc
						"idx" (list 0 9)
						"y" 5
					)
			))
	))

	(call assert_same (assoc obs (size (get result (list "payload" "cases"))) exp 5))

	(call exit_if_failures (assoc msg "Move unspecified number fuzzy cases"))

;VERIFY REMOVE (ALL) UNSPECIFIED FUZZY CASES
	(print "Remove all cases: ")
	(call_entity "howso" "remove_cases" (assoc
		;condition will be ignored because it's an equal and we're removing all cases by specified num_cases as 0 and fuzzy match
		num_cases 0
		precision "similar"
		condition
			(assoc
				"y" 5
			)
	))
	(assign (assoc result (call_entity "howso" "get_num_training_cases")))
	(call assert_same (assoc obs (get result (list "payload" "count")) exp 0))

	(call exit_if_failures (assoc msg "Remove all cases"))


	;retrain the cases into trainee
	(call_entity "howso" "train" (assoc
		features features
		input_cases values
	))

;VERIFY GET (ALL) CASES WITH CONDITION
	(print "Get all cases with condition: ")
	(assign (assoc result (call_entity "howso" "get_cases" (assoc
		precision "exact"
		; there are 4 cases with a "y" value of 5
		condition
			(assoc
				"y" 5
			)
	))))
	(call assert_same (assoc obs (size (get result (list "payload" "cases"))) exp 4))

	(call exit_if_failures (assoc msg "Get all cases with condition"))

;VERIFY REMOVE SPECIFIED EXACT CASES
	(print "Remove specified number exact cases: ")
	(call_entity "howso" "remove_cases" (assoc
		num_cases 7
		; there are 2 cases with value of 5 with index between 0 - 9
		condition
			(assoc
				"idx" (list 0 9)
				"y" 5
			)
	))
	(assign (assoc result (call_entity "howso" "get_num_training_cases")))
	;should have only removed 2 cases with indices <= 9
	(call assert_same (assoc obs (get result (list "payload" "count")) exp 14))

	(call exit_if_failures (assoc msg "Remove specified cases"))


;VERIFY REMOVE SOME UNSPECIFIED FUZZY CASES
	(print "Remove all cases: ")
	(call_entity "howso" "remove_cases" (assoc
		num_cases 0
		precision "similar"
		condition
			(assoc
				"idx" (list 0 9)
				"y" 5
			)
	))
	(assign (assoc result (call_entity "howso" "get_num_training_cases")))
	;there are 8 remaining cases with indices <= 9, 14-8 = 6 should remain
	(call assert_same (assoc obs (get result (list "payload" "count")) exp 6))

	(call exit_if_failures (assoc msg "Remove unspecified fuzzy cases"))


;VERIFY COPY TRAINEE AND MOVE CASES WITH SAME ENTITY ID
	(call_entity "howso" "train" (assoc
		features features
		input_cases values
	))

	(assign (assoc
		result
			(call_entity "howso" "get_cases" (assoc
				num_cases 2
				precision "exact"
				condition
					(assoc
						"idx" (list 0 9)
					)
			))
	))


	(call_entity "howso" "remove_cases" (assoc
		num_cases 2
		precision "exact"
		condition
			(assoc
				"idx" (list 0 9)
			)
	))

	(assign (assoc result (call_entity "howso" "get_num_training_cases")))
	(print "Source trainee had cases removed: ")
	(call assert_same (assoc exp 20 obs (get result (list "payload" "count")) ))



;VERIFY NOMINAL FEATURE MATCHING
	(call_entity "howso" "remove_cases" (assoc
		num_cases 0
		condition
			(assoc
				"color" (list "yellow" "green" "blue")
			)
	))

	(assign (assoc
		result (get (call_entity "howso" "get_cases" (assoc features features)) "payload")

	))

	(print "Removed cases with specified nominal values: ")
	(call assert_same (assoc
		obs (size (get result (list "cases")))
		exp 2
	))

	(print "Only 'red' cases remain: ")
	(call assert_true (assoc
		obs (= "red" (get result (list "cases" 0 4)) (get result (list "cases" 1 4)) )
	))

	(call exit_if_failures (assoc msg "Copy trainee and move cases"))


;VERIFY REMOVE FEATURE
	;clear out trainee and re-create it
	(destroy_entities "howso")
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_move_remove.amlg" skip_init (true)) )

	(call_entity "howso" "set_feature_attributes" (assoc
		features (assoc "color" (assoc "type" "nominal") )
	))


	(call_entity "howso" "train" (assoc
		features features
		input_cases values
	))


	;remove 4 cases, should have 12 left
	(print "Remove feature for cases: ")
	(call_entity "howso" "remove_feature" (assoc
		feature "idx"
		condition (assoc "idx" (list 12 15))
		session "ut_remove"
	))

	(assign (assoc result (call_entity "howso" "get_cases" (assoc features features))))
	;count how many cases have the idx feature missing
	(declare (assoc no_idx_cases 0))
	(map
		(lambda
			(if (= (null) (get (current_value) 0) )
				(accum (assoc no_idx_cases 1))
			)
		)
		(get result (list "payload" "cases"))
	)
	(call assert_same (assoc exp 4 obs no_idx_cases ))

	(call exit_if_failures (assoc msg "Remove feature"))

;VERIFY ADD FEATURE
	(print "Add feature for cases: ")
	;add back the idx feature for the 2 of the 4 cases where it was removed and set it to 12
	(call_entity "howso" "add_feature" (assoc
		feature "idx"
		feature_value 12
		condition (assoc "color" "yellow" "z" 6)
		session "ut_add"
	))

	(assign (assoc result (call_entity "howso" "get_cases" (assoc features features))))
	;count how many cases have the idx set to 12 and are yellow
	;only 2 of the 4 yellow cases have a z=6, so those two should now have idx set to 12
	(declare (assoc idx_cases 0))
	(map
		(lambda (if
				(and
					(= 12 (get (current_value) 0))
					(= "yellow" (get (current_value) 4))
				)
			(accum (assoc idx_cases 1))
		))
		(get result (list "payload" "cases"))
	)
	(call assert_same (assoc exp 2 obs idx_cases ))

	(call exit_if_failures (assoc msg "Add Feature"))


;VERIFY EDIT FEATURE HISTORY:
	(assign (assoc
		result
			(call_entity "howso" "get_cases" (assoc
				features (list "idx" "color" ".case_edit_history")
				case_indices (list (list "none" 12) (list "none" 15))
			))
	))

	;get edit history, the 2 cases where we added the idx of 12 back should have a history of both events:
	(print "Edit history for case idx 12 color yellow: ")
	(call assert_same (assoc
		obs (get (get result (list "payload" "cases" 0)) 2)
		exp
			(assoc
				"ut_remove" (list (assoc "feature" "idx" "type" "remove" "previous_value" 12))
				"ut_add" (list (assoc "feature" "idx" "type" "set" "value" 12 "previous_value" (null)))
			)
	))

	(print "Edit history for case idx 12 (previously 15) color yellow: ")
	(call assert_same (assoc
		obs (get (get result (list "payload" "cases" 1)) 2)
		exp
			(assoc
				"ut_remove" (list (assoc "feature" "idx" "type" "remove" "previous_value" 15))
				"ut_add" (list (assoc "feature" "idx" "type" "set" "value" 12 "previous_value" (null)))
			)
	))

	(call exit_if_failures (assoc msg "Edit history for case idx 12" ))


;VERIFY SESSION CONDITION FOR EDITING CASES:
	(call_entity "howso" "train" (assoc
		features features
		input_cases (list
			(list 20 10 10 10 "black")
			(list 21 11 12 13 "black")
		)
		session "today"
	))

	(call_entity "howso" "train" (assoc
		features features
		input_cases (list
			(list 30 20 10 10 "pink")
			(list 31 21 12 13 "pink")
		)
		session "tomorrow"
	))

	(print "Replay sessions: ")
	(assign (assoc result (call_entity "howso" "get_sessions")))
	(declare (assoc
		session_ids
			(map
				(lambda (get (current_value) "id"))
				(get result "payload")
			)
	))
	(call assert_same (assoc obs (sort session_ids) exp (sort (list "none" "today" "tomorrow"))))

	;model now has 20 cases

	;remove the 2 cases from session 'tomorrow'
	(call_entity "howso" "remove_cases" (assoc condition_session "tomorrow"))

	(print "Cases left in model after session removal: ")
	(assign (assoc result (call_entity "howso" "get_num_training_cases")))
	(call assert_same (assoc obs (get result (list "payload" "count")) exp 18))



	(print "Remove feature for cases in a session: ")
	(call_entity "howso" "remove_feature" (assoc
		trainee "st_model4f"
		feature "x"
		condition_session "today"
		session "ut_remove2"
	))

	;get all the cases in the model
	(assign (assoc result (call_entity "howso" "get_cases" (assoc trainee "st_model4f" features features ))))

	;count how many cases have the x feature missing
	(declare (assoc no_x_cases 0))
	(map
		(lambda (if (= (null) (get (current_value) 1))
			(accum (assoc no_x_cases 1))
		))
		(get result (list "payload" "cases"))
	)
	(call assert_same (assoc exp 2 obs no_x_cases ))

	(call exit_if_failures (assoc msg "Remove Features via condition_session."))


	(declare (assoc
		revisions (get (call_entity "howso" "get_revision" (assoc trainee "st_model4f")) (list "payload" "count"))
		rev_new 0
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "edit_cases" (assoc
					trainee "st_model4f"
					features (list "x" ".case_edit_history")
					feature_values (list 1 "haha")
					session "edit_test"
				))
				"errors"
			)
	))

	(print "Edit cases, invalid features: ")
	(call assert_same (assoc
		obs (get result (list 0 "detail"))
		exp "Failed to edit cases: ensure features do not start with an invalid character."
	))

	(assign (assoc
		rev_new (get (call_entity "howso" "get_revision" (assoc trainee "st_model4f")) (list "payload" "count"))
	))
	(print "Revision count didn't change because nothing was edited: ")
	(call assert_true (assoc obs (= revisions rev_new 8)))

	(assign (assoc
		result
			(call_entity "howso" "edit_cases" (assoc
				trainee "st_model4f"
				features (list "x" "y")
				feature_values (list 1 2)
				case_indices (list  (list "none" 0) (list "none" 1))
				session "edit_test"
			))
	))
	(print "Edit via case_indices: ")
	(call assert_same (assoc
		exp 2
		obs (get result (list "payload" "count"))
	))


	(assign (assoc
		result
			(get
				(call_entity "howso" "get_cases" (assoc
					trainee "st_model4f"
					features (list "idx" ".case_edit_history")
				))
				(list "payload" "cases")
			)
	))

	(print "Edit History is added: ")
	;first case
	(call assert_same (assoc
		obs (get result 0)
		exp  (list
					0
					(assoc
						"edit_test"  (list
							(assoc "type" "edit" "feature" "x" "value" 1 "previous_value" 1)
							(assoc "type" "edit" "feature" "y" "value" 2 "previous_value" 1)
						)
					)
			)
	))

	;second case
	(call assert_same (assoc
		obs (get result 1)
		exp  (list
					1
					(assoc
						"edit_test" (list
							(assoc "type" "edit" "feature" "x" "value" 1 "previous_value" 2)
							(assoc "type" "edit" "feature" "y" "value" 2 "previous_value" 1)
						)
					)
			)
	))

	;third case has no edit history
	(call assert_same (assoc
		obs (get result 2)
		exp (list 2 (null))
	))


	(assign (assoc
		result
			(call_entity "howso" "edit_cases" (assoc
				trainee "st_model4f"
				features (list "x" "color")
				feature_values (list 3 "purple")
				condition (assoc "idx" (list 0 2))
				session "edit_test2"
			))
	))
	(print "Edit via condition: ")
	(call assert_same (assoc
		exp 3
		obs (get result (list "payload" "count"))
	))


	(assign (assoc
		result
			(get
				(call_entity "howso" "get_cases" (assoc
					trainee "st_model4f"
					features (list "idx" ".case_edit_history")
				))
				(list "payload" "cases")
			)
	))

	(print "Edit History is appended and added: ")
	;first case
	(call assert_same (assoc
		obs (get result 0)
		exp (list
					0
					(assoc
						"edit_test"  (list
							(assoc "type" "edit" "feature" "x" "value" 1 "previous_value" 1)
							(assoc "type" "edit" "feature" "y" "value" 2 "previous_value" 1)
						)
						"edit_test2" (list
							(assoc "type" "edit" "feature" "x" "value" 3 "previous_value" 1)
							(assoc "type" "edit" "feature" "color" "value" "purple" "previous_value" "red")
                        )
					)
			)
	))

	;second case
	(call assert_same (assoc
		obs (get result 1)
		exp (list
					1
					(assoc
						"edit_test"
							(list
								(assoc "type" "edit" "feature" "x" "value" 1 "previous_value" 2)
								(assoc "type" "edit" "feature" "y" "value" 2 "previous_value" 1)
							)
						"edit_test2" (list
							(assoc "type" "edit" "feature" "x" "value" 3 "previous_value" 1)
							(assoc "type" "edit" "feature" "color" "value" "purple" "previous_value" "red")
                        )
					)
			)
	))

	;third case has edit history
	(call assert_same (assoc
		obs (get result 2)
		exp (list
					2
					(assoc
						"edit_test2" (list
							(assoc "type" "edit" "feature" "x" "value" 3 "previous_value" 1)
							(assoc "type" "edit" "feature" "color" "value" "purple" "previous_value" "red")
                        )
					)
			)
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "get_cases" (assoc
					trainee "st_model4f"
					features (list "idx" "color")
				))
				(list "payload" "cases")
			)
	))
	;new nominal value is correctly stored and encoded
	(print "Edited new nominal value: ")
	(call assert_true (assoc
		;first three cases all have 'purple' as their color feature
		obs  (= "purple" (get result (list 0 1)) (get result (list 1 1)) (get result (list 2 1)))
	))

	(call exit_if_failures (assoc msg "Edit Cases."))


	(print "Total Revision count is 10: ")
	(assign (assoc revisions (get (call_entity "howso" "get_revision" (assoc trainee "st_model4f")) (list "payload" "count")) ))
	(call assert_same (assoc
		obs revisions
		exp 10
	))

	(call exit_if_failures (assoc msg "Session condition for editing cases"))

	(call assert_same (assoc
		obs (get (call_entity "howso" "get_num_training_cases" (assoc trainee "st_model4f")) (list "payload" "count"))
		exp 18
	))

	(call_entity "howso" "remove_cases" (assoc
		trainee "st_model4f"
		case_indices
			(list
				(list "none" 0)
				(list "none" 1)
				(list "none" 2)
				(list "none" 3)
			)
	))

	(call assert_same (assoc
		obs (get (call_entity "howso" "get_num_training_cases" (assoc trainee "st_model4f")) (list "payload" "count"))
		exp 14
	))

	(call exit_if_failures (assoc msg "Removing cases with case_indices"))

	(call exit_if_failures (assoc msg unit_test_name ))
)
