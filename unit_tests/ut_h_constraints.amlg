(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_constraints.amlg"))

	(call_entity "howso" "create_trainee" (assoc trainee "model" ))
	(assign_to_entities "howso" (assoc trainee "model"))
	(call_entity "howso" "set_internal_parameters" (assoc
		trainee "model"
		default_hyperparameter_map (assoc "k" 3 "p" 2 "dt" -1)
	))

	(declare (assoc
		result
			(call_entity "howso" "set_feature_attributes" (assoc
				features
					(assoc
						"x"
							(assoc
								"type" "continuous"
								"bounds"
									(assoc
										"min" 0
										"max" 300
										"allow_null" (false)
										"constraint" "(= #z 0 100)"
									)
							)
						"z"
							(assoc "type" "continuous" )
						"w" (assoc "type" "nominal"  )
					)
			))
		features (list "x" "y" "z" "w")
		bad_rows (list)
	))

	(print "Validate invalid constraint: ")
	(call assert_same (assoc
		obs (get result (list "errors" 0 "detail"))
		exp "The following features have an invalid constraint defined: x "
	))

	(call_entity "howso" "set_feature_attributes" (assoc
		features
			(assoc
				"x"
					(assoc
						"type" "continuous"
						"bounds"
							(assoc
								"min" 0
								"max" 300
								"allow_null" (false)
							)
					)
				"z"
					(assoc
						"type" "continuous"
						"bounds"
							(assoc
								"min" 0
								"max" 300
								;z should always be bigger then the sum of x and y
								"constraint" "(> #z 0 (+ #x 0 #y 0))"
								"allow_null" (false)
							)
					)
				"w"
					(assoc
						"type" "nominal"
						;w has to be "B" if z is > 170
						"bounds"
							(assoc
								"constraint" "(if (> #z 0 170) (= #w 0 \"B\") (true))"
								"allow_null" (true)
							)
					)
			)
	))

	(call_entity "howso" "train" (assoc
		features (list "x" "y" "z" "w")
		input_cases
			(list
				(list 10 100  120	"A" )
				(list 20 100  150	"A" )
				(list 50 100	180	"B" )
				(list 90 150  270	"B" )
				(list 40 110  160	"A" )
				(list 40 40	100	(null)  )
				(list 30 100 	150	"A"	)
				(list 10 150	170	"B" )
				(list 100 10 120 (null) )
				(list 90 70   170	"A" )
				(list 10 150  170	"A" )
				(list (null) 90 (null) "B" )
				(list (null) 100 110 (null))
				(list (null) 110 200 "B" )
				(list (null) 80  150 "A" )
				(list 20	70 (null) "A" )
			)
		session "constraint_testing"
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "batch_react" (assoc
					desired_conviction 5
					action_features features
					generate_new_cases "no"
					num_cases_to_generate 100
				))
				(list "payload" "action_values")
			)
	))

	;iterate over results, check that all constraints are met
	(map
		(lambda (let
			(assoc xyzw (current_value 1))
			(if
				(not (and

					;z > x+y
					(> (get xyzw 2) (+ (get xyzw 0) (get xyzw 1)))

					;w is null or B if z > 170
					(or
						(= (null) (last xyzw))
						(= "B" (last xyzw))
						(<= (get xyzw 2) 170)
					)
				))
				(accum (assoc bad_rows (list (current_value 2))))
			)
		))
		result
	)

	(print "Synthesised data keeping constraints: ")
	(call assert_same (assoc
		obs bad_rows
		exp (list)
	))

	(call exit_if_failures (assoc msg "Constraints without new case generation."))

	(assign (assoc
		result
			(get
				(call_entity "howso" "batch_react" (assoc
					desired_conviction 5
					action_features features
					generate_new_cases "always"
					num_cases_to_generate 100
				))
				(list "payload" "action_values")
			)
		bad_rows (list)
	))

	;iterate over results, check that all constraints are met
	(map
		(lambda (let
			(assoc xyzw (current_value 1))
			(if
				(not (and

					;z > x+y
					(> (get xyzw 2) (+ (get xyzw 0) (get xyzw 1)))

					;w is null or B if z > 170
					(or
						(= (null) (last xyzw))
						(= "B" (last xyzw))
						(<= (get xyzw 2) 170)
					)
				))
				(accum (assoc bad_rows (list (current_value 2))))
			)
		))
		result
	)

	(print "Synthesised unique data keeping constraints: ")
	(call assert_same (assoc
		obs bad_rows
		exp (list)
	))

	(call exit_if_failures (assoc msg "Constraints with new case generation."))

	(call_entity "howso" "delete" (assoc trainee "model" ))
	(call_entity "howso" "create_trainee" (assoc trainee "model" ))
	(assign_to_entities "howso" (assoc trainee "model"))
	(call_entity "howso" "set_internal_parameters" (assoc
		trainee "model"
		default_hyperparameter_map (assoc "k" 3 "p" 2 "dt" -1)
	))

	(call_entity "howso" "set_feature_attributes" (assoc
		features
			(assoc
				"x"
					(assoc
						"type" "continuous"
						"bounds"
							(assoc
								"min" 0
								"max" 300
								"allow_null" (false)
							)
					)
				"z"
					(assoc
						"type" "ordinal"
						"bounds"
							(assoc
								"min" 0
								"max" 300
								;z should always be bigger then the sum of x and y
								"constraint" "(> #z 0 (+ #x 0 #y 0))"
								"allow_null" (false)
							)
					)
				"w"
					(assoc
						"type" "nominal"
						;w has to be "B" if z is > 170
						"bounds"
							(assoc
								"constraint" "(if (> #z 0 170) (= #w 0 \"B\") (true))"
								"allow_null" (true)
							)
					)
			)
	))

	(call_entity "howso" "train" (assoc
		features (list "x" "y" "z" "w")
		input_cases
			(list
				(list 10 100  120	"A" )
				(list 20 100  150	"A" )
				(list 50 100	180	"B" )
				(list 90 150  270	"B" )
				(list 40 110  160	"A" )
				(list 40 40	100	(null)  )
				(list 30 100 	150	"A"	)
				(list 10 150	170	"B" )
				(list 100 10 120 (null) )
				(list 90 70   170	"A" )
				(list 10 150  170	"A" )
				(list (null) 90 (null) "B" )
				(list (null) 100 110 (null))
				(list (null) 110 200 "B" )
				(list (null) 80  150 "A" )
				(list 20	70 (null) "A" )
			)
		session "constraint_testing"
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "batch_react" (assoc
					desired_conviction 5
					action_features features
					generate_new_cases "always"
					num_cases_to_generate 100
				))
				(list "payload" "action_values")
			)
		bad_rows (list)
	))

	;iterate over results, check that all constraints are met
	(map
		(lambda (let
			(assoc xyzw (current_value 1))
			(if
				(not (and

					;z > x+y
					(> (get xyzw 2) (+ (get xyzw 0) (get xyzw 1)))

					;w is null or B if z > 170
					(or
						(= (null) (last xyzw))
						(= "B" (last xyzw))
						(<= (get xyzw 2) 170)
					)
				))
				(accum (assoc bad_rows (list (current_value 2))))
			)
		))
		result
	)

	(print "Synthesised unique data keeping constraints on ordinal feature: ")
	(call assert_same (assoc
		obs bad_rows
		exp (list)
	))

	(call exit_if_failures (assoc msg "Constraints with new case generation and Ordinal feature."))


	(call exit_if_failures (assoc msg unit_test_name ))
)
