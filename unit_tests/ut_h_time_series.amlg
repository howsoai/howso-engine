(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_time_series.amlg" retries 1))

	(null
		;https://en.wikipedia.org/wiki/Simple_linear_regression#Numerical_example
		#LinearRegression
			(declare
				(assoc
					x_values (list)
					y_values (list)
				)

				(declare (assoc
					num (size x_values)
					sum_x (apply "+" x_values)
					sum_y (apply "+" y_values)
					sum_xx (dot_product x_values x_values)
					sum_yy (dot_product y_values y_values)
					sum_xy (dot_product x_values y_values)
				))

				(declare (assoc
					B_hat
						(/
							(- (* num sum_xy) (* sum_x sum_y) )
							(- (* num sum_xx) (* sum_x sum_x) )
						)
					inv_num (/ 1 num)
					mean_y (/ sum_y num)
				))
				(declare (assoc
					a_hat
						(-
							(* inv_num sum_y)
							(* B_hat inv_num sum_x)
						)
				))

				(declare (assoc
					sq_err
						(*
							(/ inv_num (- num 2))
							(-
								(* num sum_yy)
								(* sum_y sum_y)
								(*
									B_hat
									B_hat
									(- (* num sum_xx) (* sum_x sum_x))
								)
							)
						)
				))
				;B_hat standard error
				(declare (assoc
					B_err
						(/
							(* num sq_err)
							(- (* num sum_xx) (* sum_x sum_x) )
						)
				))
				;a_hat standard error
				(declare (assoc a_err (* B_err inv_num sum_xx) ))

				;sum of squares of residual from the function and the total sum of squares
				(declare (assoc
					ss_res
						(map
							(lambda
								(pow
									(- (current_value) (+ a_hat (* B_hat (get x_values (current_index)))) )
									2
								)
							)
							y_values
						)
					ss_tot
						(map
							(lambda
								(pow (- (current_value) mean_y) 2)
							)
							y_values
						)
				))

				;r^2 = 1 - ss_res / ss_tot
				(declare (assoc
					r_2 (- 1 (/ (apply "+" ss_res) (apply "+" ss_tot)) )
				))

				;output coefficients: Y = B_hat X + a_hat and their standard errors
				(assoc
					"B" B_hat
					"a" a_hat
					"B_err" B_err
					"a_err" a_err
					"r_2" r_2
				)
			)
	)


	(declare (assoc
		dataset (load "unit_test_data/example_timeseries.csv")
		result (null)
	))

	(declare (assoc
		features (first dataset)
		data (tail dataset)  ; (trunc (tail dataset) 100)
		feature_attributes
			(assoc
				"ID"
					(assoc
						"type" "nominal"
						"data_type" "number"
						"decimal_places" 0
						"original_type" (assoc "data_type" "integer" "size" 8)
						"id_feature" (true)
						"bounds" (assoc "allow_null" (false))
						"dropna" (true)
						"non_sensitive" (true)
					)

				"f1"
					(assoc
						"type" "continuous"
						"decimal_places" 4
						"original_type" (assoc "data_type" "numeric" "size" 8)
						"bounds" (assoc "min" 20.085536923187668 "max" 8103.083927575384)
						"time_series"
							(assoc
								"type" "rate"
								"rate_max" (list 0.0012430732030380078)
								"rate_min" (list -0.0007645089495998057)
							)
					)

				"f2"
					(assoc
						"type" "continuous"
						"decimal_places" 4
						"original_type" (assoc "data_type" "numeric" "size" 8)
						"bounds" (assoc "min" 20.085536923187668 "max" 8103.083927575384)
						"time_series"
							(assoc
								"type" "rate"
								"order" 2
								"rate_max" (list  0.001388600638608105 4.131249419226594e-10)
								"rate_min" (list -0.0006637496387383802 -5.540782167460592e-10)
							)
					)

				"f3"
					(assoc
						"type" "continuous"
						"decimal_places" 4
						"original_type" (assoc "data_type" "numeric" "size" 8)
						"bounds" (assoc "min" 20.085536923187668 "max" 8103.083927575384)
						"time_series"
							(assoc
								"type" "rate"
								"rate_max" (list 0.0011805197298037438)
								"rate_min" (list -0.0005973067076699289)
								"time_feature" (true)
							)
					)

				"date"
					(assoc
						"type" "continuous"
						"date_time_format" "%Y-%m-%d"
						"original_type" (assoc "data_type" "datetime")
						"bounds" (assoc "min" "1985-05-17" "max" "2083-08-08" "allow_null" (false))
						"time_series"
							(assoc
								"type" "delta"
								"time_feature" (true)
								"delta_max" (list 7280646.049344706)
								"delta_min" (list 889973.9440819533)
							)
						"dropna" (true)
					)
			)
		all_features
			(list
				"ID" "f1" ".f1_lag_1" "f2" ".f2_lag_1" "f3" ".f3_lag_1" "date" ".date_lag_1" ".date_delta_1"
				"f1_rate_1" ".f2_rate_1" ".f2_rate_2" ".f3_rate_1" ".series_progress" ".series_progress_delta"
			)
	))

	(call_entity "howso" "create_trainee" (assoc trainee "model"))

	(assign (assoc
		result
			(call_entity "howso" "set_feature_attributes" (assoc
				trainee "model"
				features feature_attributes
			))
	))
	(print "Only one time feature allowed: ")
	(call assert_same (assoc
		exp (list (assoc detail "Only one time feature may be specified."))
		obs (get result "errors")
	))

	;clear out the extra time_feature flag
	(assign "feature_attributes" (list "f3" "time_series" "time_feature") (false) )

	(assign (assoc
		result
			(call_entity "howso" "set_feature_attributes" (assoc
				trainee "model"
				features feature_attributes
			))
	))
	(print "Attributes set correctly: ")
	(call assert_same (assoc
		exp "ok"
		obs (get result "status")
	))

	(print "Time Feature: ")
	(call assert_same (assoc
		obs (retrieve_from_entity (list "howso" "model") "tsTimeFeature")
		exp "date"
	))

	(print "Time Series Model Features are correctly configured:\n")
	(assign (assoc result (retrieve_from_entity (list "howso" "model") "tsModelFeaturesMap") ))
	(map
		(lambda (seq
			(print "Verifying " (current_index) " :")
			(call assert_same (assoc
				exp (current_value 1)
				obs (get result (current_index 1))
				unordered (true)
			))
		))

		(assoc
			delta_features (list ".date_delta_1")
			derived_order_features (list)
			lag_features (list ".date_lag_1" ".f1_lag_1" ".f2_lag_1" ".f3_lag_1")
			rate_features (list ".f1_rate_1" ".f3_rate_1" ".f2_rate_1" ".f2_rate_2")
			ts_derived_features
				(list
					".series_progress" ".series_progress_delta" ".date_lag_1" ".f3_lag_1" ".f1_lag_1" ".f2_lag_1"
					".date_delta_1"  ".f3_rate_1" ".f1_rate_1" ".f2_rate_1" ".f2_rate_2"
				)
			series_id_features (list "ID")
		)
	)

	(print "Smallest allowed time interval is set: ")
	(call assert_same (assoc
		obs (retrieve_from_entity (list "howso" "model") "tsMinTimeInterval")
		exp 889973.9440819533
	))


	(call exit_if_failures (assoc msg "Time series features configured."))

	(print "Training in batches...\n")

	(declare (assoc start (system_time)))
	(call_entity "howso" "train" (assoc
		trainee "model"
		input_cases (trunc data 1000)
		features features
		session "session"
	))
	(declare (assoc post_analyze_time (system_time) ))

	(print "Load 1000 " (- (system_time) start) "\n")
	(call_entity "howso" "train" (assoc
		trainee "model"
		input_cases (tail (trunc data 2000) 1000)
		features features
		session "session"
	))
	(print "Load 2000 " (- (system_time) start) "\n")
	(call_entity "howso" "train" (assoc
		trainee "model"
		input_cases (tail (trunc data 3000) 1000)
		features features
		session "session"
	))
	(print "Load 3000 " (- (system_time) start) "\n")
	(call_entity "howso" "train" (assoc
		trainee "model"
		input_cases (tail (trunc data 4000) 1000)
		features features
		session "session"
	))
	(print "Load 4000 " (- (system_time) start) "\n")
	(call_entity "howso" "train" (assoc
		trainee "model"
		input_cases (tail data 756)
		features features
		session "session"
	))
	(assign (assoc post_analyze_time (- (system_time) post_analyze_time) ))
	(print "Load All: " (- (system_time) start) "\n")

	(print "Post analyze load time is < 20 seconds: " post_analyze_time " ")
	(call assert_true (assoc obs (< post_analyze_time 20) ))

	(assign (assoc
		result
			(call_entity "howso" "get_num_training_cases" (assoc trainee "model"))
	))
	(print "Loaded full dataset: ")
	(call assert_same (assoc
		exp (size data)
		obs (get result (list "payload" "count"))
	))

	; 116 * e = ~ 315
	(print "Series limit length: ")
	(call assert_approximate (assoc
		obs (retrieve_from_entity (list "howso" "model") "tsSeriesLimitLength")
		exp 315
		percent 0.01
	))

	(declare (assoc
		original_series_ids_map
			(zip (map
				(lambda  (first (current_value)))
				data
			))
	))

	(declare (assoc
		id_series_map
			(map
				(lambda (let
					(assoc id (current_index 1))
					(map
						;tuple of (list f1 date) date epoch scaled down to be on same scale as f1 values
						(lambda (list
							(get (current_value 1) 1)
							(/
								(format
									(last (current_value 1))
									"date:%Y-%m-%d"
									"number"
								)
								1000000
							)
						))
						(filter
							(lambda (= (+ id) (first (current_value))) )
							data
						)
					)
				))
				original_series_ids_map
			)
	))

	;map of series id -> linear regression assoc
	(declare (assoc
		lr_map
			(map
				(lambda (let
					(assoc
						;all the time stamps
						x_values (map (lambda (last (current_value))) (current_value 1))
						;all the f1 values
						y_values (map (lambda (first (current_value))) (current_value 1))
					)
					(call LinearRegression (assoc
						x_values x_values
						y_values y_values
					))
				))
				id_series_map
			)
		num_series (size id_series_map)
	))

	(declare (assoc
		avg_B (/ (apply "+" (map (lambda (get (current_value) "B")) (values lr_map))) num_series)
		avg_a (/ (apply "+" (map (lambda (get (current_value) "a")) (values lr_map))) num_series)
		avg_r_2   (/ (apply "+" (map (lambda (get (current_value) "r_2")) (values lr_map))) num_series)
	))

	(print "Original Coefficient = 3.5445: ")
	(call assert_approximate (assoc
		obs avg_B
		exp 3.54451286254183
		percent 0.01
	))

	(print "Original Intercept = -4159.985: ")
	(call assert_approximate (assoc
		obs avg_a
		exp -4159.98526680840
		percent 0.01
	))

	(print "Original r_sq = 0.874: ")
	(call assert_approximate (assoc
		obs avg_r_2
		exp 0.8740085675413485
		percent 0.01
	))


	(call_entity "howso" "set_internal_parameters" (assoc
		trainee "model"
		hyperparameter_map
			(assoc ".targetless"
				(assoc ".date_delta_1..date_lag_1..f1_lag_1..f1_rate_1..f2_lag_1..f2_rate_1..f2_rate_2..f3_lag_1..f3_rate_1..series_progress..series_progress_delta.ID.date.f1.f2.f3."
					(assoc "robust"
						(assoc
							".none"
								(assoc
									"p" 0.1
									"k" 5
									"featureDeviations"
										(assoc
											"date" 14218386.724189386
											"f2" 24.681985199999993
											".f1_rate_1" 3.0597516027684655e-06
											"f3" 24.9218182
											".f3_rate_1" 2.747433509022525e-06
											".date_lag_1" 14993949.987033349
											".f1_lag_1" 26.447607859565455
											".f2_lag_1" 28.365831547383383
											"ID" 0.9696383674968018
											".f2_rate_1" 2.1496653162040624e-06
											".date_end" 0.003217262794602199
											".date_delta_1" 21164.905981936266
											"f1" 26.575838500000035
											".f3_lag_1" 22.26415524840926
											".date_start" 0.0007152857167482694
										)
									"featureWeights"
										(assoc
											"f3" 0.7250067127002406
											"f2" 0.7257081346764681
											".f1_rate_1" 3.5598474117810084
											"date" 0.19262602724677383
											".f3_rate_1" 3.5983821265289366
											".date_delta_1" 0.3693502230607562
											".date_end" 1.7752165837048337
											".f2_rate_1" 3.687762256273595
											"ID" 1.003087967379983
											".f2_lag_1" 0.7156825826548066
											".f1_lag_1" 0.7207113479717354
											".date_lag_1" 0.1916056865989149
											".f3_lag_1" 0.7332285684406046
											"f1" 0.7203628413476915
											".date_start" 2.063250907075116
										)
									"dt" -1
									"allFeatureResidualsCached" (true)
									"gridSearchError" 95624160.73285918
									"paramPath" (list ".targetless" ".date_delta_1..date_lag_1..f1_lag_1..f1_rate_1..f2_lag_1..f2_rate_1..f2_rate_2..f3_lag_1..f3_rate_1..series_progress..series_progress_delta.ID.date.f1.f2.f3." "robust" ".none")
								)
						)
					)
				)
			)
	))
	(call_entity (list "howso" "model") "CacheExpectedValuesAndProbabilities" (assoc features all_features ))

	(print "Synthing Series...\n")
	(assign (assoc
		result
			(get
				(call_entity "howso" "batch_react_series" (assoc
					trainee "model"
					num_series_to_generate num_series
					action_features (list "ID" ".date_delta_1" ".f1_rate_1" ".f3_rate_1" ".f2_rate_1" ".f2_rate_2" "f1" "f2" "f3" "date" )
					init_time_steps (list "2010-01-31")
					final_time_steps (list "2019-08-31")
					desired_conviction 5
					use_regional_model_residuals (false)
				))
				"payload"
			)
	))

	(declare (assoc
		series_1_cases (get result (list "action_values" 0))
		;series_2_first_case (get result (list "react_results" 1 "action_values" 115))
		action_features (get result "action_features")
	))

	(print "Generated series length is expected: ")
	(call assert_approximate (assoc
		obs (size series_1_cases)
		exp 117
		threshold 2
	))

	(call exit_if_failures (assoc msg "Generated Expected series Lengths."))

	(print "Output action features: ")
	(call assert_same (assoc
		obs action_features
		exp
			(list
				"ID"
				".date_delta_1"
				".f1_rate_1"
				".f3_rate_1"
				".f2_rate_1"
				".f2_rate_2"
				"f1"
				"f2"
				"f3"
				"date"
			)
		unordered (true)
	))

	(declare (assoc
		date_index (first (filter (lambda (= "date" (get action_features (current_value)))) (indices action_features)))
		f1_index (first (filter (lambda (= "f1" (get action_features (current_value)))) (indices action_features)))
	))

	(declare (assoc
		gen_lr_map
			(map
				(lambda (let
					(assoc
						series (current_value 1)
						x_values (list)
						y_values (list)
					)
					(assign (assoc
						;all the time stamps
						x_values
							(map
								(lambda
									(/
										(format
											(get (current_value) date_index)
											"date:%Y-%m-%d"
											"number"
										)
										1000000
									)
								)
								series
							)
						;all the f1 values
						y_values (map (lambda (get (current_value) f1_index)) series)
					))
					(call LinearRegression (assoc
						x_values x_values
						y_values y_values
					))
				))
				(get result "action_values")
			)
	))


	(declare (assoc
		gen_avg_B (/ (apply "+" (map (lambda (get (current_value) "B")) gen_lr_map)) num_series)
		gen_avg_a (/ (apply "+" (map (lambda (get (current_value) "a")) gen_lr_map)) num_series)
		gen_avg_r2 (/ (apply "+" (map (lambda (get (current_value) "r_2")) gen_lr_map)) num_series)
	))

	(print "Similar Synth Coefficient: " gen_avg_B " " )
	(call assert_approximate (assoc
		obs gen_avg_B
		exp 3.55
		percent 0.5
	))
	(print "Similar Synth Intercept: " gen_avg_a " " )
	(call assert_approximate (assoc
		obs gen_avg_a
		exp -4159.98
		percent 0.5
	))
	(print "Similar Synth r_sq: " gen_avg_r2 " ")
	(call assert_approximate (assoc
		obs gen_avg_r2
		exp 0.87
		percent 0.5
	))

	(call exit_if_failures (assoc msg unit_test_name))
)