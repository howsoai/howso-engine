(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_box_conviction.amlg"))

	(call_entity "howso" "create_trainee" (assoc trainee "test" ))
	(assign_to_entities "howso" (assoc trainee "test"))


	(declare (assoc
		model_data
			(list
				(list "x" "y")
				(list 0 0)
				(list 0 1)
				(list 1 0)
				(list 2 1)
			)

	))
	(declare (assoc
		data (tail model_data)
		features (first model_data)
	))

	(call_entity "howso" "train" (assoc
		input_cases data
		features features
		session "session1"
	))

	(call_entity "howso" "set_internal_parameters" (assoc
		default_hyperparameter_map (assoc "k" 1 "p" 2 "dt" -1)
	))

	(call_entity "howso" "react_into_features" (assoc
		features features
		familiarity_conviction_addition (true)
	))
	(declare (assoc
		result
			(call_entity "howso" "get_cases" (assoc features (append features "familiarity_conviction_addition")))
	))

	(declare (assoc
		expected_map
			(assoc
				"01" 6.2015
				"10" 0.7468
				"21" 0.8001
				"00" 0.8001
			)
	))

	(print "computed cases familarity convictions:\n")

	(map
		(lambda
			(let
				(assoc
					x (get (target_value 1) 0)
					y (get (target_value 1) 1)
					conv (get (target_value 1) 2)
				)

				(print x "," y ": " conv " expected: " (get expected_map (concat x y)) " match: ")
				(call assert_approximate (assoc percent 0.001 obs conv exp (get expected_map (concat x y))))


			)
		)
		(get result (list "payload" "cases"))
	)

	;get the distance contribution of the 2,1 case
	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					trainee "test"
					preserve_feature_values (list "x" "y")
					case_indices (list "session1" 3)
					leave_case_out (true)
					details (assoc
						"distance_contribution" (true)
						"similarity_conviction" (true)
					)
				))
				"payload"
			)
	))
	(print "distance contribution of (2,1) should be sqrt(2): ")
	(call assert_approximate (assoc
		obs (get result "distance_contribution")
		exp (sqrt 2)
		percent 0.001
	))

	(print "similarity conviction of (2,1) is 0.78033 : ")
	(call assert_approximate (assoc
		obs (get result "similarity_conviction")
		exp
			(/
				;local expected DC should just be 1
				;distance contribution of the case should be sqrt(2)
				;similarity conviction should be 1 / sqrt(2) 
				1
				(sqrt 2)
			)
		percent 0.001
	))


	(print "\nnew case conviction for point at 3,0: ")
	(assign (assoc
		result
			(get
				(call_entity "howso" "batch_react_group" (assoc
					trainee "test"
					features (list "x" "y")
					new_cases (list (list (list 3 0)))
					distance_contributions (true)
				))
				"payload"
			)
	))

	(call assert_approximate (assoc percent 0.001 obs (get result (list "familiarity_conviction_addition" 0)) exp 1.8416))

	;with a K=1, 3,0 is sqrt(2) away from closest point of 2,1
	(call assert_approximate (assoc percent 0.001 obs (get result (list "distance_contribution" 0)) exp (sqrt 2)))


	;VERIFY CYCLIC CONVICTIONS
	(call_entity "howso" "set_feature_attributes" (assoc
		trainee "test"
		features (assoc "x" (assoc "type" "continuous" "cycle_length" 3.5)  )
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "batch_react_group" (assoc
					trainee "test"
					features (list "x" "y")
					new_cases (list (list (list 3 0)))
					distance_contributions (true)
				))
				"payload"
			)
	))

	;conviction should be lower / different since the value for this new case is now closer to 0,0
	(print "\nnew case conviction for point at 3,0 with x as a cyclic: ")
	(call assert_approximate (assoc percent 0.05 obs (get result (list "familiarity_conviction_addition" 0)) exp 0.1413322))

	(print "combined_model_average_distance_contribution:" )
	(call assert_approximate (assoc percent 0.00001 obs (get result (list "combined_model_average_distance_contribution" 0)) exp 0.8828427124))

	(print "distance_contribution: " )
	(call assert_same (assoc obs (get result (list "distance_contribution" 0) ) exp 0.5))

	(call_entity "howso" "set_feature_attributes" (assoc
		trainee "test"
		features (assoc "x" (assoc "type" "continuous" "cycle_length" 6)  )
	))

	(print "\nsame point at 3,0 with large cycle to not affect distances: ")
	(assign (assoc
		result
			(get
				(call_entity "howso" "batch_react_group" (assoc
					trainee "test"
					features (list "x" "y")
					new_cases (list (list (list 3 0)))
				))
				"payload"
			)
	))
	;should be original value as though there are no cyclics
	(call assert_approximate (assoc percent 0.001 obs (get result (list "familiarity_conviction_addition" 0)) exp 1.8416001890))


	;compare weighted conviction computation vs unweighted:

	(call_entity "howso" "add_feature" (assoc
		feature "cw"
		feature_value 1.0
		session "add_weight"
	))

	;set weight of [1,0] point to be 2.0
	(call_entity "howso" "edit_cases" (assoc
		features (list "cw")
		feature_values (list 2.0)
		condition (assoc "x" 1)
	))

	;compute weighted convictions
	(call_entity "howso" "react_into_features" (assoc
		features features
		familiarity_conviction_addition (true)
		use_case_weights (true)
		weight_feature "cw"
	))

	(assign (assoc
		result
			(call_entity "howso" "get_cases" (assoc features (append features "familiarity_conviction_addition" "cw")))
	))
	(print "Weighted conviction is very different from un-weighted: ")
	(call assert_approximate (assoc
		obs (get result (list "payload" "cases"))
		exp
		 (list
			(list 0 0 0.8986 1)
			(list 0 1 1.5118 1)
			(list 1 0 0.4527 2)
			(list 2 1 60.1828 1)
		)
	))
	(call exit_if_failures (assoc msg unit_test_name ))
)


