(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_time_series_datetime.amlg"))

	(declare (assoc
		data
			(list
				(list "stk_A"	"2020-04-01T08:00:00"	"john" "BOB" 	100)
				(list "stk_A"	"2020-04-01T09:00:00"	"bill" "BOB" 	101)
				(list "stk_A"	"2020-04-01T10:00:00"	"mick" "BOB" 	103)
				(list "stk_A"	"2020-04-01T11:00:00"	"mick" "BOB" 	105)
				(list "stk_A"	"2020-04-01T12:00:00"	"bill" "BOB" 	104)
				(list "stk_A"	"2020-04-01T13:00:00"	"anna" "BOB" 	106)
				(list "stk_A"	"2020-04-01T14:00:00"	"anna" "BOB" 	104)
				(list "stk_A"	"2020-04-01T15:00:00"	"bill" "BOB" 	103)
				(list "stk_A"	"2020-04-01T16:00:00"	"bill" "BOB" 	105)
				(list "stk_A"	"2020-04-01T17:00:00"	"tess" "BOB" 	106)
				(list "stk_A"	"2020-04-01T18:00:00"	"tess" "BOB" 	107)
				(list "stkB"	"2020-04-01T04:00:00"	"anna" "CAL" 	110.5)
				(list "stkB"	"2020-04-01T04:52:00"	"john" "CAL" 	109)
				(list "stkB"	"2020-04-01T06:00:00"	"john" "CAL" 	110)
				(list "stkB"	"2020-04-01T07:12:00"	"mick" "CAL" 	109)
				(list "stkB"	"2020-04-01T07:48:00"	"mick" "CAL" 	108)
				(list "stkB"	"2020-04-01T08:30:00"	"mick" "BOB" 	109)
				(list "stkB"	"2020-04-01T10:00:00"	"bill" "BOB" 	108)
				(list "stkB"	"2020-04-01T11:00:00"	"tess" "BOB" 	107)
				(list "stkB"	"2020-04-01T12:20:00"	"tess" "BOB" 	106.5)
				(list "stkB"	"2020-04-01T13:30:00"	"tess" "BOB" 	106)
			)

		features (list "stock" "time" "name" "owner" "value")
		result (null)
		result_features (null)
	))

	(call_entity "howso" "set_internal_parameters" (assoc
		hyperparameter_map (assoc ".targetless" (assoc "robust" (assoc ".none" (assoc "k" 3 "p" .1 "dt" -1))))
	))

	(call_entity "howso" "set_feature_attributes" (assoc
		features
			(assoc
				"stock"
					(assoc
						"type" "nominal"
						"id_feature" (true)
						"bounds" (assoc "allowed" (list "stk_A" "stkB"))
					)

				"time"
					(assoc
						"type" "continuous"
						"time_series" (assoc "time_feature" (true) "type" "delta")
						"date_time_format" "%Y-%m-%dT%H:%M:%S"
						"bounds"
							(assoc
								"allow_null" (false)
								"min" "2020-04-01T08:00:00"
								"max" "2020-04-01T14:00:00"
							)
					)
				"name"
					(assoc
						"type" "nominal"
						"time_series" (assoc "type" "rate")
					)
				"owner" (assoc "type" "nominal")
				"value"
					(assoc
						"type" "continuous"
						"time_series" (assoc "type" "delta")
						"bounds" (assoc
									"allow_null" (true)
									"min" 98
									"max" 115
								)
					)

				".custom_nominal"
					(assoc
						"derived_feature_code" "(concat #stock 0 \"_custom\""
						"type" "nominal"
					)
			)
	))

	(call_entity "howso" "train" (assoc
		input_cases (trunc data 16)
		features features
		session "session"
	))

	;break up the train into two separate calls where the second train trains only part of a series
	(call_entity "howso" "train" (assoc
		input_cases (tail data 5)
		features features
		session "session"
	))

	;test invalid datetime stop map
	(assign (assoc
		result
			(call_entity "howso" "batch_react_series" (assoc
				series_stop_maps (list (assoc "time" (assoc "min" "2020-03-21T08:00:00" ) ) )
				desired_conviction 4.5

				max_series_lengths (list 10)
				use_regional_model_residuals (false)
			))
	))

	 (print "Verify invalid datetime stop_map: ")
	 (call assert_same (assoc
	 	obs (get result (list "errors" 0 "detail"))
		exp "Failed to react_series: invalid stopping condition specified for time"
	 ))

	;test invalid nominal stop map
	(assign (assoc
		result
			(call_entity "howso" "batch_react_series" (assoc
				series_stop_maps (list (assoc "stock" (assoc "values" (list "invalid")  ) ) )
				desired_conviction 4.5

				max_series_lengths (list 10)
				use_regional_model_residuals (false)
			))
	))

	(print "Verify invalid nominal stop_map: ")
	 (call assert_same (assoc
	 	obs (get result (list "errors" 0 "detail"))
		exp "Failed to react_series: invalid stopping condition specified for stock"
	 ))

	;test invalid continuous stop map
	(assign (assoc
		result
			(call_entity "howso" "batch_react_series" (assoc
				series_stop_maps (list (assoc "value" (assoc "max" 120  ) ) )
				desired_conviction 4.5

				max_series_lengths (list 10)
				use_regional_model_residuals (false)
			))
	))

	(print "Verify invalid continuous stop_map: ")
	 (call assert_same (assoc
	 	obs (get result (list "errors" 0 "detail"))
		exp "Failed to react_series: invalid stopping condition specified for value"
	 ))

	 ;test invalid custom stop map, call singular react_series
	(assign (assoc
		result
			(call_entity "howso" "react_series" (assoc
				feature_bounds_map (assoc "value" (assoc "max" 105))
				series_stop_map  (assoc "value" (assoc "max" 108  ) )
				desired_conviction 4.5

				max_series_length 10
				use_regional_model_residuals (false)
			))
	))

	(print "Verify invalid custom stop_map: ")
	 (call assert_same (assoc
	 	obs (get result (list "errors" 0 "detail"))
		exp "Failed to react_series: invalid stopping condition specified for value"
	 ))


	;test duplication of context features
	(assign (assoc
		result
			(call_entity "howso" "react_series" (assoc
				initial_features (list ".series_progress")
				initial_values (list 0)

				context_features (list ".series_progress")
				context_values (list 0)

				feature_bounds_map (assoc "value" (assoc "max" 150))
				series_stop_map  (assoc "value" (assoc "max" 108  ) )
				desired_conviction 4.5

				max_series_length 10
				use_regional_model_residuals (false)
			))
	))

	(print "Verify invalid context features: ")
	 (call assert_same (assoc
	 	obs (get result (list "errors" 0 "detail"))
		exp "There must not be overlap between features specified in initial_features, context_features, and/or series_context_features."
	 ))

	(call exit_if_failures (assoc msg "Stop Map and Parameter verification."))

	(assign (assoc
		result
			(call_entity "howso" "batch_react_series" (assoc
				derived_action_features (list ".custom_nominal")
				desired_conviction 4.5

				max_series_lengths (list 10)
				use_regional_model_residuals (false)
			))
	))
	(print "No action_features results in empty output: ")
	(call assert_same (assoc
		exp  (assoc action_features (list) react_results (list))
		obs (get result "payload")
	))

	(assign (assoc
		result
			(call_entity "howso" "batch_react_series" (assoc
				derived_action_features (list ".custom_nominal")
				action_features (list "stock" ".time_delta_1" ".value_delta_1" "name" ".series_progress" ".series_progress_delta" "time" "owner" "value" )
				desired_conviction 4.5

				max_series_lengths (list 10)
				use_regional_model_residuals (false)
			))
	))
	(print "derived_action_features must be a subset of action_features: ")
	(call assert_same (assoc
		exp "Specified 'derived_action_features' must be a subset of 'action_features'."
		obs (get result (list "errors" 0 "detail"))
	))

	(assign (assoc
		result
			(call_entity "howso" "batch_react_series" (assoc
				derived_action_features (list ".custom_nominal")
				action_features (list "stock" ".time_delta_1" ".value_delta_1" "name" ".series_progress" ".series_progress_delta" "time" "owner" "value" ".custom_nominal" )
				desired_conviction 4.5

				max_series_lengths (list 10)
				use_regional_model_residuals (false)
			))
	))

	(declare (assoc
		series (get result (list "payload" "action_values" 0))
		action_features (get result (list "payload" "action_features"))
		feat_bounds_map (call_entity "howso" "debug_label" (assoc label "!featureBoundsMap"))
	))

	(declare (assoc
		first_row_map (zip action_features (first series))
		last_row_map (zip action_features (last series))
		min_time (get feat_bounds_map (list "time" "epoch_min_value"))
		max_time (get feat_bounds_map (list "time" "epoch_max_value"))
	))


	(assign (assoc
		start_time (format (get first_row_map "time") "date:%Y-%m-%dT%H:%M:%S" "number" )
		end_time (format (get last_row_map "time") "date:%Y-%m-%dT%H:%M:%S" "number")
	))

	(print "Time bounds are properly calculated " min_time " and " max_time " :")
	(call assert_true (assoc obs (and (> min_time 0) (> max_time 0))))

	(print "Times are properly generated " start_time " and " end_time " :")
	(call assert_true (assoc obs (and (> start_time 0) (> end_time 0))))

	(print "Time bounds are respected MIN: " )
	(call assert_true (assoc obs (>= start_time min_time)))

	(print "Time bounds are respected MAX: ")
	(call assert_true (assoc obs (<= end_time max_time)))

	(call exit_if_failures (assoc msg "Time bounds."))

	(print "Series length respected: ")
	(call assert_true (assoc obs (<= (size series) 10)))

	;grab the firsrt synthed date
	(assign (assoc result (get result (list "payload" "action_values" 0 0 6)) ))

	;convert date to epoch (number)
	(assign (assoc
		result (format result "date:%Y-%m-%dT%H:%M:%S" "number")
	))

	(print "Output date is Not in whole seconds (has decimal seconds): ")
	(call assert_true (assoc
		obs (!= result (round result 18 0))
	))

	(print "\nCustom derived string values:\n")
	(map
		(lambda (seq
			(print (last (current_value)) " : ")
			(call assert_true (assoc
				obs
					(contains_index
						(assoc "stk_A_custom" 0 "stkB_custom" 1)
						(last (current_value 1))
					)
			))
		))
		series
	)

	(print "\nNo nulls for all cases except the first:\n" (unparse action_features) "\n")
	(map
		(lambda (seq
			(print (unparse (current_value)) " : ")
			(call assert_false (assoc obs (contains_value (current_value 1) (null)) ))
		))
		(tail series)
	)

	(assign (assoc result (zip action_features (first series)) ))

	(print "Only time and value deltas are null due to being skipped (1 lag): ")
	(call assert_true (assoc
		obs (= (null) (get result ".time_delta1"))
	))
	(call assert_true (assoc
		obs (= (null) (get result ".value_delta_1"))
	))

	;filtering out the two null keys should leave 8 non-null keys in the result assoc:
	; ".custom_nominal" ".series_progress"  ".series_progress_delta" "name" "owner" "stock" "time" "value"
	(call assert_same (assoc
		exp 8
		obs (size (filter result))
	))
	(call exit_if_failures (assoc msg "Boundaries respected."))

	(assign (assoc
		result
			(call_entity "howso" "batch_react_series" (assoc
				action_features (list "stock" ".time_delta_1" ".value_delta_1" "name" ".series_progress" ".series_progress_delta" "time" "owner" "value" ".custom_nominal" )
				derived_action_features (list ".custom_nominal")

				series_context_features (list "value")
				;generate 2 series, of lengths 3 and 4 with these context values
				series_context_values (list
					(list (list 99) (list 100) (list 101))
					(list (list 100) (list 100.1) (list 100.5) (list 101))
				)

				desired_conviction 4.5
				num_series_to_generate 2
				generate_new_cases "always"

				max_series_lengths (list 10)
				use_regional_model_residuals (false)
				details
					(assoc
						"influential_cases" (true)
						"categorical_action_probabilities" (true)
						"generate_attempts" (true)
					)
			))
	))

	(print "Generated exactly 2 series: ")
	(call assert_same (assoc
		exp 2
		obs (size (get result (list "payload" "action_values" )))
	))

	(print "First Series generated of correct length: ")
	(declare (assoc series_len (size (get result (list "payload" "action_values" 0))) ))
	(call assert_true (assoc
		obs (and (>= series_len 1) (<= series_len 3) )
	))

	(declare (assoc series_len2 (size (get result (list "payload" "action_values" 1))) ))
	(print "Second Series generated of correct length: ")
	(call assert_true (assoc
		obs (and (>= series_len2 1) (<= series_len2 4) )
	))

	(print "First Series Context values match exactly as provided: ")
	(declare (assoc
		series_features (get result (list "payload" "action_features"))
		value_index  0
	))
	(assign (assoc
		value_index
			(first (filter
				(lambda (= "value" (get series_features (current_value))) )
				(indices series_features)
			))
		owner_index
			(first (filter
				(lambda (= "owner" (get series_features (current_value))) )
				(indices series_features)
			))
	))

	(call assert_true (assoc
		obs
			(contains_value
				;expect a list of 99, 100, 101, but may stop earlier so any of the later values may be null
				(list "99100101" "99100null" "99nullnull")
				(concat
					(get result (list "payload" "action_values" 0 0 value_index))
					(get result (list "payload" "action_values" 0 1 value_index))
					(get result (list "payload" "action_values" 0 2 value_index))
				)
			)
	))

	(print "Second Series Context values match exactly as provided: ")
	(call assert_true (assoc
		obs
			(contains_value
				;expect a list of 100, 100.1, 100.5, 101, but may stop earlier so any of the later values may be null
				(list "100100.1100.5101" "100100.1100.5null" "100100.1nullnull" "100nullnullnull" )
				(concat
					(get result (list "payload" "action_values" 1 0 value_index))
					(get result (list "payload" "action_values" 1 1 value_index))
					(get result (list "payload" "action_values" 1 2 value_index))
					(get result (list "payload" "action_values" 1 3 value_index))
				)
			)
	))

	(print "Not time-series 'owner' feature is static: ")
	(call assert_true (assoc
		obs
			(and
				;all values after nulls are filtered out should be the same for both series
				(apply "=" (filter
					(append
						(get result (list "payload" "action_values" 0 0 owner_index))
						(get result (list "payload" "action_values" 0 1 owner_index))
						(get result (list "payload" "action_values" 0 2 owner_index))

					)
				))

				(apply "=" (filter
					(append
						(get result (list "payload" "action_values" 1 0 owner_index))
						(get result (list "payload" "action_values" 1 1 owner_index))
						(get result (list "payload" "action_values" 1 2 owner_index))
						(get result (list "payload" "action_values" 1 3 owner_index))
					)
				))
			)
	))

	(call exit_if_failures (assoc msg "Manual Series Context values."))


	(print "Generated exactly 2 sets of influential cases: ")
	(call assert_same (assoc
		exp 2
		obs (size (get result (list "payload" "influential_cases" )))
	))

	(print "Each set of influential cases is same length as series: ")
	(call assert_same (assoc
		exp series_len
		obs (size (get result (list "payload" "influential_cases" 0)))
	))

	(call assert_same (assoc
		exp series_len2
		obs (size (get result (list "payload" "influential_cases" 1)))
	))

	(call exit_if_failures (assoc msg "React Series attributions."))

	(print "Generated exactly 2 sets of categorical action probabilities: ")
	(call assert_same (assoc
		exp 2
		obs (size (get result (list "payload" "categorical_action_probabilities")) )
	))

	(print "Each set of categorical_action_probabilities is same length as series: ")
	(call assert_same (assoc
		exp series_len
		obs (size (get result (list "payload" "categorical_action_probabilities" 0)) )
	))

	(call assert_same (assoc
		exp series_len2
		obs (size (get result (list "payload" "categorical_action_probabilities" 1)) )
	))

	(print "Categorical Action Probabilities output for all nominal features: ")
	(call assert_same (assoc
		exp (list "name" "owner" "stock")
		obs
			(sort (indices
				(get result (list "payload" "categorical_action_probabilities" 1 0))
			))
	))

	(print "Each case C.A.P. total adds up to 1.0: ")
	;iterate over all series' categorical action probabilities lists
	(map
		;iterate over each series C.A.P.s
		(lambda (map
			;iterate over each class's C.A.P.s
			(lambda (map
				(lambda
					(call assert_approximate (assoc
						;sum up the probabilities for each class
						obs (apply "+" (values (current_value 1)) )
						exp 1.0
					))
				)
				;C.A.P. assocs of feature -> class -> probability
				(values (current_value))
			))
			;list of C.A.P. assocs
			(current_value)
		))
		;list of lists of C.A.P. assocs
		(get result (list "payload" "categorical_action_probabilities"))
	)


	(print "Each Aggregated series C.A.P. total adds up to 1.0: ")
	;iterate over each series' aggregated categorical action probabilities
	(map
		;iterate over each class's C.A.P.s
		(lambda (map
			(lambda
				(call assert_approximate (assoc
					;sum up the probabilities for each class
					obs (apply "+" (values (current_value 1)) )
					exp 1.0
				))
			)
			;C.A.P. assocs of feature -> class -> probability
			(values (current_value))
		))
		;list of aggregated C.A.P. assocs, one per series
		(get result (list "payload" "aggregated_categorical_action_probabilities"))
	)

	(call exit_if_failures (assoc msg "React Series Categorical Action Probabilities."))

	(print "Each set of generate_attempts is same length as series: ")
	(call assert_same (assoc
		exp series_len
		obs (size (get result (list "payload" "generate_attempts" 0)) )
	))

	(call assert_same (assoc
		exp series_len2
		obs (size (get result (list "payload" "generate_attempts" 1)) )
	))
	(call exit_if_failures (assoc msg "React Series generate_attempts."))

	(print "series_generate_attempts is same length as number of series: ")
	(call assert_same (assoc
		exp 2
		obs (size (get result (list "payload" "series_generate_attempts")))
	))
	(call exit_if_failures (assoc msg "React Series series_generate_attempts."))

	(call exit_if_failures (assoc msg unit_test_name))
)