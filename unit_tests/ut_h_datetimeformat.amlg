(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_datetimeformat.amlg"))

	(declare (assoc
		data (list
		(list 1	 112313.657464 "a" "2020-06-08 lunes 11.32.36")
		(list 2	 112313.657464 "b" "2020-06-08 lunes 11.32.37")
		(list 3	 112313.657464 "c" "2020-06-08 lunes 11.32.38")
		(list 4	 112313.657464 "d" "2020-06-08 lunes 11.32.39")
		(list 5	 112313.657464 "e" "2020-06-08 lunes 11.32.46")
		(list 6	 112313.657464 "a" "2020-06-08 lunes 11.32.47")
		(list 7	 112313.657464 "b" "2020-06-08 lunes 11.32.48")
		(list 8	 112313.657464 "c" "2020-06-08 lunes 11.32.49")
		(list 9	 112313.657464 "d" "2020-06-08 lunes 11.32.56")
		(list 10 112313.657464 "e" "2020-06-08 lunes 11.32.57")
		(list 11 112313.657464 "a" "2020-06-08 lunes 11.32.58")
		(list 12 112313.657464 "b" "2020-06-08 lunes 11.32.59")
		(list 13 112313.657464 "c" "2020-06-08 lunes 11.33.36")
		(list 14 112313.657464 "d" "2020-06-08 lunes 11.33.37")
		(list 15 112313.657464 "e" "2020-06-08 lunes 11.33.38")
		(list 16 112313.657464 "a" "2020-06-08 lunes 11.33.39")
		(list 17 112313.657464 "b" "2020-06-08 lunes 11.33.40")
		(list 18 112313.657464 "c" "2020-06-08 lunes 11.33.41")
		(list 19 112313.657464 "d" "2020-06-08 lunes 11.33.42")
		(list 20 112313.657464 "e" "2020-06-08 lunes 11.33.43")
		(list 21 112313.657464 "a" "2020-06-08 lunes 11.33.44")
		(list 22 112313.657464 "b" "2020-06-08 lunes 11.33.45")
		(list 23 112313.657464 "c" "2020-06-08 lunes 11.33.46")
		(list 24 112313.657464 "d" "2020-06-08 lunes 11.33.47")
		(list 25 112313.657464 "e" "2020-06-08 lunes 11.33.48")
			 )
	))
	(declare (assoc
		features (list "id" "val" "nom" "datetime")
	))

	(call_entity "howso" "set_internal_parameters" (assoc
		default_hyperparameter_map (assoc "k" 1 "p" 2 "dt" -1)
	))

	(call_entity "howso" "set_feature_attributes" (assoc
		features
			(assoc
				"id"  (assoc "type" "nominal")
				"val" (assoc "type" "continuous" "decimal_places" 2)
				"nom" (assoc "type" "nominal")
				"datetime"
					(assoc
						"type" "continuous"
						"date_time_format" "%Y-%m-%d %A %H.%M.%S"
						;should be overwritten with 'formatted_date_time'
						"data_type" "string"
						"locale" "es_ES"
						"decimal_places" 0
					)
			)
	))
	(assign (assoc result (call_entity "howso" "get_feature_attributes") ))
	(call keep_result_payload)

	(print "datetime data_type automatically set to 'formatted_date_time': ")
	(call assert_same (assoc
		exp "formatted_date_time"
		obs (get result (list "datetime" "data_type"))
	))

	(call_entity "howso" "train" (assoc
		input_cases data
		features features
		session "session"
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					context_features (list "id" "nom")
					context_values (list 20 "e")
					action_features (list "datetime")

				))
				(list 1 "payload" "action_values")
			)
	))
	(print "React outputs correct date: ")
	(call assert_same (assoc obs (first result) exp "2020-06-08 lunes 11.33.43"))

	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					context_features (list "nom" "datetime")
					context_values (list "e" "2020-06-08 lunes 11.33.48")
					action_features (list "id")
				))
				(list 1 "payload" "action_values")
			)
	))
	(print "Using datetime as context in react: ")
	(call assert_same (assoc obs (first result) exp "25"))

	(call exit_if_failures (assoc msg "Datetime as context." ))

	(assign (assoc
		result
			(call_entity "howso" "get_cases" (assoc features features))
	))
	(declare (assoc
		all_dates
			(map
				(lambda
					(get (current_value) 3)
				)
				(get result  (list 1 "payload" "cases"))
			)
		orig_dates
			 (map
				(lambda (get (current_value) 3))
				data
			 )
	))

	(print "Original datetimes output in retrieve cases: ")
	(call assert_same (assoc
		obs all_dates
		exp orig_dates
		unordered (true)
	))

	(call exit_if_failures (assoc msg "Original datetime in retrieve cases." ))


	(print "date time format in generate case: ")
	(assign (assoc
		result
			(get
				(call_entity "howso" "react" (assoc
					desired_conviction 5
					action_features (list "val" "nom" "datetime")
					ordered_by_specified_features (true)
					context_features (list "id")
					context_values (list "3")
				))
				(list 1 "payload" "action_values")
			)
	))

	(call assert_approximate (assoc
		obs result
		exp (list 112313.66 "c" "2020-06-08 lunes 11.32.38")
		thresh 0.02
	))

	;convert date to epoch (number)
	(assign (assoc
		result (format (get result 2) "date:%Y-%m-%d %A %H.%M.%S" "number" (assoc "locale" "es_ES") (null))
	))

	(print "Output date is in whole seconds (0 decimal points): ")
	(call assert_true (assoc
		obs (= result (round result 18 0))
	))

	(call_entity "howso" "set_internal_parameters" (assoc
		default_hyperparameter_map (assoc "k" 3 "p" 2 "dt" -1)
	))
	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				context_features (list "nom" "datetime")
				context_values (list "e" "2020-06-08 lunes 11.33.48")
				action_features (list "id")
				details (assoc "feature_residuals_full" (true))
			))
	))
	(print "Delta for residual is in milliseconds: ") ;TODO: 15077: API for requesting custom datetime delta form for datetime residuals
	(call assert_true (assoc
		obs (>= (get result (list 1 "payload" "feature_residuals_full" "datetime")) 22)
	))
	(print "Mean Absolute Error: " (get result (list 1 "payload" "feature_residuals_full" "datetime")) "\n")


	(call exit_if_failures (assoc msg "Datetime residuals" ))

	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				action_features (list "id")
				preserve_feature_values (list "val" "nom" "datetime")
				case_indices (list "session" 4)  ; id = 5
				leave_case_out (false)
			))
	))
	(call keep_result_payload)

	(print "If case is left in, output expected id (action): ")
	(call assert_same (assoc exp "5" obs (get result (list "action_values" 0))))

	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				action_features (list "id")
				preserve_feature_values (list "val" "nom" "datetime")
				case_indices (list "session" 4)
				leave_case_out (true)  ; id = 5 no longer in dataset, predicts id = 6
			))
	))
	(call keep_result_payload)

	(print "If case is left out, output different id (action): ")
	(call assert_same (assoc exp "6" obs (get result (list "action_values" 0))))

	(call exit_if_failures (assoc msg unit_test_name ))
)