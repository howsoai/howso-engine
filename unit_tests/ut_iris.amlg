(seq
	;import the unit_test library
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call init_unit_test (assoc name "ut_iris.amlg"))

	(declare (assoc
		START (system_time)
		training_data
			(list
				(list 6.4 2.8 5.6 2.2 "virginica")
				(list 5.0 2.3 3.3 1.0 "versicolor")
				(list 4.9 2.5 4.5 1.7 "virginica")
				(list 4.9 3.1 1.5 0.1 "setosa")
				(list 5.7 3.8 1.7 0.3 "setosa")
				(list 4.4 3.2 1.3 0.2 "setosa")
				(list 5.4 3.4 1.5 0.4 "setosa")
				(list 6.9 3.1 5.1 2.3 "virginica")
				(list 6.7 3.1 4.4 1.4 "versicolor")
				(list 5.1 3.7 1.5 0.4 "setosa")
				(list 5.2 2.7 3.9 1.4 "versicolor")
				(list 6.9 3.1 4.9 1.5 "versicolor")
				(list 5.8 4.0 1.2 0.2 "setosa")
				(list 5.4 3.9 1.7 0.4 "setosa")
				(list 7.7 3.8 6.7 2.2 "virginica")
				(list 6.3 3.3 4.7 1.6 "versicolor")
				(list 6.8 3.2 5.9 2.3 "virginica")
				(list 7.6 3.0 6.6 2.1 "virginica")
				(list 6.4 3.2 5.3 2.3 "virginica")
				(list 5.7 4.4 1.5 0.4 "setosa")
				(list 6.7 3.3 5.7 2.1 "virginica")
				(list 6.4 2.8 5.6 2.1 "virginica")
				(list 5.4 3.9 1.3 0.4 "setosa")
				(list 6.1 2.6 5.6 1.4 "virginica")
				(list 7.2 3.0 5.8 1.6 "virginica")
				(list 5.2 3.5 1.5 0.2 "setosa")
				(list 5.8 2.6 4.0 1.2 "versicolor")
				(list 5.9 3.0 5.1 1.8 "virginica")
				(list 5.4 3.0 4.5 1.5 "versicolor")
				(list 6.7 3.0 5.0 1.7 "versicolor")
				(list 6.3 2.3 4.4 1.3 "versicolor")
				(list 5.1 2.5 3.0 1.1 "versicolor")
				(list 6.4 3.2 4.5 1.5 "versicolor")
				(list 6.8 3.0 5.5 2.1 "virginica")
				(list 6.2 2.8 4.8 1.8 "virginica")
				(list 6.9 3.2 5.7 2.3 "virginica")
				(list 6.5 3.2 5.1 2.0 "virginica")
				(list 5.8 2.8 5.1 2.4 "virginica")
				(list 5.1 3.8 1.5 0.3 "setosa")
				(list 4.8 3.0 1.4 0.3 "setosa")
				(list 7.9 3.8 6.4 2.0 "virginica")
				(list 5.8 2.7 5.1 1.9 "virginica")
				(list 6.7 3.0 5.2 2.3 "virginica")
				(list 5.1 3.8 1.9 0.4 "setosa")
				(list 4.7 3.2 1.6 0.2 "setosa")
				(list 6.0 2.2 5.0 1.5 "virginica")
				(list 4.8 3.4 1.6 0.2 "setosa")
				(list 7.7 2.6 6.9 2.3 "virginica")
				(list 4.6 3.6 1.0 0.2 "setosa")
				(list 7.2 3.2 6.0 1.8 "virginica")
				(list 5.0 3.3 1.4 0.2 "setosa")
				(list 6.6 3.0 4.4 1.4 "versicolor")
				(list 6.1 2.8 4.0 1.3 "versicolor")
				(list 5.0 3.2 1.2 0.2 "setosa")
				(list 7.0 3.2 4.7 1.4 "versicolor")
				(list 6.0 3.0 4.8 1.8 "virginica")
				(list 7.4 2.8 6.1 1.9 "virginica")
				(list 5.8 2.7 5.1 1.9 "virginica")
				(list 6.2 3.4 5.4 2.3 "virginica")
				(list 5.0 2.0 3.5 1.0 "versicolor")
				(list 5.6 2.5 3.9 1.1 "versicolor")
				(list 6.7 3.1 5.6 2.4 "virginica")
				(list 6.3 2.5 5.0 1.9 "virginica")
				(list 6.4 3.1 5.5 1.8 "virginica")
				(list 6.2 2.2 4.5 1.5 "versicolor")
				(list 7.3 2.9 6.3 1.8 "virginica")
				(list 4.4 3.0 1.3 0.2 "setosa")
				(list 7.2 3.6 6.1 2.5 "virginica")
				(list 6.5 3.0 5.5 1.8 "virginica")
				(list 5.0 3.4 1.5 0.2 "setosa")
				(list 4.7 3.2 1.3 0.2 "setosa")
				(list 6.6 2.9 4.6 1.3 "versicolor")
				(list 5.5 3.5 1.3 0.2 "setosa")
				(list 7.7 3.0 6.1 2.3 "virginica")
				(list 6.1 3.0 4.9 1.8 "virginica")
				(list 4.9 3.1 1.5 0.1 "setosa")
				(list 5.5 2.4 3.8 1.1 "versicolor")
				(list 5.7 2.9 4.2 1.3 "versicolor")
				(list 6.0 2.9 4.5 1.5 "versicolor")
				(list 6.4 2.7 5.3 1.9 "virginica")
				(list 5.4 3.7 1.5 0.2 "setosa")
				(list 6.1 2.9 4.7 1.4 "versicolor")
				(list 6.5 2.8 4.6 1.5 "versicolor")
				(list 5.6 2.7 4.2 1.3 "versicolor")
				(list 6.3 3.4 5.6 2.4 "virginica")
				(list 4.9 3.1 1.5 0.1 "setosa")
				(list 6.8 2.8 4.8 1.4 "versicolor")
				(list 5.7 2.8 4.5 1.3 "versicolor")
				(list 6.0 2.7 5.1 1.6 "versicolor")
				(list 5.0 3.5 1.3 0.3 "setosa")
				(list 6.5 3.0 5.2 2.0 "virginica")
				(list 6.1 2.8 4.7 1.2 "versicolor")
				(list 5.1 3.5 1.4 0.3 "setosa")
				(list 4.6 3.1 1.5 0.2 "setosa")
				(list 6.5 3.0 5.8 2.2 "virginica")
				(list 4.6 3.4 1.4 0.3 "setosa")
				(list 4.6 3.2 1.4 0.2 "setosa")
				(list 7.7 2.8 6.7 2.0 "virginica")
				(list 5.9 3.2 4.8 1.8 "versicolor")
				(list 5.1 3.8 1.6 0.2 "setosa")
				(list 4.9 3.0 1.4 0.2 "setosa")
				(list 4.9 2.4 3.3 1.0 "versicolor")
				(list 4.5 2.3 1.3 0.3 "setosa")
				(list 5.8 2.7 4.1 1.0 "versicolor")
				(list 5.0 3.4 1.6 0.4 "setosa")
				(list 5.2 3.4 1.4 0.2 "setosa")
				(list 5.3 3.7 1.5 0.2 "setosa")
				(list 5.0 3.6 1.4 0.2 "setosa")
				(list 5.6 2.9 3.6 1.3 "versicolor")
				(list 4.8 3.1 1.6 0.2 "setosa")
				(list 6.3 2.7 4.9 1.8 "virginica")
				(list 5.7 2.8 4.1 1.3 "versicolor")
				(list 5.0 3.0 1.6 0.2 "setosa")
				(list 6.3 3.3 6.0 2.5 "virginica")
				(list 5.0 3.5 1.6 0.6 "setosa")
				(list 5.5 2.6 4.4 1.2 "versicolor")
				(list 5.7 3.0 4.2 1.2 "versicolor")
				(list 4.4 2.9 1.4 0.2 "setosa")
				(list 4.8 3.0 1.4 0.1 "setosa")
				(list 5.5 2.4 3.7 1.0 "versicolor")
			)
		test_data
			(list
				(list 5.9 3.0 4.2 1.5 "versicolor")
				(list 6.9 3.1 5.4 2.1 "virginica")
				(list 5.1 3.3 1.7 0.5 "setosa")
				(list 6.0 3.4 4.5 1.6 "versicolor")
				(list 5.5 2.5 4.0 1.3 "versicolor")
				(list 6.2 2.9 4.3 1.3 "versicolor")
				(list 5.5 4.2 1.4 0.2 "setosa")
				(list 6.3 2.8 5.1 1.5 "virginica")
				(list 5.6 3.0 4.1 1.3 "versicolor")
				(list 6.7 2.5 5.8 1.8 "virginica")
				(list 7.1 3.0 5.9 2.1 "virginica")
				(list 4.3 3.0 1.1 0.1 "setosa")
				(list 5.6 2.8 4.9 2.0 "virginica")
				(list 5.5 2.3 4.0 1.3 "versicolor")
				(list 6.0 2.2 4.0 1.0 "versicolor")
				(list 5.1 3.5 1.4 0.2 "setosa")
				(list 5.7 2.6 3.5 1.0 "versicolor")
				(list 4.8 3.4 1.9 0.2 "setosa")
				(list 5.1 3.4 1.5 0.2 "setosa")
				(list 5.7 2.5 5.0 2.0 "virginica")
				(list 5.4 3.4 1.7 0.2 "setosa")
				(list 5.6 3.0 4.5 1.5 "versicolor")
				(list 6.3 2.9 5.6 1.8 "virginica")
				(list 6.3 2.5 4.9 1.5 "versicolor")
				(list 5.8 2.7 3.9 1.2 "versicolor")
				(list 6.1 3.0 4.6 1.4 "versicolor")
				(list 5.2 4.1 1.5 0.1 "setosa")
				(list 6.7 3.1 4.7 1.5 "versicolor")
				(list 6.7 3.3 5.7 2.5 "virginica")
				(list 6.4 2.9 4.3 1.3 "versicolor")
			)

		context_labels (list "sepal_length" "sepal_width" "petal_length" "petal_width")
		action_labels (list "species")
	))

	(load_entity "../trainee_template.amlg" "irismodel" (false) (false))
	(call_entity "irismodel" "Initialize")
	(assign_to_entities "irismodel" (assoc
		defaultHyperparameters (assoc "k" 8 "p" 2 "dt" -1)
	))

;VERIFY SETTING NOMINAL FEATURES

	;set nominals
	(call_entity "irismodel" "SetFeatureAttributes" (assoc
		features (assoc "species" (assoc "type" "nominal"))
	))

	(print "Has nominals: ")
	(call assert_same (assoc
		obs (size (retrieve_from_entity "irismodel" "nominalsMap"))
		exp 1
	))

	(call exit_if_failures (assoc msg "Setting nominals"))


	;train
	(map (lambda
			(call_entity "irismodel" "Train" (assoc
				features (append context_labels action_labels)
				input_cases (list (current_value 2))
				session "iris_session"
			))
		)
		training_data
	)

;VERIFY DECREASE IN ACCURACY

	(print "Executing Feature Decrease in Accuracy with analysis:\n")
	(declare (assoc
		result
			(call_entity "irismodel" "DecreaseInAccuracy" (assoc
				action_features action_labels
				context_features context_labels
				classification_precision 0
			))
	))

	(print "Decrease in accuracy using feature knockout:\n")
	;feature knockout on iris the accuracy shouldn't drop more than 5% for any feature
	(map
		(lambda (seq
			(print (current_value) " : ")
			(call assert_approximate (assoc
				exp 0.03
				obs (get result (current_value 1))
				thresh 0.03
			))
		))
		context_labels
	)


	(assign (assoc
		result
			(call_entity "irismodel" "DecreaseInAccuracy" (assoc
				action_features action_labels
				context_features context_labels
				sensitivity_to_randomization (true)
			))
	))

	;feature scrambling results in different values per feature so verify one feature at a time
	(print "\nDecrease in accuracy using feature scrambling:\n")
	(print "petal_length : ")
	(call assert_approximate (assoc
		obs (get result "petal_length")
		exp 0.63
		thresh 0.3
	))

	(print "petal_width : ")
	(call assert_approximate (assoc
		obs (get result "petal_width")
		exp 0.15
		thresh 0.6
	))

	(print "sepal_width : " )
	(call assert_approximate (assoc
		obs (get result "sepal_width")
		exp 0.03
		thresh 0.05
	))

	(print "sepal_length : ")
	(call assert_approximate (assoc
		obs (get result "sepal_length")
		exp 0.02
		thresh 0.05
	))

	(call exit_if_failures (assoc msg "Feature Decrease in Accuracy"))


	;cache targeted model accuracy
	(assign_to_entities "irismodel" (assoc
		defaultHyperparameters (assoc "k" 10 "p" 2 "dt" -1)
	))

;VERIFY EXPLANATION OF CASE

	;validate influential cases threshholds
	(assign_to_entities "irismodel" (assoc
		influenceWeightThreshold .9
	))
	(assign (assoc result
			(call_entity "irismodel" "ReactDiscriminative" (assoc
				context_features context_labels
				context_values (list 5.4 2.3 1.5 0.1)
				action_features action_labels
				details (assoc "influential_cases" (true))
			))
	))


	(declare (assoc
		total_influence_weight
			(apply "+"
				(map
					(lambda (get (current_value) ".influence_weight"))
					(get result "influential_cases")
				)
			)
	))

	(print "Influence weight adds up to  0.91: ")
	(call assert_approximate (assoc exp .91 obs total_influence_weight percent 0.01))


	(assign_to_entities "irismodel" (assoc influenceWeightThreshold .99))
	(assign (assoc result
			(call_entity "irismodel" "ReactDiscriminative" (assoc
				context_features context_labels
				context_values (list 5.4 2.3 1.5 0.1)
				action_features action_labels
				details (assoc "influential_cases" (true))
			))
	))


	(assign (assoc
		total_influence_weight
			(apply "+"
				(map
					(lambda (get (current_value) ".influence_weight"))
					(get result "influential_cases")
				)
			)
	))
	(print "Influence weight adds up to .99: ")
	(call assert_approximate (assoc exp 1 obs total_influence_weight percent 0.01))


	(call exit_if_failures (assoc msg "Total influence weight by threshold "))

	;reset values
	(assign_to_entities "irismodel" (assoc
		influenceWeightThreshold .infinity
	))

	(assign (assoc result
			(call_entity "irismodel" "ReactDiscriminative" (assoc
				context_features context_labels
				context_values (list 5.4 2.3 1.5 0.1)
				action_features action_labels
				details
					(assoc
						"influential_cases" (true)
						"influential_cases_familiarity_convictions" (true)
						"boundary_cases" (true)
						"familiarity_conviction" (true)
						"similarity_conviction" (true)
						"outlying_feature_values" (true)
					)
			))
	))


	(declare (assoc result2
			(call_entity "irismodel" "ReactDiscriminative" (assoc
				context_features context_labels
				context_values (list 5.4 2.3 1.5 0.1)
				action_values (list "setosa")
				action_features action_labels
				details
					(assoc
						"influential_cases" (true)
						"influential_cases_familiarity_convictions" (true)
						"boundary_cases" (true)
						"familiarity_conviction" (true)
						"similarity_conviction" (true)
						"outlying_feature_values" (true)
					)
			))
	))

	(print "Explanation of case with and w/o action values provided: ")
	(call assert_approximate (assoc obs (get result2 "familiarity_conviction"  ) exp (get result "familiarity_conviction" )))
	(call assert_approximate (assoc obs (get result2 "similarity_conviction"  ) exp (get result "similarity_conviction"  )))
	; sort the influential cases by session training index since the order may not always be exact when influence weights are the same
	(declare (assoc
		sorted_obs_inf
			(sort
				(lambda (< (get (current_value) ".session_training_index") (get (current_value 1) ".session_training_index")))
				(get result2 "influential_cases")
			)
		sorted_exp_info
			(sort
				(lambda (< (get (current_value) ".session_training_index") (get (current_value 1) ".session_training_index")))
				(get result "influential_cases")
			)
	))
	(call assert_approximate (assoc obs sorted_obs_inf exp sorted_exp_info))

	(print "Similarity conviction matches: ")
	(call assert_approximate (assoc exp .27 obs (get result "similarity_conviction")))

	(call exit_if_failures (assoc msg "Matching explanation w & w/o action values"))


;VERIFY ACCURACY WITH LOW K

	(assign_to_entities "irismodel" (assoc
		defaultHyperparameters (assoc "k" 1 "p" 2 "dt" -1)
	))
	;label
	(declare (assoc total_correct 0))
	(map (lambda
			(let (assoc
					cv (trunc (current_value 1))
					av (last (current_value 1))
					result 0
				)
				(assign (assoc result
					(first
						(call_entity "irismodel" "ReactDiscriminative" (assoc
							return_action_values_only (true)
							context_features context_labels
							context_values cv
							action_features action_labels
						))
					)
				))
				;(print (unparse cv) " actual: " av "  predicted: " result "\n")
				(if (= av result)
					(accum (assoc total_correct 1))
				)
			)
		)
		test_data
	)

	(print total_correct " correct out of " (size test_data) " (" (/ total_correct (size test_data)) ")\n")
	(call assert_same (assoc obs total_correct exp 28))

	(call exit_if_failures (assoc msg "Accuracy with low K"))



;VERIFY ACCURACY WITH HIGH K
	;rerunning with higher P and closest N of 10
	(assign_to_entities "irismodel" (assoc
		defaultHyperparameters (assoc "k" 10 "p" 2.4 "dt" -1)
	))

	(assign (assoc total_correct 0))
	(map (lambda
		(let (assoc
			cv (trunc (current_value 1))
			av (last (current_value 1))
			result 0
			 )
			(assign (assoc result
					(first
						(call_entity "irismodel" "ReactDiscriminative" (assoc
							return_action_values_only (true)
							context_features context_labels
							context_values cv
							action_features action_labels
						))
					)
			))
			;(print (unparse cv) " actual: " av "  predicted: " result "\n")
			(if (= av result)
				(accum (assoc total_correct 1))
			)
		)
		 )
		test_data
	)

	(print "with higher K " total_correct " correct out of " (size test_data) " (" (/ total_correct (size test_data)) ")\n")
	(call assert_same (assoc obs total_correct exp 30))
	(call exit_if_failures (assoc msg "Accuracy with high K"))


	(print "Testing with entropy-based model reduction\n")
	(print "Model size: " (call_entity "irismodel" "GetNumTrainingCases") "\n")
	(call_entity "irismodel" "RemoveLeastInformativeTrainingCases" (assoc
		features (append context_labels action_labels)
		num_cases_to_remove 50
	))
	(print "New Model size: " (call_entity "irismodel" "GetNumTrainingCases") "\n")

	(assign_to_entities "irismodel" (assoc
		defaultHyperparameters (assoc "k" 1 "p" 2.4 "dt" -1)
	))

	(assign (assoc total_correct 0))
	(map (lambda
			(let (assoc
					cv (trunc (current_value 1))
					av (last (current_value 1))
					result 0
				)
				(assign (assoc result
					(first
						(call_entity "irismodel" "ReactDiscriminative" (assoc
							return_action_values_only (true)
							context_features context_labels
							context_values cv
							action_features action_labels
						))
					)
				))
				;(print "actual: " av "  predicted: " result "\n")
				(if (= av result)
					(accum (assoc total_correct 1))
				)
			)
		)
		test_data
	)

	(print total_correct " correct out of " (size test_data) " (" (/ total_correct (size test_data)) ")\n")
	(call assert_same (assoc obs total_correct exp 28))
	(call exit_if_failures (assoc msg "Reduced model accuracy with low K"))


;VERIFY ANALYZE METHOD
	(call_entity "irismodel" "RemoveLeastInformativeTrainingCases" (assoc
		features (append context_labels action_labels)
		num_cases_to_remove 70
	))
	(map (lambda
			(call_entity "irismodel" "Train" (assoc
				features (append context_labels action_labels)
				input_cases (list (current_value 2))
				session "iris_session"
			))
		)
		(append training_data test_data)
	)

	(print "retrained model size: " (call_entity "irismodel" "GetNumTrainingCases") "\nAnalyzing...\n")
	(declare (assoc
		tune_start (system_time)
		context_key (apply "concat" (weave (sort context_labels) "."))
	))
	(call_entity "irismodel" "Analyze" (assoc
		context_features context_labels
		action_features action_labels
		k_folds 6
		use_deviations (false)
		targeted_model "single_targeted"
		weight_feature ".none"
	))

	(assign (assoc result (- 1 (get (retrieve_from_entity "irismodel" "hyperparameterMetadataMap") (list "species" context_key "full" ".none" "gridSearchError")))))
	(print "analyze accuracy score >= 96: " result " ")
	(call assert_true (assoc obs (>= result 0.96)))

	(print "time to tune " (- (system_time) tune_start)  "\n")
	(print "analyzed parameters for iris\n")

	(declare (assoc
		hp_map (retrieve_from_entity "irismodel" "hyperparameterMetadataMap" )
	))

	;k should be 13
	(print "closestN >= 8: " (get hp_map (list "species" context_key "full" ".none" "k")) " ")
	(call assert_true (assoc obs (>= (get hp_map (list "species" context_key "full" ".none" "k")) 8)))
	;p should be 2 or 3
	(print "lpSpaceParameter >= 1: " (get hp_map (list "species" context_key "full" ".none" "p")) " ")
	(call assert_true (assoc obs (>= (get hp_map (list "species" context_key "full" ".none" "p")) 1) ))

	(call exit_if_failures (assoc msg "Analyzed parameters"))

	(declare (assoc entropies
		(call_entity "irismodel" "ComputeEntropyOfFeatures" (assoc
			features (list "sepal_length" "sepal_width" "petal_length" "petal_width" "species")
		))
	))

;VERIFY NOMINAL EN/DECODING BYPASS

	;pull un-decoded iris data from iris model and train a new model with it
	(declare (assoc decoded_iris_data_map
			(call_entity "irismodel" "RetrieveAllCases" (assoc
				features (append context_labels action_labels )
				skip_nominal_decoding 1
			))
	))


	(load_entity "../trainee_template.amlg" "iris_unencoded" (false) (false))
	(call_entity "iris_unencoded" "Initialize")
	(assign_to_entities "iris_unencoded" (assoc
		hyperparameterMetadataMap hp_map ;same hyperparameter map as in iris, retrieved above
	))

	;bypass nominal feature enumerations
	(call_entity "iris_unencoded" "SetFeatureAttributes" (assoc
		features (assoc "species" (assoc "type" "continuous"))
	))

	(call_entity "iris_unencoded" "Train" (assoc
		features (get decoded_iris_data_map "features")
		input_cases (get decoded_iris_data_map "cases")
		session "encoded1"
	))

	(assign (assoc entropies_unencoded
			(call_entity "iris_unencoded"  "ComputeEntropyOfFeatures" (assoc
				features (list "sepal_length" "sepal_width" "petal_length" "petal_width" "species")
			))
	))
	(print "Feature convictions match for nominal encoded and decoded model: ")
	(call assert_approximate (assoc exp entropies obs entropies_unencoded percent 0.05))




;VERIFY EXPECTED FEATURE VALUES

	(call_entity "irismodel" "RemoveReplaySession" (assoc session "iris_session"))

	(call_entity "irismodel" "Train" (assoc
		features (append context_labels action_labels)
		;ignore that first virginica case so that there are more setosas in the data
		input_cases (tail training_data)
		session "expected_test"
	))

	(print "retrained cases: " (call_entity "irismodel" "GetNumTrainingCases" ) "\n")

	; since we aren't doing an analyze here, the expected values are outdated, so manually clear them
	(assign_to_entities "irismodel" (assoc expectedValuesMap (assoc)))

	(assign (assoc
		result
			(call_entity "irismodel" "CalculateFeatureExpectedValue" (assoc feature "sepal_length"))
	))
	(print "Expected feature values for continuous: ")
	;average value for sepal_length is 5.840
	(call assert_approximate (assoc exp 5.840 obs result thresh 0.005))

	(assign (assoc
		result
			(call_entity "irismodel" "CalculateFeatureExpectedValue" (assoc feature "species"))
	))
	(print "Expected feature values for nominal: ")

	;there are 42 setosa and 41 virginica, so it should choose setosa
	(call assert_same (assoc exp "setosa" obs result ))

	(call exit_if_failures (assoc msg "Feature expected values"))



;VERIFY TARGETFULL ANALYZATION
	(call_entity "irismodel" "RemoveLeastInformativeTrainingCases" (assoc
		features (append context_labels action_labels)
		num_cases_to_remove 70
	))

	(print "slimmed  model size (49): " (call_entity "irismodel" "GetNumTrainingCases") "\n")

	(declare (assoc features (append context_labels action_labels)))
	;run an "omni_targeted" loop here to analyze each feature
	(map
		(lambda
			(call_entity "irismodel" "Analyze" (assoc
				context_features  (filter (lambda (!= (current_value) (current_value 2))) features)
				action_features (list (current_value 2))
				targeted_model "single_targeted"
				k_folds 6
				weight_feature ".none"
			))
		)
		features
	)

	(assign (assoc
		hp_map (retrieve_from_entity "irismodel" "hyperparameterMetadataMap" )
	))

	(map
		(lambda
			(let
				(assoc
					context_key (apply "concat" (weave (sort (filter (lambda (!= (current_value) (current_value 2))) (append context_labels action_labels))) "."))
				)
				(print " analyzed " (current_value) " k " (get hp_map (list (current_value 1) context_key "full" ".none" "k")) " p " (get hp_map (list (current_value 1) context_key "full" ".none" "p")) " : ")
				(call assert_true (assoc
					obs (!= (null) (get hp_map (list (current_value 2) context_key "full" ".none")))
				))

			)
		)
		(append context_labels action_labels)
	)


	(assign (assoc
		result
			(call_entity "irismodel" "ReactDiscriminative" (assoc
				context_features (list "sepal_length" "sepal_width" "petal_length" "species")
				context_values (list 5.7 4.4 1.6 "setosa")
				action_features (list "petal_width")
				details (assoc "influential_cases" (true))
			))
		context_key (apply "concat" (weave (sort (list "sepal_length" "sepal_width" "petal_length" "species")) "."))
	))
	(declare (assoc expected_k (get hp_map (list "petal_width" context_key "full" ".none" "k"))))
	(print "Closest K matches analyzed hyperparameter for petal_width " expected_k " : ")
	(call assert_approximate (assoc
		exp expected_k
		obs (size (get result "influential_cases"))
		thresh 2
	))


	(assign (assoc
		result
			(call_entity "irismodel" "ReactDiscriminative" (assoc
				context_features (list "sepal_length" "petal_length" "petal_width" "species")
				context_values (list 5.7 1.6 0.3 "setosa")
				action_features (list "sepal_width")
				details (assoc "influential_cases" (true))
			))
		context_key (apply "concat" (weave (sort (list "sepal_length" "petal_length" "petal_width" "species")) "."))
	))
	(assign (assoc expected_k (get hp_map (list "sepal_width" context_key "full" ".none" "k"))))
	(print "Closest K matches analyzed hyperparameter for sepal_width " expected_k  " : ")
	(call assert_approximate (assoc
		exp expected_k
		obs (size (get result "influential_cases"))
		thresh 2
	))


	(assign (assoc
		result
			(call_entity "irismodel" "ReactDiscriminative" (assoc
				context_features (list "sepal_length" "sepal_width" "petal_length" "petal_width" )
				context_values (list 5.7 4.41 1.61 0.3)
				action_features (list "species")
				details (assoc "influential_cases" (true) "num_boundary_cases" 11)
			))
		context_key (apply "concat" (weave (sort (list "sepal_length" "sepal_width" "petal_length" "petal_width")) "."))
	))
	(assign (assoc expected_k (get hp_map (list "species" context_key "full" ".none" "k"))))
	(print "Closest K matches analyzed hyperparameter for species " expected_k " : ")
	(call assert_approximate (assoc
		exp expected_k
		obs (size (get result "influential_cases"))
		thresh 3
	))

	(print "Expected custom boundary cases 11: ")
	(call assert_same (assoc
		exp 11
		obs (size (get result "boundary_cases"))
	))

	(assign (assoc hp_map (retrieve_from_entity "irismodel" "hyperparameterMetadataMap" )))
	(assign "hp_map"
		(list "sepal_length" "full" ".none" "p") 1
		(list "sepal_length" "full" ".none" "k") 5
	)

;VERIFY RESIDUAL ABLATEMENT
	(assign_to_entities "irismodel" (assoc
		hyperparameterMetadataMap hp_map
		minAblatementModelSize 30
	))

	(print "\n")

	;clear out the model completely
	(call_entity "irismodel" "RemoveLeastInformativeTrainingCases" (assoc
		features (append context_labels action_labels)
		num_cases_to_remove 50
	))

	;retrain on the first 40 cases
	(map (lambda
			(call_entity "irismodel" "Train" (assoc
				features (append context_labels action_labels)
				input_cases (list (current_value 2))
				session "iris_session"
			))
		)
		(trunc training_data 40)
	)

	(print "final model size (40): " (call_entity "irismodel" "GetNumTrainingCases") "\n")

	(declare (assoc
		expected_value
			(first (call_entity "irismodel" "ReactDiscriminative" (assoc
				return_action_values_only (true)
				context_features  (list "sepal_width" "petal_length" "petal_width" "species")
				context_values (list 2.2 1.5 0.1 "setosa")
				action_features (list "sepal_length" )
			)))
	))

	(print
		"residuals for sepal_length prediction: "
		(get
			(call_entity "irismodel" "ReactDiscriminative" (assoc
				context_features  (list "sepal_width" "petal_length" "petal_width" "species")
				context_values (list 2.2 1.5 0.1 "setosa")
				action_features (list "sepal_length" )
				details (assoc "feature_residuals" (true))
			))
			(list "feature_residuals" "sepal_length" )
		)
		" expected value: " expected_value "\n"
	)

	;should not be trained on, within low residual, model size remains at 40
	(call_entity "irismodel" "Train" (assoc
		features (list "sepal_width" "petal_length" "petal_width" "species" "sepal_length")
		input_cases (list (list 2.2 1.5 0.1 "setosa" expected_value))
		ablatement_params (assoc "sepal_length" (list "residual"))
	))
	(print "size " (call_entity "irismodel" "GetNumTrainingCases") "\n")
	;should not be trained on, within high residual, model size remains at 40
	(call_entity "irismodel" "Train" (assoc
		features (list "sepal_width" "petal_length" "petal_width" "species" "sepal_length")
		input_cases (list (list 2.2 1.5 0.1 "setosa" (+ expected_value .01)))
		ablatement_params (assoc "sepal_length" (list "residual"))
	))
	(print "size " (call_entity "irismodel" "GetNumTrainingCases") "\n")
	;should train both of these since one is above the high residual and the other is below the low
	(call_entity "irismodel" "Train" (assoc
		features (list "sepal_width" "petal_length" "petal_width" "species" "sepal_length")
		input_cases (list (list 2.2 1.5 0.1 "setosa" (+ expected_value 0.3)))
		ablatement_params (assoc "sepal_length" (list "residual"))
	))
	(print "size " (call_entity "irismodel" "GetNumTrainingCases") "\n")
	(call_entity "irismodel" "Train" (assoc
		features (list "sepal_width" "petal_length" "petal_width" "species" "sepal_length")
		input_cases (list (list 2.2 1.5 0.1 "setosa" (- expected_value 0.3)))
		ablatement_params (assoc "sepal_length" (list "residual"))
	))
	(print "size " (call_entity "irismodel" "GetNumTrainingCases") "\n")
	;expected model size should now be 42
	(print "Model size after ablation training: " (call_entity "irismodel" "GetNumTrainingCases") "\n")
	(call assert_same (assoc obs (call_entity "irismodel" "GetNumTrainingCases") exp 42))


	(print "TIME TO EXECUTE IRIS TEST: " (- (system_time) START) "\n")
	(call exit_if_failures (assoc msg unit_test_name))
	;(store_entity "IrisTraining.amlg" "irismodel")
)