(seq
	;import the unit_test library
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_iris.amlg"))

	(call_entity "howso" "set_internal_parameters" (assoc
		default_hyperparameter_map (assoc "k" 8 "p" 2 "dt" -1)
	))

	(declare (assoc
		START (system_time)
		training_data
			(list
				(list 6.4 2.8 5.6 2.2 "virginica")
				(list 5.0 2.3 3.3 1.0 "versicolor")
				(list 4.9 2.5 4.5 1.7 "virginica")
				(list 4.9 3.1 1.5 0.1 "setosa")
				(list 5.7 3.8 1.7 0.3 "setosa")
				(list 4.4 3.2 1.3 0.2 "setosa")
				(list 5.4 3.4 1.5 0.4 "setosa")
				(list 6.9 3.1 5.1 2.3 "virginica")
				(list 6.7 3.1 4.4 1.4 "versicolor")
				(list 5.1 3.7 1.5 0.4 "setosa")
				(list 5.2 2.7 3.9 1.4 "versicolor")
				(list 6.9 3.1 4.9 1.5 "versicolor")
				(list 5.8 4.0 1.2 0.2 "setosa")
				(list 5.4 3.9 1.7 0.4 "setosa")
				(list 7.7 3.8 6.7 2.2 "virginica")
				(list 6.3 3.3 4.7 1.6 "versicolor")
				(list 6.8 3.2 5.9 2.3 "virginica")
				(list 7.6 3.0 6.6 2.1 "virginica")
				(list 6.4 3.2 5.3 2.3 "virginica")
				(list 5.7 4.4 1.5 0.4 "setosa")
				(list 6.7 3.3 5.7 2.1 "virginica")
				(list 6.4 2.8 5.6 2.1 "virginica")
				(list 5.4 3.9 1.3 0.4 "setosa")
				(list 6.1 2.6 5.6 1.4 "virginica")
				(list 7.2 3.0 5.8 1.6 "virginica")
				(list 5.2 3.5 1.5 0.2 "setosa")
				(list 5.8 2.6 4.0 1.2 "versicolor")
				(list 5.9 3.0 5.1 1.8 "virginica")
				(list 5.4 3.0 4.5 1.5 "versicolor")
				(list 6.7 3.0 5.0 1.7 "versicolor")
				(list 6.3 2.3 4.4 1.3 "versicolor")
				(list 5.1 2.5 3.0 1.1 "versicolor")
				(list 6.4 3.2 4.5 1.5 "versicolor")
				(list 6.8 3.0 5.5 2.1 "virginica")
				(list 6.2 2.8 4.8 1.8 "virginica")
				(list 6.9 3.2 5.7 2.3 "virginica")
				(list 6.5 3.2 5.1 2.0 "virginica")
				(list 5.8 2.8 5.1 2.4 "virginica")
				(list 5.1 3.8 1.5 0.3 "setosa")
				(list 4.8 3.0 1.4 0.3 "setosa")
				(list 7.9 3.8 6.4 2.0 "virginica")
				(list 5.8 2.7 5.1 1.9 "virginica")
				(list 6.7 3.0 5.2 2.3 "virginica")
				(list 5.1 3.8 1.9 0.4 "setosa")
				(list 4.7 3.2 1.6 0.2 "setosa")
				(list 6.0 2.2 5.0 1.5 "virginica")
				(list 4.8 3.4 1.6 0.2 "setosa")
				(list 7.7 2.6 6.9 2.3 "virginica")
				(list 4.6 3.6 1.0 0.2 "setosa")
				(list 7.2 3.2 6.0 1.8 "virginica")
				(list 5.0 3.3 1.4 0.2 "setosa")
				(list 6.6 3.0 4.4 1.4 "versicolor")
				(list 6.1 2.8 4.0 1.3 "versicolor")
				(list 5.0 3.2 1.2 0.2 "setosa")
				(list 7.0 3.2 4.7 1.4 "versicolor")
				(list 6.0 3.0 4.8 1.8 "virginica")
				(list 7.4 2.8 6.1 1.9 "virginica")
				(list 5.8 2.7 5.1 1.9 "virginica")
				(list 6.2 3.4 5.4 2.3 "virginica")
				(list 5.0 2.0 3.5 1.0 "versicolor")
				(list 5.6 2.5 3.9 1.1 "versicolor")
				(list 6.7 3.1 5.6 2.4 "virginica")
				(list 6.3 2.5 5.0 1.9 "virginica")
				(list 6.4 3.1 5.5 1.8 "virginica")
				(list 6.2 2.2 4.5 1.5 "versicolor")
				(list 7.3 2.9 6.3 1.8 "virginica")
				(list 4.4 3.0 1.3 0.2 "setosa")
				(list 7.2 3.6 6.1 2.5 "virginica")
				(list 6.5 3.0 5.5 1.8 "virginica")
				(list 5.0 3.4 1.5 0.2 "setosa")
				(list 4.7 3.2 1.3 0.2 "setosa")
				(list 6.6 2.9 4.6 1.3 "versicolor")
				(list 5.5 3.5 1.3 0.2 "setosa")
				(list 7.7 3.0 6.1 2.3 "virginica")
				(list 6.1 3.0 4.9 1.8 "virginica")
				(list 4.9 3.1 1.5 0.1 "setosa")
				(list 5.5 2.4 3.8 1.1 "versicolor")
				(list 5.7 2.9 4.2 1.3 "versicolor")
				(list 6.0 2.9 4.5 1.5 "versicolor")
				(list 6.4 2.7 5.3 1.9 "virginica")
				(list 5.4 3.7 1.5 0.2 "setosa")
				(list 6.1 2.9 4.7 1.4 "versicolor")
				(list 6.5 2.8 4.6 1.5 "versicolor")
				(list 5.6 2.7 4.2 1.3 "versicolor")
				(list 6.3 3.4 5.6 2.4 "virginica")
				(list 4.9 3.1 1.5 0.1 "setosa")
				(list 6.8 2.8 4.8 1.4 "versicolor")
				(list 5.7 2.8 4.5 1.3 "versicolor")
				(list 6.0 2.7 5.1 1.6 "versicolor")
				(list 5.0 3.5 1.3 0.3 "setosa")
				(list 6.5 3.0 5.2 2.0 "virginica")
				(list 6.1 2.8 4.7 1.2 "versicolor")
				(list 5.1 3.5 1.4 0.3 "setosa")
				(list 4.6 3.1 1.5 0.2 "setosa")
				(list 6.5 3.0 5.8 2.2 "virginica")
				(list 4.6 3.4 1.4 0.3 "setosa")
				(list 4.6 3.2 1.4 0.2 "setosa")
				(list 7.7 2.8 6.7 2.0 "virginica")
				(list 5.9 3.2 4.8 1.8 "versicolor")
				(list 5.1 3.8 1.6 0.2 "setosa")
				(list 4.9 3.0 1.4 0.2 "setosa")
				(list 4.9 2.4 3.3 1.0 "versicolor")
				(list 4.5 2.3 1.3 0.3 "setosa")
				(list 5.8 2.7 4.1 1.0 "versicolor")
				(list 5.0 3.4 1.6 0.4 "setosa")
				(list 5.2 3.4 1.4 0.2 "setosa")
				(list 5.3 3.7 1.5 0.2 "setosa")
				(list 5.0 3.6 1.4 0.2 "setosa")
				(list 5.6 2.9 3.6 1.3 "versicolor")
				(list 4.8 3.1 1.6 0.2 "setosa")
				(list 6.3 2.7 4.9 1.8 "virginica")
				(list 5.7 2.8 4.1 1.3 "versicolor")
				(list 5.0 3.0 1.6 0.2 "setosa")
				(list 6.3 3.3 6.0 2.5 "virginica")
				(list 5.0 3.5 1.6 0.6 "setosa")
				(list 5.5 2.6 4.4 1.2 "versicolor")
				(list 5.7 3.0 4.2 1.2 "versicolor")
				(list 4.4 2.9 1.4 0.2 "setosa")
				(list 4.8 3.0 1.4 0.1 "setosa")
				(list 5.5 2.4 3.7 1.0 "versicolor")
			)
		test_data
			(list
				(list 5.9 3.0 4.2 1.5 "versicolor")
				(list 6.9 3.1 5.4 2.1 "virginica")
				(list 5.1 3.3 1.7 0.5 "setosa")
				(list 6.0 3.4 4.5 1.6 "versicolor")
				(list 5.5 2.5 4.0 1.3 "versicolor")
				(list 6.2 2.9 4.3 1.3 "versicolor")
				(list 5.5 4.2 1.4 0.2 "setosa")
				(list 6.3 2.8 5.1 1.5 "virginica")
				(list 5.6 3.0 4.1 1.3 "versicolor")
				(list 6.7 2.5 5.8 1.8 "virginica")
				(list 7.1 3.0 5.9 2.1 "virginica")
				(list 4.3 3.0 1.1 0.1 "setosa")
				(list 5.6 2.8 4.9 2.0 "virginica")
				(list 5.5 2.3 4.0 1.3 "versicolor")
				(list 6.0 2.2 4.0 1.0 "versicolor")
				(list 5.1 3.5 1.4 0.2 "setosa")
				(list 5.7 2.6 3.5 1.0 "versicolor")
				(list 4.8 3.4 1.9 0.2 "setosa")
				(list 5.1 3.4 1.5 0.2 "setosa")
				(list 5.7 2.5 5.0 2.0 "virginica")
				(list 5.4 3.4 1.7 0.2 "setosa")
				(list 5.6 3.0 4.5 1.5 "versicolor")
				(list 6.3 2.9 5.6 1.8 "virginica")
				(list 6.3 2.5 4.9 1.5 "versicolor")
				(list 5.8 2.7 3.9 1.2 "versicolor")
				(list 6.1 3.0 4.6 1.4 "versicolor")
				(list 5.2 4.1 1.5 0.1 "setosa")
				(list 6.7 3.1 4.7 1.5 "versicolor")
				(list 6.7 3.3 5.7 2.5 "virginica")
				(list 6.4 2.9 4.3 1.3 "versicolor")
			)

		context_labels (list "sepal_length" "sepal_width" "petal_length" "petal_width")
		action_labels (list "species")
	))

;VERIFY SETTING NOMINAL FEATURES

	;set nominals
	(call_entity "howso" "set_feature_attributes" (assoc
		features (assoc "species" (assoc "type" "nominal"))
	))

	(print "Has nominals: ")
	(call assert_same (assoc
		obs (size (call_entity "howso" "debug_label" (assoc label "!nominalsMap")))
		exp 1
	))

	(call exit_if_failures (assoc msg "Setting nominals"))


	;train
	(map
		(lambda
			(call_entity "howso" "train" (assoc
				features (append context_labels action_labels)
				input_cases (list (current_value 2))
				session "iris_session"
			))
		)
		training_data
	)

;VERIFY DECREASE IN ACCURACY
	(call_entity "howso" "react_aggregate" (assoc
		context_features context_labels
		action_feature (first action_labels)
		details (assoc feature_mda_full (true))
	))

	(print "Executing Feature Decrease in Accuracy with analysis:\n")
	(declare (assoc
		result
			(call_entity "howso" "get_feature_mda" (assoc
				action_feature (first action_labels)
			))
	))
	(call keep_result_payload)

	(print "Decrease in accuracy using feature knockout:\n")
	;feature knockout on iris the accuracy shouldn't drop more than 5% for any feature
	(map
		(lambda (seq
			(print (current_value) " : ")
			(call assert_approximate (assoc
				exp 0.035
				obs (get result (current_value 1))
				thresh 0.04
			))
		))
		context_labels
	)

	(call_entity "howso" "react_aggregate" (assoc
		context_features context_labels
		action_feature (first action_labels)
		details (assoc feature_mda_permutation_full (true))
	))
	(assign (assoc
		result
			(call_entity "howso" "get_feature_mda" (assoc
				action_feature (first action_labels)
				permutation (true)
			))
	))
	(call keep_result_payload)

	;feature scrambling results in different values per feature so verify one feature at a time
	(print "\nDecrease in accuracy using feature scrambling:\n")
	(print "petal_length : ")
	(call assert_approximate (assoc
		obs (get result "petal_length")
		exp 0.63
		thresh 0.3
	))

	(print "petal_width : ")
	(call assert_approximate (assoc
		obs (get result "petal_width")
		exp 0.15
		thresh 0.6
	))

	(print "sepal_width : " )
	(call assert_approximate (assoc
		obs (get result "sepal_width")
		exp 0.03
		thresh 0.05
	))

	(print "sepal_length : ")
	(call assert_approximate (assoc
		obs (get result "sepal_length")
		exp 0.02
		thresh 0.05
	))

	(call exit_if_failures (assoc msg "Feature Decrease in Accuracy"))


	;cache targeted model accuracy
	(call_entity "howso" "set_internal_parameters" (assoc
		default_hyperparameter_map (assoc "k" 10 "p" 2 "dt" -1)
	))

;VERIFY DETAILS OF CASE

	;validate influential cases threshholds
	(call_entity "howso" "set_influence_weight_threshold" (assoc
		influence_weight_threshold .9
	))
	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				context_features context_labels
				context_values (list 5.4 2.3 1.5 0.1)
				action_features action_labels
				details (assoc "influential_cases" (true))
			))
	))
	(call keep_result_payload)

	(declare (assoc
		total_influence_weight
			(apply "+"
				(map
					(lambda (get (current_value) ".influence_weight"))
					(get result "influential_cases")
				)
			)
	))

	(print "Influence weight adds up to  0.91: ")
	(call assert_approximate (assoc exp .91 obs total_influence_weight percent 0.01))

	(call_entity "howso" "set_influence_weight_threshold" (assoc
		influence_weight_threshold .99
	))
	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				context_features context_labels
				context_values (list 5.4 2.3 1.5 0.1)
				action_features action_labels
				details (assoc "influential_cases" (true))
			))
	))
	(call keep_result_payload)

	(assign (assoc
		total_influence_weight
			(apply "+"
				(map
					(lambda (get (current_value) ".influence_weight"))
					(get result "influential_cases")
				)
			)
	))
	(print "Influence weight adds up to .99: ")
	(call assert_approximate (assoc exp 1 obs total_influence_weight percent 0.01))


	(call exit_if_failures (assoc msg "Total influence weight by threshold "))

	;reset values
	(call_entity "howso" "set_influence_weight_threshold" (assoc
		influence_weight_threshold .infinity
	))

	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				context_features context_labels
				context_values (list 5.4 2.3 1.5 0.1)
				action_features action_labels
				details
					(assoc
						"influential_cases" (true)
						"influential_cases_familiarity_convictions" (true)
						"boundary_cases" (true)
						"familiarity_conviction" (true)
						"similarity_conviction" (true)
						"outlying_feature_values" (true)
					)
			))
	))
	(call keep_result_payload)

	(declare (assoc
		result2
			(get
				(call_entity "howso" "react" (assoc
					context_features context_labels
					context_values (list 5.4 2.3 1.5 0.1)
					action_values (list "setosa")
					action_features action_labels
					details
						(assoc
							"influential_cases" (true)
							"influential_cases_familiarity_convictions" (true)
							"boundary_cases" (true)
							"familiarity_conviction" (true)
							"similarity_conviction" (true)
							"outlying_feature_values" (true)
						)
				))
				(list 1 "payload")
			)
	))

	(print "Details of case with and w/o action values provided: ")
	(call assert_approximate (assoc obs (get result2 "familiarity_conviction"  ) exp (get result "familiarity_conviction" )))
	(call assert_approximate (assoc obs (get result2 "similarity_conviction"  ) exp (get result "similarity_conviction"  )))
	; sort the influential cases by session training index since the order may not always be exact when influence weights are the same
	(declare (assoc
		sorted_obs_inf
			(sort
				(lambda (< (get (current_value) ".session_training_index") (get (current_value 1) ".session_training_index")))
				(get result2 "influential_cases")
			)
		sorted_exp_info
			(sort
				(lambda (< (get (current_value) ".session_training_index") (get (current_value 1) ".session_training_index")))
				(get result "influential_cases")
			)
	))
	(call assert_approximate (assoc obs sorted_obs_inf exp sorted_exp_info))

	(print "Similarity conviction matches: ")
	(call assert_approximate (assoc exp .27 obs (get result "similarity_conviction")))

	(call exit_if_failures (assoc msg "Matching details w & w/o action values"))


;VERIFY ACCURACY WITH LOW K
	(call_entity "howso" "set_internal_parameters" (assoc
		default_hyperparameter_map (assoc "k" 1 "p" 2 "dt" -1)
	))

	;label
	(declare (assoc total_correct 0))
	(map (lambda
			(let (assoc
					cv (trunc (current_value 1))
					av (last (current_value 1))
					result 0
				)
				(assign (assoc
					result
						(get
							(call_entity "howso" "react" (assoc
								context_features context_labels
								context_values cv
								action_features action_labels
							))
							(list 1 "payload" "action_values" 0)
						)
				))
				;(print (unparse cv) " actual: " av "  predicted: " result "\n")
				(if (= av result)
					(accum (assoc total_correct 1))
				)
			)
		)
		test_data
	)

	(print total_correct " correct out of " (size test_data) " (" (/ total_correct (size test_data)) ")\n")
	(call assert_same (assoc obs total_correct exp 28))

	(call exit_if_failures (assoc msg "Accuracy with low K"))



;VERIFY ACCURACY WITH HIGH K
	;rerunning with higher P and closest N of 10
	(call_entity "howso" "set_internal_parameters" (assoc
		default_hyperparameter_map (assoc "k" 10 "p" 2.4 "dt" -1)
	))

	(assign (assoc total_correct 0))
	(map (lambda
		(let (assoc
			cv (trunc (current_value 1))
			av (last (current_value 1))
			result 0
			 )
			(assign (assoc
				result
					(get
						(call_entity "howso" "react" (assoc
							context_features context_labels
							context_values cv
							action_features action_labels
						))
						(list 1 "payload" "action_values" 0)
					)
			))
			;(print (unparse cv) " actual: " av "  predicted: " result "\n")
			(if (= av result)
				(accum (assoc total_correct 1))
			)
		)
		 )
		test_data
	)

	(print "with higher K " total_correct " correct out of " (size test_data) " (" (/ total_correct (size test_data)) ")\n")
	(call assert_same (assoc obs total_correct exp 30))
	(call exit_if_failures (assoc msg "Accuracy with high K"))

	(print "Model size: "
		#!get_num_cases
		(get (call_entity "howso" "get_num_training_cases") (list 1 "payload" "count"))
		"\n"
	)

	(call_entity "howso" "set_internal_parameters" (assoc
		default_hyperparameter_map (assoc "k" 1 "p" 2.4 "dt" -1)
	))

	(assign (assoc total_correct 0))
	(map (lambda
			(let (assoc
					cv (trunc (current_value 1))
					av (last (current_value 1))
					result 0
				)
				(assign (assoc
					result
					(get
						(call_entity "howso" "react" (assoc
							context_features context_labels
							context_values cv
							action_features action_labels
						))
						(list 1 "payload" "action_values" 0)
					)
				))
				;(print "actual: " av "  predicted: " result "\n")
				(if (= av result)
					(accum (assoc total_correct 1))
				)
			)
		)
		test_data
	)

	(print total_correct " correct out of " (size test_data) " (" (/ total_correct (size test_data)) ")\n")
	(call assert_same (assoc obs total_correct exp 28))
	(call exit_if_failures (assoc msg "Reduced model accuracy with low K"))


;VERIFY ANALYZE METHOD
	(map
		(lambda
			(call_entity "howso" "train" (assoc
				features (append context_labels action_labels)
				input_cases (list (current_value 2))
				session "iris_session"
			))
		)
		(append training_data test_data)
	)

	(print "retrained model size: " (call !get_num_cases) "\nAnalyzing...\n")
	(declare (assoc
		tune_start (system_time)
		context_key (apply "concat" (weave (sort context_labels) "."))
	))
	(call_entity "howso" "analyze" (assoc
		context_features context_labels
		action_features action_labels
		k_folds 6
		use_deviations (false)
		targeted_model "single_targeted"
		weight_feature ".none"
	))

	(assign (assoc result (- 1 (get (call_entity "howso" "debug_label" (assoc label "!hyperparameterMetadataMap")) (list "species" context_key "full" ".none" "gridSearchError")))))
	(print "analyze accuracy score >= 96: " result " ")
	(call assert_true (assoc obs (>= result 0.96)))

	(print "time to tune " (- (system_time) tune_start)  "\n")
	(print "analyzed parameters for iris\n")

	(call exit_if_failures (assoc msg "Analyzed parameters"))

;VERIFY EXPECTED FEATURE VALUES

	(call_entity "howso" "remove_session" (assoc session "iris_session"))

	(call_entity "howso" "train" (assoc
		features (append context_labels action_labels)
		;ignore that first virginica case so that there are more setosas in the data
		input_cases (tail training_data)
		session "expected_test"
	))

	(print "retrained cases: " (call !get_num_cases) "\n")


;VERIFY TARGETFULL ANALYZATION
	(declare (assoc features (append context_labels action_labels)))
	;run an "omni_targeted" loop here to analyze each feature
	(map
		(lambda
			(call_entity "howso" "analyze" (assoc
				context_features  (filter (lambda (!= (current_value) (current_value 2))) features)
				action_features (list (current_value 2))
				targeted_model "single_targeted"
				k_folds 6
				weight_feature ".none"
			))
		)
		features
	)

	(assign (assoc
		result (get (call_entity "howso" "debug_label" (assoc label "!expectedValuesMap")) (list ".none" "sepal_length" "expected_value"))
	))
	(print "Expected feature values for continuous: ")
	;average value for sepal_length is 5.840
	(call assert_approximate (assoc exp 5.840 obs result thresh 0.005))

	(assign (assoc
		result (get (call_entity "howso" "debug_label" (assoc label "!expectedValuesMap")) (list ".none" "species" "expected_value"))
	))
	(print "Expected feature values for nominal: ")
	;there are 42 setosa and 41 virginica, so it should choose setosa
	(call assert_same (assoc exp "setosa" obs result ))

	(call exit_if_failures (assoc msg "Feature expected values"))


	(assign (assoc
		hp_map (call_entity "howso" "debug_label" (assoc label "!hyperparameterMetadataMap"))
	))

	(map
		(lambda
			(let
				(assoc
					context_key (apply "concat" (weave (sort (filter (lambda (!= (current_value) (current_value 2))) (append context_labels action_labels))) "."))
				)
				(print " analyzed " (current_value) " k " (get hp_map (list (current_value 1) context_key "full" ".none" "k")) " p " (get hp_map (list (current_value 1) context_key "full" ".none" "p")) " : ")
				(call assert_true (assoc
					obs (!= (null) (get hp_map (list (current_value 2) context_key "full" ".none")))
				))

			)
		)
		(append context_labels action_labels)
	)


	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				context_features (list "sepal_length" "sepal_width" "petal_length" "species")
				context_values (list 5.7 4.4 1.6 "setosa")
				action_features (list "petal_width")
				details (assoc "influential_cases" (true))
			))
		context_key (apply "concat" (weave (sort (list "sepal_length" "sepal_width" "petal_length" "species")) "."))
	))
	(declare (assoc expected_k (get hp_map (list "petal_width" context_key "full" ".none" "k"))))
	(print "Closest K matches analyzed hyperparameter for petal_width " expected_k " : ")
	(call assert_approximate (assoc
		exp expected_k
		obs (size (get result (list 1 "payload" "influential_cases")))
		thresh 2
	))


	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				context_features (list "sepal_length" "petal_length" "petal_width" "species")
				context_values (list 5.7 1.6 0.3 "setosa")
				action_features (list "sepal_width")
				details (assoc "influential_cases" (true))
			))
		context_key (apply "concat" (weave (sort (list "sepal_length" "petal_length" "petal_width" "species")) "."))
	))
	(assign (assoc expected_k (get hp_map (list "sepal_width" context_key "full" ".none" "k"))))
	(print "Closest K matches analyzed hyperparameter for sepal_width " expected_k  " : ")
	(call assert_approximate (assoc
		exp expected_k
		obs (size (get result (list 1 "payload" "influential_cases")))
		thresh 2
	))


	(assign (assoc
		result
			(call_entity "howso" "react" (assoc
				context_features (list "sepal_length" "sepal_width" "petal_length" "petal_width" )
				context_values (list 5.7 4.41 1.61 0.3)
				action_features (list "species")
				details (assoc "influential_cases" (true) "num_boundary_cases" 11)
			))
		context_key (apply "concat" (weave (sort (list "sepal_length" "sepal_width" "petal_length" "petal_width")) "."))
	))
	(call keep_result_payload)
	(assign (assoc expected_k (get hp_map (list "species" context_key "full" ".none" "k"))))
	(print "Closest K matches analyzed hyperparameter for species " expected_k " : ")
	(call assert_approximate (assoc
		exp expected_k
		obs (size (get result "influential_cases"))
		thresh 3
	))

	(print "Expected custom boundary cases 11: ")
	(call assert_same (assoc
		exp 11
		obs (size (get result "boundary_cases"))
	))

	(assign (assoc hp_map (call_entity "howso" "debug_label" (assoc label "!hyperparameterMetadataMap")) ))
	(assign "hp_map"
		(list "sepal_length" "full" ".none" "p") 1
		(list "sepal_length" "full" ".none" "k") 5
	)

;VERIFY RESIDUAL ABLATEMENT
	(call_entity "howso" "set_internal_parameters" (assoc hyperparameter_map hp_map ))

	(print "\n")

	;clear out the model completely
	(call_entity "howso" "remove_cases")

	;retrain on the first 40 cases
	(map
		(lambda
			(call_entity "howso" "train" (assoc
				features (append context_labels action_labels)
				input_cases (list (current_value 2))
				session "iris_session"
			))
		)
		(trunc training_data 40)
	)

	(print "final model size (40): " (call !get_num_cases) "\n")

	(declare (assoc
		expected_value
			(get
				(call_entity "howso" "react" (assoc
					context_features  (list "sepal_width" "petal_length" "petal_width" "species")
					context_values (list 2.2 1.5 0.1 "setosa")
					action_features (list "sepal_length" )
				))
				(list 1 "payload" "action_values" 0)
			)
	))

	(print
		"residuals for sepal_length prediction: "
		(get
			(call_entity "howso" "react" (assoc
				context_features  (list "sepal_width" "petal_length" "petal_width" "species")
				context_values (list 2.2 1.5 0.1 "setosa")
				action_features (list "sepal_length" )
				details (assoc "feature_residuals_full" (true))
			))
			(list 1 "payload" "feature_residuals_full" "sepal_length" )
		)
		" expected value: " expected_value "\n"
	)

	(call_entity "howso" "set_auto_ablation_params" (assoc
		auto_ablation_enabled (true)
		minimum_model_size 30
		residual_prediction_features (list "sepal_length")
	))

	;should not be trained on, within low residual, model size remains at 40
	(call_entity "howso" "train" (assoc
		features (list "sepal_width" "petal_length" "petal_width" "species" "sepal_length")
		input_cases (list (list 2.2 1.5 0.1 "setosa" expected_value))
	))
	(print "size " (call !get_num_cases) "\n")
	;should not be trained on, within high residual, model size remains at 40
	(call_entity "howso" "train" (assoc
		features (list "sepal_width" "petal_length" "petal_width" "species" "sepal_length")
		input_cases (list (list 2.2 1.5 0.1 "setosa" (+ expected_value .01)))
	))
	(print "size " (call !get_num_cases) "\n")
	;should train both of these since one is above the high residual and the other is below the low
	(call_entity "howso" "train" (assoc
		features (list "sepal_width" "petal_length" "petal_width" "species" "sepal_length")
		input_cases (list (list 2.2 1.5 0.1 "setosa" (+ expected_value 0.8)))
	))
	(print "size " (call !get_num_cases) "\n")
	(call_entity "howso" "train" (assoc
		features (list "sepal_width" "petal_length" "petal_width" "species" "sepal_length")
		input_cases (list (list 2.2 1.5 0.1 "setosa" (- expected_value 0.8)))
	))
	(print "size " (call !get_num_cases) "\n")
	;expected model size should now be 42
	(print "Model size after ablation training: " (call !get_num_cases) "\n")
	(call assert_same (assoc obs (call !get_num_cases) exp 42))

	(call_entity "howso" "set_auto_ablation_params" (assoc
		auto_ablation_enabled (false)
	))

	(print "TIME TO EXECUTE IRIS TEST: " (- (system_time) START) "\n")
	(call exit_if_failures (assoc msg unit_test_name))

)