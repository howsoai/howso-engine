(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call init_unit_test (assoc name "ut_abalone.amlg"))

	(load_entity "../trainee_template.amlg" "modelA" (false) (false))
	(call_entity "modelA" "Initialize")
	(assign_to_entities "modelA" (assoc
		defaultHyperparameters (assoc "k" 21 "p" 2 "dt" -1)
	)) ;autotuned parameters of 21/2 give > 30% accuracy

	(declare (assoc
		start_time (system_time)
		data (load "unit_test_data/abalone.amlg")
		features (list "sex" "length" "diameter" "height" "w_weight" "shucked_weight" "v_weight" "shell_weight" "rings")
	))

	(call_entity "modelA" "SetNominalFeatures" (assoc nominal_features (list)))  ;no nominals

	(declare (assoc time_diff (- (system_time) start_time) ))
	(print "time to load: " time_diff "\n")


	(assign (assoc start_time (system_time)))

	(call_entity "modelA" "Train" (assoc
		features features
		input_cases (trunc data 3677) ;out of 4177, 500 left unlabeled
		session "session"
	))

	(declare (assoc test_data (tail data 500)))

	(assign (assoc time_diff (- (system_time) start_time) ))
	(print "time to train: " time_diff "\n")
	(call assert_true (assoc obs (< time_diff 2000))) ;should load in under 2 seconds

	(call exit_if_failures (assoc msg "Abalone load time"))

	(call_entity "modelA" "SetOrdinalFeatures" (assoc ordinal_features (list "rings")))

	(assign (assoc start_time (system_time)))

	(declare (assoc total_correct 0))
	(map (lambda
		(let (assoc result 0 )
			(assign (assoc result

					(call_entity "modelA" "ReactDiscriminative" (assoc
						return_action_values_only (true)
						context_features (trunc features)
						context_values (trunc (current_value 2))
						action_features (list (last features))
					))

			))

			(if (= (last (current_value)) (first result))
				(accum (assoc total_correct 1))
			)
		))
		test_data
	)


	(assign (assoc time_diff (- (system_time) start_time) ))
	(print "time to react: " time_diff "\n")
	(call assert_true (assoc obs (< time_diff 1500))) ;should react in under 1.5 seconds

	(call exit_if_failures (assoc msg "Abalone react time"))

	(print total_correct " correct out of " (size test_data) " (" (/ total_correct (size test_data)) ")\n")
	(call assert_true (assoc obs (> (/ total_correct (size test_data)) .30) ))

	(call exit_if_failures (assoc msg "Abalone accuracy"))

	(call exit_if_failures (assoc msg unit_test_name))
)
