(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_hierarchy.amlg"))

	(call_entity "howso" "create_trainee" (assoc trainee "model" ))

	(call_entity "howso" "create_trainee" (assoc
		trainee "model"
		child_trainee "A"
	))

	(call_entity "howso" "create_trainee" (assoc
		trainee "model"
		parent_trainee "A"
		child_trainee "b"
	))

	(call_entity "howso" "create_trainee" (assoc
		trainee "model"
		parent_trainee "A"
		child_trainee "c"
	))

	(declare (assoc
		result
			(get
				(call_entity "howso" "create_trainee" (assoc
					trainee "model"
					parent_trainee "bad_parent"
					child_trainee "d"
				))
				(list "errors" 0 "detail")
			)
	))

	(print "Bad parent check in create_trainee: ")
	(call assert_same (assoc
		obs result
		exp "Specified invalid parent_trainee."
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "create_trainee" (assoc
					trainee "model"
					child_trainee "b"
				))
				(list "errors" 0 "detail")
			)
	))

	(print "Existing child check in create_trainee: ")
	(call assert_same (assoc
		obs result
		exp "Specified child_trainee is already in the hierarchy."
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "get_hierarchy" (assoc trainee "model"))
				"payload"
			)
	))

	(print "Hierarchy for model is correct: ")
	(call assert_same (assoc
		obs result
		exp
			(assoc
				hierarchy_map
					(assoc
						A
							(assoc
								b (assoc)
								c (assoc)
							)
					)
				is_contained_map (assoc A (true) b (true) c (true))
			)
	))

	(call exit_if_failures (assoc msg "Creating Child trainees."))

	(assign (assoc
		result
			(get
				(call_entity "howso" "execute_method" (assoc
					trainee "model"
					child_trainee "bad_child"
					method "train"
					payload (assoc)
				))
				(list "errors" 0 "detail")
			)
	))

	(print "Invalid child check for execute_method: ")
	(call assert_same (assoc
		obs result
		exp  "Specified child_trainee is not in the hierarchy."
	))

	(call_entity "howso" "train" (assoc
		trainee "model"
		features (list "a" "b" "c")
		input_cases
			(list
				(list 10 20 30)
				(list 11 22 33)
				(list 12 24 36)
				(list 13 26 39)
			)
	))

	(call_entity "howso" "execute_method" (assoc
		trainee "model"
		child_trainee "A"
		method "train"
		payload
			(assoc
				features (list "x" "y")
				input_cases
					(list
						(list 1 1)
						(list 2 1)
						(list 3 3)
						(list 4 4)
						(list 5 5)
						(list 6 6)
					)
			)
	))


	(call_entity "howso" "move_cases" (assoc
		trainee "model"
		child_trainee "A"
		target_trainee "b"
		num_cases 2
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "get_num_training_cases" (assoc
					trainee "model"
				))
				(list "payload" "count")
			)
	))

	(print "Cases in model: ")
	(call assert_same (assoc
		obs result
		exp 4
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "execute_method" (assoc
					trainee "model"
					child_trainee "A"
					method "get_num_training_cases"
				))
				(list "payload" "count")
			)
	))

	(print "Cases in child A: ")
	(call assert_same (assoc
		obs result
		exp 4
	))


	(assign (assoc
		result
			(get
				(call_entity "howso" "execute_method" (assoc
					trainee "model"
					child_trainee "b"
					method "get_num_training_cases"
				))
				(list "payload" "count")
			)
	))

	(print "Cases in grandchild b: ")
	(call assert_same (assoc
		obs result
		exp 2
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "move_cases" (assoc
					trainee "model"
					child_trainee "x"
					target_trainee "b"
					num_cases 2
				))
				(list "errors" 0 "detail")
			)
	))
	(print "move_cases fails from invalid child: ")
	(call assert_same  (assoc
		obs result
		exp  "Invalid child_trainee specified."
	))

	(call exit_if_failures (assoc msg "Excute method and move cases."))


	(assign (assoc
		result
			(get
				(call_entity "howso" "copy" (assoc
					trainee "model"
					target_trainee "b"
					parent_trainee "A"
					child_trainee "b"
				))
				(list "errors" 0 "detail")
			)
	))

	(print "copy fails due to target_trainee already existing: ")
	(call assert_same  (assoc
		obs result
		exp "Failed to copy: b trainee already exists."
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "copy" (assoc
					trainee "model"
					target_trainee "d"
					parent_trainee "A"
					child_trainee "bad_child"
				))
				(list "errors" 0 "detail")
			)
	))

	(print "copy fails from invalid child: ")
	(call assert_same  (assoc
		obs result
		exp "Invalid child_trainee specified."
	))


	(assign (assoc
		result
			(get
				(call_entity "howso" "copy" (assoc
					trainee "model"
					target_trainee "d"
					child_trainee "b"
				))
				(list "errors" 0 "detail")
			)
	))
	(print "copy fails from missing parent_trainee: ")
	(call assert_same  (assoc
		obs result
		exp "Specified child_trainee without specifying parent_trainee."
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "copy" (assoc
					trainee "model"
					target_trainee "copyA"
					parent_trainee "model"
					child_trainee "A"
				))
				(list "errors" 0 "detail")
			)
	))
	(print "copy fails from having existing hierarchy: ")
	(call assert_same  (assoc
		obs result
		exp "Cannot copy a trainee that has its own hierarchy."
	))

	;Valid copy of b to copy_b
	(call_entity "howso" "copy" (assoc
		trainee "model"
		target_trainee "copy_b"
		parent_trainee "A"
		child_trainee "b"
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "execute_method" (assoc
					trainee "model"
					child_trainee "copy_b"
					method "get_num_training_cases"
				))
				(list "payload" "count")
			)
	))

	(print "copy works, cases in grandchild copy_b: ")
	(call assert_same (assoc
		obs result
		exp 2
	))

	(call exit_if_failures (assoc msg "copy trainee."))

	(assign (assoc
		result
			(get
				(call_entity "howso" "save" (assoc
					trainee "model"
					child_trainee "bad_trainee"
					filename "deleteme"
				))
				(list "errors" 0 "detail")
			)
	))
	(print "save fails from invalid child_trainee: ")
	(call assert_same  (assoc
		obs result
		exp "Invalid child_trainee specified."
	))


	(call_entity "howso" "save" (assoc
		trainee "model"
		child_trainee "b"
		filename "deleteme"
		filepath "./"
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "delete" (assoc
					trainee "model"
					child_trainee "b"
				))
				(list "errors" 0 "detail")
			)
	))

	(print "delete fails since grandchild b has been saved outside trainee: ")
	(call assert_same (assoc
		obs result
		exp "child_trainee is stored independently of this trainee."
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "save" (assoc
					trainee "model"
					child_trainee "b"
					filename "deleteme"
				))
				(list "errors" 0 "detail")
			)
	))

	(print "save fails since grandchild b is now outside trainee: ")
	(call assert_same (assoc
		obs result
		exp "Specified child_trainee is not stored inside this trainee."
	))

	(call_entity "howso" "load" (assoc
		trainee "model"
		child_trainee "loaded"
		parent_trainee "c"
		filename "deleteme"
		filepath "./"
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "get_hierarchy" (assoc trainee "model"))
				"payload"
			)
	))

	(print "Hierarchy for model after save and load is correct: ")
	(call assert_same (assoc
		obs result
		exp
			(assoc
				hierarchy_map
					(assoc
						A
							(assoc
								b (assoc)
								c
									(assoc
										loaded (assoc)
									)
								copy_b (assoc)
							)
					)
				is_contained_map (assoc A (true) b (false) c (true) loaded (true) copy_b (true))
			)
	))

	;cleanup saved test model
	(if (= (system "os") "Windows")
		(seq
			(system "system" "del deleteme.*")
			(system "system" "del \"deletemeVersion.txt\"")
		)

		;else posix
		(seq
			(system "system" "rm -rf deleteme.*")
			(system "system" "rm \"deletemeVersion.txt\"")
		)
	)

	(call exit_if_failures (assoc msg "save, lLoad and delete." ))


	(assign (assoc
		result
			(get
				(call_entity "howso" "execute_method" (assoc
					trainee "model"
					child_trainee "b"
					method "get_num_training_cases"
				))
				(list "errors" 0 "detail")
			)
	))

	(print "execute_method fails on an independent trainee: ")
	(call assert_same (assoc
		obs result
		exp "Specified child_trainee is not a subtrainee. Please call it directly."
	))

	(assign (assoc
		result
			(retrieve_from_entity
				(list "howso" "model" ".trainee_container" "A" ".trainee_container" "copy_b")
				"parentId"
			)
	))
	(print "sanity check parentId of copy_b trainee: ")
	(call assert_same (assoc
		obs result
		exp "A"
	))

	(call exit_if_failures (assoc msg unit_test_name ))
)
