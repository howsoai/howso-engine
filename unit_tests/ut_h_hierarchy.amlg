(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "unit_test.amlg")))
	(call (load "unit_test_howso.amlg") (assoc name "ut_h_hierarchy.amlg"))

	(declare (assoc result (null)))
	(call_entity "howso" "create_trainee" (assoc trainee "model" trainee_id "model0"))

	(call_entity "howso" "execute" (assoc
		trainee "model"
		method "create_trainee"
		payload
			(assoc
				trainee "A"
				trainee_id "A1"
			)
	))

	(call_entity "howso" "execute" (assoc
		trainee "model"
		method "create_trainee"
		payload
			(assoc
				trainee "b"
				trainee_id "b2"
			)
		child_id "A1"
	))

	(call_entity "howso" "execute" (assoc
		trainee "model"
		method  "create_trainee"
		payload
			(assoc
				trainee "c"
				trainee_id "c2"
			)
		child_id "A1"
	))

	(call_entity "howso" "execute" (assoc
		trainee "model"
		method  "create_trainee"
		payload
			(assoc
				trainee "e"
				trainee_id "e3"
			)
		child_id "c2"
	))


	;creating under non-existent child
	(assign (assoc
		result
			(call_entity "howso" "execute" (assoc
				trainee "model"
				method  "create_trainee"
				payload
					(assoc
						trainee "e"
						trainee_id "e3"
					)
				child_id "nonexistent"
			))
	))
	(print "Creating under invalid child: ")
	(call assert_same (assoc
		obs (get result (list "errors" 0 "detail"))
		exp "Specified invalid child trainee."
	))



	;creating a dupe
	(assign (assoc
		result
			(call_entity "howso" "execute" (assoc
				trainee "model"
				method  "create_trainee"
				payload
					(assoc
						trainee "e"
						trainee_id "e3"
					)
				child_id "c2"
			))
	))
	(print "Creating an existing trainee: ")
	(call assert_same (assoc
		obs (get result (list "errors" 0 "detail"))
		exp "Specified trainee is already in the hierarchy."
	))

	(call exit_if_failures (assoc msg "Creating subtrainees."))


	(assign (assoc
		result
			(call_entity "howso" "copy" (assoc
				trainee "model"
				target_trainee "c_copy"
				source_id "invalid"
			))
	))
	(print "Can't copy - bad child: ")
	(call assert_same (assoc
		obs (get result (list "errors" 0 "detail"))
		exp "Invalid trainee id specified."
	))

	(assign (assoc
		result
			(call_entity "howso" "copy" (assoc
				trainee "model"
				target_id "invalid"
				target_trainee "c_copy"
				source_id "c2"
			))
	))
	(print "Can't copy - bad parent: ")
	(call assert_same (assoc
		obs (get result (list "errors" 0 "detail"))
		exp "Invalid trainee id specified."
	))

	(assign (assoc
		result
			(call_entity "howso" "copy" (assoc
				trainee "model"
				target_trainee "model"
			))
	))
	(print "Can't copy - duplicate trainee: ")
	(call assert_same (assoc
		obs (get result (list "errors" 0 "detail"))
		exp "Specified target_trainee already exists."
	))

	(assign (assoc
		result
			(call_entity "howso" "copy" (assoc
				trainee "model"
				target_trainee "A"
				source_id "c2"
			))
	))
	(print "Can't copy - duplicate child: ")
	(call assert_same (assoc
		obs (get result (list "errors" 0 "detail"))
		exp "Specified target_trainee already exists."
	))


	(call_entity "howso" "copy" (assoc
		trainee "model"
		target_trainee "c_copy"
		source_id "c2"
	))

	(call exit_if_failures (assoc msg "Creating subtrainees."))


	(assign (assoc
		result
			(call_entity "howso" "rename" (assoc
				trainee "model"
				child_id "invalid"
				new_name "AA"
			))
	))
	(print "Can't rename - invalid child: ")
	(call assert_same (assoc
		obs (get result (list "errors" 0 "detail"))
		exp "Invalid trainee id specified."
	))

	(assign (assoc
		result
			(call_entity "howso" "rename" (assoc
				trainee "model"
				child_id "c2"
				new_name "b"
			))
	))
	(print "Can't rename - duplicate name: ")
	(call assert_same (assoc
		obs (get result (list "errors" 0 "detail"))
		exp "Trainee with specified new name already exists."
	))

	(call_entity "howso" "rename" (assoc
		trainee "model"
		child_id "A1"
		new_name "AA"
	))

	(call_entity "howso" "rename" (assoc
		trainee "model"
		child_id "c2"
		new_name "big_C"
	))

	(assign (assoc
		result
			(retrieve_from_entity
				(list "howso" "model")
				(list
					"containedTraineeNamePathStringToIdMap"
					"containedTraineeNamePathStringToListMap"
					"containedTraineeIdToNamePathMap"
					"hierarchyMap"
					"childTraineeIsContainedMap"
				)
			)
	))

	(print "Renames and copies: ")
	(call assert_same (assoc
		obs result
		exp
			(list
				(assoc
					AAb "b2"
					AAbig_C "c2"
					AAbig_Ce "e3"
					AAc "c2"
				)
				(assoc
					AAb (list "AA" "b")
					AAbig_C (list "AA" "big_C")
					AAbig_Ce (list "AA" "big_C" "e")
					AAc (list "AA" "c")
					c_copy (list "c_copy")
					c_copye (list "c_copy" "e")
				)
				(assoc
					A1 (list "AA")
					b2 (list "AA" "b")
					c2 (list "AA" "big_C")
					e3 (list "AA" "big_C" "e")
				)
				(assoc
					AA (assoc
							b (assoc)
							big_C (assoc e (assoc))
						)
					c_copy (assoc e (assoc))
				)
				(assoc
					AAb (true)
					AAbig_C (true)
					AAbig_Ce (true)
					AAc (true)
					c_copy (true)
					c_copye (true)
				)
			)

	))

	(call exit_if_failures (assoc msg "Renaming."))



	(call_entity "howso" "train" (assoc
		trainee "model"
		features (list "a" "b" "c")
		input_cases
			(list
				(list 10 20 30)
				(list 11 22 33)
				(list 12 24 36)
				(list 13 26 39)
			)
	))

	(call_entity "howso" "execute" (assoc
		trainee "model"
		child_id "A1"
		method "train"
		payload
			(assoc
				features (list "x" "y")
				input_cases
					(list
						(list 1 1)
						(list 2 1)
						(list 3 3)
						(list 4 4)
						(list 5 5)
						(list 6 6)
					)
			)
	))


	(call_entity "howso" "move_cases" (assoc
		trainee "model"
		source_id "A1"
		target_id "b2"
		num_cases 2
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "get_num_training_cases" (assoc
					trainee "model"
				))
				(list "payload" "count")
			)
	))

	(print "Cases in model: ")
	(call assert_same (assoc
		obs result
		exp 4
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "execute" (assoc
					trainee "model"
					child_id "A1"
					method "get_num_training_cases"
				))
				(list "payload" "count")
			)
	))

	(print "Cases in child A1: ")
	(call assert_same (assoc
		obs result
		exp 4
	))


	(assign (assoc
		result
			(get
				(call_entity "howso" "execute" (assoc
					trainee "model"
					child_id "b2"
					method "get_num_training_cases"
				))
				(list "payload" "count")
			)
	))

	(print "Cases in grandchild b2: ")
	(call assert_same (assoc
		obs result
		exp 2
	))

	(call exit_if_failures (assoc msg "Excute method and move cases."))


	(assign (assoc
		result
			(call_entity "howso" "execute" (assoc
				trainee "model"
				method "save"
				child_name_path (list "c_copy")
				payload
					(assoc
						filename "deleteme"
						filepath "./"
					)
			))
	))
	(print "Save fails - missing trainee id: ")
	(call assert_same  (assoc
		obs (get result (list "errors" 0 "detail"))
		exp "Trainee must have a unique trainee_id specified."
	))

	(call_entity "howso" "execute" (assoc
		trainee "model"
		method "save"
		as_external (true)
		child_name_path (list "c_copy")
		payload
			(assoc
				trainee_id "deleteme"
				filename "deleteme"
				filepath "./"
			)
	))

	(assign (assoc
		result
			(call_entity "howso" "execute" (assoc
				trainee "model"
				method "save"
				as_external (true)
				child_name_path (list "c_copy")
				payload
					(assoc
						trainee_id "deleteme"
						filename "deleteme"
						filepath "./"
					)
			))
	))

	(print "Save fails since it is now outside trainee: ")
	(call assert_same (assoc
		obs (get result (list "errors" 0 "detail"))
		exp "Specified child trainee is not a subtrainee."
	))

	(assign (assoc
		result (call_entity "howso" "get_hierarchy" (assoc trainee "model"))
	))
	(print "Updated is_contained_map has all the c_copy trainees as not contained: ")
	(call assert_same (assoc
		obs (get result "payload")
		exp
			(assoc
				hierarchy_map (assoc
						AA (assoc
								b (assoc)
								big_C (assoc e (assoc))
							)
						c_copy (assoc e (assoc))
					)
				is_contained_map (assoc
						AAb (true)
						AAbig_C (true)
						AAbig_Ce (true)
						AAc (true)
						c_copy (false)
						c_copye (false)
					)
			)
	))


	(call_entity "howso" "execute" (assoc
		trainee "model"
		method "load"
		payload
			(assoc
				trainee "loaded"
				filename "deleteme"
				filepath "./"
			)
		child_id "A1"
	))

	(assign (assoc
		result
			(call_entity "howso" "execute" (assoc
				trainee "model"
				method "load"
				as_external (true)
				payload
					(assoc
						trainee "loaded2"
						filename "deleteme"
						filepath "./"
					)
				child_id "b2"
			))
	))
	(print "Must specify id when loading external: ")
	(call assert_same (assoc
		obs (get result (list "errors" 0 "detail"))
		exp "load_external_trainee_id must be specified when loading as external."
	))


	(call_entity "howso" "execute" (assoc
		trainee "model"
		method "load"
		as_external (true)
		load_external_trainee_id "deleteme"
		payload
			(assoc
				trainee "loaded2"
				filename "deleteme"
				filepath "./"
			)
		child_id "b2"
	))


	(assign (assoc
		result
			(get
				(call_entity "howso" "get_hierarchy" (assoc trainee "model"))
				"payload"
			)
	))

	(print "Hierarchy for model after save and load is correct: ")
	(call assert_same (assoc
		obs result
		exp
			(assoc
				hierarchy_map (assoc
						AA (assoc
								b (assoc loaded2 (assoc))
								big_C (assoc e (assoc))
								loaded (assoc e (assoc))
							)
						c_copy (assoc e (assoc))
					)
				is_contained_map (assoc
						AAb (true)
						AAbig_C (true)
						AAbig_Ce (true)
						AAbloaded2 (false)
						AAc (true)
						AAloaded (true)
						AAloadede (true)
						c_copy (false)
						c_copye (false)
					)
			)
	))

	;cleanup saved test model
	(if (= (system "os") "Windows")
		(system "system" "del deleteme.*")

		;else posix
		(system "system" "rm -rf deleteme*")
	)

	(call exit_if_failures (assoc msg "save and load" ))


	(assign (assoc
		result
			(call_entity "howso" "execute" (assoc
				trainee "model"
				child_id "deleteme"
				method "get_num_training_cases"
			))
	))

	(print "execute fails on an independent trainee: ")
	(call assert_same (assoc
		obs (get result (list "errors" 0 "detail"))
		exp "Specified child trainee is not a subtrainee."
	))

	(assign (assoc
		result
			(retrieve_from_entity
				(list "howso" "model" ".trainee_container" "AA" ".trainee_container" "loaded")
				"parentId"
			)
	))
	(print "sanity check parentId of 'loaded' trainee: ")
	(call assert_same (assoc
		obs result
		exp "A1"
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "execute" (assoc
					trainee "model"
					method "delete"
					child_name_path (list "AA" "b" "loaded2")
				))
				(list "warnings" 0 "detail")
			)
	))

	(print "delete only removes references since grandchild is outside trainee: ")
	(call assert_same (assoc
		obs result
		exp "Hierarchy has been updated but child trainee was not removed because it is stored independently of this trainee."
	))

	(call_entity "howso" "execute" (assoc
		trainee "model"
		method "delete"
		child_name_path (list "AA" "loaded" "e")
	))

	(assign (assoc
		result
			(get
				(call_entity "howso" "get_hierarchy" (assoc trainee "model"))
				"payload"
			)
	))

	(print "Hierarchy for model after deletion: ")
	(call assert_same (assoc
		obs result
		exp
			(assoc
				hierarchy_map (assoc
						AA (assoc
								b (assoc)
								big_C (assoc e (assoc))
								loaded (assoc)
							)
						c_copy (assoc e (assoc))
					)
				is_contained_map (assoc
						AAb (true)
						AAbig_C (true)
						AAbig_Ce (true)
						AAc (true)
						AAloaded (true)
						c_copy (false)
						c_copye (false)
					)
			)
	))

	(call exit_if_failures (assoc msg "delete trainees." ))


	(call exit_if_failures (assoc msg unit_test_name ))
)
