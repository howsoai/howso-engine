;custom code for conversions that need to be done for a specifid core version, assuming the upgrade is from the previous one
;that way if a trainee has to be upgraded several versions, it will execute all the intermediary conversions in order
(lambda (assoc

"0.0.0"
	;all previous trainee labels are accessed via 'import_metadata_map'
	(seq (print "Version 0.0.0: This code can access and do any operations on contained entity 'trainee'.\n") )

"64.0.0"
	(let
		(assoc hp_map (get import_metadata_map "hyperparameterMetadataMap"))

		;rename 'dwe' to 'dt'
		(assign (assoc
			hp_map
				(rewrite
					(lambda
						(if (and (= (assoc) (get_type (current_value))) (contains_index (current_value) "dwe") )
							(let
								(assoc dt_value (get (current_value 1) "dwe"))

								;remove key 'dwe' and add it back as 'dt'
								(set
									(remove (current_value) "dwe")
									"dt"
									dt_value
								)
							)

							(current_value)
						)
					)
					hp_map
				)
		))

		(assign_to_entities (assoc !hyperparameterMetadataMap hp_map ))
	)
"65.0.11"
	(let
		(assoc old_half_gaps (get import_metadata_map "cachedFeatureMinGapMap") )
		(assign_to_entities (assoc !cachedFeatureHalfMinGapMap old_half_gaps))
	)
"66.2.0"
	(let
		(assoc non_string_nominals_map (get import_metadata_map "nonStringNominalFeaturesMap"))
		(assign_to_entities (assoc !numericNominalFeaturesMap non_string_nominals_map))
	)
"67.0.0"
	(let
		(assoc
			default_features (get import_metadata_map "defaultFeatures")
			hp_map (get import_metadata_map "hyperparameterMetadataMap")
			residuals_map (get import_metadata_map "residualsMap")
			prediction_stats_map (get import_metadata_map "featurePredictionStatsMap")
		)

		(declare (assoc
			default_features_key (apply "concat" (weave (sort default_features) "."))
			hp_param_paths (list)
		))

		;do additional HP nesting
		(assign (assoc
			hp_map
				(map
					(lambda (associate default_features_key (current_value 1)) )
					hp_map
				)
		))

		;update param path lists
		(assign (assoc
			hp_map
				(rewrite
					(lambda
						(if (and (= "list" (get_type_string (current_value))) (= "paramPath" (current_index))  )
							(list
								(get (current_value 1) 0)
								default_features_key
								(get (current_value 1) 1)
								(get (current_value 1) 2)
							)

							;else
							(current_value)
						)
					)
					hp_map
				)
			residuals_map
				(rewrite
					(lambda
						(if (and (= "list" (get_type_string (current_value))) (contains_value ".hyperparam_path" (current_index))  )
							(list
								(get (current_value 1) 0)
								default_features_key
								(get (current_value 1) 1)
								(get (current_value 1) 2)
							)

							;else
							(current_value)
						)
					)
					residuals_map
				)
			prediction_stats_map
				(rewrite
					(lambda
						(if (and (= "list" (get_type_string (current_value))) (contains_value ".hyperparam_path" (current_index))  )
							(list
								(get (current_value 1) 0)
								default_features_key
								(get (current_value 1) 1)
								(get (current_value 1) 2)
							)

							;else
							(current_value)
						)
					)
					prediction_stats_map
				)
		))

		(rewrite
			(lambda
				(if (and (= "list" (get_type_string (current_value))) (= "paramPath" (current_index)) )
					(seq
						(accum (assoc hp_param_paths (list (current_value 2)) ))
						(current_value)
					)

					(current_value)
				)
			)
			hp_map
		)

		(assign_to_entities (assoc
			!hyperparameterMetadataMap hp_map
			!hyperparameterParamPaths hp_param_paths
			!residualsMap residuals_map
			!featurePredictionStatsMap prediction_stats_map
			!defaultFeaturesContextKey default_features_key
		))

		;update the metadata map for later migrations
		(accum (assoc
			import_metadata_map
				(assoc
					"defaultFeaturesContextKey" default_features_key
					"hyperparameterMetadataMap" hp_map
					"hyperparameterParamPaths" hp_param_paths
				)
		))
	)

;move null uncertainties from featureDomainAttributes into featureDeviations and add !nullUncertainies to hyperparameters
"71.1.1"
	(let
		(assoc
			param_paths (get import_metadata_map "hyperparameterParamPaths")
			hp_map (get import_metadata_map "hyperparameterMetadataMap")
		)

		(map
			(lambda (let
				(assoc path (current_value 1))
				;if previous HP had domain attributes that held null uncertainties, move them over to deviations and nullUncertainties
				(if (!= (null) (get hp_map (append path "featureDomainAttributes")) )
					(let
						(assoc
							null_uncertainties
								(filter (map
									(lambda
										;old domain attributes are a list, grab the last two values which are the value-null and null-null
										(if (> (size (current_value)) 1)
											(tail (current_value) 2)
										)
									)
									(get hp_map (append path "featureDomainAttributes"))
								))
						)

						(assign (assoc
							hp_map
								(set
									hp_map
									(append path "featureDomainAttributes")
									(map
										(lambda
											(if (= (list) (get_type (current_value)))
												(first (current_value))
												(current_value)
											)
										)
										(get hp_map (append path "featureDomainAttributes"))
									)

									;set null uncertainties to be a tuple leading a with a null for the undefined deviation
									(append path "nullUncertainties")
									(map
										(lambda (append (list (null)) (current_value)))
										null_uncertainties
									)

									(append path "featureDeviations")
									(map
										(lambda
											;if this feature has null uncertainties, make the deviation value a tuple
											(if (contains_index null_uncertainties (current_index))
												(append (list (current_value 1)) (get null_uncertainties (current_index)))
												;else just output the deviation value as-is
												(current_value)
											)
										)
										(get hp_map (append path "featureDeviations"))
									)
								)
						))
					)
				)
			))
			param_paths
		)

		(assign_to_entities (assoc !hyperparameterMetadataMap hp_map ))
	)
;Rename defaultFeatures to trainedFeatures, also defaultFeaturesContextKey to trainedFeaturesContextKey
"74.1.2"
	(let
		(assoc
			default_features (get import_metadata_map "defaultFeatures")
			default_features_key (get import_metadata_map "defaultFeaturesContextKey")
		)
		(assign_to_entities (assoc
			!trainedFeatures default_features
			!trainedFeaturesContextKey default_features_key
		))
	)

"79.0.0"
	(let
		(assoc labels_to_update (call get_export_attributes) )

		(declare (assoc
			updated_model_atributes_map
				(map
					(lambda (let
						(assoc
							old_label_name
								;drop the ! from each label since old labels were not private
								(if (= "!" (first (current_index 1)))
									(tail (current_index 1))
									(current_index 1)
								)
						)
						;if old trainee had this label, use the previous value
						(if (contains_index import_metadata_map old_label_name)
							(get import_metadata_map old_label_name)

							;else keep current value as-is
							(retrieve_from_entity (current_index))
						)
					))
					(zip labels_to_update)
				)
		))

		(assign_to_entities updated_model_atributes_map)
	)

))