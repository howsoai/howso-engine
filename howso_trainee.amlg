(null

	;create a return response object in the format of:
	; {
	;	'status' : 'ok', # string 'ok' or 'error'
	;	'errors' : [ {'detail': 'Some error message'} ], # list of error dicts
	;	'warnings' : [ {'detail': 'Some warning message'} ], # list of warning dicts
	;	'payload' : whatever # json response payload
	; }
	;
	;parameters:
	; errors: optional, list of error strings to output
	; warnings: optional, list of warning strings to output
	; payload: any value or object
	#!Return
	(if errors
		(assoc "status" "error"	"errors" (map (lambda (assoc "detail" (current_value 1))) errors) "warnings" (null)	"payload" payload)

		warnings
		(assoc "status" "ok"	"errors" (null) "warnings" (map (lambda (assoc "detail" (current_value 1))) warnings) "payload" payload)

		(assoc "status" "ok"	"errors" (null)	"warnings" (null) 	"payload" payload)
	)

	;returns the total number of training cases
	#get_num_training_cases
	(call !Return (assoc
		payload (assoc "count" (call !GetNumTrainingCases))
	))


	;creates a new instance of a trainee as specified by the entity label "subtrainee"
	;parameters:
	;	subtrainee: name of contained trainee to create
	#create_trainee
	(seq
		(declare (assoc
			child_trainee_path (first (create_entities (list traineeContainer subtrainee) (null)))
		))

		;create a shollow copy (no contained entities, just the trainee data)
		(if (assign_entity_roots child_trainee_path (retrieve_entity_root ) )
			(seq
				(call_entity child_trainee_path "Initialize")
				(call !Return)
			)

			(call !Return (assoc
				errors (list (concat "Failed to create trainee: " subtrainee))
			))
		)
	)

	;Destroyes the instance of the subtrainee specified by the parameter "subtrainee".
	#delete
	(seq
		(destroy_entities (list traineeContainer subtrainee))
		(call !Return)
	)

	;Attempts to load a trainee with the following optional parameters.
	;If a parameter is not specified, it will look to this entity's own label of the same name.
	;If the saved instance does not exist the existing trainee will remain unmodified and the function will return null.
	;assumes loaded trainee filenames need to be escaped
	;returns the trainee name if successful, null if not
	;
	;parameters:
	; filepath: base path to load from
	; filename: name to load (without extension)
	; trainee: name to refer to this instance by
	; separate_files: flag, default to false. if set to true will load each case from its individual file
	#load
	(seq
		(declare (assoc
			loaded_trainee
				(if (and separate_files (= "amlg" !file_extension))
					(seq
						;attempt to load the entity to a temporary label
						(load_entity (concat filepath filename "." !file_extension) (list traineeContainer trainee) (true))
						(if (contains_entity (list traineeContainer trainee))
							trainee
						)
					)

					;else load one flattened entity trainee and parse it out by 'call'ing its code to create all the contained entities
					(let
						(assoc temptrainee (call (load (concat filepath filename "." !file_extension))) )

						(if (and (!= (null) temptrainee) (contains_entity temptrainee))
							(seq
								;destroy the previously existing trainee
								(destroy_entities (list traineeContainer trainee))

								;move the trainee under the temporary label to the trainee label;
								(move_entities temptrainee (list traineeContainer trainee))

								;return the name of the trainee to indicate a successful load attempt
								trainee
							)
						)
					)
				)
		))

		(if loaded_trainee
			(call !Return (assoc payload (assoc "name" loaded_trainee) ))

			(call !Return (assoc errors (list (concat "Failed to load trainee " filename))  ))
		)
	)

	;creates a copy of a trainee and returns the name of the copied trainee on success
	;parameters:
	; trainee: trainee instance to copy
	; target_trainee: trainee name of copy
	#copy
	(if (not (contains_entity (list traineeContainer target_trainee)))
		(call !Return (assoc
			payload
				(assoc
					"name" (first (clone_entities (list traineeContainer trainee) (list traineeContainer target_trainee) ))
				)
		))

		;else error
		(call !Return (assoc errors (list (concat "Failed to copy: " target_trainee " trainee already exists.")) ))
	)



	;return the list of loaded trainees
	#get_loaded_trainees
	(call !Return (assoc
		payload
			(filter
				(lambda (!= !breeder_manifest (current_value)))
				(contained_entities traineeContainer)
			)
	))

	;set the conviction threshold to (null), used by outside interfaces
	#clear_conviction_thresholds
	(seq
		(assign_to_entities (assoc convictionLowerThreshold (null) convictionUpperThreshold (null)))
		(accum_to_entities (assoc revision 1))
		(call !Return)
	)


	;set the thresholds on the trainee
	; parameters:
	; conviction_lower_threshold : optional lower bond, cases below this won't be trained on
	; conviction_upper_threshold : optional upper bound, cases above this won't be trained on
	#set_conviction_lower_threshold
	(seq
		(assign_to_entities (assoc convictionLowerThreshold conviction_lower_threshold))
		(accum_to_entities (assoc revision 1))
		(call !Return)
	)

	#set_conviction_upper_threshold
	(seq
		(assign_to_entities (assoc convictionUpperThreshold conviction_upper_threshold))
		(accum_to_entities (assoc revision 1))
		(call !Return)
	)


	;set metadata for model
	; parameters:
	; metadata: arbitary metadata to store in a trainee
	#set_metadata
	(seq
		(assign_to_entities (assoc metaData metadata))
		(accum_to_entities (assoc revision 1))
		(call !Return)
	)


	;get metadata for model
	#get_metadata
	(call !Return (assoc payload (retrieve_from_entity "metaData") ))


;returns all the ordered cases from the specified session from the specified trainee
	;parameters:
	; features: list of features to retrieve
	; indicate_imputed: if set to 1 will return the audit data of which features for each row were imputed (auto-filled)
	; session: optional session from which to get cases
	; case_indices: optional, list of pair (list) of session id and index, where index is the original 0-based session_training_index of the
	;		case as it was trained. If specified with session, ignores session.
	; condition: optional a query condition describing the cases to return
	; num_cases: optional, limit on the number of cases to retrieve; If set to zero there will be no limit.
	;		If null, will be set to k if precision is "similar" or no limit if precision is "exact". default is null
	; precision: optional string. default is 'exact', used only with 'condition' parameter, will find exact matches if 'exact' and similar cases if 'similar'.
	#get_cases
	(declare
		(assoc
			features (list)
			indicate_imputed 0
			num_cases (null)
			precision "exact"
		)
		(if indicate_imputed
			(accum (assoc features ".imputed"))
		)

		(call !Return (assoc
			payload
				(call !RetrieveAllCases (assoc
					features features
					case_indices case_indices
					session session
					condition condition
					num_cases num_cases
					precision precision
				))
		))
	)

)