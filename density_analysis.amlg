(seq
    (load_entity
		"./howso.amlg"
		"howso"
		(null)
		(false)
		{escape_resource_name (false) escape_contained_resource_names (false)}
	)
	(set_entity_root_permission "howso" 1)
	(call_entity "howso" "initialize" (assoc
		filepath "./"
		trainee_id "sparsity_estimation"
	))

    (declare (assoc
		radius 0.5
		dims 2
		p 2.0
		num_initial_samples 1000
	))

	(declare (assoc
		initial_data
			(range
				(lambda
					(range (lambda (rand)) 1 dims 1)
				)
				1 num_initial_samples 1
			)
	))

	(declare (assoc
		center (range (lambda 0.5) 1 dims 1)
		features (range (lambda (concat "f" (current_index))) 1 dims 1)
	))

	;Get the size of the local residual sphere and the size of the k sphere
	; ensure that the k sphere can fit k*3 local residual spheres

	(declare (assoc
		train_data
			; (filter
			; 	(lambda
			; 		(>
			; 			radius
			; 			(generalized_distance
			; 				(map (lambda 1.0) features)
			; 				(map (lambda "continuous_numeric") features)
			; 				(null)
			; 				(null)
			; 				p
			; 				(current_value)
			; 				center
			; 			)
			; 		)
			; 	)
			; 	initial_data
			; )
			initial_data
	))

	; (print (size train_data) "\n")
	; (print "" (/ (size train_data) (size initial_data)) "\n")

	(call_entity "howso" "train" (assoc
		features features
		cases initial_data
	))

	(call_entity "howso" "analyze" (assoc
		; use_deviations (true)
	))

	(print
		(call_entity "howso" "react_aggregate" (assoc
			details {intrinsic_dimensionality (true) local_fill (true)}
		))
	)

	; (declare
	; 	(assoc
	; 		d
	; 			(call_entity "howso" "estimate_intrinsic_dimensionality" (assoc
	; 				num_samples 50
	; 			))
	; 	)
	; )


	; (declare
	; 	(assoc
	; 		estimated_sparsities
	; 			(call_entity "howso" "estimate_local_fill" (assoc
	; 				num_samples 50
	; 				d d
	; 			))
	; 	)
	; )
	; (print estimated_sparsities)

	; (declare (assoc
	; 	points
	; 		(map
	; 			(lambda [
	; 				(log (current_value 1))
	; 				(- (log (- 1 (/ (+ (current_index 1) 1) 1000 ) )) )
	; 			])
	; 			(sort
	; 				(lambda (- (current_value) (current_value 1)))
	; 				estimated_sparsities
	; 			)
	; 		)
	; ))

	; (print points)

	; (let
	; 	(assoc
	; 		deltas
	; 			(map
	; 				(lambda (/
	; 					(last (current_value))
	; 					(first (current_value))
	; 				))
	; 				(trunc points)
	; 			)
	; 	)
	; 	(print deltas)
	; 	(print 
	; 		(/ (apply "+" deltas) (size deltas))
	; 	)
	; )
)