;Contains methods for retrieving cases.
(null

	;returns array of ids of all cases that exist in this trained model
	;by finding all the entities that have a reference to replay sessions
	#!AllCases
	(declare
		(assoc
			num (null)
			start_offset 0
			rand_seed (null)
			query_conditions (list)
		)
		(if (!= (null) num)
			(if (!= (null) rand_seed)
				(contained_entities
					(query_exists !internalLabelSession)
					query_conditions
					(query_select num start_offset rand_seed)
				)

				(contained_entities
					(query_exists !internalLabelSession)
					query_conditions
					(query_select num start_offset )
				)
			)


			;else return all
			(contained_entities
				(query_exists !internalLabelSession)
				query_conditions
			)
		)
	)

	;returns list of ids of sampled cases with replacement
	;parameters:
	; num: number of samples to return
	; rand_seed: optional random seed
	; case_weight_feature: optional, if provided will use this feature to do case weighted sampling
	; query_conditions: a set of queries that can limits the available cases for sampling
	#!SampleCases
	(declare
		(assoc
			num (null)
			rand_seed (null)
			case_weight_feature (null)
			query_conditions (list)
		)
		(if (!= (null) num)
			(contained_entities
				(query_exists !internalLabelSession)
				query_conditions
				(query_sample num case_weight_feature
					(if (!= (null) rand_seed) rand_seed (rand)))
			)

			;else return samples with replacement on all cases
			(contained_entities
				(query_exists !internalLabelSession)
				query_conditions
				(query_sample (call !GetNumTrainingCases) case_weight_feature (rand))
			)
		)
	)

	;for each case id given, gets its influential cases and selects the case that optimizes the goal
	;parameters:
	; goal_features_map: the map of goal features and their specified goals (value/max/min)
	; goal_dependent_features: list of features that will not be ignored while optimizing the goal
	; case_ids: the originally sampled case_ids
	; query_conditions: a set of queries that can limits the available cases for selection
	; features: a list of feature to robustly select from when querying for similar cases
	#!SampleCasesForGoals
	(declare
		(assoc
			goal_features_map (assoc)
			goal_dependent_features (list)
			case_ids (list)
			query_conditions (list)
			features (list)
		)

		(declare (assoc
			hyperparam_map
				(call !GetHyperparameters (assoc
					feature ""
					weight_feature (if valid_weight_feature weight_feature)
				))
			goal_features (indices goal_features_map)
			goal_dependent_features_set (zip goal_dependent_features)
		))

		;setting up variables to use goal_feature influence code correctly
		(declare (assoc
			feature_weights (get hyperparam_map "featureWeights")
			dt_parameter (get hyperparam_map "dt")
			all_context_features (append features goal_dependent_features)
		))

		||(map
			(lambda
				(let
					(assoc
						case_id (current_value 1)
						context_map
							(zip
								all_context_features
								(retrieve_from_entity (current_value 1) all_context_features)
							)
						custom_extra_filtering_queries (append query_conditions (query_not_in_entity_list [(current_value 2)]))
					)

					;robustly select a set of features to use as contexts for the goal-optimized sample
					(declare (assoc
						context_features
							(append
								goal_dependent_features
								(filter
									(lambda (> 0.5 (rand)))
									features
								)
							)
					))
					;loop to make sure at least one feature is selected
					(while (not (size context_features))
						(assign (assoc
							context_features
								(append
									goal_dependent_features
									(filter
										(lambda (> 0.5 (rand)))
										features
									)
								)
						))
					)

					(declare (assoc
						context_values (unzip context_map context_features)
					))

					(declare (assoc
						similar_cases_map
							#!GoalFeatureSamplingQuery
							(compute_on_contained_entities
								(query_exists !internalLabelSession)
								custom_extra_filtering_queries
								(query_nearest_generalized_distance
									(get hyperparam_map "k")
									context_features
									context_values
									(get hyperparam_map "p")
									feature_weights
									!queryDistanceTypeMap
									(get hyperparam_map "featureAttributes")
									(get hyperparam_map "featureDeviations")
									(null)
									dt_parameter
									(if valid_weight_feature weight_feature (null))
									;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
									"fixed rand seed"
									(null) ;radius
									!numericalPrecision
								)
							)
					))

					(assign (assoc
						similar_cases_map
							(call !UpdateLocalInfluencesForGoals (assoc
								case_ids (append (indices similar_cases_map) case_id)
								feature_weights feature_weights
								context_features context_features
								context_values context_values
								;a ignore-this-case query was added to custom_extra_filtering queries above
								;so removing it here so that the current case can still be chosen by the goal optimization
								custom_extra_filtering_queries (trunc custom_extra_filtering_queries)
								dt_parameter dt_parameter
								query_label "!GoalFeatureSamplingQuery"
							))
					))

					(first (index_max similar_cases_map))
				)
			)
			case_ids
		)
	)

	;returns the total number of training cases for trainee
	;{read_only (true) idempotent (true)}
	#get_num_training_cases
	(declare
		;returns {
		; 	type "assoc"
		;	additional_indices (false)
		; 	indices {
		; 		"count" {
		; 			type "number"
		; 			description "The number of trained cases."
		;			required (true)
		; 		}
		; 	}
		; }
		(assoc)
		(call !ValidateParameters)
		(call !Return (assoc payload (assoc "count" (call !GetNumTrainingCases) ) ))
	)

	;returns the total number of training cases
	#!GetNumTrainingCases
	(size (contained_entities (query_exists !internalLabelSession) ))

	;parameters: session and session_index
	#!GetCaseGivenReplaySession
	(get (retrieve_from_entity session ".replay_steps") session_index)

	;returns assoc with features and cases - a list of lists of all feature values. Retrieves all feature values for cases in
	;all sessions. If a session is specified, only that session's cases will be output. Session and case order is not guaranteed,
	;however, the features ".session" and ".session_training_index" may be requested to get the session id and session train order
	;for each case respectively.
	;{read_only (true) idempotent (true)}
	#get_cases
	(declare
		;returns {
		; 	type "assoc"
		;	additional_indices (false)
		; 	indices
		; 		{
		; 			features {type "list" required (true) values "string" description "The list of features in the order of values of the sublists in 'cases'."}
		; 			cases {
		; 				type "list"
		;				required (true)
		; 				values {type "list" values "any"}
		;				description "A list of lists of case values in the order specified by 'features'."
		; 			}
		; 		}
		; }
		(assoc
			;{type "list" values "string"}
			;list of features to retrieve. Case values will be output given this feature order.
			features (list)
			;{type "number"}
			;set flag to skip decoding feature values into their nominal values for output.
			skip_decoding 0
			;{type "string"}
			;session from which to get cases (even if by condition).
			session (null)
			;{ref "CaseIndices"}
			;list of pair (list) of session id and index, where index is the original 0-based session_training_index of the
			;	case as it was trained. If specified, ignores session and condition/precision parameters.
			case_indices (null)
			;{ref "Condition"}
			;a query condition describing the cases to return.
			condition (null)
			;{type "number" min 0}
			;limit on the number of cases to retrieve; If set to zero there will be no limit.
			;	If null, will be set to k if precision is "similar" or no limit if precision is "exact". default is null
			num_cases (null)
			;{ref "Precision"}
			;string, default is 'exact', used only with 'condition' parameter, will find exact matches if 'exact' and similar cases if 'similar'.
			precision "exact"
			;{ref "SortByCriteria"}
			;list of maps defining sorting criteria in order of precedence. Each map should specify the feature name under the "feature" key and
			;"asc"/"desc" under the "order" key.
			sort_by (null)
			;{type "boolean"}
			;if true, will return the audit data of which features for each row were imputed (auto-filled)
			indicate_imputed (false)
			;{type "boolean"}
			;flag, when true only returns an assoc of case ids and no features
			output_ids (false)
		)
		(call !ValidateParameters)
		(call !ValidateCondition)

		(if indicate_imputed
			(accum (assoc features !internalLabelImputed))
		)

		(if (and (= 0 (size features)) (> (size !trainedFeatures) 0))
			(assign (assoc features !trainedFeatures))
		)

		;if the features list is only 'imputed', pre-pend default fetaures to it if that list is defined
		(if (and (= (size features) 1) (= !internalLabelImputed (first features)) (> (size !trainedFeatures) 0))
			(assign (assoc features (append !trainedFeatures features)))
		)

		;map of accumulated session -> case index id map
		(declare (assoc session_indices_map (assoc)))

		(declare (assoc
			cases
				(if (>= (size case_indices) 1)
					(map
						(lambda (let
							(assoc
								session_id (first (current_value 1))
								case_index (last (current_value 1))
							)

							;if session_indices_map doesn't have this session, add it
							(if (not (contains_index session_indices_map session_id))
								(accum (assoc session_indices_map (associate session_id (retrieve_from_entity session_id ".indices_map")) ))
							)
							;get case id from the session's .indices_map
							(get session_indices_map (list session_id case_index))
						))
						case_indices
					)

					(or (size condition) session (> num_cases 0))
					(seq
						(declare (assoc condition_session_value session))

						;if both session and condition supplied, add the session as an additional condition and unset the `condition_session`
						(if (and (size condition) session)
							(assign (assoc
								condition_session_value (null)
								condition (append condition (assoc ".session" session))
							))
						)

						;specify no limit for how many to match as long as they match the condition
						(call !GetCasesByCondition (assoc
							condition condition
							condition_session condition_session_value
							precision precision
							num_cases
								;if there is a more complex sorting critera, all condition-matching cases must be selected then sorted below.
								(if (> (size sort_by) 1)
									(null)
									num_cases
								)
							sort_by sort_by
						))
					)

					;else get all the cases from all the sessions
					(apply "append"
						(map
							(lambda (retrieve_from_entity (current_value) ".replay_steps"))
							(call !GetSessionIds)
						)
					)
				)
			has_rounded_features !hasRoundedFeatures
			has_datetime_features !hasDateTimeFeatures
		))

		(if (size sort_by)
			(let
				(assoc
					sorting_features (map (lambda (get (current_value) "feature")) sort_by)
				)

				(assign (assoc
					cases
						(sort
							(lambda
								(let
									(assoc
										case_1_values (retrieve_from_entity (current_value 1) sorting_features)
										case_2_values (retrieve_from_entity (current_value 2) sorting_features)
									)

									(apply "or"
										(map
											(lambda
												(if (= "asc" (get (current_value) "order"))
													(if (~ 0 (get case_1_values (current_index)))
														(-
															(get case_1_values (current_index))
															(get case_2_values (current_index))
														)

														(>
															(get case_1_values (current_index))
															(get case_2_values (current_index))
														)
													)

													;otherwise desc
													(if (~ 0 (get case_1_values (current_index)))
														(-
															(get case_2_values (current_index))
															(get case_1_values (current_index))
														)

														(>
															(get case_2_values (current_index))
															(get case_1_values (current_index))
														)
													)
												)
											)
											sort_by
										)
									)
								)
							)
							cases
						)
				))

				(if num_cases
					(assign (assoc
						cases (trunc cases num_cases)
					))
				)
			)
		)

		(if output_ids
			(conclude (call !Return (assoc payload (assoc cases cases))))
		)

		(declare (assoc
			case_values_list
				(weave
					(lambda (let
						(assoc case_feature_values (retrieve_from_entity (first (current_value 1)) features))

						(if (= (size case_feature_values ) (size features))
							(list case_feature_values)
							;else don't output anything, filtering out any values that don't match features
							(list)
						)
					))
					cases
					;use weave as a map-filter by specifying null as the second list
					(null)
				)
		))

		;output a map with features and cases
		(call !Return (assoc
			payload
				(assoc
					features features
					cases
						(if (and !hasEncodedFeatures (not skip_decoding))
							;decode nominal features if necessary
							(map
								(lambda
									(call !ConvertToOutput (assoc
										features features
										feature_values (current_value 1)
										has_rounded_features has_rounded_features
										has_datetime_features has_datetime_features
									))
								)
								case_values_list
							)

							;else round if needed
							has_rounded_features
							(map
								(lambda (call !RoundContinuousFeatures (assoc features features feature_values (current_value 1) )))
								case_values_list
							)

							;else just return the values
							case_values_list
						)
				)
		))
	)


	;return the case id for a case given its session and original session training index
	;
	;parameters:
	; session: session id for the case
	; session_training_index: the index of the case in the original order that it was trained for the specified session
	#!GetCaseId
	(first
		;return the one entity that was trained in this session at this session_training_index
		(contained_entities
			(query_equals !internalLabelSession session)
			(query_equals !internalLabelSessionTrainingIndex session_training_index)
		)
	)

	;return the list of case ids given a list of session and session training index tuples
	;
	;parameters:
	; case_indices: a list of session and session training index tuples
	#!GetCaseIds
	(let
		(assoc
			;getting the list of unique session IDs, to then get the .indices_map for each session
			; (zip on a list gives an assoc with only the unique values as keys)
			unique_session_ids (indices (zip (map (lambda (first (current_value)) ) case_indices) ))
		)

		(declare (assoc
			session_indices_map
				(map (lambda (retrieve_from_entity (current_index) ".indices_map")) (zip unique_session_ids))
		))

		(map
			(lambda (let
				(assoc
					session (first (current_value 1))
					case_index (last (current_value 1))
				)

				(get session_indices_map (list session case_index))
			))
			case_indices
		)
	)


	;return all cases that match the specified condition
	;parameters:
	; condition_session: optional, if specified ignores 'condition' and 'condition_filter_query' and returns cases for the specified session id
	; condition_filter_query: optional, list of query conditions. If specified ignores 'condition' and returns cases for the specified fitery query
	; condition: optional assoc of feature->value(s). Condition for the returned cases. If 'condition_filter_query' is provided, then this parameter is ignored.
	;	no value or (null) = select cases where that feature is (null)/missing
	;	- for continuous or numeric ordinal features:
	;	one value = must equal exactly the value or be close to it for fuzzy match
	;	two values = inclusive between, supports (null) on either side for less than/greater than conditions
	;	[(null) (null)] = select all non-null cases
	;	- for nominal or string ordinal features:
	;	n values = must match any of these values exactly
	; 	assoc of: { 'exclude' : value / list of values } = must not match any of these values exactly
	; precision: flag, default is "exact". Whether to query for 'exact' matches when using the 'condition' parameter; if set to 'similar' will query for similar values intead of 'exact'
	;	If 'condition_filter_query' is provided, then this parameter is ignored.
	; num_cases: optional, limit on the number of cases to get when using the 'condition' parameter. Works with or without 'condition_filter_query'. default is null.
	;	If 'condition_filter_query' is specified:
	;		If null there will be no limit.
	;	If 'condition_filter_query' is not specified:
	;		If null, will be set to k if precision is "similar" or no limit if precision is "exact".
	; sort_by: optional, list of criteria to sort the cases by. Only used here if singular.
	#!GetCasesByCondition
	(declare
		(assoc
			condition (assoc)
			condition_filter_query (list)
			condition_session (null)
			precision "exact"
			num_cases (null)
			sort_by (null)
		)

		(if (!= (null) condition_session)
			;get all the case ids in the order they were stored for the specified session
			(retrieve_from_entity condition_session ".replay_steps")

			(seq
				;if 'condition_filter_query' is not provided, get the 'condition_filter_query'
				(if (= (size condition_filter_query) 0)
					(assign (assoc
						condition_filter_query
							(call !GetQueryByCondition (assoc
								condition condition
								condition_session condition_session
								precision precision
								num_cases num_cases
								sort_by_criteria (if (= 1 (size sort_by)) (first sort_by))
							))
					))
				)

				;retrieve cases with the 'condition_filter_query'
				(if num_cases
					(trunc (contained_entities condition_filter_query) num_cases)
					(contained_entities condition_filter_query)
				)
			)
		)
	)


	;return the query conditions for cases that match the specified condition
	;parameters:
	; condition_session:  if specified ignores condition and returns cases for the specified session id
	; condition: assoc of feature->value(s)
	;	no value or (null) = select cases where that feature is (null)/missing
	;	- for continuous or numeric ordinal features:
	;	one value = must equal exactly the value or be close to it for fuzzy match
	;	two values = inclusive between, supports (null) on either side for less than/greater than conditions
	;	[(null) (null)] = select all non-null cases
	;	- for nominal or string ordinal features:
	;	n values = must match any of these values exactly
	; precision: flag, default is "exact". Whether to query for 'exact' matches; if set to 'similar' will query for similar values intead of 'exact'
	; num_cases: optional, default is null. The number of "similar" cases to get if 'precision' is "similar" or no limit if precision is "exact".
	; sort_by_criteria: optional. The assoc defining how to sort cases, only used if num_cases is specified.
	#!GetQueryByCondition
	(declare
		(assoc
			condition (assoc)
			condition_session (null)
			precision "exact"
			num_cases (null)
			sort_by_criteria (null)
		)

		;set num_cases appropriately if null
		(if (= (null) num_cases)
			(if (= precision "similar")
				(assign (assoc
					num_cases
						(get
							(call !GetHyperparameters (assoc
								feature (null)
								weight_feature ".none"
							))
							"k"
						)
				))

				;precision = 'exact'
				(assign (assoc num_cases 0))
			)
		)

		(if (size !encodingNeededFeaturesSet)
			(assign (assoc
				condition
					#!EncodeConditionMap
					(map
						(lambda
							;if the features in the condition need encoding (e.g., booleans, string ordinals), look up the encoded value and
							;overwrite it in the condition statement since querying is done on numeric (encoded) values
							(if (and (contains_index !encodingNeededFeaturesSet (current_index)) (!= (null) (current_value)))
								;leave string nominals as-is
								(if (contains_index !stringNominalFeaturesSet (current_index))
									(current_value)

									(let
										(assoc
											feature (current_index 1)
											cond_value (current_value 1)
										)

										;if a list of values is passed in for the feature, convert each one at a time
										(if (~ (list) cond_value)
											(map
												(lambda
													(first
														(call !ConvertFromInput (assoc
															feature_values [(current_value 2)]
															features [feature]
														))
													)
												)
												cond_value
											)

											(first
												(call !ConvertFromInput (assoc
													feature_values [cond_value]
													features [feature]
												))
											)
										)
									)
								)

								;else return the value without encoding
								(current_value)
							)
						)
						condition
					)
			))
		)

		(if (= "exact" precision)
			;limit the list to the number of specified cases
				;iterate over each condition and create a conjunctive filter to return only the matching cases
			(append
				(query_exists !internalLabelSession)
				(map
					(lambda (let
						(assoc
							feature (current_value 1)
							cond_value (get condition (current_value 1))
						)
						(if (= cond_value (null))
							;select nulls
							(query_equals feature (null))

							;else then feature value must equal
							(contains_value (list "number" "string") (get_type_string cond_value))
							(query_equals feature cond_value)

							;else this is a list (or assoc for nominals) of values
							(if (or (contains_index !nominalsMap feature) (contains_index !ordinalStringToOrdinalMap feature))
								;an assoc with the key 'exclude' blacklists the specified value(s)
								(if (= "assoc" (get_type_string cond_value))
									(if (= "list" (get_type_string (get cond_value "exclude")))
										(query_not_among feature (get cond_value "exclude"))

										;else exclude the single value
										(query_not_equals feature (get cond_value "exclude"))
									)

									;else cond_value is a list, use query_among the specified nominal values
									(query_among feature cond_value)
								)

								;else continuous, inclusive query between the two provided values
								(if (= [(null) (null)] cond_value)
									(query_not_equals feature (null))

									(= (null) (first cond_value))
									(query_less_or_equal_to feature (last cond_value))

									(= (null) (last cond_value))
									(query_greater_or_equal_to feature (first cond_value))

									(query_between feature (first cond_value) (last cond_value))
								)
							)
						)
					))
					(indices condition)
				)
				(if (and sort_by_criteria num_cases)
					(if (= "asc" (get sort_by_criteria "order"))
						(query_min (get sort_by_criteria "feature") num_cases (true))

						(= "desc" (get sort_by_criteria "order"))
						(query_max (get sort_by_criteria "feature") num_cases (true))
					)
					[]
				)
			)

			;else do a fuzzy query
			(let
				(assoc
					;list of features where the condition is an 'equals'
					equals_features (list)
					;list of features where the condition is a range or null
					other_features (list)
					hyperparam_map
						(call !GetHyperparameters (assoc
							feature (null)
							weight_feature ".none"
						))
				)
				;iterate over condition and populate the equals and other lists
				(map
					(lambda (if
						;if the condition for this feature is an equals, add it to the equals_features list
						(contains_value (list "string" "number") (get_type_string (get condition (current_value))))
						(accum (assoc equals_features (current_value 1)))
						;else add it to the other list
						(accum (assoc other_features (current_value 1)))
					))
					(indices condition)
				)

				;pull corresponding feature values and flags for the equals features to be used in the generalized_distance query below
				(declare (assoc equals_features_values (unzip condition equals_features) ))

				;build the fuzzy query condition, appending the generalized norm query to the other conditions
				(append
					(query_exists !internalLabelSession)
					(map
						(lambda (let
							(assoc
								feature (current_value 1)
								cond_value (get condition (current_value 1))
							)
							(if (= cond_value (null))
								;select nulls
								(query_equals feature (null))

								;else then feature value must equal
								(contains_value (list "number" "string") (get_type_string cond_value))
								(query_equals feature cond_value)

								;else this is a list of values, for nominals use query_among, for continuous use query_between
								(if (or (contains_index !nominalsMap feature) (contains_index !ordinalStringToOrdinalMap feature))
									(query_among feature cond_value)
									;else continuous, inclusive query between the two provided values
									(if (= [(null) (null)] cond_value)
										(query_not_equals feature (null))

										(= (null) (first cond_value))
										(query_less_or_equal_to feature (last cond_value))

										(= (null) (last cond_value))
										(query_greater_or_equal_to feature (first cond_value))

										(query_between feature (first cond_value) (last cond_value))
									)
								)
							)
						))
						other_features
					)
					(if (> num_cases 0)
						(query_nearest_generalized_distance
							num_cases
							equals_features
							equals_features_values
							(get hyperparam_map "p")
							(get hyperparam_map "featureWeights")
							!queryDistanceTypeMap
							(get hyperparam_map "featureDomainAttributes")
							(get hyperparam_map "featureDeviations")
							(null)
							(get hyperparam_map "dt")
							(null) ;weight
							;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
							"fixed rand seed"
							(null) ;radius
							;the distance values are not needed, so this could in theory be
							; (if (= "precise" !numericalPrecision) "precise" "fast")), however, that incurs overhead as well
							;left as is to be simple, but could be modified for performance if large numbers of cases are being retrieved this way
							!numericalPrecision
						)

						(list)
					)
					(if (and sort_by_criteria num_cases)
						(if (= "asc" (get sort_by_criteria "order"))
							(query_min (get sort_by_criteria "feature") num_cases (true))

							(= "desc" (get sort_by_criteria "order"))
							(query_max (get sort_by_criteria "feature") num_cases (true))
						)
						[]
					)
				)
			)
		)
	)


	;retrieve the top or bottom number of cases for a specified feature, sorted top to bottom for top, and bottom to top for bottom
	;{read_only (true) idempotent (true)}
	#get_extreme_cases
	(declare
		;returns {
		; 	type "assoc"
		;	additional_indices (false)
		; 	indices
		; 		{
		; 			features {type "list" required (true) values "string" description "The list of features in the order of values of the sublists in 'cases'."}
		; 			cases {
		; 				type "list"
		; 				values {type "list" values "any"}
		;				required (true)
		;				description "A list of lists of case values in the order specified by 'features'."
		; 			}
		; 		}
		; }
		(assoc
			;{type "list" values "string" required (true)}
			;the features for which values should be returned
			features (null)
			;{type "string" required (true)}
			;the feature for which to sort the cases by
			sort_feature (null)
			;{type "number" required (true)}
			;number of cases to return, positive value will return the top (largest value), negative will return smallest
			num (null)
		)
		(call !ValidateParameters)

		(if (= (null) features)
			(assign (assoc features !trainedFeatures))
		)

		(declare (assoc
			case_ids
				(if (!= (null) sort_feature)
					(if (> num 0)
						(contained_entities
							(query_exists !internalLabelSession)
							(query_max sort_feature num)
						)

						(< num 0)
						(contained_entities
							(query_exists !internalLabelSession)
							(query_min sort_feature (- num))
						)

						(null)
					)
				)
		))

		;store the case values into a list
		(declare (assoc
			case_values_list
				(map
					(lambda (retrieve_from_entity (current_value) features) )
					case_ids
				)
		))

		;determine the index of the feature to be sorted on from the list of all features so that we can sort by it
		(declare (assoc
			feature_index
				(first (filter (lambda (= sort_feature (get features (current_value)))) (indices features)))

			;define the sort by function, sorts high to low when getting the max, and low to high when getting the min
			sort_by_feature_value
				(if (> num 0)
					(lambda (> (get (current_value 1) feature_index) (get (current_value) feature_index)))

					(lambda (< (get (current_value 1) feature_index) (get (current_value) feature_index)))
				)
			has_rounded_features !hasRoundedFeatures
			has_datetime_features !hasDateTimeFeatures
		))

		;sort the list of case values
		(assign (assoc case_values_list (sort sort_by_feature_value case_values_list) ))

		(call !Return (assoc
			payload
				(associate
					"features" features
					"cases"
						(if (and !hasEncodedFeatures (not skip_decoding))
							;decode nominal features if necessary
							(map
								(lambda
									(call !ConvertToOutput (assoc
										features features
										feature_values (current_value 1)
										has_rounded_features has_rounded_features
										has_datetime_features has_datetime_features
									))
								)
								case_values_list
							)

							;else round if needed
							has_rounded_features
							(map
								(lambda (call !RoundContinuousFeatures (assoc features features feature_values (current_value 1) )))
								case_values_list
							)

							;else just return the values
							case_values_list
						)
				)
		))
	)

	;Method to return an assoc with features that should be skipped due to not having enough non-null values
	;and a list of cases with non-null values for each feature when there are features that have only a few non-null values
	;parameters:
	; features: list of all features to check
	#!SelectNonNullCases
	(let
		(assoc
			;iterate over features output an assoc for each feature:
			;if a feature has nulls, output at least 2 case ids with non-null values
			;if a feature has no nulls, output null
			;if a feature doesn't have enough non-null values, output an empty list
			non_null_cases_features_map
				(map
					(lambda (let
						(assoc feature (current_index 1))
						(declare (assoc
							num_nulls (size (contained_entities (query_equals feature (null)) ))
						))

						;there are only one or zero non-null values, skip computing for this feature
						(if (and num_nulls (<= (- num_cases num_nulls) 1))
							(list)

							;else there is more than one non-null value, select at least 2 non-null cases
							num_nulls
							(let
								(assoc
									;assoc of case id -> assoc feature -> value
									not_null_cases_map
										(compute_on_contained_entities
											(query_not_equals feature (null))
											;randomly select 2 different cases that don't have nulls
											(query_select 2 (null) (rand))
											;output an assoc of feature -> value for every case
											(query_exists feature)
										)
								)

								;continuous features must have at least two different values to compute r^2
								(if (not (contains_index !nominalsMap feature))
									(let
										(assoc
											unique_values (values not_null_cases_map (true))
										)

										(if (= 1 (size unique_values))
											(let
												(assoc
													;select a non-null case with a different value
													different_case
														(first
															(contained_entities
																(query_not_equals feature (null))
																(query_not_equals feature (get unique_values (list 0 feature)) )
																(query_sample 1)
															)
														)
												)

												;if there is a case with a different value, append it to the output
												;else output empty list to skip computing values for this feature
												(if different_case
													(append (indices not_null_cases_map) different_case)
													(list)
												)
											)

											;else more than one unique value, output the selected case ids
											(indices not_null_cases_map)
										)
									)

									;else nominal feature, output the selected case ids
									(indices not_null_cases_map)
								)
							)

							;else there are no nulls, output a null
						)
					))
					(zip features)
				)
		)

		(assoc
			"skip_features_map" (filter (lambda (= (list) (current_value))) non_null_cases_features_map)
			"non_null_cases" (values (apply "append" (filter (values non_null_cases_features_map))) (true))
		)
	)

)
