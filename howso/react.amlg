;Contains methods for reacting.
(null

	;Run reacts in a batch, output a an assoc of list of outputs from each individual react.
	;{long_running (true) statistically_idempotent (true) read_only (true)}
	#react
	(declare
		;returns {ref "ReactResponse"}
		(assoc
			;{type "list" values "string"}
			;list of context features. For generative react, features used to condition the generated case
			context_features (list)
			;{type "list" values {type "list"}}
			;2d-list of context values. For generative react, values used to condition the generated case
			;if specified must be either length of 1 or num_reacts. One list is used per individual reaction
			context_values (null)
			;{type "list" values "string"}
			;full list of features to output values for the case
			action_features (list)
			;{type "list" values {type "list"}}
			;values of action features. If specified will bypass react and only do the explanation if details is set.
			;if specified must be either length of 1 or num_reacts. One list us used per individual reaction
			action_values (null)
			;{type "list" values "string"}
			;list of context features whose values should be computed from the provided contexts in the specified order.
			;	Must be different than context_features.
			derived_context_features (list)
			;{type "list" values "string"}
			;list of action features whose values should be computed from the resulting action prior to output, in the specified
			;	order. Must be a subset of action_features.
			;	Note: both of these derived feature lists rely on the features' "derived_feature_code" attribute to compute the values.
			;	If 'derived_feature_code' attribute is undefined or references non-0 feature indices, the derived value will be null.
			derived_action_features (list)
			;{type "list" values "string"}
			;list of feature names that will be made available during the execution of post_process feature attributes
			post_process_features (list)
			;{type "list" values {type "list"}}
			;2d-list of values corresponding to post_process_features that will be made available during the execution of post_process feature attributes.
			;if specified must be either length of 1 or num_reacts. One list is used per individual reaction.
			post_process_values (null)
			;{type "list" values "string"}
			;list of additional features to return with audit data
			extra_features (list)
			;{ref "UseCaseWeights"}
			;flag, if set to true will scale influence weights by each case's weight_feature weight.
			;	If a weight is missing, uses 1 as the weight. If unspecified, case weights will be used if the trainee has them.
			use_case_weights (null)
			;{type "string"}
			;name of feature whose values to use as case weights
			weight_feature ".case_weight"
			;{type "boolean"}
			;flag, if set to true will allow return of null values if there are nulls in the local model for the action features. Applicable
			;	only to discriminative reacts.
			allow_nulls (false)
			;{ref "CaseIndices"}
			;pair (list) of session id and index, where index is the original 0-based session_training_index of the case as it was
			;	trained into the session. If this case does not exist, discriminative react outputs null, generative react ignores it.
			; If specified must be either length of 1 or num_reacts.
			case_indices (null)
			;{type "list"}
			;see #react for description.  if specified must be length of num_reacts.
			rand_seed (null)
			;{ref "DesiredConviction"}
			;If null, will do a discriminative react. If specified, will do a generative react
			;	For Generative React, value of desired avg conviction of generated cases, in the range of (0,infinity] with 1 as standard
			;	larger values will increase the variance (or creativity) of the generated case from the existing model
			;	smaller values will decrease the variance (or creativity) of the generated case from the existing model
			desired_conviction (null)
			;{ref "GenerateNewCases"}
			;enum, acceptable values are:
			;	null or 'no' : output any generated case
			;	'always' : only output original cases, outputs null for all feature values if unable to generate a new case
			;	'attempt' : output any generated case only if generation fails all initial attempts to output original cases
			generate_new_cases "no"
			;{ref "ReactDetails"}
			;an assoc of flags for which type of audit data to return, and corresponding values to return (if applicable) in the format of:
			;	(assoc
			;		"influential_cases" true or false. If true outputs the most influential cases and their influence weights
			;						based on the surprisal of each case relative to the context being predicted among the
			;						cases. Uses only the context features of the reacted case.
			;
			;		"influential_cases_familiarity_convictions" true or false. If true outputs familiarity conviction of
			;						addition for each of the influential cases.
			;
			;		 "influential_cases_raw_weights" true or false. If true outputs the surprisal for each of the influential cases.
			;						Not applicable to generative reacts.
			;
			;		 "derivation_parameters" true or false. If true outputs the parameters used during the react. These parameters
			;						include k, p, distance_transform, feature_weights, feature_deviations.
			;
			;		 "hypothetical_values"  assoc context feature -> values. If specified, shows how a prediction could change
			;						in a what-if scenario where the influential cases' context feature values are replaced with
			;						the specified values.  Iterates over all influential cases, predicting the action features
			;						for each one using the updated hypothetical values. Outputs the predicted arithmetic
			;						average over the influential cases for each action feature.
			;
			;		 "most_similar_cases" true or false. If true outputs an automatically determined (when
			;						'num_most_similar_cases' is not specified) relevant number of similar cases, which will
			;						first include the influential cases. Uses only the context features of the reacted case.
			;
			;		 "num_most_similar_cases" integer. Outputs this manually specified number of most similar cases, which will
			;						first include the influential cases.
			;
			;		 "num_most_similar_case_indices" integer. Outputs the specified number of most similar case indices when
			;						'distance_ratio' is also set to true.
			;
			;		 "boundary_cases" true or false. If true outputs an automatically determined (when 'num_boundary_cases' is
			;						not specified) relevant number of boundary cases. Uses both context and action features
			;						of the reacted case to determine the counterfactual boundary based on action features,
			;						which maximize the dissimilarity of action features while maximizing the similarity of
			;						context features. If action features aren't specified, uses familiarity conviction to
			;						determine the boundary instead.
			;
			; 		 "boundary_value_context_features" list of strings. When specified, outputs a map of each specified feature to
			;		 				possible boundary values under "boundary_values". If 'boundary_value_action_outcome' is
			;		 				unspecified, then the returned values are values where the ratio of change in action to total
			;		 				change is maximized. If 'boundary_value_action_outcome' is specified, then the boundary values
			;		 				represent the closest found values for each context feature that shift the action to fulfill the condition.
			;
			;		"boundary_value_action_outcome" assoc of action_feature -> condition. When specified, outputs a map of each specified feature
			;						to possible boundary values under "boundary_values". If 'boundary_value_action_outcome' is unspecified, then
			;						the returned values are values where the ratio of change in action to total change is maximized. If
			;						'boundary_value_action_outcome' is specified, then the boundary values represent the closest found values for
			;						each context feature that shift the action to fulfill the condition.
			;
			;		 "num_boundary_cases" integer. Outputs this manually specified number of boundary cases.
			;
			;		 'boundary_cases_familiarity_convictions" true or false. If true outputs familiarity conviction of addition for
			;						each of the boundary cases when 'boundary_cases' is also set to true.
			;
			;		 "distance_ratio" true or false. If true outputs the ratio of distance (relative surprisal) between this
			;						reacted case and its nearest case to the minimum distance (relative surprisal) in between
			;						the closest two cases in the local area. All distances are computed using only the
			;						specified context features.
			;
			;		 "distance_contribution" true of false. If true outputs the distance contribution (expected total surprisal
			;						contribution) for the reacted case. Uses both context and action feature values.
			;
			;		 "similarity_conviction" true or false. If true outputs similarity conviction for the reacted case.
			;						Uses both context and action feature values as the case values for all computations. This is
			;						defined as expected (weighted-local) distance contribution / reacted case distance contribution.
			;
			;		 "outlying_feature_values" true or false. If true outputs the reacted case's context feature values that are
			;						outside the min or max of the corresponding feature values of all the cases in the local
			;						model area. Uses only the context features of the reacted case to determine that area.
			;
			;		 "categorical_action_probabilities" true or false. If true outputs probabilities for each class for the action
			;						features. Applicable only to categorical action features. single_react_series calls additionally
			;						output "aggregated_categorical_action_probabilities" for each series.
			;
			;		 "observational_errors" true or false. If true outputs observational errors for all features as defined
			;						in feature attributes.
			;
			;		 "feature_residuals_robust" true or false. If true outputs feature residuals for all (context and action) features
			;						locally around the prediction. Uses only the context features of the reacted case to
			;						determine that area. Uses robust calculations, which uses uniform sampling from
			;						the power set of features as the contexts for predictions.
			;
			;		 "feature_residuals_full" true or false. If true outputs feature residuals for all (context and action) features
			;						locally around the prediction. Uses only the context features of the reacted case to
			;						determine that area. Uses full calculations, which uses leave-one-out context features for computations.
			;
			;		 "prediction_stats" true or false. If true outputs full feature prediction stats for all (context and action)
			;						features locally around the prediction. The stats eligible to be returned are ("adjusted_smape", "smape",
			;						"r2", "rmse", "spearman_coeff", "precision", "recall", "accuracy", "mcc", "confusion_matrix",
			;						"missing_value_accuracy"). Confusion matrices may also be returned by setting 'confusion_matrices' to true.
			;						Uses only the context features of the reacted case to determine that area. Uses full calculations, which
			;						uses leave-one-out context features for computations.
			;
			;		 "selected_prediction_stats" list of strings. Types of stats to output. When unspecified, returns all except the confusion_matrix.
			;                       If "all", then returns all including the confusion_matrix. Valid values are: "mae" "confusion_matrix" "r2" "rmse"
			;						"adjusted_smape" "smape" "spearman_coeff" "precision" "recall" "accuracy" "mcc" "all" "missing_value_accuracy"
			;
			;		 "feature_mda_robust" true or false. If true outputs each context feature's robust mean decrease in accuracy of predicting
			;						the action feature given the context. Uses only the context features of the reacted
			;						case to determine that area.  Uses robust calculations, which uses uniform sampling from
			;						the power set of features as the contexts for predictions.
			;
			;		 "feature_mda_full" true or false. If true outputs each context feature's full mean decrease in accuracy of predicting
			;						the action feature given the context. Uses only the context features of the reacted
			;						case to determine that area. Uses full calculations, which uses leave-one-out context features for computations.
			;
			;		 "feature_mda_ex_post_robust" true or false. If true outputs each context feature's mean decrease in accuracy of
			;						predicting the action feature as a detail given that the specified prediction was
			;						already made as specified by the action value. Uses both context and action features of
			;						the reacted case to determine that area. Uses robust calculations, which uses uniform sampling from
			;						the power set of features as the contexts for predictions.
			;
			;		 "feature_mda_ex_post_full" true or false. If true outputs each context feature's mean decrease in accuracy of
			;						predicting the action feature as a detail given that the specified prediction was
			;						already made as specified by the action value. Uses both context and action features of
			;						the reacted case to determine that area. Uses full calculations, which uses leave-one-out for features for computations.
			;
			;		 "feature_contributions_robust" true or false. If true outputs each context feature's differences between the
			;						predicted action feature value and the predicted action feature value if each context
			;						feature were not in the model for all context features in the local model area. Outputs
			;						both 'feature_contributions' and non-absolute 'directional_feature_contributions'.
			; 						Uses robust calculations, which uses uniform sampling from the power set of features as
			;						the contexts for predictions.
			;
			;		 "feature_contributions_full" true or false. If true outputs each context feature's differences between the
			;						predicted action feature value and the predicted action feature value if each context
			;						feature were not in the model for all context features in the local model area. Outputs
			;						both 'feature_contributions' and non-absolute 'directional_feature_contributions'.
			;						Uses full calculations, which uses leave-one-out context features for computations.
			;
			;		 "case_mda_robust" true or false. If true outputs each influential case's mean decrease in accuracy of predicting
			;						the action feature in the local model area, as if each individual case were included
			;						versus not included. Uses only the context features of the reacted case to determine
			;						that area. Uses robust calculations, which uses uniform sampling from the power set of all combinations of cases.
			;
			;		 "case_mda_full" true or false. If true outputs each influential case's mean decrease in accuracy of predicting
			;						the action feature in the local model area, as if each individual case were included
			;						versus not included. Uses only the context features of the reacted case to determine
			;						that area. Uses full calculations, which uses leave-one-out for cases for computations.
			;
			;		 "case_contributions_robust" true or false. If true outputs each influential case's differences between the
			;						predicted action feature value and the predicted action feature value if each
			;						individual case were not included. Uses only the context features of the reacted case
			;						to determine that area. Uses robust calculations, which uses uniform sampling from the power set of all
			;						combinations of cases.
			;
			;		 "case_contributions_full" true or false. If true outputs each influential case's differences between the
			;						predicted action feature value and the predicted action feature value if each
			;						individual case were not included. Uses only the context features of the reacted case
			;						to determine that area. Uses full calculations, which uses leave-one-out for cases for computations.
			;
			;		 "case_feature_residuals_robust"  true or false. If true outputs feature residuals for all (context and action)
			;						features for just the specified case. Uses leave-one-out for each feature, while
			;						using the others to predict the left out feature with their corresponding values
			;						from this case. Uses robust calculations, which uses uniform sampling from
			;						the power set of features as the contexts for predictions.
			;
			;		 "case_feature_residuals_full"  true or false. If true outputs feature residuals for all (context and action)
			;						features for just the specified case. Uses leave-one-out for each feature, while
			;						using the others to predict the left out feature with their corresponding values
			;						from this case. Uses full calculations, which uses leave-one-out context features for computations.
			;
			;		 "case_feature_contributions_robust" true or false. If true outputs each context feature's differences between the
			;						predicted action feature value and the predicted action feature value if each context
			;						feature were not in the model for all context features in this case, using only the
			;						values from this specific case. Uses robust calculations, which uses uniform sampling from
			;						the power set of features as the contexts for predictions.
			;
			;		 "case_feature_contributions_full" true or false. If true outputs each context feature's differences between the
			;						predicted action feature value and the predicted action feature value if each context
			;						feature were not in the model for all context features in this case, using only the
			;						values from this specific case. Uses full calculations, which uses leave-one-out context features for computations.
			;
			;		 "num_robust_influence_samples_per_case" integer. Specifies the number of robust samples to use for each case.
			;						Applicable only for computing robust feature contributions or robust case feature contributions.
			;						When unspecified, defaults to 2000. Higher values will take longer but provide more stable results.
			;
			;		 "case_feature_residual_convictions_robust" true or false. If true outputs this case's robust feature residual
			;						convictions for the region around the prediction. Uses only the context features of
			;						the reacted case to determine that region. Computed as: region feature residual / case feature residual.
			;						Uses robust calculations, which uses uniform sampling from the power set of features as the contexts for predictions.
			;
			;		 "case_feature_residual_convictions_full" true or false. If true outputs this case's full feature residual
			;						convictions for the region around the prediction. Uses only the context features of
			;						the reacted case to determine that region. Computed as: region feature residual / case feature residual.
			;						Uses full calculations, which uses leave-one-out context features for computations.
			;
			;        "features" list of features that specifies what features to calculate per-feature details for. (contributions, mda, residuals, etc)
			; 						when robust computations are False. This should generally preserve compute, but will not when computing details robustly.
			;
			;        "generate_attempts" true or false. If true, outputs the total number of attempts to generate the unique case. Only applicable for generative
			;                       reacts. When used with ReactSeries, "series_generate_attempts" is also returned.
			;	)
			details (null)
			;{type "string"}
			;series id, if specified will store an internal record of all reacts for that series
			into_series_store (null)

			;{type "boolean"}
			;flag, if false uses global residuals, if true calculates and uses regional residuals. Only used when desired_conviction is specified
			use_regional_residuals (true)
			;{type "assoc" additional_indices {ref "FeatureBounds"}}
			;assoc of :
			;	{ feature : { "min": a, "max": b, "allow_null": false/true } }
			;	to ensure that specified features' generated values stay in bounds
			;	for nominal features instead of min/max it's a set of allowed values, ie:
			;	{ feature: { "allowed" : [ "value1", "value2" ... ] }, "allow_null": false/true }
			;	allow_null - default is true, if true nulls may be generated per their distribution in the data
			; Only used when desired_conviction is specified
			feature_bounds_map (assoc)
			;{type "assoc" additional_indices {ref "GoalFeatures"}}
			; assoc of :
			;		{ feature : { "goal" : "min"/"max", "value" : value }}
			;		A mapping of feature name to the goals for the feature, which will cause the react to achieve the goals as appropriate
			;		for the context.  This is useful for conditioning responses when it is challenging or impossible to know appropriate
			;		values ahead of time, such as maximizing the reward or minimizing cost for reinforcement learning, or conditioning a
			;		forecast based on attempting to achieve some value.  Goal features will reevaluate the inference for the given context
			;		optimizing for the specified goals. Valid keys in the map are:
			;		"goal": "min" or "max", will make a prediction while minimizing or maximizing the value for the feature or
			;		"value" : value, will make a prediction while approaching the specified value
			;	note: nominal features only support 'value', 'goal' is ignored.
			;		  for non-nominals, if both are provided, only 'goal' is considered.
			goal_features_map (assoc)
			;{type "list" values "string"}
			;list of features that will preserve their values from the case specified by case_indices, appending and
			;	overwriting the specified context and context features as necessary.  For generative reacts, if case_indices isn't specified,
			;	will preserve feature values of a random case.
			preserve_feature_values (list)
			;{type "boolean"}
			;flag, if set to true and specified along with case_indices, will set ignore_case to the one specified by case_indices.
			leave_case_out (null)
			;{type "boolean"}
			;flag, default is true, only applicable if a substitution value map has been set. If set to false, will not substitute categorical feature values.
			; Only used when desired_conviction is specified
			substitute_output (true)
			;{type "boolean"}
			;flag, if set to true assumes provided categorical (nominal or ordinal) feature values already been substituted.
			input_is_substituted (false)
			;{type "boolean"}
			;flag, if true order of generated feature values will match the order of features
			ordered_by_specified_features (false)
			;{type "boolean"}
			;If true will exclude sensitive features whose values will be
			;	replaced after synthesis from uniqueness check.
			; Only applicable when desired_conviction is specified.
			exclude_novel_nominals_from_uniqueness_check (false)
			;{ref "NewCaseThreshold"}
			;distance to determine privacy cutoff. Used to query the local minimum distance used in the distance ratio
			; 	accepted values:
			; 		'max': the maximum local distance
			; 		'min': the minimum local distance
			; 		'most_similar': the closest distance of the most similar case
			; 		null: the minimum local distance
			new_case_threshold "min"
			;{type "number"}
			;total number of cases to generate for generative reacts.
			num_cases_to_generate (null)
		)
		(call !ValidateParameters)
		(call !ValidateFeatures)

		;determine number of reacts to batch
		(declare (assoc
			num_reacts
				(max
					1
					(if (!= (null) desired_conviction)
						num_cases_to_generate

						(!= (null) context_values)
						(size context_values)

						(!= (null) case_indices)
						(size case_indices)
					)
				)
		))

		;validate parameters
		(declare (assoc invalid_react_parameters (false)))

		(call !ValidateBatchReactParameter (assoc param context_values))
		(call !ValidateBatchReactParameter (assoc param case_indices))
		(call !ValidateBatchReactParameter (assoc param action_values))
		(call !ValidateBatchReactParameter (assoc param post_process_values))

		(if (and
				(!= (null) rand_seed)
				(!= num_reacts (size rand_seed))
			)
			(assign (assoc invalid_react_parameters (true)))
		)

		(if invalid_react_parameters
			(conclude
				(call !Return (assoc errors (list "Failed to react: invalid react parameters.") ))
			)
		)

		(call !ValidateDerivedActionFeaturesIsSubset)

		(declare (assoc
			;if any of these are length of 1, the index will be 0 to pull the values and apply to all reacts
			single_context (= 1 (size context_values))
			single_action (= 1 (size action_values))
			single_session (= 1 (size case_indices))
			single_post_process (= 1 (size post_process_values))
		))

		;action and context_values must be either a list of lists or null; if it's an empty list, treat it as null
		(if (= (list) context_values) (assign (assoc context_values (null))) )
		(if (= (list) action_values) (assign (assoc action_values (null))) )

		;assoc of feature -> list of num_reacts unique values, pre-populated if there are unique features that need to be synthed
		(declare (assoc
			generated_uniques_list_map
				;if doing generative reacts with unique nominals, generate the requested number of uniques values prior to synthesis
				(if (and
						(!= (null) desired_conviction)
						(> (size !uniqueNominalsSet) 0)
						;generating unique nominal actions
						(> (size (intersect (zip action_features) !uniqueNominalsSet)) 0)
					)
					(call !GenerateUniquesListMap (assoc
						num_reacts num_reacts
						action_features action_features
						context_features context_features
						preserve_feature_values preserve_feature_values
					))
				)
			warnings (assoc)
		))

		(if (size derived_action_features) (call !CheckDerivedActionFeatures))
		(if !inactiveFeaturesNeedCaching (call !UpdateInactiveFeatures))

		(if (= (false) use_case_weights)
			(assign (assoc weight_feature ".none"))
		)

		(declare (assoc
			hyperparam_map
				(call !GetHyperparameters (assoc
					feature (if (= 1 (size action_features)) (first action_features) )
					context_features context_features
					weight_feature weight_feature
				))
			constrained_features (null)
		))

		(call !UpdateCaseWeightParameters (assoc set_valid_weight_feature (false) ))

		;check and update caches if necessary
		(call !PreReactCacheChecks)

		(declare (assoc
			output_action_features
				(if (size derived_action_features)
					(append action_features derived_action_features)
					action_features
				)
			react_list
				||(range
					(lambda (let
						(assoc
							context_index (if single_context 0 (current_index 1))
							action_index (if single_action 0 (current_index 1))
							session_index (if single_session 0 (current_index 1))
							post_process_index (if single_post_process 0 (current_index 1))
							react_rand_seed (if rand_seed (get rand_seed (current_index 1)))
							react_session (null)
							react_session_training_index (null)
							pre_generated_uniques_map
								(if (!= (null) generated_uniques_list_map)
									(if (= 1 num_reacts )
										generated_uniques_list_map

										;create a map for each unique feature to its corresponding value by the index (current_index 2) of which case
										;is being synthed when synthing > 1 case
										(map
											(lambda (get (current_value) (current_index 2)))
											generated_uniques_list_map
										)
									)
								)
						)

						;get the corresponding parameters by the index, values will be null if not specified
						;context and action values when not provided should be an empty list
						(declare (assoc
							react_context_values (if context_values (get context_values context_index) (list))
							react_action_values (if action_values (get action_values action_index) (list))
							react_post_process_values (if post_process_values (get post_process_values post_process_index) (list))
						))

						;if one of these is provided, both of them must be
						(if case_indices
							(assign (assoc react_case_index (get case_indices session_index) ))
						)

						(call !SingleReact (assoc
							context_values react_context_values
							action_values react_action_values
							case_indices react_case_index
							post_process_values react_post_process_values
							rand_seed react_rand_seed

							context_features context_features
							action_features action_features
							derived_action_features derived_action_features
							derived_context_features derived_context_features
							post_process_features post_process_features
							details details
							extra_features extra_features
							ignore_case ignore_case
							substitute_output substitute_output
							input_is_substituted input_is_substituted
							use_case_weights use_case_weights
							weight_feature weight_feature
							leave_case_out leave_case_out
							allow_nulls allow_nulls

							desired_conviction desired_conviction
							use_regional_residuals use_regional_residuals
							feature_bounds_map feature_bounds_map
							goal_features_map goal_features_map
							ordered_by_specified_features ordered_by_specified_features
							exclude_novel_nominals_from_uniqueness_check exclude_novel_nominals_from_uniqueness_check
							generate_new_cases generate_new_cases
							preserve_feature_values preserve_feature_values
							new_case_threshold new_case_threshold
							pre_generated_uniques_map pre_generated_uniques_map
						))
					))
					0 (- num_reacts 1) 1
				)
		))

		(if (!= (null) into_series_store)
			(seq
				(accum_to_entities (assoc !revision 1))

				(map
					(lambda
						(call !AppendCaseToSeriesStoreWithoutEncoding (assoc
							series into_series_store
							react_case (current_value 1)
							action_features action_features
							context_features context_features
							context_values (get context_values (current_index 1))
						))
					)
					react_list
				)
			)
		)

		;for generative reacts, filter out null reacts, ones that failed to generate
		(if (!= (null) desired_conviction)
			(assign (assoc
				react_list
					(filter
						(lambda (!= (null) (get (current_value) "action_values")))
						react_list
					)
			))
		)

		;convert react_list to a dict of details key -> lists of values (one per react)
		(declare (assoc
			react_output_map
				(map
					(lambda (let
						(assoc details_key (current_index 1))
						(map
							(lambda (get (current_value) details_key) )
							react_list
						)
					))
					(if (size react_list)
						(first react_list)
						(assoc)
					)
				)
		))

		(call !Return (assoc
			payload (append react_output_map (assoc "action_features" output_action_features))
			warnings (if (size warnings) (indices warnings))
		))
	)

	;React to a provided context. If desired_conviction is provided, it does a generative react.
	;
	;Output:
	; Default output of this method is a react object in the format of
	; { 'action_values' : [ all_action_values ], 'action_features' : [ all_action_features ] }, where all_action_values is a list of all action
	; values, reacted/generated and derived, in the same order as all_action_features, e.g., [2, "a", .75384] to match ['width','name','height']
	; If details is specified, the react object will contain appropriate additional details properties and values,
	; 	Details example: { 'action_values': [2, "a", .75384], 'action_features' : ['width','name','height'], 'residual_conviction': 1.3,
	;		'influential_cases' : etc... }
	;	See API docs for documentation of all output properties
	;{long_running (true) statistically_idempotent (true) read_only (true)}
	#single_react
	(declare
		(assoc
			;{type "list" values "string"}
			;list of context features. For generative react, features used to condition the generated case
			context_features (list)
			;{type "list"}
			;list of context values, For generative react, values used to condition the generated case
			context_values (list)
			;{type "list" values "string"}
			;full list of features to output values for the case
			action_features (list)
			;{type "list"}
			;values of action features. If specified will bypass react and only do the explanation if details is set
			action_values (list)
			;{type "list" values "string"}
			;list of action features whose values should be computed from the resulting action prior to output, in the specified
			;	order. Must be a subset of action_features.
			;	Note: both of these derived feature lists rely on the features' "derived_feature_code" attribute to compute the values.
			;	If 'derived_feature_code' attribute is undefined or references non-0 feature indices, the derived value will be null.
			derived_action_features (list)
			;{type "list" values "string"}
			;list of context features whose values should be computed from the provided contexts in the specified order.
			;	Must be different than context_features.
			derived_context_features (list)
			;{type "list" values "string"}
			;list of feature names that will be made available during the execution of post_process feature attributes
			post_process_features (list)
			;{type "list"}
			;list of values corresponding to post_process_features that will be made available during the execution fo post_process feature attributes
			post_process_values (list)
			;{type "list" values "string"}
			;list of additional features to return with audit data
			extra_features (list)
			;{ref "UseCaseWeights"}
			;flag, if set to true will scale influence weights by each case's weight_feature weight.
			;	If a weight is missing, uses 1 as the weight. If unspecified, case weights will be used if the trainee has them.
			use_case_weights (null)
			;{type "string"}
			;name of feature whose values to use as case weights
			weight_feature ".case_weight"
			;{type "boolean"}
			;flag, if set to true will allow return of null values if there are nulls in the local model for the action features. Applicable
			;	only to discriminative reacts.
			allow_nulls (false)
			;{type "boolean"}
			;flag, if set to true and specified along with case_indices, will set ignore_case to the one specified by case_indices.
			leave_case_out (null)
			;{type "list" values ["string" "number"]}
			;pair (list) of session id and index, where index is the original 0-based session_training_index of the case as it was
			;			trained into the session. If this case does not exist, discriminative react outputs null, generative react ignores it.
			case_indices (null)
			;{ref "ReactDetails"}
			;see the description of the details parameter of #react
			details (null)
			;{ref "DesiredConviction"}
			;If null, will do a discriminative react. If specified, will do a generative react
			;	For Generative React, value of desired avg conviction of generated cases, in the range of (0,infinity] with 1 as standard
			;	larger values will increase the variance (or creativity) of the generated case from the existing model
			;	smaller values will decrease the variance (or creativity) of the generated case from the existing model
			desired_conviction (null)
			;{type "string"}
			;case_id, if set will query for K+1 cases and ignore the perfect matching case during the reaction
			ignore_case (null)
			;{ref "GenerateNewCases"}
			;enum, acceptable values are:
			;	null or 'no' : output any generated case
			;	'always' : only output original cases, outputs null for all feature values if unable to generate a new case
			;	'attempt' : output any generated case only if generation fails all initial attempts to output original cases
			generate_new_cases "no"
			;{type "boolean"}
			;flag, if true order of generated feature values will match the order of features
			ordered_by_specified_features (false)
			;{type "boolean"}
			;If true will exclude sensitive features whose values will be
			;	replaced after synthesis from uniqueness check.
			; Only applicable when desired_conviction is specified.
			exclude_novel_nominals_from_uniqueness_check (false)
			;{type "string"}
			;series id, if specified will store an internal record of all reacts for that series
			into_series_store (null)

			;{type "boolean"}
			;flag, if false uses global residuals, if true calculates and uses regional residuals. Only used when desired_conviction is specified
			use_regional_residuals (true)
			;{type "assoc" additional_indices {ref "FeatureBounds"}}
			;assoc of :
			;	{ feature : { "min": a, "max": b, "allow_null": false/true } }
			;	to ensure that specified features' generated values stay in bounds
			;	for nominal features instead of min/max it's a set of allowed values, ie:
			;	{ feature: { "allowed" : [ "value1", "value2" ... ] }, "allow_null": false/true }
			;	allow_null - default is true, if true nulls may be generated per their distribution in the data
			; Only used when desired_conviction is specified
			feature_bounds_map (assoc)
			;{type "assoc" additional_indices {ref "GoalFeatures"}}
			; assoc of :
			;		{ feature : { "goal" : "min"/"max", "value" : value }}
			;		A mapping of feature name to the goals for the feature, which will cause the react to achieve the goals as appropriate
			;		for the context.  This is useful for conditioning responses when it is challenging or impossible to know appropriate
			;		values ahead of time, such as maximizing the reward or minimizing cost for reinforcement learning, or conditioning a
			;		forecast based on attempting to achieve some value.  Goal features will reevaluate the inference for the given context
			;		optimizing for the specified goals. Valid keys in the map are:
			;		"goal": "min" or "max", will make a prediction while minimizing or maximizing the value for the feature or
			;		"value" : value, will make a prediction while approaching the specified value
			;	note: nominal features only support 'value', 'goal' is ignored.
			;		  for non-nominals, if both are provided, only 'goal' is considered.
			goal_features_map (assoc)
			;{type "list" values "string"}
			;list of features that will preserve their values from the case specified by case_indices, appending and
			;	overwriting the specified context and context features as necessary.  For generative reacts, if case_indices isn't specified,
			;	will preserve feature values of a random case.
			preserve_feature_values (list)
			;{type "boolean"}
			;flag, default is true, only applicable if a substitution value map has been set. If set to false, will not substitute categorical feature values.
			; Only used when desired_conviction is specified
			substitute_output (true)
			;{type "boolean"}
			;flag, if set to true assumes provided categorical (nominal or ordinal) feature values already been substituted.
			input_is_substituted (false)
			;{ref "NewCaseThreshold"}
			;distance to determine privacy cutoff. Used to query the local minimum distance used in the distance ratio
			; 	accepted values:
			; 		'max': the maximum local distance
			; 		'min': the minimum local distance
			; 		'most_similar': the closest distance of the most similar case
			; 		null: the minimum local distance
			new_case_threshold "min"
		)

		(call !ValidateParameters)

		(if !inactiveFeaturesNeedCaching (call !UpdateInactiveFeatures))

		(call !ValidateFeatures)

		;if both action_features and derived_action_features are specified,
		;ensure that derived_action_features are a subset of action_features, then separate the two into distinct lists
		#!ValidateDerivedActionFeaturesIsSubset
		(if (and (size action_features) (size derived_action_features))
			;if derived_action_features isn't a subset of action_features, error out
			(if (> (size (remove (zip derived_action_features) action_features)) 0)
				(conclude
					(call !Return (assoc errors (list "Specified 'derived_action_features' must be a subset of 'action_features'.") ))
				)

				;else separate  derived_action_features from action_features
				(assign (assoc
					action_features (filter (lambda (not (contains_value derived_action_features (current_value)))) action_features)
				))
			)
		)

		(declare (assoc
			hyperparam_map
				(call !GetHyperparameters (assoc
					feature (if (= 1 (size action_features)) (first action_features) )
					context_features context_features
					weight_feature weight_feature
				))
			warnings (assoc)
			constrained_features (null)
		))

		(call !UpdateCaseWeightParameters (assoc set_valid_weight_feature (false) ))
		(if (size derived_action_features) (call !CheckDerivedActionFeatures))

		;check and update caches if necessary
		(call !PreReactCacheChecks)

		;assoc of feature -> unique value, pre-populated if there are unique features that need to be synthed
		(declare (assoc
			pre_generated_uniques_map
				;if doing generative reacts with unique nominals, generate the uniques values prior to synthesis
				(if (and
						(!= (null) desired_conviction)
						(> (size !uniqueNominalsSet) 0)
						;generating unique nominal actions
						(> (size (intersect (zip action_features) !uniqueNominalsSet)) 0)
					)
					(call !GenerateUniquesListMap (assoc
						num_reacts 1
						action_features action_features
						context_features context_features
						preserve_feature_values preserve_feature_values
					))
				)
		))

		(declare (assoc
			react_response
				(call !SingleReact (assoc
					context_features context_features
					context_values context_values
					action_features action_features
					action_values action_values
					derived_action_features derived_action_features
					derived_context_features derived_context_features
					details details
					extra_features extra_features
					ignore_case ignore_case
					case_indices case_indices
					substitute_output substitute_output
					input_is_substituted input_is_substituted
					use_case_weights use_case_weights
					weight_feature weight_feature
					rand_seed rand_seed
					leave_case_out leave_case_out
					allow_nulls allow_nulls

					desired_conviction desired_conviction
					use_regional_residuals use_regional_residuals
					feature_bounds_map feature_bounds_map
					goal_features_map goal_features_map
					ordered_by_specified_features ordered_by_specified_features
					exclude_novel_nominals_from_uniqueness_check exclude_novel_nominals_from_uniqueness_check
					generate_new_cases generate_new_cases
					preserve_feature_values preserve_feature_values
					new_case_threshold new_case_threshold
					pre_generated_uniques_map pre_generated_uniques_map
				))
		))

		(if (!= (null) into_series_store)
			(seq
				(accum_to_entities (assoc !revision 1))

				(call !AppendCaseToSeriesStoreWithoutEncoding (assoc
					series into_series_store
					react_case react_response
					action_features action_features
					context_features context_features
					context_values context_values
				))
			)
		)

		;append action_features to response
		(if (!= (null) react_response)
			(accum (assoc
				react_response
					(assoc
						"action_features"
							(if (size derived_action_features)
								(append action_features derived_action_features)
								action_features
							)
					)
			))
		)

		(call !Return (assoc
			payload react_response
			warnings (if (size warnings) (indices warnings))
		))
	)

	;Wrapper method for ReactDiscriminative and GenerateCase
	;note: this method may overwmrite desired_conviction if it's specified along with generate_new_cases=true and the case isn't generated in one attempt
	;parameters:
	;  see comment block for #single_react in howso.amlg for details
	;
	;  for generative flows only, new parameter:
	;  pre_generated_uniques_map: optional, map of feature -> value for all unique features whose output value has been pre-generated for output
	#!SingleReact
	(declare
		(assoc
			context_features (list)
			context_values (list)
			action_features (list)
			action_values (list)
			extra_features (list)
			substitute_output (true)
			input_is_substituted (false)
			weight_feature ".case_weight"
			use_case_weights (null)
			rand_seed (null)
			allow_nulls (false)

			derived_context_features (list)
			derived_action_features (list)
			post_process_features (list)
			post_process_values (list)

			leave_series_out (false)
			leave_case_out (false)
			skip_encoding (not !hasEncodedFeatures)
			skip_decoding (not !hasEncodedFeatures)
			case_indices (null)
			use_regional_residuals (true)
			feature_bounds_map (assoc)
			goal_features_map (assoc)
			preserve_feature_values (list)
			new_case_threshold "min"
			pre_generated_uniques_map (null)
			holdout_queries (list)
		)

		(if (!= (null) rand_seed)
			(set_rand_seed rand_seed)
		)

		;unsubstitute nominal feature values if necessary
		(if
			(and input_is_substituted !hasSubstituteFeatureValues)
			(assign (assoc
				context_values
					(call !UnsubstituteFeatureValues (assoc
						features context_features
						feature_values context_values
					))
				action_values
					;most discriminative reacts will have action_features but no action_values, skip this step if no action_values are provided
					(if (> (size action_values) 0)
						(call !UnsubstituteFeatureValues (assoc
							features action_features
							feature_values action_values
						))

						action_values
					)
			))
		)


		;derive context features prior to react and append the computed values to context values
		(if (size derived_context_features)
			(seq
				(assign (assoc
					context_values
						(append context_values
							(call !ComputeFeatureValuesFromCode (assoc
								derived_features derived_context_features
								feature_values_map (zip context_features context_values)
							))
						)
				))
				(assign (assoc context_features (append context_features derived_context_features) ))
			)
		)

		;generative react
		(if (!= desired_conviction (null))
			(let
				(assoc
					generated_case (null)
					;allow up to 5 retries normally, but add one extra for 'attempt' to attempt one more round and output any generated case
					total_attempts (if (= "attempt" generate_new_cases) 6 5)
					original_action_features (null)
				)

				;if there are no action_features provided, don't attempt to synth at all
				(if (= 0 (size action_features))
					(assign (assoc total_attempts 0))

					;else synth the case
					(seq
						;don't generate any features in the pre_generated_uniques_map by filtering them out of the action_features list
						(if (> (size pre_generated_uniques_map) 0)
							(seq
								(assign (assoc original_action_features action_features))
								;remove the generated unique features from the action_features and restore them below after case is generated
								(assign (assoc
									action_features
										(filter
											(lambda (not (contains_index pre_generated_uniques_map (current_value))))
											action_features
										)
								))
							)
						)

						(assign (assoc
							generated_case
								(call !GenerateCase (assoc
									context_features context_features
									context_values context_values
									action_features action_features
									desired_conviction desired_conviction
									use_regional_residuals use_regional_residuals
									feature_bounds_map feature_bounds_map
									goal_features_map goal_features_map
									ordered_by_specified_features ordered_by_specified_features
									exclude_novel_nominals_from_uniqueness_check exclude_novel_nominals_from_uniqueness_check
									;forcibly attempt to generate a novel case on all passes except for the last one if generate_new_cases = 'attempt'
									generate_novel_case
										(if (or (= generate_new_cases (null)) (= generate_new_cases "no"))
											(false)
											(true)
										)
									case_indices case_indices
									leave_series_out leave_series_out
									leave_case_out leave_case_out
									preserve_feature_values preserve_feature_values
									new_case_threshold new_case_threshold
									weight_feature weight_feature
									use_case_weights use_case_weights
									original_substitute_output substitute_output
									substitute_output substitute_output
									current_attempt 0
									custom_extra_filtering_queries holdout_queries
								))
						))
					)
				)

				;retry up to total_attempt times if case is generated as all nulls
				(if (and generate_new_cases (= (null) generated_case))
					(while (< (current_index) total_attempts)
						;decrease desired_conviction by a factor of (1 - e^-1)
						(assign (assoc desired_conviction (* 0.632120558 desired_conviction)))

						(assign (assoc
							generated_case
								(call !GenerateCase (assoc
									context_features context_features
									context_values context_values
									action_features action_features
									desired_conviction desired_conviction
									use_regional_residuals use_regional_residuals
									feature_bounds_map feature_bounds_map
									goal_features_map goal_features_map
									ordered_by_specified_features ordered_by_specified_features
									exclude_novel_nominals_from_uniqueness_check exclude_novel_nominals_from_uniqueness_check
									;forcibly generate a novel case on all passes except for the last one if generate_new_cases = 'attempt'
									generate_novel_case
										(if (and
												(or (= generate_new_cases "always") (= generate_new_cases "attempt"))
												(< (current_index 2) 5)
											)
											(true)
											(false)
										)
									case_indices case_indices
									leave_series_out leave_series_out
									leave_case_out leave_case_out
									preserve_feature_values preserve_feature_values
									new_case_threshold new_case_threshold
									weight_feature weight_feature
									use_case_weights use_case_weights
									original_substitute_output substitute_output
									substitute_output substitute_output
									current_attempt (+ 1 (current_index 2))
									custom_extra_filtering_queries holdout_queries
								))
						))

						;stop if generated case
						(if (!= (null) generated_case)
							(assign (assoc total_attempts 0))
						)
					)
				)

				;if there are pre-generated unique values that should be in the output, append them to the generated case and then
				;unzip by the original_action_features to preserve the original feature ordering
				(if (and
						(> (size pre_generated_uniques_map) 0)
						;only append if the case was generated or if there were no features that needed to be generated
						(or (= 0 (size action_features)) (!= (null) generated_case) )
					)
					(seq
						(assign (assoc
							generated_case
								(set
									generated_case
									"action_values"
									(unzip
										(append (zip action_features (get generated_case "action_values")) pre_generated_uniques_map)
										original_action_features
									)
								)
						))
						;re-set action features to what they used to be
						(assign (assoc action_features original_action_features))
					)
				)

				;output generated case with details of the case if the case is not null and details are requested
				(if (and (!= details (null)) (!= (null) generated_case) )
					(seq
						;if user doesn't want to use case weights, change weight_feature to '.none'
						(if (= (false) use_case_weights)
							(assign (assoc weight_feature ".none"))
						)

						(if !hasFeaturesNeedEncodingFromInput
							(assign (assoc
								context_values
									(call !ConvertFromInput (assoc
										feature_values context_values
										features context_features
									))
								action_values
									(call !ConvertFromInput (assoc
										feature_values (get generated_case "action_values")
										features action_features
									))
							))

							;else dataset has no nominal values, just set action_values to be same as the generated ones
							(assign (assoc action_values (get generated_case "action_values") ))
						)

						(declare (assoc
							hyperparam_map
								(call !GetHyperparameters (assoc
									feature (null)
									context_features context_features
									weight_feature weight_feature
								))
						))

						(call !UpdateCaseWeightParameters (assoc set_valid_weight_feature (false) ))

						;when returning influential_cases, explicitly use the accumulated cases during synth insead of post-synth influentials
						(if (get details "influential_cases")
							(assign (assoc
								;influential_cases_raw_weights isn't applicable to synthesised cases
								details (remove details "influential_cases_raw_weights")
								influence_weights_map (get generated_case "influential_cases")
							))
						)

						(if (get details "categorical_action_probabilities")
							(assign (assoc details (remove details "categorical_action_probabilities") ))
						)

						(assign (assoc
							generated_case
								(call !RetrieveAuditData (assoc
									details details
									provided_details generated_case
									action_features action_features
									action_values action_values
									context_features context_features
									context_values context_values
									num_features_returned num_features_returned
									extra_features extra_features
									force_targetless (true)
									ignore_case (null)
									hyperparam_map hyperparam_map
									custom_extra_filtering_queries holdout_queries
								))
						))
					)

					;else output the generated_case as-is
					generated_case
				)

				;derive action features after react
				(if (size derived_action_features)
					;append the derived action values to the end of the predicted action_values
					(accum "generated_case" (list "action_values")
						(call !ComputeFeatureValuesFromCode (assoc
							derived_features derived_action_features
							feature_values_map
								;append generated actions to contexts, clobbering the contexts to prevent duplicates
								(append
									(zip context_features context_values)
									(zip action_features (get generated_case "action_values"))
								)
						))
					)
				)

				generated_case
			)

			;else run discriminative react
			(let
				(assoc
					output_case
						(call !ReactDiscriminative (assoc
							context_features context_features
							context_values context_values
							action_features action_features
							action_values action_values
							details details
							extra_features extra_features
							ignore_case ignore_case
							case_indices case_indices
							leave_series_out leave_series_out
							leave_case_out leave_case_out
							weight_feature weight_feature
							use_case_weights use_case_weights
							goal_features_map goal_features_map
							preserve_feature_values preserve_feature_values
							new_case_threshold new_case_threshold
							allow_nulls allow_nulls
							skip_decoding skip_decoding
							skip_encoding skip_encoding
							filtering_queries holdout_queries
						))
				)

				(if (size derived_action_features)
					;append the derived action values to the end of the predicted action_values
					(accum "output_case" (list "action_values")
						(call !ComputeFeatureValuesFromCode (assoc
							derived_features derived_action_features
							feature_values_map
								;append reacted actions to contexts, clobbering the contexts to prevent duplicates
								(append
									(zip context_features context_values)
									(zip action_features (get output_case "action_values"))
								)
						))
					)
				)

				output_case
			)
		)
	)

	;Selects or interpolates a set of reaction cases
	; If the feature is categorical, then it selects the case according distance.
	; If the feature is continuous, then the feature value is computed from a weighted average of values of each case
	;
	; context_features: list of context features
	; context_values: list of current values of each context
	; action_features: list of action features
	; match_on_context_features: flag, if true will query only for cases whose context features are not null
	; ignore_case: case_id, if set will query for K+1 cases and ignore the perfect matching case during the reaction
	; tie_break_random_seed: the random number seed to use to break ties for equal distances
	; allow_nulls: flag, if set to true will allow interpolate to return null values if there are nulls in the local model for the action features
	; force_targetless: flag, if set to true forces use of targetless hyperparameters if available
	; use_case_weights: flag, if set to true will scale influence weights by each case's .case_weight. If unspecified,
	;   			case weights will be used if the trainee has them.
	; custom_extra_filtering_queries: optional list of filtering queries to reduce the search space
	; impute_react: optional flag, if true will not ignore future data for time series reacts
	;returns: assoc of case (entity) ids -> their distance to react case, and the next_action_chase_case id if there is one
	#!GenerateReaction
	(declare
		(assoc
			custom_extra_filtering_queries (list)

			not_null_features_queries
				;if context features must not be null, we want only find cases that have the same set of features that are not null
				(if match_on_context_features
					(let
						(assoc
							not_null_features
								(filter
									(lambda
										(!= (null) (get context_values (current_index)))
									)
									context_features
								)
						)

						(apply
							(lambda (append))
							(map
								(lambda (query_not_equals (get_value (current_value)) (null)))
								not_null_features
							)
						)
					)

					;else there are no null case values
					(list)
				)
			dependent_queries_list
				(if action_feature_is_dependent
					(call !ComputeDependentQueries (assoc
						action_feature (first action_features)
						context_features context_features
						context_values context_values
					))
					(list)
				)
			k_parameter (get hyperparam_map "k")
			feature_deviations (get hyperparam_map "featureDeviations")
			feature_weights
				(if (= (null) (get hyperparam_map "featureMdaMap"))
					(get hyperparam_map "featureWeights")
					(get hyperparam_map ["featureMdaMap" (first action_features)])
				)

			;check if action_feature has nulls, if not, the no need to filter them out since they don't exist
			;else action_feature does have nulls, filter them out since nulls function as true
			ignore_null_action_feature
				;don't need to filter out inactive features since they are all null
				(if (and (not allow_nulls) (not (contains_index !inactiveFeaturesMap (first action_features))) )
					(!= (false) (get !featureNullRatiosMap (list (first action_features) "has_nulls")) )

					;else nulls are allowed
					(false)
				)
		)

		;for all time series where the time feature is a context,
		;filter out future data based on whether the time feature is universal
		(if !tsTimeFeature
			(let
				(assoc context_map (zip context_features context_values) )
				(if (not impute_react)
					(if (contains_index context_map !tsTimeFeature)
						(accum (assoc custom_extra_filtering_queries (call !ComputeTimeSeriesFilterQuery) ))
					)
				)
				(if leave_series_out
					(accum (assoc
						custom_extra_filtering_queries
							(map
								(lambda (query_not_equals (current_value) (get context_map (current_value))) )
								(indices (keep
									context_map
									(get !tsModelFeaturesMap "series_id_features")
								))
							)
					))
				)
			)
		)

		;use dynamic deviations subtrainee if present
		(if (get hyperparam_map "subtraineeName")
			(call !UseDynamicDeviationsAndWeights (assoc
				context_features context_features
				context_values context_values
				hyperparam_map hyperparam_map
			))
		)

		(declare (assoc
			local_model_cases_tuple
				#!ReactionQuery
				(compute_on_contained_entities
					(append
						not_null_features_queries
						;if ignoring null action feature, query for cases where action feature is not null
						(if ignore_null_action_feature
							(query_not_equals (first action_features) (null))
							(list)
						)
						dependent_queries_list
						(if (size custom_extra_filtering_queries)
							custom_extra_filtering_queries
							(list)
						)
						(if ignore_case
							(if focal_case
								(query_not_in_entity_list (list ignore_case focal_case))
								(query_not_in_entity_list (list ignore_case))
							)
							(list)
						)
						(query_nearest_generalized_distance
							k_parameter
							context_features
							context_values
							feature_weights
							!queryDistanceTypeMap
							(get hyperparam_map "featureDomainAttributes")
							feature_deviations
							(get hyperparam_map "p")
							(get hyperparam_map "dt")
							(if valid_weight_feature weight_feature (null))
							tie_break_random_seed
							(null) ;radius
							!numericalPrecision
							(first action_features)
						)
					)
				)
		))

		(assign (assoc candidate_cases_lists (call !Trunck (assoc local_tuple candidate_cases_lists)) ))

		(if goal_features
			(call !UpdateLocalInfluencesForGoals (assoc
				feature_weights feature_weights
				context_features context_features
				context_values context_values
				custom_extra_filtering_queries custom_extra_filtering_queries
				query_label "!ReactionQuery"
			))
		)

		;populate filtering_queries for details if necessary
		(call !PopulateFilteringQueriesForDetails)

		;if there is no context or local model, calculate the expected value
		(if (or
				(= (list) context_features)
				(= 0 (size (first local_model_cases_tuple)))
			)
			(let
				(assoc
					;!CalculateFeatureExpectedValue may update the !expectedValuesMap so it should be called first
					exp_value (call !CalculateFeatureExpectedValue (assoc feature (first action_features) allow_nulls (false)))
				)

				;use the global class counts for the feature as the categorical action probabilities
				(if output_categorical_action_probabilities
					(call !AccumulateCategoricalActionProbabilties (assoc
						action_feature (first action_features)
						categorical_value_weights_map
							(get !expectedValuesMap [
								(if valid_weight_feature weight_feature ".none")
								(first action_features)
								"class_counts"
							])
					))
				)

				exp_value
			)

			;else interpolate the result from the nearest neighbors
			(call !InterpolateActionValues (assoc
				action_feature (first action_features)
				candidate_case_ids (first local_model_cases_tuple)
				candidate_case_weights (get local_model_cases_tuple 1)
				candidate_case_values (last local_model_cases_tuple)
				allow_nulls allow_nulls
			))
		)
	)

	;helper method for React calls that checks marginal, expected value, and residuals caches
	;requires the following vars on the stack:
	; hyperparam_map, desired_conviction, weight_feature, use_case_weights
	; These should be ready if !GetHyperparameters and !UpdateCaseWeightParameters are called beforehand
	#!PreReactCacheChecks
	(seq
		;if doing a generative react and global residuals have have not been calculated yet,
		;recalculate them only if there are enough training cases
		;they are needed regardless of which residual mode is being used
		(if (and
				(!= desired_conviction (null))
				(= 0 (size (get hyperparam_map "featureResiduals")))
				(>= (call !GetNumTrainingCases) 2)
			)
			(seq
				(assign (assoc
					hyperparam_map
						(call !CalculateResidualsAndUpdateParameters (assoc
							context_features !trainedFeatures
							custom_hyperparam_map hyperparam_map
							num_samples 1000
							;robust with respect to the set of contexts used (across the power set of contexts)
							robust_residuals (!= 1 (size action_features))
							hyperparameter_feature
								(if (= 1 (size action_features))
									(first action_features)
								)
							weight_feature weight_feature
							use_case_weights use_case_weights
							compute_null_uncertainties (false)
							compute_all_statistics (false)
						))
				))
				(if (= (first (get hyperparam_map "paramPath")) ".default")
					;updating default hyperparam set with featuredeviations
					(assign_to_entities (assoc !defaultHyperparameters hyperparam_map) )

					;update the appropriate hyperparameter set
					(assign_to_entities (assoc !hyperparameterMetadataMap (set !hyperparameterMetadataMap (get hyperparam_map "paramPath") hyperparam_map)) )
				)
			)
		)

		;compute and cache all min-max values for all features
		(if (= 0 (size !featureMarginalStatsMap))
			(call !CalculateMarginalStats (assoc
				weight_feature (if use_case_weights weight_feature)
			))
		)

		;if expected values haven't been cached (i.e., analyze was skipped), do that here
		(if (= 0 (size !expectedValuesMap))
			(call !CacheExpectedValuesAndProbabilities (assoc
				features !trainedFeatures
				weight_feature (if (not use_case_weights) ".none" weight_feature)
				use_case_weights use_case_weights
			))
		)

		;when doing time-series flows, the minimum time bound needs to be defined
		(if (and
				!tsTimeFeature
				!tsTimeFeatureUniversal
				(not (get !tsModelFeaturesMap "minimum_time_bound"))
			)
			;update "minimum_time_bound" which is the stored minimum time value that can be used as an upper bound
			;in queries when the time feature is universal
			;needs "hyperparam_map"
			#!UpdateMinimumTimeBound
			(assign_to_entities (assoc
				!tsModelFeaturesMap
					(set
						!tsModelFeaturesMap
						["minimum_time_bound"]
						(retrieve_from_entity
							(last
								(contained_entities (list
									(query_exists !tsTimeFeature)
									(query_min !tsTimeFeature (get hyperparam_map "k"))
								))
							)
							!tsTimeFeature
						)
					)
			))
		)
	)
)
