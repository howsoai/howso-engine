;Contains methods for case generation (generative reacts).
(null

	;generate a new case, returns a list of feature values in the same order as action_features
	;parameters:
	; context_features: optional, list of features for initial values that are used to condition the generated case
	; context_values: optional, list of initial feature values that are used to condition the generated case
	; action_features: full list of features to generate values for the case. Context feature values, if provided, will be output as-is
	; use_regional_model_residuals: flag, if false uses model feature residuals, if true recalculates regional model residuals. Default is true.
	; feature_bounds_map: optional assoc of :
	;				{ feature : { "min": a, "max": b, "allow_null": false/true } }
	;				to ensure that specified features' generated values stay in bounds
	;				for nominal features instead of min/max it's a set of allowed values, ie:
	;				{ feature: { "allowed" : [ "value1", "value2" ... ] }, "allow_null": false/true }
	;			    allow_null - default is true, if true nulls may be generated per their distribution in the data
	; generate_novel_case :  optional flag, if true will generate a case that's not already in the model. If unable to generate a novel, outputs null
	; desired_conviction : optional, value of desired average conviction of generated cases, default is 1.0
	;					 larger values will increase the variance (or creativity) of the generated case from the existing model.
	;					 smaller values will decrease the variance (or creativity) of the generated case from the existing model.
	; exclude_novel_nominals_from_uniqueness_check: optional flag, if true will exclude sensitive features whose values will be
	;			replaced after synthesis from uniqueness check.
	; ordered_by_specified_features : flag, if true order of generated feature values will match the order of features
	; case_indices: optional pair (list) of session id and index, where index is the original 0-based session_training_index of the case as it was
	;			trained into the session. If this case does not exist, this parameter is ignored.
	; preserve_feature_values : optional, list of features that will preserve their values from the case specified by case_indices, appending and
	;				overwriting the specified context and context features as necessary.  If case_indices isn't specified, will preserve feature
	;				values of a random case.
	; leave_case_out: flag, if set to true and specified along with case_indices, will ignore the case specified by case_indices
	; weight_feature: optional, default '.case_weight'.  name of feature whose values to use as case weights
	; use_case_weights: flag, if set to true will scale influence weights by each case's weight_feature weight
	; substitute_output : flag, default is true, only applicable if a substitution value map has been set. If set to false, will not substitute categorical feature values.
	; original_substitute_output : flag, same as substitute_output, mantains the original value of this flag on re-generation attempts
	#!GenerateCase
	(declare
		(assoc
			context_features (list)
			context_values (list)
			action_features !trainedFeatures
			use_regional_model_residuals (true)
			desired_conviction 1
			feature_bounds_map (assoc)
			ordered_by_specified_features (false)
			exclude_novel_nominals_from_uniqueness_check (false)
			generate_novel_case (false)
			preserve_feature_values (list)
			weight_feature ".case_weight"
			use_case_weights (false)
			original_substitute_output (true)
			substitute_output (true)
			case_indices (null)
			new_case_threshold "min"
			leave_case_out (false)

			;local variable
			valid_weight_feature (false)
		)

		;if user doesn't want to use case weights, change weight_feature to '.none'
		(if (not use_case_weights)
			(assign (assoc weight_feature ".none"))

			;else using case weights, weight feature is valid if it's custom (not .case_weight) or !hasPopulatedCaseWeight
			(assign (assoc valid_weight_feature (or !hasPopulatedCaseWeight (!= weight_feature ".case_weight"))))
		)

		(declare (assoc
			hyperparam_map
				(if (= 1 (size action_features))
					(call !GetHyperparameters (assoc
						feature (first action_features)
						context_features context_features
						mode "full"
						weight_feature weight_feature
					))

					(call !GetHyperparameters (assoc
						feature ".targetless"
						context_features context_features
						mode "robust"
						weight_feature weight_feature
					))
				)
			constrained_features (null)
		))

		;if global residuals have have not been calculated yet, recalculate them only if there are enough training cases
		;they are needed regardless of which residual mode is being used
		(if (and
				(not (get hyperparam_map "allFeatureResidualsCached"))
				(>= (call !GetNumTrainingCases) 2)
			)
			(call !CalculateAndStoreFeatureResiduals (assoc
				features !trainedFeatures
				num_samples 1000
				;robust with respect to the set of contexts used (across the power set of contexts), should match hyperparam map robust mode
				robust_residuals (!= 1 (size action_features))
				hyperparameter_feature
					(if (= 1 (size action_features))
						(first action_features)
						".targetless"
					)
				weight_feature weight_feature
				use_case_weights use_case_weights
			))
		)

		(declare (assoc param_path (get hyperparam_map "paramPath") ))
		(if (= ".default" (first param_path))
			(assign (assoc param_path (null) ))
		)
		(declare (assoc
			cached_residuals_map
				(call !GetFeatureResiduals (assoc
					prediction_stats_action_feature (first param_path)
					robust_hyperparameters (get param_path 2)
					weight_feature (last param_path)
				))
		))

		;if for some reason expected values haven't been cached, do that here
		(if (= 0 (size !expectedValuesMap))
			(call !CacheExpectedValuesAndProbabilities (assoc
				features !trainedFeatures
				weight_feature weight_feature
				use_case_weights use_case_weights
			))
		)

		;ensure feature_bounds_map is in correct format and global feature bounds are overwritten by user-specified ones
		(call !PrepareFeatureBoundsMap)

		(declare (assoc
			context_values_map (zip context_features context_values)
			;map of features that need to be generated, filter out the context_features from action_features
			action_features_map (zip action_features)
			feature_residual (null)
			ordinal_features_map (zip !ordinalFeatures)
			ordinal_residual (null)

			preserve_case_id
				(if (size case_indices)
					(call !GetCaseId (assoc
						session (first case_indices)
						session_training_index (last case_indices)
					))
				)

			output_influential_cases (get details "influential_cases")
			output_cap (get details "categorical_action_probabilities")
			output_attempts (get details "generate_attempts")
			influential_cases_map (null)
		))

		;if there are preserve_feature_values and/or initial contexts were provided, prepare and encode them properly
		(call !PrepareContextValues)

		;set the order of features for generation
		(declare (assoc
			rand_ordered_features
				;leave the ordering as is if ordered_by_specified_features is True
				(if ordered_by_specified_features
					(filter (lambda (not (contains_index context_values_map (current_value)))) action_features)

					;randomly order features, ignoring those already specified in the initial values
					(rand (indices action_features_map) (size action_features_map) (true))
				)
			dependent_features_map
				(if !hasDependentFeatures
					(retrieve_from_entity "!dependentFeatureMap")
				)
			cached_time_series_filter_query (list)
			use_time_series_filter_query (!= (null) !tsTimeFeature)
		))

		;if user specified context features and there are dependents, precompute all residuals for dependent continuous features
		(if (and (size context_features) dependent_features_map)
			(call !ComputeAndCacheMinMaxForDependentContinuousContexts (assoc
				context_features context_features
				context_values context_values
				use_regional_model_residuals use_regional_model_residuals
				hyperparam_map hyperparam_map
			))
		)

		;synth a value for each feature, outputting a tuple of [residual, local_model_cases_map] for each feature value generated
		(declare (assoc
			threshold_feature_residuals
				;iterate over features, reacting to the growing context to generate new feature values, outputs the local residual
				(map
					(lambda (let
						(assoc
							feature (current_value 1)
							action_value (null)
							feature_is_nominal
								(or
									(contains_index !nominalsMap (current_value 1))
									;continuous strings are treated as nominals for synthesis since we don't want to mix them
									(= "string" (get !editDistanceFeatureTypesMap (current_value 1)))
								)
							feature_is_ordinal (contains_index ordinal_features_map (current_value 1))
							local_class_probabilities_map (null)
							regional_model_context_features (list)
							regional_model_context_values (list)
							regional_model_cases_map (null)
							allow_nulls (!= (false) (get feature_bounds_map (list (current_value 2) "allow_null")))
							cycle_length (get !cyclicFeaturesMap (current_value 1))
							local_case_ids (list)
							react_map (assoc)
							local_model_cases_map (null)

							action_feature_is_dependent_and_continuous (false)
							action_feature_is_dependent (false)
							local_model_case_values_map (assoc)
							edit_distance_code_feature (contains_value (list "json" "yaml" "amalgam") (get !editDistanceFeatureTypesMap (current_value 1)) )
						)

						(if dependent_features_map
							(if (contains_index dependent_features_map feature)
								(assign (assoc
									action_feature_is_dependent (true)
									action_feature_is_dependent_and_continuous (not feature_is_nominal)
								))
							)
						)

						;if there are contexts, react to them for the specified feature to get the new action value
						(if (> (size context_features) 0)
							(call !GetNextActionValueGivenContexts)

							;else just pick a case at random and get that case's value for this feature
							(call !GetInitialActionValue)
						)

						;if RMR flag is specified, recalculate residuals around this particular reaction
						(if (and
								use_regional_model_residuals
								(> (size regional_model_context_features) 0)
								;can't do regional residuals if only one feature is provided
								(!= regional_model_context_features (list feature))
							)
							(call !ComputeRegionalModelResidual)

							;else local and regional model feature gaps to approximate regional residual for the feature
							(call !ApproximateRegionalModelResidual)
						)

						;if the action features is dependent and continuous, store its min and max now that the residual has been calculated
						(if action_feature_is_dependent_and_continuous
							(if (!= (null) action_value)
								(accum "dependent_features_map"
									(list feature "min") (- action_value feature_residual)
									(list feature "max") (+ action_value feature_residual)
								)
							)
						)

						;generate the new feature value using a laplace distribution around the action value
						(declare (assoc
							new_feature_value
								(if
									(or
										feature_is_nominal
										feature_is_ordinal
										(= 0 (size local_model_case_values_map))
										;continuous features that have all the same value in the local space should only add laplace noise randomly based on desired_conviction
										(not (apply "=" (values local_model_case_values_map)))
									)
									(call !GenerateFeatureValue)

									;else all continuous values are the same, leave value as-is
									action_value
								)
						))

						;generated values for ordinal features are selected from the allowed list from either the local or global distribution
						;based on desired_conviction and then are 'snapped' to the closest ordinal value
						;if the generated value is more than gap/2 away from either the min or max ordinal value,
						;we randomly pick a value based on the regional distribution of ordinal values for that feature
						;to prevent snapping to the min or the max, which would lead to a skewed distribution with too many mins and maxs
						(if (contains_index ordinal_features_map feature)
							(call !GenerateAllowedOrdinalFeatureValue)
						)

						;if feature bounds are specified, ensure generated values are within the bounds by regenerating the value up to 5 times
						;only applies to non-nominal features since those have their bounds enforced inside the GenerateFeatureValue method since
						;nominals are generated from a list that may be predetermined, and thus are guaranteed to be within the bounds specified
						(if (and
								(not feature_is_nominal)
								(or (contains_index feature_bounds_map feature) cycle_length)
								;if nulls are allowed and this value is a null, do not regenerate
								(not (and (= new_feature_value (null)) (get feature_bounds_map (list feature "allow_null"))))
							)
							(call !LimitGeneratedValueToFeatureBounds)

							;it's a constrained nominal feature
							(and feature_is_nominal (size constrained_features) (get feature_bounds_map (list feature "constraint")))
							(call !ConstrainNominalFeature)
						)

						;for cyclic features, ensure that the value is within cycle_length by setting it to new_feature_value % cycle_length
						(if (and cycle_length (!= (null) new_feature_value))
							(assign (assoc
								new_feature_value
									(if (< new_feature_value 0)
										;convert negative values to positive by adding the modulo to the cycle length
										(+ cycle_length (mod new_feature_value cycle_length))
										(mod new_feature_value cycle_length)
									)
							))
						)

						;wrap code in a list so it can be appended correctly to the list of context_values
						(if edit_distance_code_feature
							(assign (assoc new_feature_value (list new_feature_value) ))
						)

						;grow the context using the generated value
						(assign (assoc
							context_features (append context_features feature)
							context_values (append context_values new_feature_value)
						))

						;output a tuple of feature residual, local probabilities and local_model_cases_map for influences, if requested
						(list
							feature_residual
							(if output_cap local_class_probabilities_map)
							local_model_cases_map
						)
					))

					;iterate over the features to be generated
					rand_ordered_features
				)
		))

		;flag will be set to true if any of the generated case's values fail their constraints (if they have any)
		(declare (assoc constraint_function_failed (false) ))

		;if there are constrained continuous features, ensure they are within constraints now that the whole case is generated
		(if (size constrained_features)
			(call !VerifyConstrainedFeatureValues)
		)

		;since threshold_feature_residuals is a list of tuples, iterate over the influential cases
		;reduce/accumulate them into a map of unique case id -> total influence weight
		(if output_influential_cases
			(assign (assoc
				influential_cases_map
					(reduce
						(lambda
							(map
								(lambda (+ (or (first (current_value)) 0) (or (last (current_value)) 0))   )
								(current_value)
								(previous_result)
							)
						)
						;keep just the local cases maps since they are assocs of case id -> influence
						(map (lambda (last (current_value))) threshold_feature_residuals)
					)
			))
		)

		(if output_cap
			(declare (assoc
				nominal_categorical_action_probabilities_map
					(filter
						(map
							(lambda (get (current_value) 1) )
							(zip rand_ordered_features threshold_feature_residuals)
						)
					)
			))
		)

		;keep just the residuals
		(assign (assoc threshold_feature_residuals (map (lambda (first (current_value))) threshold_feature_residuals) ))

		(if (not generate_novel_case)
			;if nominals should be encoded, they should be decoded prior to output as well
			(if !hasEncodedFeatures
				(assign (assoc
					context_values
						(call !ConvertToOutput (assoc
							features context_features
							feature_values context_values
							original_context_map context_values_map
							apply_post_process (true)
						))
				))

				;else if needs rounding
				!hasRoundedFeatures
				(assign (assoc
					context_values
						(call !RoundContinuousFeatures (assoc
							features context_features
							feature_values context_values
						))
				))
			)

			;should round values prior to checking for novel cases
			!hasRoundedFeatures
			(assign (assoc
				context_values
					(call !RoundContinuousFeatures (assoc
						features context_features
						feature_values context_values
					))
			))
		)

		;output values in the same order as action_features
		(if (not generate_novel_case)
			(conclude
				(append
					(assoc "action_values" (unzip (zip context_features context_values) action_features) )
					(if output_influential_cases
						(assoc "influential_cases" influential_cases_map)
						(assoc)
					)
					(if output_cap
						(assoc "categorical_action_probabilities" nominal_categorical_action_probabilities_map)
						(assoc)
					)
				)
			)
		)

		;if case must be novel, ensure that no exact cases like this already exist in the model
		(call !VerifyUniqueCaseGeneration)
	)

	;Helper method for GenerateCase that prepares Contexts based on what user passed in and pulls them from preserve_feature_values if appropriate
	#!PrepareContextValues
	(seq
		;if there are preserve feature values, either grab them from the case or randomly pick a case and use those as the initial values
		(if (size preserve_feature_values)
			(seq
				(if (= (null) preserve_case_id)
					(let
						(assoc
							;create list of features that are in the feature bounds map whose allow_null flag is explicitly set to false
							not_null_features_list
								(filter
									(lambda (= (get feature_bounds_map (list (current_value 1) "allow_null")) (false)))
									(indices feature_bounds_map)
								)
						)
						(assign (assoc
							preserve_case_id
								(first
									(contained_entities (append
										(query_exists !internalLabelSession)
										(map
											(lambda (query_exists (current_value)))
											not_null_features_list
										)
										(query_sample 1 (rand))
									))
								)
						))
					)
				)

				(if (!= (null) preserve_case_id)
					(let
						(assoc
							preserved_values
								(call !ConvertToOutput (assoc
									features preserve_feature_values
									feature_values (retrieve_from_entity preserve_case_id preserve_feature_values)
									;don't round anything until final output
									has_rounded_features (false)
									;if there are substituted nominals, don't substitute them since we need their raw values as they are stored in the case to pass into react below
									substitute_output (false)
								))
						)

						;append to the context values map each of the preserve features and the corresponding values from the matching case
						(accum (assoc context_values_map (zip preserve_feature_values preserved_values )))
					)
				)
			)
		)

		(if (> (size context_values_map) 0)
			(seq
				;overwrite the context features and values since they may have been changed via the processes above
				(assign (assoc
					context_features (indices context_values_map)
					;ensure order of value matches features
					context_values (unzip context_values_map (indices context_values_map))
					;map of features that need to be generated, filter out the initial features from all features
					action_features_map (filter (lambda (not (contains_index context_values_map (current_index)))) action_features_map)
				))

				(if !hasFeaturesNeedEncodingFromInput
					(assign (assoc
						context_values
							(call !ConvertFromInput (assoc
								feature_values context_values
								features context_features
							))
					))
				)
			)
		)
	)

	;;Helper method for GenerateCase that given existing contexts and an action_feature, pick the value for that action_feature from the region around the contexts
	#!GetNextActionValueGivenContexts
	(seq

		(call !CreateAndCacheTimeSeriesFilterQuery (assoc
			regional_model_context_features context_features
			regional_model_context_values context_values
		))

		(assign (assoc
			react_map
				(call !NearestRegionReact (assoc
					context_features context_features
					context_values context_values
					action_feature feature
					allow_nulls allow_nulls
					hyperparam_map hyperparam_map
					weight_feature weight_feature
					valid_weight_feature valid_weight_feature
					feature_is_nominal feature_is_nominal
					;only approximate RMR for continuous features
					approximate_residual (and (not feature_is_nominal) (not use_regional_model_residuals))
					ignore_case (or ignore_case (if leave_case_out preserve_case_id))
					action_feature_is_dependent action_feature_is_dependent
				))
		))

		(if feature_is_nominal
			(assign (assoc
				local_class_probabilities_map (get react_map "categorical_value_weights_map")
				action_value (get react_map "action_value")
			))

			;else select action value by weighted probability using the weight of each cases's influence as the probability
			(seq
				(assign (assoc local_case_ids (get react_map "local_case_ids")))

				(declare (assoc
					;randomly choose a neighbor case index by its weight
					random_weighted_case_id
						(weighted_rand
							;pass in associated lists of index of local case -> its weight in the order of
							;local_case_ids to ensure reproduceability for random seeds
							(list
								local_case_ids
								(unzip (get react_map "local_model_cases_map") local_case_ids)
							)
						)
				))

				;pull action value from the randomly selected case by the weight of the case's influence
				(assign (assoc action_value (retrieve_from_entity random_weighted_case_id feature)))
			)
		)

		(assign (assoc
			regional_model_context_features (append context_features feature)
			regional_model_context_values (append context_values action_value)
		))

		(call !CreateAndCacheTimeSeriesFilterQuery)

		;for continuous fetaures, when not running RMR, pull the local case ids around the predicted value to approximate
		;the residual using feature gaps in the localized area around the currently generated case
		(if (and (not feature_is_nominal) (not use_regional_model_residuals))
			(seq
				(assign (assoc
					react_map
						(call !NearestRegionReact (assoc
							context_features regional_model_context_features
							context_values regional_model_context_values
							action_feature feature
							allow_nulls allow_nulls
							hyperparam_map hyperparam_map
							weight_feature weight_feature
							valid_weight_feature valid_weight_feature
							feature_is_nominal feature_is_nominal
							approximate_residual (true)
							ignore_case (or ignore_case (if leave_case_out preserve_case_id))
							action_feature_is_dependent action_feature_is_dependent
						))
				))

				(assign (assoc
					local_case_ids (get react_map "local_case_ids")
					local_model_case_values_map (get react_map "local_model_case_values_map")
				))
			)
		)

		(if output_influential_cases (assign (assoc local_model_cases_map (get react_map "local_model_cases_map") )) )
	)

	;Helper method for GenerateCase that selects a random case to pull an initial feature value at the start of synthing a case
	#!GetInitialActionValue
	(let
		(assoc
			case_id
				(first
					(contained_entities (list
						(query_exists !internalLabelSession)
						(if valid_weight_feature
							;select case using weighted random
							(query_weighted_sample weight_feature 1 (rand) )
							;else just select a random case
							(query_sample 1 (rand))
						)
					))
				)
		)

		(assign (assoc
			action_value (retrieve_from_entity case_id feature)
			regional_model_context_features action_features
			regional_model_context_values (retrieve_from_entity case_id action_features)
		))

		(call !CreateAndCacheTimeSeriesFilterQuery)

		;find the localized area around the starting case to use for residual approximation for this feature
		(assign (assoc
			react_map
				(call !NearestRegionReact (assoc
					context_features regional_model_context_features
					context_values regional_model_context_values
					action_feature feature
					allow_nulls allow_nulls
					hyperparam_map hyperparam_map
					weight_feature weight_feature
					valid_weight_feature valid_weight_feature
					feature_is_nominal feature_is_nominal
					;only approximate RMR for continuous features
					approximate_residual (and (not feature_is_nominal) (not use_regional_model_residuals))
					ignore_case (or ignore_case (if leave_case_out preserve_case_id))
					action_feature_is_dependent action_feature_is_dependent
				))
		))

		(if feature_is_nominal
			(assign (assoc local_class_probabilities_map (get react_map "categorical_value_weights_map")))

			(assign (assoc
				local_case_ids (get react_map "local_case_ids")
				local_model_case_values_map (get react_map "local_model_case_values_map")
			))
		)

		(if output_influential_cases (assign (assoc local_model_cases_map (get react_map "local_model_cases_map") )) )
	)

	;Helper method for GenerateCase to computes the regional model residual instead of the approximate one
	#!ComputeRegionalModelResidual
	(let
		(assoc
			feature_hyperparam_map
				(call !GetHyperparameters (assoc
					feature feature
					context_features context_features
					mode "robust"
					weight_feature weight_feature
				))
			ignore_case (if leave_case_out preserve_case_id)
			regional_residuals (null)
			dependent_queries_list
				(if action_feature_is_dependent
					(call !ComputeDependentQueries (assoc
						action_feature feature
						context_features regional_model_context_features
						context_values regional_model_context_values
					))
					(list)
				)
		)

		(call !CreateAndCacheTimeSeriesFilterQuery)

		(assign (assoc
			regional_model_cases_map
				#!NearestRegionalResidualCasesQuery
				(compute_on_contained_entities (append
					(if ignore_case
						(query_not_in_entity_list (list ignore_case))
						(list)
					)
					dependent_queries_list
					cached_time_series_filter_query
					(query_nearest_generalized_distance
						(max (get feature_hyperparam_map "k") 30)
						regional_model_context_features
						regional_model_context_values
						(get feature_hyperparam_map "featureWeights")
						!queryDistanceTypeMap
						(get feature_hyperparam_map "featureDomainAttributes")
						(get feature_hyperparam_map "featureDeviations")
						(get feature_hyperparam_map "p")
						(get feature_hyperparam_map "dt")
						(if valid_weight_feature weight_feature (null))
						(rand)
						(null) ;radius
						!numericalPrecision
					)
				))
		))

		;reduce dependent feature queries list if regional_model_cases_map is too small, as appropriate
		;if regional_model_cases_map is too small to be viable, then remove dependent feature queries and recompute
		;regional_model_cases_map until sufficiently many cases are returned
		(if action_feature_is_dependent
			(while
				(and
					(< (size regional_model_cases_map) 3)
					(> (size dependent_queries_list) 0)
				)
				(assign (assoc dependent_queries_list (trunc dependent_queries_list)))
				(assign (assoc regional_model_cases_map (call !NearestRegionalResidualCasesQuery) ))
			)
		)

		(assign (assoc
			regional_residuals
				;TODO: 14435 - don't bottom out value, check if residual is 0 for continuous
				(call !ExpandResidualValuesToUncertainty  (assoc
					feature_residuals_map
						(call !ComputeRegionalResiduals (assoc
							regional_model_cases_map regional_model_cases_map
							features regional_model_context_features
							target_residual_feature feature
							ignore_case ignore_case
						))
				))
		))

		(if feature_is_ordinal
			(assign (assoc
				ordinal_residual  (get regional_residuals (list "ordinal_residual_map" feature))
				feature_residual (get regional_residuals (list "residual_map" feature))
			))

			(assign (assoc
				feature_residual (get regional_residuals (list "residual_map" feature))
			))
		)

		;don't allow feature residual of 1, set it to: 1 - smallest theoretical residual
		(if (and feature_is_nominal (= 1 feature_residual))
			(assign (assoc feature_residual (- 1 (get !cachedFeatureMinResidualMap feature))))
		)

		;for continuous features, we may need to output  store the map of case -> value to check whether they are all the same
		;in the local model and then probabilistically output the value as-is, i.e., not add any noise to that value.
		;Improve performance by only outputting these values when the feature is purely continuous and probability is computed as:
		;entropy of a Laplace distribution is ln(2*r*e), using r=1 because of LK and IRW scaling, entropy = 1.693147
		;probability = e^(-surprisal), conviction = entropy/surprisal, solve for probability as e^(-entropy/conviction), so
		;probability of deciding not to add Laplace noise is: e^(-1.693147/desired_conviction)
		(if (and
				(not feature_is_nominal)
				(not feature_is_ordinal)
				(< (rand) (pow 2.718281828 (/ -1.693147181 desired_conviction)))
			)
			(seq
				;TODO: 14477 - if residual is 0 for a continuous feature, we know that all values are same, skip this query
				(assign (assoc
					regional_model_cases_map
						(compute_on_contained_entities (append
							(if ignore_case
								(query_not_in_entity_list (list ignore_case))
								(list)
							)
							dependent_queries_list
							cached_time_series_filter_query
							(query_nearest_generalized_distance
								(get feature_hyperparam_map "k")
								regional_model_context_features
								regional_model_context_values
								(get feature_hyperparam_map "featureWeights")
								!queryDistanceTypeMap
								(get feature_hyperparam_map "featureDomainAttributes")
								(get feature_hyperparam_map "featureDeviations")
								(get feature_hyperparam_map "p")
								(get feature_hyperparam_map "dt")
								(if valid_weight_feature weight_feature (null))
								(rand)
								(null) ;radius
								!numericalPrecision
								;output associated list of feature values
								feature
							)
						))
				))
				(assign (assoc
					local_model_case_values_map
						(zip
							(first regional_model_cases_map)
							(last regional_model_cases_map)
						)
				))
			)
		)
	)

	;Helper method for GenerateCase to compute the approximate regional model residual
	#!ApproximateRegionalModelResidual
	(seq
		;set residual to be the max(min feature gap/2, largest local model feature gap)
		(if (and (not feature_is_nominal) (> (size local_case_ids) 1))
			(assign (assoc
				feature_residual
					(max
						(get !cachedFeatureHalfMinGapMap feature)

						(if (contains_index !editDistanceFeatureTypesMap feature)
							(call !ComputeEditDistanceApproximateResidual (assoc
								feature feature
								local_case_ids local_case_ids
								regional_case_ids (get react_map "regional_case_ids")
							))

							;For determining smooth sensitivity for privacy oriented tasks,
							;if the feature is dense and not very predictable, the bandwidth reflected the
							;local model may overestimate the sensitivity of that part of the data,
							;so we choose the lesser of the max gap of the local and the regional model.
							(min
								(compute_on_contained_entities (list
									(query_in_entity_list local_case_ids)
									(query_max_difference feature (get !cyclicFeaturesMap feature))
								))

								(compute_on_contained_entities (list
									(query_in_entity_list (get react_map "regional_case_ids"))
									(query_max_difference feature (get !cyclicFeaturesMap feature))
								))
							)
						)
					)
			))

			;nominal features just use global residual
			(seq
				(assign (assoc feature_residual (get cached_residuals_map feature) ))

				;if residual is a tuple containing the SDM, use the residual value instead of the SDM
				(if (~ (assoc) feature_residual)
					(assign (assoc feature_residual (get feature_residual "expected_deviation") ))
				)
			)
		)

		;if feature_residual is null but there is an action value, this may generate a 'nan' value for this feature
		;to prevent that, set the residual to: boundary_max - boundary_min (if boundaries are specified)
		(if (and (= (null) feature_residual) (!= (null) action_value))
			(let
				(assoc
					boundaries_tuple
						(call !ConstrainBoundariesForFeature (assoc
							bounds_map (get feature_bounds_map feature)
							feature feature
							is_datetime (and !hasDateTimeFeatures (contains_index !featureDateTimeMap feature))
							cycle_length cycle_length
						))
				)

				(assign (assoc
					;residual is: feature range / 4 to average out residual in each direction
					feature_residual
						;if a boundary value is not specified, residual is unknown, set it to 0
						(if (contains_value boundaries_tuple (null))
							0

							;for cyclics with exclusionary bounds where the min is larger than the max,
							;e.g., to allow +/- 60 degrees, boundary_min=300, boundary_max=60
							;therefore the range is: boundary_max + (cycle_length - boundary_min)
							(and cycle_length (> (first boundaries_tuple) (last boundaries_tuple)))
							(/
								(+ (last boundaries_tuple) (- cycle_length (first boundaries_tuple)))
								4
							)

							;else residual is simply the range: (boundary_max - boundary_min)
							(/ (- (last boundaries_tuple) (first boundaries_tuple )) 4)
						)
				))
			)
		)

		(if feature_is_ordinal
			(assign (assoc ordinal_residual (get hyperparam_map (list "featureOrdinalDeviations" feature))))
		)

		;if there is no residual for nominal features, set it to be the smallest allowed value
		(if feature_is_nominal
			(if (or (= 0 feature_residual) (= (null) feature_residual))
				(assign (assoc
					feature_residual
						(if (get !cachedFeatureMinResidualMap feature)
							(get !cachedFeatureMinResidualMap feature)

							;Using n+1, n+2, or n+.5 are all possible considerations of Laplacian smoothing to apply a Bayesian approach for
							;estimating the probability of having no incorrect predictions. We chose .5 assuming the Jeffreys prior approach
							;ensure value is not larger than 0.5
							(min 0.5 (/ 1 (+ 0.5 (call !GetNumTrainingCases))) )
						)
				))
			)
		)
	)

	;Helper method for GenerateCase that selects allowed ordinal values and then snaps to one it has been selected based on desired_conviction
	#!GenerateAllowedOrdinalFeatureValue
	(let
		(assoc
			backup_feature_value new_feature_value
			ordinal_values
				;use all ordinal values (globals) if rand is less than the conviction-scaled ordinal residual
				(if (< (rand) (/ ordinal_residual desired_conviction))
					(let
						(assoc allowed_values_map (zip (get feature_bounds_map (list feature "allowed"))))

						(if (size allowed_values_map)
							;filter globals down to allowed list only
							(let
								(assoc
									allowed_global_ordinal_values
										(filter
											(lambda (contains_index allowed_values_map (current_value)))
											(get !ordinalFeaturesValuesMap feature)
										)
								)

								;if there are no local values on the allowed list, set the local values to be the allowed list
								(if (= (size allowed_global_ordinal_values) 0)
									(get feature_bounds_map (list feature "allowed"))

									;else returned only the allowed global values
									allowed_global_ordinal_values
								)
							)

							;return all the ordinal feature values
							(get !ordinalFeaturesValuesMap feature)
						)
					)

					;else only select local ordinal values
					(let
						(assoc
							unique_local_ordinal_values
								(map
									;convert the indices to numbers since ordinals are numeric
									(lambda
										(+ (current_value))
									)
									;grab unique values only by taking the indices of the assoc of ordinal values in the local model
									(values
										(map
											(lambda (retrieve_from_entity (current_value) feature))
											local_case_ids
										)
										(true)
									)
								)
							allowed_values_map (zip (get feature_bounds_map (list feature "allowed")))
						)

						(if (size allowed_values_map)
							(seq
								(assign (assoc
									unique_local_ordinal_values
										(filter
											(lambda (contains_index allowed_values_map (current_value)))
											unique_local_ordinal_values
										)
								))

								;if there are no local values on the allowed list, set the local values to be the allowed list
								(if (= (size unique_local_ordinal_values) 0)
									(assign (assoc unique_local_ordinal_values (get feature_bounds_map (list feature "allowed"))))
								)
							)
						)

						(sort unique_local_ordinal_values)
					)
				)
		)

		(if (= 1 (size ordinal_values))
			(assign (assoc new_feature_value (first ordinal_values)))

			(if (or
					;generated value is less than min
					(< backup_feature_value (first ordinal_values))
					;generated value is more than max
					(> backup_feature_value (last ordinal_values))
				)
				(let
					(assoc
						;set the gap to be the difference between the first two values if the generated value is less than min
						gap
							(if (< backup_feature_value (first ordinal_values))
								(- (get ordinal_values 1) (first ordinal_values))
								;else set the gap to be the diff between the last  two values if the generated value is more than max
								(- (last ordinal_values) (get ordinal_values (- (size ordinal_values) 2)) )
							)
					)
					;if generated value is farther than gap/2 from either the min or max, select a random one from the distribution
					(if (or
							(< backup_feature_value (- (first ordinal_values) (/ gap 2)))
							(> backup_feature_value (+ (last ordinal_values) (/ gap 2)))
						)
						(assign (assoc new_feature_value (rand ordinal_values ) ))

						;else value is close to either min or max ordinal value, snap to the appropriate one
						(assign (assoc
							new_feature_value
								(if (< backup_feature_value (first ordinal_values))
									(first ordinal_values)

									(last ordinal_values)
								)
						))
					)
				)

				;else snap to the closest ordinal value in the ordinal_values list
				(assign (assoc
					new_feature_value
						(call !FindClosestOrdinalFeatureValue (assoc
							feature feature
							value new_feature_value
							sorted_feature_values ordinal_values
						))
				))
			)
		)
	)
)