;Contains methods related to computing and caching marginal feature statistics.
(null

	;calculate the expected value for a feature, using caching as appropriate (which is cleared when train is called)
	; for nominal features returns the feature value with the most occurences
	; for continuous features, returns the average value
	;parameters:
	; feature : the feature for which to calculate the expected value
	; output_nominal_class_counts : optional flag, if true will output the nominal feature count map instead of the max count value
	; case_ids : optional list of case ids from which to consider expected values, if not specified uses all cases in the model
	;			 when case_ids are passed in, that means the expected value is for a local model, which will never be cached
	; output_instead_of_store : flag, if set to true will output the computed expected values and counts assoc instead of storing into model
	#!CalculateFeatureExpectedValue
		(declare
			(assoc
				feature (null)
				output_nominal_class_counts (false)
				case_ids (null)
				output_instead_of_store (false)
			)

			;only use and store cached values when this method is called on the whole model (whole model wouldn't have case_ids specified)
			(declare (assoc
				use_and_store_cached_value (= (null) case_ids)
				;set the weight feature for stat queries to be null if it's not specified or the .case_weight feature isn't populated
				query_weight_feature
					(if
						(or
							;make sure that the query weight feature is null if weight feature is not valid
							(not
								;weight feature is valid if it's custom (not .case_weight) or !hasPopulatedCaseWeight
								(or !hasPopulatedCaseWeight (!= weight_feature ".case_weight"))
							)
							(= ".none" weight_feature)
						)
						(null)

						weight_feature
					)
			))

			(declare (assoc
				weight_feature_key (if (= (null) weight_feature) ".none" weight_feature)
			))

			;pull from cache if possible
			(if (and
					use_and_store_cached_value
					(contains_index !expectedValuesMap (list weight_feature_key feature))
				)
				;nominal features cache both the class_counts and the expected value
				;wheras continuous just cache the value
				(let
					(assoc
						cached_values
							(if (and output_instead_of_store output_nominal_class_counts)
								(get !expectedValuesMap (list weight_feature_key feature))

								output_nominal_class_counts
								(get !expectedValuesMap (list weight_feature_key feature "class_counts"))

								(contains_index !nominalsMap feature)
								(get !expectedValuesMap (list weight_feature_key feature "expected_value"))

								;continuous feature, return the cached expected value
								(get !expectedValuesMap (list weight_feature_key feature "expected_value"))
							)
					)

					;if cached values exist, return them, else need to compute and cache them below
					(if (!= (null) cached_values)
						(conclude cached_values)
					)
				)
			)

			;if feature is nominal, the expected value is the feature value that has the most instances for this feature
			(if (or
					output_nominal_class_counts
					(contains_index !nominalsMap feature)
				)
				(let
					;assoc of feature value -> how many times it's encountered
					(assoc
						;iterate over all feature values for this feature, storing the number of times each feature value has been encountered
						feature_value_count_map
							(compute_on_contained_entities
								(if (= (null) case_ids)
									(query_exists !internalLabelSession)
									(query_in_entity_list case_ids)
								)
								(query_value_masses feature query_weight_feature)
							)
						feature_mode (null)
						feature_null_count
							(size
								(contained_entities
									(if (= (null) case_ids)
										(query_exists !internalLabelSession)
										(query_in_entity_list case_ids)
									)
									(query_equals feature (null))
								)
							)
						mean_absolute_deviation (null)
					)

					;store count of nulls as (null) into the map
					(if feature_null_count
						(accum (assoc feature_value_count_map (assoc (null) feature_null_count)))
					)

					;store the value into cache if needed, specifically every time this method is called on the whole model,
					;we calculate and store into cache the expected value for this feature
					;note, this cache will be cleared out any time a new case is trained into or removed from the model
					(if use_and_store_cached_value
						(seq
							(assign (assoc
								feature_mode
									(compute_on_contained_entities
										(query_exists !internalLabelSession)
										(query_mode
											feature
											query_weight_feature
										)
									)
							))

							;compute ordinals M.A.D
							(if (contains_index !ordinalFeaturesSet feature)
								(let
									(assoc
										errors
											(map
												(lambda (abs (- feature_mode (current_value))) )
												;all non-null feature values
												(map
													(lambda (first (current_value)))
													(values
														;outputs a list of assoc of feature -> value, [ { feature value1 } { feature value2 } ... ]
														(compute_on_contained_entities
															(query_not_equals feature (null))
															(query_exists feature)
														)
													)
												)
											)
									)
									(assign (assoc mean_absolute_deviation (generalized_mean errors) ))
								)
							)

							(if (not output_instead_of_store)
								(assign_to_entities (assoc
									!expectedValuesMap
										(set
											!expectedValuesMap
											(list weight_feature_key feature)
											(append
												(assoc
													"class_counts" feature_value_count_map
													"expected_value" feature_mode
												)
												(if mean_absolute_deviation
													(assoc "mean_absolute_deviation" mean_absolute_deviation)
													{}
												)
											)
										)
								))
							)
						)
					)

					(if output_instead_of_store
						(conclude
							(append
								(assoc
									"class_counts" feature_value_count_map
									"expected_value" feature_mode
								)
								(if mean_absolute_deviation
									(assoc "mean_absolute_deviation" mean_absolute_deviation)
									{}
								)
							)
						)
					)

					;if the output is just the counts of each nominal class, then output that map
					(if output_nominal_class_counts
						feature_value_count_map

						;else, figure out which nominal value has the highest count and output that one as the expected
						(if (= (null) feature_mode)
							(compute_on_contained_entities
								(if (= (null) case_ids)
									(query_exists !internalLabelSession)
									(query_in_entity_list case_ids)
								)
								(query_mode
									feature
									query_weight_feature
								)
							)

							;else output the feature value with the max count that was already already calculated above
							feature_mode
						)
					)
				)

				;else feature is continuous, take the average of all the encountered values
				(let
					(assoc
						avg_feature_value
							(compute_on_contained_entities
								(if (= (null) case_ids)
									(query_exists !internalLabelSession)
									(query_in_entity_list case_ids)
								)
								(query_not_equals feature (null))
								;calculate arithmetic average
								(query_generalized_mean feature 1 query_weight_feature)
							)
						range
							(-
								(first (first
									(compute_on_contained_entities
										(if (= (null) case_ids)
											(query_exists !internalLabelSession)
											(query_in_entity_list case_ids)
										)
										(query_max feature 1)
										(query_exists feature)
									)
								))

								(first (first
									(compute_on_contained_entities
										(if (= (null) case_ids)
											(query_exists !internalLabelSession)
											(query_in_entity_list case_ids)
										)
										(query_min feature 1)
										(query_exists feature)
									)
								))
							)
					)

					;list of absolute deviations for the whole dataset
					(declare (assoc
						errors
							(map
								(lambda (abs (- avg_feature_value (current_value))) )
								;all non-null feature values
								(map
									(lambda (first (current_value)))
									(values
										;outputs a list of assoc of feature -> value, [ { feature value1 } { feature value2 } ... ]
										(compute_on_contained_entities
											(query_not_equals feature (null))
											(query_exists feature)
										)
									)
								)
							)
					))

					(if output_instead_of_store
						(conclude
							(assoc
								"expected_value" avg_feature_value
								"avg_gap" (/ range (or num_cases (call !GetNumTrainingCases)) )
								"mean_absolute_deviation" (generalized_mean errors)
							)
						)
					)

					;store the value into cache if needed
					(if use_and_store_cached_value
						(assign_to_entities (assoc
							!expectedValuesMap
								(set
									!expectedValuesMap
									(list weight_feature_key feature)
									(assoc
										"expected_value" avg_feature_value
										"avg_gap" (/ range (or num_cases (call !GetNumTrainingCases)) )
										"mean_absolute_deviation" (generalized_mean errors)
									)
								)
						))
					)

					avg_feature_value
				)
			)

		)


	;compute and return class probabilities (distribution of feature values) for a specified nominal feature.
	;note: allowed classes will be given an observation of 1, as being allowed counts as an observation
	; toward the counts used for the probabilities
	;
	;parameters:
	; feature : name of feature
	; case_ids : optional list of case ids from which to consider expected values, if not specified uses all cases in the model
	; store_global_probabilities : flag, will default to storing computed global nominal probabilities. if false, will only output them
	#!ComputeNominalClassProbabilities
		(declare
			(assoc
				feature (null)
				case_ids (null)
				nominal_class_probabilities_map (null)
				store_global_probabilities (true)
			)

			(declare (assoc
				weight_feature_key
					(if (= (null) weight_feature)
						".none"

						weight_feature
					)
			))
			;if the probabilities are not cached, compute and cache them
			;or if a local/regional model is specified via case_ids
			(if (or
					(!= (null) case_ids)
					(not (contains_index !nominalClassProbabilitiesMap (list weight_feature_key feature)))
				)
				(let
					(assoc
						;map of class -> weight (if not using case weights, will be a simple count of nominals)
						nominal_class_weight_map
							(call !CalculateFeatureExpectedValue (assoc
								feature feature
								output_nominal_class_counts (true)
								case_ids case_ids
							))
					)

					;when computing for the whole model, if there are globally allowed values for this features that haven't
					;been trained yet add them to the list of class counts with a count of '1'.
					(if (and
							(= (null) case_ids)
							(> (size (get !featureBoundsMap (list feature "allowed"))) (size nominal_class_weight_map))
						)
						(let
							(assoc
								;create a map of all allowed classes, given an observation of 1
								allowed_classes_map
									(zip
										(get !featureBoundsMap (list feature "allowed"))
										1
									)
							)

							;add the allowed observation to nominal_class_weight_map
							(assign (assoc
								nominal_class_weight_map
									(map
										(lambda (+ (or (first (current_value))) (or (last (current_value)))) )
										allowed_classes_map
										nominal_class_weight_map
									)
							))
						)
					)

					;output the normalized counts of each class by converting them to probabilities
					(assign (assoc
						nominal_class_probabilities_map (normalize nominal_class_weight_map)
					))

					;only cache probabilities for the global model, meaning no local/regional case_ids were specified
					(if (and (= (null) case_ids) store_global_probabilities)
						(assign_to_entities (assoc
							!nominalClassProbabilitiesMap
								(set
									!nominalClassProbabilitiesMap
									(list weight_feature_key feature)
									nominal_class_probabilities_map
								)
						))
					)
				)
			)

			;output probabilities for the specified feature
			(if (and (= (null) case_ids) store_global_probabilities)
				(get !nominalClassProbabilitiesMap (list weight_feature_key feature))
				;else
				nominal_class_probabilities_map
			)
		)


	;compute and cache all the expected values for all the features
	; parameters:
	; features: list of features
	; use_case_weights: flag, if true will also compute cache values using the specified weight_feature
	#!CacheExpectedValuesAndProbabilities
		(declare
			(assoc
				features (list)
				use_case_weights (false)
			)

			(declare (assoc num_cases (call !GetNumTrainingCases)))

			(accum_to_entities (assoc
				!expectedValuesMap
					(append
						(assoc
							".none"
								||(map
									(lambda (let
										(assoc feature (current_index 1))
										(call !CalculateFeatureExpectedValue (assoc
											feature feature
											weight_feature ".none"
											output_instead_of_store (true)
											;force all categoricals to compute counts
											output_nominal_class_counts (contains_index !categoricalFeaturesSet feature)
										))
									))
									;iterate over all unique provided context and action features
									(zip features)
								)
						)
						(if use_case_weights
							(associate
								weight_feature
									||(map
										(lambda (let
											(assoc feature (current_index 1))
											(call !CalculateFeatureExpectedValue (assoc
												feature feature
												weight_feature weight_feature
												output_instead_of_store (true)
												;force all categoricals to compute counts
												output_nominal_class_counts (contains_index !categoricalFeaturesSet feature)
											))
										))
										;iterate over all unique provided context and action features
										(zip features)
									)
							)
							{}
						)
					)
				!nominalClassProbabilitiesMap
					(append
						(assoc
							".none"
								||(map
									(lambda (let
										(assoc feature (current_index 1))
										(call !ComputeNominalClassProbabilities (assoc
											feature feature
											weight_feature ".none"
											store_global_probabilities (false)
										))
									))

									;iterate over all unique provided context and action features that are categorical
									(zip
										(filter
											(lambda (contains_index !categoricalFeaturesSet (current_value)))
											features
										)
									)
								)
						)
						(if use_case_weights
							(associate
								weight_feature
									||(map
										(lambda (let
											(assoc feature (current_index 1))
											(call !ComputeNominalClassProbabilities (assoc
												feature feature
												weight_feature weight_feature
												store_global_probabilities (false)
											))

										))

										;iterate over all unique provided context and action features that are categorical
										(zip
											(filter
												(lambda (contains_index !categoricalFeaturesSet (current_value)))
												features
											)
										)
									)
							)
							{}
						)
					)
				;process all features, caching their min, max values as well as how many nulls there are and the ratio of cases / non-nulls
				!featureNullRatiosMap
					(map
						(lambda (let
							(assoc
								feature (current_index 1)
							)

							(declare
								(if (contains_index !nominalsMap feature)
									;nominal features have max uncertainty of 1
									(assoc
										min 0
										max 1
									)

									;cyclic features get max num_values / 2
									(contains_index !cyclicFeaturesMap feature)
									(assoc
										min 0
										max (/ (get !cyclicFeaturesMap feature) 2)
									)

									;else continuous, use max value - min value
									(assoc
										max
											(if (!= (null) (get !featureBoundsMap (list feature "max")) )
												(if (contains_index !featureDateTimeMap feature)
													(get !featureBoundsMap (list feature "epoch_max_value"))
													(get !featureBoundsMap (list feature "max"))
												)

												;else feature bounds map doesn't have max, use cached marginal stats
												(get !featureMarginalStatsMap (list weight_feature feature "max"))
											)
										min
											(if (!= (null) (get !featureBoundsMap (list feature "min")) )
												(if (contains_index !featureDateTimeMap feature)
													(get !featureBoundsMap (list feature "epoch_min_value"))
													(get !featureBoundsMap (list feature "min"))
												)

												;else feature bounds map doesn't have min, use cached marginal stats
												(get !featureMarginalStatsMap (list weight_feature feature "min"))
											)
									)
								)
							)

							(declare (assoc
								num_nulls
									(size (contained_entities (query_equals feature (null)) ))
							))

							(assoc
								;true means there are nulls, false means no nulls, null means unknown whether there are nulls
								"has_nulls" (> num_nulls 0)
								"null_residual"
									(if (!= (null) (- max min))
										(- max min)
										0
									)
								"non_null_ratio" (/ num_cases (- num_cases num_nulls) )
							)
						))
						(zip features)
					)
				!featureMarginalStatsMap
					(if (= (assoc) !featureMarginalStatsMap)
						(associate
							(if weight_feature weight_feature ".none")
							(call !CalculateMarginalStats (assoc store_stats (false)) )
						)

						;else don't accumulate anything because marginal stats are already stored
						{}
					)
				!cachedFeatureMaxGapMap
					(map
						(lambda
							(compute_on_contained_entities
								(query_max_difference (current_index) (get !cyclicFeaturesMap (current_index)) )
							)
						)
						;only for continuous features
						(remove (zip features) (indices !nominalsMap))
					)
			))

			;cache counts of ordinal features
			(if (and (> (size !ordinalFeaturesSet) 0) !staleOrdinalValuesCount)
				(call !UpdateOrdinalFeaturesMap)
			)
		)

	;updates has_nulls in !featureNullRatiosMap
	;parameters:
	; features: list of features for which to update count of nulls
	#!UpdateHasNulls
		(accum_to_entities (assoc
			!featureNullRatiosMap
				(map
					(lambda (let
						(assoc feature (current_index 1))
						(set
							;if it hasn't been computed yet, create an assoc of has_nulls -> true/false  for the feature
							(or (get !featureNullRatiosMap feature) (assoc))
							"has_nulls"
							(>
								(size (contained_entities (query_equals feature (null)) ))
								0
							)
						)
					))
					(zip features)
				)
		))


	;return an assoc of feature -> the smallest gap value for the feature
	;parameters:
	; features: list of features for which to return gap values
	#!CalculateSmallestFeatureGap
		(declare
			(assoc features (list) )

			(map
				(lambda
					(let
						(assoc
							smallest_gap
								;gap is always 1 for nominals
								(if (contains_index !nominalsMap (current_index 1))
									1

									;else compute the gap
									(compute_on_contained_entities
										(query_min_difference (current_index) (get !cyclicFeaturesMap (current_index)) )
									)
								)
						)

						;gap / 2, unless it's infinity in which case set it to 0.5
						;smallest_gap of infinity that means all the feature values are exactly the same,  for nominals and most normal numbers,
						;the gap is 1, therefore 0.5 is a reasonable gap/2 value
						(if (= .infinity smallest_gap )
							0.5

							smallest_gap
						)
					)
				)
				(zip features)
			)
		)

	;outputs all marginal stats (min, max, median, mean, mode, count, uniques, mean_absdev, variance, stddev, skew, kurtosis, entropy)
	;for all features in the format of feature -> assoc stat -> value. The marginal stats can be computed for a subset of the data using condition, precision, and num_cases
	;{idempotent (true)}
	#get_marginal_stats
	(declare
		;returns {
		; 	type "assoc"
		; 	description "Map of feature name to map of marginal statistic names to values."
		; 	additional_indices {
		; 		type "assoc"
		; 		description "Map of marginal statistic names to their values."
		;		additional_indices (false)
		; 		indices {
		; 			"min" ["number" "null"]
		; 			"max" ["number" "null"]
		; 			"median" ["number" "null"]
		; 			"mean" ["number" "null"]
		; 			"mode" ["any" "null"]
		; 			"count" ["number" "null"]
		; 			"uniques" ["number" "null"]
		; 			"mean_absdev" ["number" "null"]
		; 			"variance" ["number" "null"]
		; 			"stddev" ["number" "null"]
		; 			"skew" ["number" "null"]
		; 			"kurtosis" ["number" "null"]
		; 			"entropy" ["number" "null"]
		; 			"percentile_25" ["number" "null"]
		; 			"percentile_75" ["number" "null"]
		; 		}
		; 	}
		; }
		(assoc
			;{type "string"}
			;name of case weight feature
			weight_feature (null)
			;{ref "Condition"}
			;assoc of feature->value(s)
			;		no value = must have feature
			;   	- for continuous or numeric ordinal features:
			;			one value = must equal exactly the value or be close to it for fuzzy match
			;			two values = inclusive between
			;   	- for nominal or string ordinal features:
			;			n values = must match any of these values exactly
			condition (null)
			;{ref "Precision"}
			;default is 'exact', used only with 'condition' parameter, will find exact matches if 'exact' and similar cases if 'similar'.
			precision "exact"
			;{type "number"}
			;limit on the number of cases to use in calculating conditional prediction stats; If set to zero there will be no limit.
			;	If null, will be set to k if precision is "similar" or no limit if precision is "exact". default is null
			num_cases (null)
		)
		(call !ValidateParameters)
		(call !ValidateCondition)

		(if (= (null) weight_feature)
			(assign (assoc weight_feature ".none"))
		)

		(call !Return (assoc
			payload
				(if (= (null) condition)
					(seq
						;if marginal stats haven't been computed yet, compute them here
						(if (not (contains_index !featureMarginalStatsMap weight_feature))
							(call !CalculateMarginalStats (assoc
								weight_feature (if (!= ".none" weight_feature) weight_feature)
							))
						)

						;get the stats for the specified weight_feature
						(get !featureMarginalStatsMap weight_feature)
					)

					;else we have a condition
					(let
						(assoc
							case_ids
								(call !GetCasesByCondition (assoc
									condition condition
									num_cases num_cases
									precision precision
								))
						)

						(call !CalculateMarginalStats (assoc
							weight_feature weight_feature
							filtering_queries (list (query_in_entity_list case_ids))
						))
					)
				)
		))
	)


	;calculates and caches all marginal stats (min, max, median, mean, mode, count, uniques,  mean_absdev, variance, stddev, skew, kurtosis, entropy)
	;for all features
	;
	;parameters:
	; weight_feature: optional, name of case weight feature
	; store_stats: optional, flag, default to true. when false will output stats without caching them
	#!CalculateMarginalStats
		(declare
			(assoc
				weight_feature (null)
				filtering_queries (list)
				store_stats (true)
			)

			(declare (assoc
				stats
					||(map
						(lambda (let
							(assoc
								feature (current_index 1)

								min (null)
								max (null)
								mean (null)
								median (null)
								percentile_25 (null)
								percentile_75 (null)
								mode (null)
								count 0
								uniques 0
								mean_absdev (null)
								variance (null)
								stddev (null)
								skew (null)
								kurtosis (null)
								entropy (null)
								feature_is_continuous (not (contains_index !nominalsMap (current_index 1)))
							)

							(if feature_is_continuous
								(seq
									(assign (assoc
										min
											(retrieve_from_entity
												(first (contained_entities
													filtering_queries
													(query_min feature 1)
												))
												feature
											)
										max
											(retrieve_from_entity
												(first (contained_entities
													filtering_queries
													(query_max feature 1)
												))
												feature
											)
										mean
											(compute_on_contained_entities
												filtering_queries
												(query_not_equals feature (null))
												;calculate arithmetic average
												(query_generalized_mean feature 1 weight_feature)
											)
										median
											(compute_on_contained_entities filtering_queries (query_quantile feature 0.5 weight_feature))
										percentile_25
											(compute_on_contained_entities filtering_queries (query_quantile feature 0.25 weight_feature))
										percentile_75
											(compute_on_contained_entities filtering_queries (query_quantile feature 0.75 weight_feature))
									))

									(assign (assoc
										mean_absdev
											(compute_on_contained_entities
												filtering_queries
												(query_not_equals feature (null))
												(query_generalized_mean feature 1 weight_feature mean (true) (true))
											)
										variance
											(compute_on_contained_entities
												filtering_queries
												(query_not_equals feature (null))
												(query_generalized_mean feature 2 weight_feature mean (true))
											)
									))

									(assign (assoc
										stddev (sqrt variance)
										skew
											(/
												(compute_on_contained_entities
													filtering_queries
													(query_not_equals feature (null))
													(query_generalized_mean feature 3 weight_feature mean (true))
												)
												(pow variance 1.5)
											)
										kurtosis
											(-
												(/
													(compute_on_contained_entities
														filtering_queries
														(query_not_equals feature (null))
														(query_generalized_mean feature 4 weight_feature mean (true))
													)
													(pow variance 2)
												)
												3
											)
									))
								)
							)

							(assign (assoc
								mode
									(compute_on_contained_entities
										filtering_queries
										(query_not_equals feature (null))
										(query_mode feature weight_feature)
									)
								count
									(size
										(contained_entities
											filtering_queries
											(query_not_equals feature (null))
										)
									)
								uniques
									(size
										(remove
											(contained_entities
												filtering_queries
												(query_value_masses feature (null))
											)
											[(null)]
										)
									)
							))

							(if (not feature_is_continuous)
								(assign (assoc
									entropy
										(let
											(assoc
												class_counts_map
													(remove
														(compute_on_contained_entities
															filtering_queries
															(query_value_masses feature weight_feature)
														)
														[(null)]
													)
											)
											(entropy
												(normalize (values class_counts_map) )
											)
										)
								))
							)

							;output assoc of marginal stats for the feature
							(assoc
								min min
								max max
								mean mean
								median median
								percentile_25 percentile_25
								percentile_75 percentile_75
								mode mode
								count count
								uniques uniques
								mean_absdev mean_absdev
								variance variance
								stddev stddev
								skew skew
								kurtosis kurtosis
								entropy entropy
							)
						))
						(zip !trainedFeatures)
					)
			))

			(if (= (null) weight_feature)
				(assign (assoc weight_feature ".none"))
			)

			(if (and store_stats (= (list) filtering_queries))
				(accum_to_entities (assoc
					!featureMarginalStatsMap (associate weight_feature stats)
				))

				;else this was conditioned, return the marginal stats
				stats
			)
		)


	;outputs all unique values and the count of each value given the trained data and possible conditions
	#get_value_counts
	(declare
		; returns {
		; 	type "assoc"
		; 	description "Object containing the response of get_value_counts"
		; 	indices {
		; 		"counts" {
		; 			type "assoc"
		; 			additional_indices {
		; 				type "assoc"
		; 				indices {
		; 					"values" {type "list" values "list"}
		; 					"remaining" {type "number"}
		; 				}
		; 			}
		; 		}
		; 	}
		; }
		(assoc
			;{type "list" values "string" required (true) min_size 1}
			;The features to compute and return value counts for.
			features (null)
			;{ref "Condition"}
			;A map of conditions for each feature that is used to select cases for which the value counts
			;will be computed and output.
			condition (null)
			;{ref "Precision"}
			;default is 'exact', used only with 'condition' parameter, will find exact matches if 'exact' and similar cases if 'similar'.
			precision "exact"
			;{type "number" min 0}
			;The minimum number of cases must hold a value for that value to be returned. Any values with frequency lesser than the
			;specified minimum count have their frequencies added together and returned under the "remaining" key for the feature.
			minimum_count_threshold 0
			;{type "string"}
			;name of case weight feature
			weight_feature (null)
		)
		(call !ValidateParameters)

		(if (= (null) weight_feature)
			(assign (assoc
				weight_feature
					(if !autoAblationEnabled
						!autoAblationWeightFeature
						".none"
					)
			))
		)

		(declare (assoc
			condition_query_list
				(if (size condition)
					(call !GetQueryByCondition (assoc
						condition condition
						precision precision
					))
				)
		))

		(declare (assoc
			output_map
				(map
					(lambda
						(let
							(assoc
								feature (current_index 1)
							)

							(declare (assoc
								value_counts_map
									(compute_on_contained_entities
										(query_exists !internalLabelSession)
										condition_query_list
										(query_value_masses feature weight_feature)
									)
							))

							(if minimum_count_threshold
								(seq
									;if minimum defined, filter down the insignificant feature values to sum together and remove
									;those values from the map of value counts to be returned
									(declare (assoc
										insignificant_value_counts_map
											(filter
												(lambda
													(< (current_value) minimum_count_threshold)
												)
												value_counts_map
											)
									))
									(assign (assoc
										value_counts_map (remove value_counts_map (indices insignificant_value_counts_map))
									))
								)
							)


							(append
								(assoc
									"values"
										(values (map
											(lambda
												[(current_index 1) (current_value 1)]
											)
											value_counts_map
										))
								)
								(if minimum_count_threshold
									(assoc
										"remaining"
											(if (size insignificant_value_counts_map)
												(apply "+" (values insignificant_value_counts_map))
												0
											)
									)
									(assoc)
								)
							)
						)
					)
					(zip features)
				)
		))

		(call !Return (assoc
			payload (assoc "counts" output_map)
		))
	)
)