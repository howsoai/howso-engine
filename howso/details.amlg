;Contains methods for calculating details and explanations output during react flow.
(null

	;Returns details and explanations for a given reaction for the specified audit data flags. Details for actions are applicable only for the
	;first action feature.
	;
	;	Local and regional models are used to determine details:
	;		Local model -  only the most similar cases used to directly determine the prediction value, used to compute affects of cases directly
	;						responsible for the predicted output.
	;		Regional model - the most similar cases to the prediction, represented by the maximum of either 30 or the local model size. Used in
	;						situations where relying on a small local model may produce noisy results.

	; details: see the parameter description of 'details' on #react
	; provided_details: optional assoc of details that have already been pre-computed and don't need to be computed here
	; action_features: list of action features
	; action_values: list of values for each action feature
	; context_features: list of context features
	; context_values: current values of the world state
	; extra_features: list of additional features to return with audit data
	; num_features_returned: if return audit data, will return up to this many specified features in the details
		; ignore_case: case_id, if set will ignore the this case during details calculations, however if details assoc has ignore_case as a key in it, its value will override this parameter
	; force_targetless: flag, if set to true forces use of targetless hyperparameters if available
	;returns:
	; an assoc with keys:
	;	"action_features"
	;  	"action_values"
	;  	"context_values"
	; and the keys for any requested detail with their appropriate values. See the ReactResponse type for information on each requestable detail.
	#!RetrieveAuditData
	(declare
		(assoc
			provided_details (assoc)
			details	(assoc)
			action_values (list)
			context_features (list)
			context_values (list)
			action_features (list)
			extra_features (list)
			num_features_returned (null)
			ignore_case (null)
			force_targetless (false)
			hyperparam_map (null)
		)

		;override the ignore_case parameter if it's specified in the details instead
		(if (contains_index details "ignore_case")
			(assign (assoc ignore_case (get details "ignore_case" )))
		)

		(if (contains_index details "features")
			(declare (assoc
				details_features (get details "features")
				;need a subset of details features that does not contain action features, for targeted details  (contributions, mda, etc)
				details_context_features
					(filter
						(lambda (not (contains_value action_features (current_value))) )
						(get details "features")
					)
			))
		)

		(declare (assoc
			has_rounded_features !hasRoundedFeatures
			has_datetime_features !hasDateTimeFeatures
			dataset_size (call !GetNumTrainingCases)
			selected_prediction_stats (get details "selected_prediction_stats")
			compute_all_statistics (false)
		))

		(if (= (null) hyperparam_map)
			(assign (assoc
				hyperparam_map
					(call !GetHyperparameters (assoc
						feature (last action_features)
						context_features context_features
						weight_feature weight_feature
					))
			))
		)

		;must be an empty list if not specified as to not break queries
		(if (= (null) filtering_queries)
			(assign (assoc filtering_queries (list)))
		)
		(if (and case_indices preserve_feature_values)
			(seq
				(assign (assoc
					preserve_case_id
						(call !GetCaseId (assoc
							session (first case_indices)
							session_training_index (last case_indices)
						))
					context_values_map (zip context_features context_values)
				))
				(call !PrepareContextValues)
			)
		)

		(declare (assoc
			;make a combined features list
			features (values (append context_features action_features) (true))
			case_values_map
				(zip
					(append context_features action_features)
					(append
						context_values
						;use original case values instead of predicted if computing for an existing case
						(if ignore_case
							(retrieve_from_entity ignore_case action_features)
							action_values
						)
					)
				)
			;output audit object
			output
				(append
					provided_details
					(assoc
						;decode nominals if necessary
						"action_values"
							(if (and !hasEncodedFeatures (not skip_decoding))
								;decode nominal features
								(call !ConvertToOutput (assoc
									features action_features
									feature_values action_values
									has_rounded_features has_rounded_features
									has_datetime_features has_datetime_features
								))

								;else round if needed
								has_rounded_features
								(call !RoundContinuousFeatures (assoc
									features action_features
									feature_values action_values
								))

								;else just return the values
								action_values
							)
					)
					(if return_context_values
						(assoc
							"context_values"
								(call !ConvertToOutput (assoc
									features output_context_features
									feature_values (unzip (zip context_features context_values) output_context_features)
								))
						)
						(assoc)
					)
				)

			feature_deviations (get hyperparam_map "featureDeviations")
			feature_weights
				;only use featureMdaMap weights if there are action_features provided
				(if (and (size (get hyperparam_map "featureMdaMap")) (size action_features))
					(get hyperparam_map "featureMdaMap")
					(get hyperparam_map "featureWeights")
				)
			k_parameter (get hyperparam_map "k")
			p_parameter (get hyperparam_map "p")
			dt_parameter (get hyperparam_map "dt")
			query_feature_attributes_map (get hyperparam_map "featureDomainAttributes")
			;get the min k if using dynamic k
			k_parameter_value (if (~ 0 (get hyperparam_map "k")) (get hyperparam_map "k") (get hyperparam_map ["k" 1]) )
			local_cases_tuple (null)
			react_feature_deviations (null)
		))

		(if (get hyperparam_map "subtraineeName")
			(call !UseDynamicDeviationsAndWeights (assoc
				context_features features
				context_values (unzip case_values_map features)
				hyperparam_map hyperparam_map
			))
		)

		(if (get details "derivation_parameters")
			(accum (assoc
				output
					(assoc
						"derivation_parameters"
							(assoc
								"feature_weights"
									(or
										feature_weights
										(zip (append context_features action_features) 1)
									)
								"feature_deviations"
									(or
										feature_deviations
										(zip (append context_features action_features) 0)
									)
								"targetless" (= "targetless" (get hyperparam_map (list "paramPath" 0)))
								"k" k_parameter
								"p" p_parameter
								"distance_transform" dt_parameter
								"nominal_class_counts" !nominalsMap
							)
					)
			))
		)

		(if (or
				(get details "influential_cases")
				(get details "hypothetical_values")
				(get details "influential_cases_raw_weights")
				(get details "influential_cases_familiarity_convictions")
			)
			(call !ComputeInfluentialCases)
		)

		(if (get details "hypothetical_values")
			(call !ComputeHypotheticalValues)
		)

		(declare (assoc
			most_similar_cases_parameter
				(if (> (get details "num_most_similar_cases") 0)
					(get details "num_most_similar_cases")

					(get details "most_similar_cases")
				)
		))
		(if
			(and (!= (null) most_similar_cases_parameter) (!= (false) most_similar_cases_parameter))
			(call !ComputeMostSimilarCases)
		)

		(if (or
				(get details "feature_full_residuals_for_case")
				(get details "feature_robust_residuals_for_case")
				(get details "feature_full_residual_convictions_for_case")
			)
			(call !CalculateResidualsForCase (assoc
				context_features features
				action_features (or details_features features)
				case_value_map case_values_map
				ignore_case ignore_case
			))
		)

		(if (get details "similarity_conviction")
			(accum (assoc
				output
					(assoc
						"similarity_conviction"
							(get
								(call !SimilarityConviction (assoc
									features features
									feature_values (unzip case_values_map features)
									filtering_queries filtering_queries
									use_case_weights use_case_weights
									weight_feature weight_feature
									distance_contribution_feature (get !storedDistanceContributionsFeatureMap (apply "concat" (sort features)))
								))
								"similarity_conviction"
							)
					)
			))
		)

		(declare (assoc
			boundary_cases_parameter
				(if (> (get details "num_boundary_cases") 0)
					(get details "num_boundary_cases")

					(get details "boundary_cases")
				)
		))
		(if (and (!= (null) boundary_cases_parameter) (!= (false) boundary_cases_parameter))
			(call !ComputeBoundaryCases)
		)

		(if (get details "boundary_value_context_features")
			(call !ComputeBoundaryValues)
		)

		;a dict of feature -> dict of local_min/local_max and input_case_value for features whose context values are outside the locals' min-max
		(if (get details "outlying_feature_values")
			(call !ComputeOutlyingFeatureValues)
		)

		(if (get details "feature_robust_accuracy_contributions" )
			(call !ComputeFeatureAC (assoc robust (true)))
		)

		(if (get details "feature_full_accuracy_contributions" )
			(call !ComputeFeatureAC (assoc robust (false)))
		)

		(if (get details "feature_robust_accuracy_contributions_ex_post")
			(call !ComputeFeatureACExPost (assoc robust (true)))
		)

		(if (get details "feature_full_accuracy_contributions_ex_post")
			(call !ComputeFeatureACExPost (assoc robust (false)))
		)

		(if (get details "feature_robust_prediction_contributions")
			(if (>= dataset_size 2)
				(call !ComputeFeatureContributions (assoc robust (true)))
				;can't compute contributions if model is too small
				(accum (assoc output (assoc "feature_robust_prediction_contributions" (zip context_features 0)) ))
			)
		)

		(if (get details "feature_full_prediction_contributions")
			(if (>= dataset_size 2)
				(call !ComputeFeatureContributions (assoc robust (false)))
				;can't compute contributions if model is too small
				(accum (assoc output (assoc "feature_full_prediction_contributions" (zip context_features 0)) ))
			)
		)

		(if (get details "feature_robust_prediction_contributions_for_case")
			(if (>= dataset_size 2)
				(call !ComputeCaseFeatureContributions (assoc robust (true)))
				;can't compute contributions if model is too small
				(accum (assoc output (assoc "feature_robust_prediction_contributions_for_case" (zip context_features 0)) ))
			)
		)

		(if (get details "feature_full_prediction_contributions_for_case")
			(if (>= dataset_size 2)
				(call !ComputeCaseFeatureContributions (assoc robust (false)))
				;can't compute contributions if model is too small
				(accum (assoc output (assoc "feature_full_prediction_contributions_for_case" (zip context_features 0)) ))
			)
		)

		(if (get details "case_robust_prediction_contributions")
			(call !ComputeCaseContributionsRobust)
		)

		(if (get details "case_full_prediction_contributions")
			(call !ComputeCaseContributionsFull)
		)
		(if (get details "case_robust_accuracy_contributions" )
			(call !ComputeCaseAccuracyContributions (assoc robust (true)))
		)

		(if (get details "case_full_accuracy_contributions" )
			(call !ComputeCaseAccuracyContributions (assoc robust (false)))
		)

		;update the 'selected_prediction_stats' if none is provided, or 'all' is provided. If prediction_stats is not selected, empties the list
		(if (get details "prediction_stats")
			(seq
				(assign (assoc
					selected_prediction_stats
						(call !ProcessSelectedPredictionStats (assoc selected_prediction_stats selected_prediction_stats))
				))

				;compute_all_statistics is defaulted to (false), sets it to (true) for prediction stats that are not exclusively 'mae'
				(if
					(not (= selected_prediction_stats (list "mae")) )
					(assign (assoc compute_all_statistics (true)))
				)
			)
			;else clear the selected_prediction_stats list
			(assign (assoc selected_prediction_stats (null)))
		)

		(if (or
				(get details "feature_deviations")
				(get details "relevant_values")
			)
			(call !ComputeReactFeatureDeviations)
		)

		(if (or (get details "prediction_stats") (get details "feature_full_residuals"))
			; if computing all statistics, default is to store values. Turns off
			; storing values for local metrics.
			(call !ComputeReactFeatureResiduals (assoc
				compute_all_statistics compute_all_statistics
				robust_residuals (false)
			))
		)

		(if (get details "feature_robust_residuals")
			; if computing all statistics, default is to store values. Turns off
			; storing values for local metrics.
			(call !ComputeReactFeatureResiduals (assoc
				compute_all_statistics (false)
				robust_residuals (true)
			))
		)

		(if (get details "observational_errors")
			(accum (assoc output (assoc "observational_errors" !userSpecifiedFeatureErrorsMap)))
		)

		(if (get details "categorical_action_probabilities")
			(call !ComputeCategoricalActionProbabilities)
		)

		(if (get details "relevant_values")
			(call !ComputeRelevantValues)
		)

		(declare (assoc
			most_similar_case_indices_parameter
				;use the manually specified number of most similar case indices when computing distance ratios
				;but limit it to between 0 and 1000
				(if (!= (get details "num_most_similar_case_indices") (null))
					(max (min (get details "num_most_similar_case_indices") 1000) 0)

					; Else default to 5
					5
				)
		))

		(if (get details "distance_ratio")
			(call !ComputeDistanceRatio)
		)

		(if (get details "distance_contribution")
			(accum (assoc
				output
					(assoc
						"distance_contribution"
							(first
								(compute_on_contained_entities
									filtering_queries
									(query_distance_contributions
										k_parameter
										features
										[(unzip case_values_map features)]
										p_parameter
										feature_weights
										!queryDistanceTypeMap
										query_feature_attributes_map
										feature_deviations
										(null)
										(if (= dt_parameter "surprisal_to_prob") "surprisal" dt_parameter )
										(if use_case_weights weight_feature (null))
										(rand)
										(null) ;radius
										!numericalPrecision
									)
								)
							)
					)
			))
		)

		;return the output audit data
		output
	)

	;Helper method to compute and add to output hypothetical values
	#!ComputeHypotheticalValues
	(let
		(assoc
			hypothetical_map (get details "hypothetical_values")
			;list of all the summed up action values, one for each action feature
			summed_action_values (list)
			;result map of acton feature -> average hypothetical value
			hypothetical_action_values_map (assoc)
			;map of nominal action feature -> nominal value -> count
			nominal_count_map (assoc)
		)

		(declare (assoc
			reacts
				(map
					(lambda (let
						(assoc
							hypothetical_context_values
								(unzip
									(append (current_value 1) hypothetical_map)
									context_features
								)
							session_index_tuple
								(list (get (current_value 2) !internalLabelSession) (get (current_value 2) !internalLabelSessionTrainingIndex) )
						)

						(call !ReactDiscriminative (assoc
							context_features context_features
							context_values hypothetical_context_values
							action_features action_features
							case_indices session_index_tuple
							return_action_values_only (true)
							;return raw numerical values, enabling easy averaging of date values
							skip_decoding (true)
							leave_case_out (true)
						))
					))
					(get output "influential_cases")
				)
			mixable_action_features
				(filter
					(lambda (!= "string" (current_value)))
					(indices (keep !editDistanceFeatureTypesMap action_features))
				)
		))

		(declare (assoc
			non_edit_distance_action_features
				(filter
					(lambda (not (contains_value mixable_action_features (current_value))))
					action_features
				)
		))

		;reacts will be a list of list of action values.  e.g., (list (list 1 10) (list 2 20) )
		;find the average for each action feature by summing up (via reduce) all the action values per action feature
		(assign (assoc
			summed_action_values
				(reduce
					(lambda (let
						(assoc
							reduced (previous_result 1)
							current (current_value 1)
							index (current_index 1)
						)

						(map
							(lambda
								;nominal features need to count each individual nominal value for each action feature
								(if (contains_index !nominalsMap (current_value))
									(let
										(assoc
											feature (current_value 1)
											;convert numeric enum value into a sting (eg 110 -> "110") so it can be used as a lookup key
											nominal_value (unparse (get current (current_index 1)))
										)
										;the first react to should accumulate the 'reduced' value
										(if (= 1 index)
											(accum
												"nominal_count_map"
												(list feature (unparse (get reduced (current_index 1))) )
												1
											)
										)

										;increase the count for this feature for this nominal_value by 1
										(accum "nominal_count_map" (list feature nominal_value) 1)

										;output 0, it'll be overwritten by the appropriate nominal value determined from counts below
										0
									)

									;else continuous, simply add
									(+ (get reduced (current_index)) (get current (current_index)))
								)
							)
							non_edit_distance_action_features
						)
					))
					reacts
				)
		))

		;take the average of the summed values
		(assign (assoc
			hypothetical_action_values_map
				(zip
					non_edit_distance_action_features
					(map
						(lambda (/ (current_value) (size reacts)))
						summed_action_values
					)
				)
		))

		;for mixable edit distance features, mix all the react values using equal weights
		(if (size mixable_action_features)
			(let
				(assoc
					;weights are evenly distributed among all the reacts so they average out
					weights (map (/ 1 (size reacts)) reacts)
				)

				(accum (assoc
					hypothetical_action_values_map
						(zip
							mixable_action_features
							(map
								(lambda (let
									(assoc feature_index (current_index 1) )
									(declare (assoc
										neighbor_feature_values
											(map
												(lambda (get (current_value) feature_index))
												reacts
											)
									))

									(call !CombineCode (assoc
										sources neighbor_feature_values
										weights weights
									))

								))
								mixable_action_features
							)
						)
				))
			)
		)

		;for each nominal feature, set its value to be the one with the highest count
		(map
			(lambda
				(if (contains_index !nominalsMap (current_value))
					(let
						(assoc
							feature (current_value 1)
							nominal_value_count_map (get nominal_count_map (current_value 1))
							output_value (null)
						)

						(assign (assoc
							output_value
								(first
									(sort
										(lambda (> (get nominal_value_count_map (current_value 1)) (get nominal_value_count_map (current_value))))
										(indices nominal_value_count_map)
									)
								)
						))

						;indices of a map are all strings, so convert them to correct types if necessary
						(assign "hypothetical_action_values_map" (list feature)
							;convert the values to numbers if the feature is numeric, (null)'s will be unaffected
							(if (contains_index !numericNominalFeaturesMap feature)
								(+ output_value)

								(contains_index !ordinalNumericFeaturesSet feature)
								(+ output_value)

								output_value
							)
						)
					)
				)
			)
			action_features
		)

		;add to output, converting to string nominals/dates/rounding as necessary
		(accum (assoc
			output
				(assoc
					"hypothetical_values"
						(if (and (not skip_decoding) !hasEncodedFeatures)
							(zip
								action_features
								(call !ConvertToOutput (assoc
									features action_features
									feature_values (unzip hypothetical_action_values_map action_features)
								))
							)

							;else just output the the assoc as-is
							hypothetical_action_values_map
						)
				)
		))

		;if influential_cases were not part of the user request, remove them from the details output
		(if (not (get details "influential_cases"))
			(assign (assoc output (remove output "influential_cases")))
		)
	)

	;Helper method to compute and add to output outlying feature values
	#!ComputeOutlyingFeatureValues
	(let
		(assoc
			;assoc of this react case
			react_case (zip features (append context_values action_values))

			local_cases
				(if (!= (null) cached_candidate_cases_map)
					(indices cached_candidate_cases_map)

					(contained_entities
						filtering_queries
						(query_nearest_generalized_distance
							k_parameter
							context_features
							context_values
							p_parameter
							feature_weights
							!queryDistanceTypeMap
							query_feature_attributes_map
							feature_deviations
							(null)
							dt_parameter
							(if valid_weight_feature weight_feature (null))
							;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
							"fixed rand seed"
							(null) ;radius
							!numericalPrecision
						)
					)
				)
		)

		(assign (assoc
			local_cases
				(map
					(lambda (retrieve_from_entity (current_value) (zip features)) )
					local_cases
				)
		))

		;for the labeled react case, create a map of feature names and their values for all values that are outside min/max boundaries of
		;values in the local model
		;react case values that are beyond the min/max values of the local model's cases for each feature
		(declare (assoc
			local_outlying_feature_values
				(map
					(lambda (let
						(assoc feature (current_index 1))

						;store the values for this feature for all the local model cases
						(declare (assoc
							local_feature_values
								(map (lambda (get (current_value) feature)) local_cases)
						))

						(declare (assoc
							local_min (apply "min" local_feature_values)
							local_max (apply "max" local_feature_values)
							;convert to number just in case
							react_value (+ (get react_case feature))
						))

						;if the feature value from the react case is outside the min/max values of nearby cases,
						;store this feature as an outlier
						(if (or
								(< react_value local_min)
								(> react_value local_max)
							)
							(if (< react_value local_min )
								(assoc "input_case_value" react_value "local_min" local_min)

								(assoc "input_case_value" react_value "local_max" local_max)
							)

							;else store null
							(null)
						)
					))
					(zip context_features)
				)
		))

		;filter out any feature values that are null
		(assign (assoc local_outlying_feature_values (filter local_outlying_feature_values)))

		(accum (assoc
			output
				(assoc "outlying_feature_values" local_outlying_feature_values)
		))
	)

	;Helper method to compute and add to output categorical action probabilities
	#!ComputeCategoricalActionProbabilities
	(seq
		;since categorical_action_probabilities_map may contain encoded nominal values -> their probability, we want to convert all the
		;keys in that assoc into their decoded (string) values

		;decode any nominal cotegorical values into their readable strings for output
		(assign (assoc
			categorical_action_probabilities_map
				(map
					(lambda
						;if it's a nominal feature, convert the keys of the assoc if needed
						(if (contains_index !nominalsMap (current_index))
							(let
								;pull the nominal values from the map in some determined order
								(assoc nominal_values (indices (current_value 1)))

								(declare (assoc
									decoded_nominal_values nominal_values
									feature (current_index 1)
								))
								(if (and !hasSubstituteFeatureValues substitute_output (contains_index !substitutionValueMap feature))
									(assign (assoc
										decoded_nominal_values
											;since we have multiple values for one feature, substitute each value for this one feature one-at-a-time
											(map
												(lambda (first
													(call !SubstituteFeatureValues (assoc
														features (list feature)
														feature_values (list (current_value 2))
													))
												))
												decoded_nominal_values
											)
									))
								)
								;output an assoc of decoded (string) nominal values -> probability
								(zip decoded_nominal_values (unzip (current_value) nominal_values))
							)

							;else just return the assoc as-is
							(current_value)
						)
					)
					categorical_action_probabilities_map
				)
		))
		(accum (assoc output (assoc "categorical_action_probabilities" categorical_action_probabilities_map)))
	)

	;accumulate categorical action feature probabilities from a react into categorical_action_probabilities_map
	; action_feature : the categorical action feature
	; categorical_value_weights_map : an assoc of categorical action feature values -> sum of their weight; if specified will be used for accumulation
	#!AccumulateCategoricalActionProbabilties
	(declare
		(assoc
			action_feature (null)
			categorical_value_weights_map (assoc)
		)

		;accumulate only if they haven't been accumulated yet
		(if (= (assoc) categorical_action_probabilities_map)
			;if the probabilities have already been calculated and provided, which happens when neighbors are not perfect matches, accumulate them
			(if (> (size categorical_value_weights_map) 0)
				(assign (assoc
					categorical_action_probabilities_map
						(associate
							;convert the distance (weight) for each value into a probabilities
							action_feature (normalize categorical_value_weights_map)
						)
				))

				;no C.A.P.
				(assign (assoc categorical_action_probabilities_map (associate action_feature {}) ))
			)
		)
	)

	;Create an assoc of (detail -> correct empty data structure) for each detail in details to be used for output
	;except do not include input details that should not be output, such as 'num_most_similar_cases' since there's no need to aggregate
	;that value for every case when the actual similar cases will be available.
	#!CreateCaseDetailValuesMapFromDetails
	(map
		(lambda
			(if (= "categorical_action_probabilities" (current_index))
				(assoc)

				;default to list
				(list)
			)
		)
		;explicitly do not include these specific selection details in the output for react details
		(remove
			(zip details)
			["num_most_similar_cases" "num_most_similar_case_indices" "num_boundary_cases" "selected_prediction_stats" "features" "series_residuals_num_samples"]
		)
	)

	#!ComputeRelevantValues
	(declare
		(assoc
			closest_cases_map
				(normalize (compute_on_contained_entities
					filtering_queries
					(query_nearest_generalized_distance
						k_parameter
						context_features
						context_values
						p_parameter
						feature_weights
						!queryDistanceTypeMap
						query_feature_attributes_map
						feature_deviations
						(first action_features)
						dt_parameter
						(if valid_weight_feature weight_feature (null))
						;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
						"fixed rand seed"
						(null) ;radius
						!numericalPrecision
					)
				))
		)


		(accum (assoc
			output
				(assoc
					"relevant_values"
					(map
						(lambda (let
							(assoc
								feature (current_index 1)
								is_nominal (contains_index !nominalsMap (current_index 1))
							)

							(if is_nominal
								;nominal flow:
								;	Get the CAPs for the reaction based on nearest cases and return the classes that make up 95% of the
								;	probability mass among the local data
								(declare
									(assoc
										candidate_case_weights (values closest_cases_map)
										candidate_case_values (map (lambda (retrieve_from_entity (current_value) feature)) (indices closest_cases_map))
									)

									(declare (assoc
										categorical_action_probabilities_map
											(zip
												(lambda (+ (current_value 1) (current_value)))
												candidate_case_values
												candidate_case_weights
											)
									))

									;sort each class by decreasing probability mass
									(declare (assoc
										sorted_classes
											(sort
												(lambda
													(-
														(get categorical_action_probabilities_map (current_value))
														(get categorical_action_probabilities_map (current_value 1))
													)
												)
												(indices categorical_action_probabilities_map)
											)
									))
									(declare (assoc
										sorted_probabilities (unzip categorical_action_probabilities_map sorted_classes)
									))
									(declare (assoc
										num_classes_to_return
											(while
												(or
													;(trunc) with a 0 returns the full list, so special skip-logic is needed
													(= (current_index) 0)
													(<
														(apply "+" (trunc sorted_probabilities (current_index)))
														0.95
													)
												)
												(null)

												;once the cumulative sum is > 0.95, return the number of classes it took to get that sum
												(+ (current_index) 1)
											)
									))

									(call !ConvertToOutput (assoc
										features (range feature 1 num_classes_to_return 1)
										feature_values (trunc sorted_classes num_classes_to_return)
									))
								)


								;continuous flow
								(declare
									(assoc
										local_mean_value
											(generalized_mean
												(map (lambda (retrieve_from_entity (current_value) feature)) (indices closest_cases_map))
												1
												(values closest_cases_map)
											)
										feature_deviation (get react_feature_deviations feature)
									)

									(call !ConvertToOutput (assoc
										features (range feature 1 4 1)
										feature_values
											;value - 2*deviation, value - deviation, value + deviation, value + 2*deviation
											(map
												(lambda
													(+
														local_mean_value
														(* (current_value) feature_deviation)
													)
												)
												[-2 -1 1 2]
											)
									))
								)
							)


						))
						(if (~ [] (get details "relevant_values"))
							(zip (get details "relevant_values"))

							(zip context_features)
						)
					)
				)
		))
	)
)