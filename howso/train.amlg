;Contains methods for training (input of data into the trainee).
(null

	;train the passed in cases, filtering out cases that match optionally passed in ablation parameters
	; returns a response object in the following format:
	;	(associate
	;		"num_trained" num_trained_cases
	;		"ablated_indices" (list of ablated case indices)
	;		"status" "status output message"
	;	)
	; 	list of 'status' values:
	;		(null) - default output, no status output
	;		"analyzed" - if auto analysis is enabled and model has grown large enough to be analyzed again and was analyzed
	;		"analyze" - if auto analysis is enabled and model has grown large enough to be analyzed again but was not analyzed
	;
	; parameters:
	; input_cases : list of cases, ie a list of lists of values.
	; features : the list of features.
	; derived_features: optional list of features to derive in the specified order. If this list is not provided, features with
	;	   the 'auto_derive_on_train' feature attribute set to True will be auto-derived. If provided an empty list, will not derive any features.
	;	   Any derived_features that are already in the 'features' list will not be derived since their values are being explicitly provided.
	; session: the session label to record these cases to.  If not specified, refers to this entity's label of same name.
	; input_is_substituted : flag, if set to true assumes provided categorical (nominal or ordinal) feature values already been substituted.
	; series: optional, name of series to pull features and case values from internal series storage.  If specified, trains on all cases that are
	;		stored in the internal series store for the specified series and session. The trained feature set is the combined features from storage
	;		and the passed in features.  If input_cases is of length one, the value(s) of this case are appended to all cases in the series.
	;		If input_cases is the same length as the series, the value of each case in input_cases is applied in order to each of the cases in the
	;		series.
	; accumulate_weight_feature: name of feature into which to accumulate neighbors' influences as weight for ablated cases. If unspecified, will not accumulate weights.
	; train_weights_only: flag, if set to true, and accumulate_weight_feature is provided, will not train on the cases, but instead accumulate all of their neighbor weights.
	; skip_auto_analyze: flag, if set to true, will not auto_analyze, but will instead return the status "analyze" which indicates that an analyze call is recommended
	#train
	(declare
		(assoc
			input_cases (list)
			features (list)
			derived_features (null)
			session (null)
			series (null)
			input_is_substituted (false)
			allow_training_reserved_features (false)
			accumulate_weight_feature (null)
			train_weights_only (false)
			skip_auto_analyze (false)
		)

		;unsure that session is set to some string value
		(if (= (null) session)
			(assign (assoc session "none"))
		)

		(assign (assoc
			accumulate_weight_feature
				(if
					(and !autoAblationEnabled (= (null) accumulate_weight_feature))
					!autoAblationWeightFeature
					accumulate_weight_feature
				)
		))

		;create the training session if it does not already exist
		(if (not (contains_entity session))
			;overwrite the session variable in case creating a new session without a name
			(assign (assoc
				session
					(first (create_entities session (lambda
						(null
							##.replay_steps (list)
							##.indices_map (assoc)
							##.trained_instance_count 0
							##.metadata (assoc)
						)
					)))
			))
		)

		;recorded data for the current session
		(declare (assoc
			cur_session_data (retrieve_from_entity session ".replay_steps")
		))

		(declare (assoc
			trained_instance_count (retrieve_from_entity session ".trained_instance_count")
			series_cases (if (!= (null) series) (get !seriesStore series))
			status_output (null)
			message (null)
			ablated_indices_list (list)
			cur_session_case_indices_map (retrieve_from_entity session ".indices_map")
			warnings (assoc)
		))

		;parameter and data checks, returns on error
		(call !PreTrainChecks)

		;get time series derived features list, if applicable
		(if (and (= (null) derived_features) (!= (null) !tsTimeFeature) )
			(assign (assoc
				derived_features (get !tsModelFeaturesMap "ts_derived_features")
			))
		)

		;unsubstitute nominal feature values if necessary
		(if
			(and input_is_substituted !hasSubstituteFeatureValues)
			(assign (assoc
				input_cases
					(map
						(lambda
							(call !UnsubstituteFeatureValues (assoc
								features features
								feature_values (current_value 1)
							))
						)
						input_cases
					)
			))
		)

		(declare (assoc encode_features_on_train (retrieve_from_entity "!hasFeaturesNeedEncodingFromInput") ))

		;encode all cases in bulk if either training on accumulated weights only or training from series
		;because series trained cases are alredy encoded.
		(if (and
				encode_features_on_train
				(or (size series_cases) (and train_weights_only accumulate_weight_feature) )
			)
			(assign (assoc
				input_cases
					(map
						(lambda (let
							(assoc feature_values (current_value 1))
							;implicitly pass in features and feature_values
							(call !ConvertFromInput)
						))
						input_cases
					)

				;set the flag to false since input_cases are already encoded above
				encode_features_on_train (false)
			))
		)

		;don't train the data, only accumulate weights to neighbors
		(if (and train_weights_only accumulate_weight_feature)
			(seq
				(call !AccumulateCaseInfluenceWeights (assoc
					features features
					accumulate_weight_feature accumulate_weight_feature
					cases input_cases
				))

				(accum_to_entities (assoc !revision 1))

				(conclude
					(call !Return (assoc
						warnings (if (size warnings) (indices warnings))
						payload
							(assoc
								"num_trained" 0
								"ablated_indices" (list)
								"status" status_output
							)
					))
				)
			)
		)

		;series storage is already encoded, append it as-is to passed in data
		(if (size series_cases)
			(let
				(assoc
					series_features (get !seriesFeatures series)
					remaining_series_feature_indices (list)
				)

				;leave only those indices of series_features that will not be clobbered by features
				(assign (assoc
					remaining_series_feature_indices
						(filter
							(lambda (not (contains_value features (get series_features (current_value)))))
							(indices series_features)
						)
				))

				;set training features to be unique, removing those from the series that are being explicitly trained on
				(accum (assoc features (unzip series_features remaining_series_feature_indices) ))

				(assign (assoc
					input_cases
						;apply the one input case to all the cases in the series
						(if (= (size input_cases) 1)
							(let
								(assoc case_values (get input_cases 0))
								(map
									(lambda
										(append case_values (unzip (current_value) remaining_series_feature_indices) )
									)
									series_cases
								)
							)

							;else apply each input case to each of the cases in the series
							(= (size input_cases) (size series_cases))
							(map
								(lambda
									(append (get input_cases (current_index)) (unzip (current_value) remaining_series_feature_indices) )
								)
								series_cases
							)
						)
				))

				;clear out stored series
				(call remove_series_store (assoc series series))
			)
		)

		(declare (assoc num_cases (call !GetNumTrainingCases) ))

		(declare (assoc skip_ablation (call !CanTrainAblationBeSkipped) ))

		;iterate over the input cases and create them, only returning case ids for cases that were able to be created
		(declare (assoc new_case_ids (call !TrainCreateCases) ))

		;set values if there were cases that were trained on
		(if (> (size new_case_ids ) 0)
			(seq
				;if ablation awas skipped, trained_instance_count was never updated, update it here instead
				(if skip_ablation (accum (assoc trained_instance_count (size new_case_ids))) )

				;add action to the existing replay data
				(assign_to_entities session (assoc
					".replay_steps" (append cur_session_data new_case_ids)
					".indices_map"
						(append
							cur_session_case_indices_map
							(zip
								(range (- trained_instance_count (size new_case_ids)) (- trained_instance_count 1))
								new_case_ids
							)
						)
					".trained_instance_count" trained_instance_count
				))

				;if any of the trained features are not defined in feature attributes, add them as continuous_numeric with default attributes
				(let
					(assoc new_features (remove (zip features) !trainedFeatures))

					(if (size new_features)
						(seq
							(accum (assoc
								warnings
									(associate (concat
										"The following features trained were previously undefined: "
										(apply "concat" (trunc (weave (indices new_features) ", "))) ". "
										"They have been trained and assumed to be numeric and continuous. "
										"Please update the feature attributes if they are known."
									))
							))
							(accum_to_entities (assoc
								!featureAttributes
									(map
										(lambda (assoc "type" "continuous" "bounds" (assoc "allow_null" (true)) ))
										new_features
									)
								!queryDistanceTypeMap (map (lambda "continuous_numeric") new_features)
							))
							(assign_to_entities (assoc
								!trainedFeatures (sort (values (append !trainedFeatures (indices !featureAttributes)) (true)) )
								!trainedFeaturesContextKey
									(call !BuildContextFeaturesKey (assoc
										context_features (values (append !trainedFeatures (indices !featureAttributes)) (true))
									))
							))
						)
					)
				)

				;update cached data properties such as has_nulls, null ratios, marginal stats, average model case entropies, etc
				(call !ClearCachedDataProperties)
			)
		)

		;if derived features wasn't specified, auto-detect them
		(if (and (= (null) derived_features) (> (size !derivedFeaturesSet) 0))
			(seq
				(assign (assoc derived_features (list)))

				;check features vs !sourceToDerivedFeatureMap and populate derived_features accordingly
				(map
					(lambda (let
						(assoc feature_name (current_value 1))
						;if this trained feature has derived features, add all of them to the derived_features list
						(if (contains_index !sourceToDerivedFeatureMap feature_name)
							(accum (assoc derived_features (get !sourceToDerivedFeatureMap feature_name)))
						)
					))
					features
				)

				;clear out possible duplicates out of derived_features
				(assign (assoc derived_features (values derived_features (true))))
			)
		)

		;auto populate derived features if necessary
		(if (> (size derived_features) 0)
			(call !DeriveTrainFeatures (assoc
				features features
				;keep and derive only those features that are not in the features list
				derived_features (filter (lambda (not (contains_value features (current_value)))) derived_features)
				case_ids new_case_ids
			))
		)

		;if auto analysis is enabled, check whether this model should be re-analyzed
		;and return the appropriate status to client so that analysis could be started
		(if (> (size new_case_ids ) 0)
			(if (and skip_ablation !autoAnalyzeEnabled)
				(call !AutoAnalyzeIfNeeded)
			)
		)

		(if !hasDependentFeatures
			(let
				(assoc
					dependents_boundary_map (assoc)
					dependent_values_combinations_map (assoc)
					unique_nominals_set (list)
				)

				(if (size !continuousToNominalDependenciesMap)
					(seq
						(map
							(lambda (let
								(assoc
									dependent_nominals (current_value 1)
									continuous_feature (current_index 1)
									dependents_combinations_map (assoc)
									dependent_values_combinations (list)
								)

								(assign (assoc
									dependents_combinations_map
										(call !ComputeDependentBoundaries (assoc
											nominals dependent_nominals
											value_feature continuous_feature
										))
								))

								(call !AccumulateDependentValuesCombinations (assoc
									nested_value_combinations_map dependents_combinations_map
									values_lists (list)
									value_feature (first dependent_nominals)
									remaining_dependent_nominals (tail dependent_nominals)
								))

								(accum (assoc
									dependents_boundary_map (associate continuous_feature dependents_combinations_map)
									dependent_values_combinations_map (associate continuous_feature dependent_values_combinations)
								))
							))
							!continuousToNominalDependenciesMap
						)

						(assign_to_entities (assoc
							!dependentsBoundaryMap dependents_boundary_map
							!dependentValuesCombinationsMap dependent_values_combinations_map
						))
					)
				)
			)
		)

		;if there are features that have nulls, check if they still have nulls next time we react or analyze
		(if !inactiveFeaturesMap
			(assign_to_entities (assoc !inactiveFeaturesNeedCaching (true) ))
		)

		(accum_to_entities (assoc !revision 1))

		;if accumulate_weight_feature was specified and there are ablated cases, accumulate weights to their neighbors
		(if (and (size ablated_indices_list) accumulate_weight_feature)
			(call !AccumulateCaseInfluenceWeights (assoc
				features features
				accumulate_weight_feature accumulate_weight_feature
				cases (unzip input_cases ablated_indices_list)
			))
		)

		;return response
		(call !Return (assoc
			warnings (if (size warnings) (indices warnings))
			payload
				(assoc
					"num_trained" (size new_case_ids)
					"ablated_indices" ablated_indices_list
					"status" status_output
				)
		))
	)

	;private helper method for train that checks for invalid features or parameters
	#!PreTrainChecks
	(declare
		(assoc
			reserved_feature_names
				(if allow_training_reserved_features
					(list)
					;filter out any normal features, leaving only invalid feature names that start with reserved characters
					(filter
						(lambda
							(contains_index !untrainableFeatureCharacterSet (first (current_value)))
						)
						features
					)
				)
		)

		;if any features are in the reserved list, can't train, output the error message
		(if (> (size reserved_feature_names) 0)
			(conclude (conclude
				(call !Return (assoc
					errors
						(list (concat
							"The following features should not start with characters '.' '^' '!' or '#' : "
							;change list of features into a space-separated list of feature names
							(apply "concat"
								(weave
									reserved_feature_names
									(range " " 1 (size reserved_feature_names) 1)
								)
							)
						))
					payload
						(assoc
							"num_trained" 0
							"ablated_indices" (list)
							"status" (null)
						)
				))
			))
		)

		(if (!= (size features) (size (first input_cases)) )
			(conclude (conclude
				(call !Return (assoc
					errors (list "The number of feature names specified does not match the number of feature values given.")
					payload
						(assoc
							"num_trained" 0
							"ablated_indices" ablated_indices_list
							"status" status_output
						)
				))
			))
		)

		;if specifying a series, make sure there are series_cases and the lengths match
		(if (!= (null) series)
			(if (= (size series_cases) 0)
				(assign (assoc
					input_cases (null)
					message "Specified series does not exist"
				))

				;if input cases don't match the number of cases stored in series
				(and (> (size input_cases) 1) (!= (size input_cases) (size series_cases)))
				(assign (assoc
					input_cases (null)
					message "input_cases do not match length of specified series"
				))
			)
		)

		;if bad input, ie, size of series does not match the training input_cases, don't train anything
		(if (= (null) input_cases)
			(conclude (conclude
				(call !Return (assoc
					errors (list message)
					payload
						(assoc
							"num_trained" 0
							"ablated_indices" ablated_indices_list
							"status" status_output
						)
				))
			))
		)

		;warn if using skip_auto_analyze when training time series data
		(if (and (!= (null) !tsTimeFeature) skip_auto_analyze)
			(accum (assoc
				warnings
					(associate (concat
						"Using \"skip_auto_analyze\" when training time-series data may "
						"result in less accurate modeling of the data as as statistics calculated "
						"from the data used for inference will not take into account derived and "
						"imputed data for the time series."
					))
			))
		)
	)

	;private helper method for train that creates the cases in input_cases and returns the case ids
	#!TrainCreateCases
	(if skip_ablation
		(let
			(assoc
				train_features
					;if auto ablate is enabled, populate the weight feature for this case
					(if !autoAblationEnabled
						(append features (list !autoAblationWeightFeature))
						features
					)
			)
			(map
				(lambda (let
					(assoc
						feature_values
							;if auto ablate is enabled, default the weight to 1 for this case
							(if !autoAblationEnabled
								(append (current_value 1) (list 1))
								(current_value 1)
							)
					)

					;create the case and output case id
					(call !CreateCase (assoc
						features train_features
						feature_values
							(if encode_features_on_train
								(call !ConvertFromInput (assoc
									feature_values feature_values
									features train_features
								))
								;else use feature_values as-is
								feature_values
							)
						session (get_value session)
						session_training_index (+ trained_instance_count (current_index 1))
					))
				))
				input_cases
			)
		)

		(weave
			(lambda (let
				(assoc feature_values (first (current_value 1)))

				(if encode_features_on_train
					(assign (assoc
						feature_values
							(call !ConvertFromInput (assoc
								feature_values feature_values
								features features
							))
					))
				)

				;do not train on this case if it is null or all case values are null or it's within provided thresholds
				(if (and
						(!= (null) feature_values)
						(not (apply "=" (append feature_values (list (null)))))
						;no thresholds specified or the case is outside of thresholds

						;if one of the ablation methods returns false, then the case should be ablated.
						(and
							(call !CaseOutsideThresholds)
							(call !ShouldNewCaseBeAblated (assoc
								features features
								feature_values feature_values
								num_cases num_cases
							))
						)
					)
					(seq
						;create the case and store case id
						(declare (assoc
							new_case_id
								(call !CreateCase (assoc
									features
										;if auto ablate is enabled, populate the weight feature for this case
										(if
											!autoAblationEnabled
											(append features (list !autoAblationWeightFeature))
											features
										)
									feature_values
										;if auto ablate is enabled, populate the weight feature for this case
										(if
											!autoAblationEnabled
											(append feature_values (list 1))
											feature_values
										)
									session (get_value session)
									session_training_index trained_instance_count
								))
						))
						(accum (assoc trained_instance_count 1 ))

						;auto analyze if appropriate
						(if !autoAnalyzeEnabled (call !AutoAnalyzeIfNeeded))

						;output the new case id
						(list new_case_id)
					)

					;else don't output anything, filtering out any null case ids
					(seq
						(accum (assoc ablated_indices_list (current_index 1)))
						(list)
					)
				)
			))
			input_cases
			;use weave as a map-filter by specifying null as the second list
			(null)
		)
	)

	;private helper method that checks if the conditions for auto-analyze are met, and calls the analyze if so
	;this method should be called within #train
	;
	;parameters:
	; skip_auto_analyze: flag, if true and auto-analyze is needed, then status_output will be assigned to "analyze".
	;                    If false, and auto-analyze is needed, the analyze will be executed.
	#!AutoAnalyzeIfNeeded
	(let
		(assoc num_cases (call !GetNumTrainingCases))
		(if
			(and
				(>= num_cases !autoAnalyzeThreshold)
				(or (< num_cases !autoAnalyzeLimitSize) (<= !autoAnalyzeLimitSize 0))
			)
			(if skip_auto_analyze
				;if skip_auto_analyze, send back "analyze" status so users knows an analyze is needed
				(assign (assoc status_output "analyze"))

				;otherwise do the analyze
				(seq
					(if (!= (null) !savedAnalyzeParameterMap)
						(call !Analyze !savedAnalyzeParameterMap)

						(call !Analyze (assoc
							targeted_model "targetless"
							context_features !trainedFeatures
							weight_feature
								(if (and !autoAblationEnabled !autoAblationWeightFeature)
									!autoAblationWeightFeature
									".none"
								)
							use_case_weights (and !autoAblationEnabled !autoAblationWeightFeature)
							inverse_residuals_as_weights (true)
							k_folds 1
						))
					)
					(assign (assoc status_output "analyzed"))
				)
			)
		)
	)

	;set specified feature weights in all hyperparameter maps (!defaultHyperparameters and !hyperparameterMetadataMap)
	;If weights haven't been defined yet, set them to 0 for invacitves and 1 for actives
	;If already defined, will overwrite the weight of the specified features in feature_weights_map
	;
	;parameters:
	; features_weights_map: assoc of feature -> weight to overwrite in all hyperparameter sets
	; overwrite: flag, if set to true will assume that featureWeights already exist and overwrites them.
	;			 When false, will create featureWeights in the hyperparameter set
	#!SetFeatureWeightsForFeatures
	(declare
		(assoc
			features_weights_map (assoc)
			overwrite (false)
		)

		(declare (assoc
			updated_hp_maps
				(map
					(lambda
						(rewrite
							;if this is a hp assoc, modify it
							(lambda
								(if (and (= (assoc) (get_type (current_value))) (contains_index (current_value) "k") )
									;hp already have featureDeviations defined, overwrite where necessary
									(if overwrite
										(let
											;take featureWeights in HP assoc and alter them
											(assoc weights_map (get (current_value 1) "featureWeights") )

											(map
												(lambda
													(assign (assoc
														weights_map
															(set
																weights_map
																(current_index 1)
																(current_value 1)
															)
													))
												)
												features_weights_map
											)

											;append the updated deviations_map to this hp map
											(append (current_value) (assoc "featureWeights" weights_map) )
										)

										(let
											;create a feature weights assoc
											(assoc weights_map (append (zip !trainedFeatures 1) features_weights_map) )

											(append (current_value) (assoc "featureWeights" weights_map))
										)
									)

									;else not the hp assoc, return original
									(current_value)
								)
							)
							(current_value)
						)
					)
					(list !defaultHyperparameters !hyperparameterMetadataMap)
				)
		))

		(assign_to_entities (assoc
			!defaultHyperparameters (first updated_hp_maps)
			!hyperparameterMetadataMap (last updated_hp_maps)
		))
	)

	;Helper method for training, updates null flags and resets model level attributes based on the data such as
	;model case entropies, marginal stats, expected values, etc.
	#!ClearCachedDataProperties
	(seq
		(accum_to_entities (assoc
			!featureNullRatiosMap
				(map
					(lambda (let
						(assoc feature (current_index 1))
						(if (current_value)
							(set
								(current_value)
								"has_nulls"
								;leave true as true, otherwise set to null
								(if (get (current_value) "has_nulls") (true))
							)

							;else create the has_nulls key with a null
							(assoc "has_nulls" (null))
						)
					))
					(append (zip features) !featureNullRatiosMap)
				)
		))

		;model has changed so clear out these cached value
		#!ClearCachedCountsAndEntropies
		(assign_to_entities (assoc
			!averageModelCaseEntropyAddition (null)
			!averageModelCaseEntropyRemoval (null)
			!storedCaseConvictionsFeatureAddition (null)
			!averageModelCaseDistanceContribution (null)
			!staleOrdinalValuesCount (true)
			!nominalClassProbabilitiesMap (assoc)
			!expectedValuesMap (assoc)
			!featureMarginalStatsMap (assoc)
		))
	)

	;Helper method to prime query caches for all !trainedFeatures and update the !inactiveFeaturesMap
	#!UpdateInactiveFeatures
	(seq
		;prime the caches for the query engine using all the trained features
		(contained_entities (append
			(map (lambda (query_exists (current_value))) !trainedFeatures)
			(query_count)
		))

		(declare (assoc
			inactive_features_map
				(filter
					(lambda (let
						(assoc feature (current_index 1))

						;only keep those features that have no valid values (0 non-nulls)
						(=
							(contained_entities (list
								(query_exists !internalLabelSession)
								(query_exists feature)
								(query_not_equals feature (null))
								(query_count)
							))
							0
						)
					))
					(if !inactiveFeaturesMap
						!inactiveFeaturesMap
						(zip !trainedFeatures 0)
					)
				)
		))

		;if there are now less inactive features than there were, set the no-longer inactive feature weights to 1
		(if (< (size inactive_features_map) (size !inactiveFeaturesMap))
			(call !SetFeatureWeightsForFeatures (assoc
				features_weights_map
					(zip
						(indices (remove !inactiveFeaturesMap (indices inactive_features_map)) )
						1
					)
				overwrite (true)
			))
		)

		(if (size inactive_features_map)
			(seq
				;if there are inactive features and they haven't been set yet, set their weight to 0
				(if (!= !inactiveFeaturesMap inactive_features_map)
					(call !SetFeatureWeightsForFeatures (assoc
						features_weights_map inactive_features_map
						overwrite (false)
					))
				)
				(assign_to_entities (assoc
					!inactiveFeaturesMap inactive_features_map
					!inactiveFeaturesNeedCaching (false)
				))
			)

			;else all features have some non-null values
			(assign_to_entities (assoc
				!inactiveFeaturesMap (null)
				!inactiveFeaturesNeedCaching (false)
			))
		)
	)

)
