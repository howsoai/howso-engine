;Contains methods for retrieving sessions.
(null

	;returns an array of ids of all replay sessions that exist in this trained dataset
	#!GetSessionIds
	(contained_entities (query_exists ".replay_steps") )

	;returns a list of all of the training sessions, assoc of id->session, and whatever other attributes specified.
	;{read_only (true) idempotent (true)}
	#get_sessions
	(declare
		;returns {
		; 	type "list"
		; 	values {
		; 		type "assoc"
		; 		indices {
		; 			"id" {type "string" description "The session ID" required (true)}
		; 		}
		; 		additional_indices {
		; 			type "any"
		; 			description "Requested attributes of sessions and their values."
		; 		}
		; 	}
		; 	description "List of maps of session properties to their values for each session."
		; }
		(assoc
			;{type "list" values "string"}
			;list of metadata attributes to return from the session
			attributes (list)
		)
		(call !ValidateParameters)
		(call !Return (assoc
			payload
				(map
					(lambda (let
						(assoc session (current_value 1))
						(append
							(assoc "id" session )

							(if (> (size attributes) 0)
								; create an assoc of attribute -> metadata attribute value
								(zip
									attributes
									(map
										(lambda
											(get (retrieve_from_entity session ".metadata") (current_value))
										)
										attributes
									)
								)

								(assoc)
							)
						)
					))
					(call !GetSessionIds)
				)
		))
	)


	;returns all the metadata for a specified session
	;{read_only (true) idempotent (true)}
	#get_session_metadata
	(declare
		;returns {
		; 	type ["assoc" "null"]
		; 	description "The stored metadata for the session."
		; }
		(assoc
			;{type "string" required (true)}
			;name of session to return metadata for
			session (null)
		)
		(call !ValidateParameters)
		(if (not (contains_entity session))
			(call !Return (assoc errors (list (concat "Session " session " does not exist for this trainee."))))

			(call !Return (assoc payload (retrieve_from_entity session ".metadata") ))
		)
	)


	;set session metadata for a specified session.
	;{idempotent (true)}
	#set_session_metadata
	(declare
		(assoc
			;{type "string" required (true)}
			;id of session to modify.
			session (null)
			;{type "assoc" required (true)}
			;any arbitrary metadata.
			metadata (null)
		)
		(call !ValidateParameters)

		;update this session id's metadata
		(assign_to_entities session (assoc ".metadata" metadata ))

		(call !Return)
	)

	;return list of all session indices for a specified session.
	;session indices are 0-based index of number of the case for the session used for replays; may change if cases are removed
	;{read_only (true) idempotent (true)}
	#get_session_indices
	(declare
		;returns {
		; 	type "list"
		; 	values "number"
		; 	description "The list of zero-based indices of numbers of the cases for the session used for replays. May change if cases are removed."
		; }
		(assoc
			;{type "string" required (true)}
			;id of session
			session (null)
		)
		(call !ValidateParameters)
		(call !Return (assoc
			payload (indices (retrieve_from_entity session ".replay_steps"))
		))
	)


	;return list of all session training indices for a specified session.
	;session training indices are 0-based index of the case, ordered by training during the session; is not changed
	;{read_only (true) idempotent (true)}
	#get_session_training_indices
	(declare
		;returns {
		; 	type "list"
		; 	values "number"
		; 	description "The list of zero-based indices of numbers of the cases in the session ordered by training."
		; }
		(assoc
			;{type "string" required (true)}
			;id of session
			session (null)
		)
		(call !ValidateParameters)
		(call !Return (assoc
			payload
				(sort (map
					(lambda (retrieve_from_entity (current_value) !internalLabelSessionTrainingIndex))
					;list of all cases trained for specified session
					(retrieve_from_entity session ".replay_steps")
				))
		))
	)

)
