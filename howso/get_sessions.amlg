;Contains methods for retrieving sessions.
(null

	;returns an array of ids of all replay sessions that exist in this trained model
	#!GetSessionIds
	(contained_entities (list (query_exists ".replay_steps") ))

	;returns a list of all of the training sessions, assoc of id->session, and whatever other attributes specified.
	;
	;parameters:
	; attributes: optional list of metadata attributes to return from the session
	#get_sessions
	(call !Return (assoc
		payload
			(map
				(lambda (let
					(assoc session (current_value 1))
					(append
						(assoc "id" session )

						(if (> (size attributes) 0)
							; create an assoc of attribute -> metadata attribute value
							(zip
								attributes
								(map
									(lambda
										(get (retrieve_from_entity session ".metadata") (current_value))
									)
									attributes
								)
							)

							(assoc)
						)
					)
				))
				(call !GetSessionIds)
			)
	))


	;returns all the metadata for a specified session
	;parameters:
	; session: name of session to return metadata for
	#get_session_metadata
	(if (not (contains_entity session))
		(call !Return (assoc errors (list (concat "Session " session " does not exist for this trainee."))))

		(call !Return (assoc payload (retrieve_from_entity session ".metadata") ))
	)


	;set session metadata for a specified session.
	;
	;parameters:
	; session: id of session to modify.
	; metadata: any arbitrary metadata.
	#set_session_metadata
	(declare
		(assoc session "none")

		;update this session id's metadata
		(assign_to_entities session (assoc ".metadata" metadata ))

		(call !Return)
	)

	;return list of all session indices for a specified session.
	;session indices are 0-based index of number of the case for the session used for replays; may change if cases are removed
	;parameters:
	; session : id of session
	#get_session_indices
	(call !Return (assoc
		payload (indices (retrieve_from_entity session ".replay_steps"))
	))


	;return list of all session training indices for a specified session.
	;session training indices are 0-based index of the case, ordered by training during the session; is not changed
	;parameters:
	; session : id of session
	#get_session_training_indices
	(call !Return (assoc
		payload
			(map
				(lambda (retrieve_from_entity (current_value) !internalLabelSessionTrainingIndex))
				;list of all cases trained for specified session
				(retrieve_from_entity session ".replay_steps")
			)
	))

)
