;Contains methods for working with custom derived feature codes.
(null

	;derive new features using a custom code string and store into model
	;parameters:
	; features: list of features the dataset was trained with originally
	; feature : name of feature to create / derive
	; raw_code_string : string, code defining how the feature should be derived
	; series_id_features: list of feature names that specify the series id for which to derive this feature.
	;		If more than one specified, a unique 'series id' is then the conjuction of the specified ids.
	;		E.g., if 'sender' and 'reciever' are specified, a 'series id' is then each unique pair of sender-reciever.
	; series_ordered_by_features : list of features names by which to sort the series.  Multi-sorts by the specified features if several specified.
	#!DeriveCustomFeatureFromCode
	(declare
		(assoc
			features (list)
			feature ""
			raw_code_string ""
			series_id_features (list)
			series_ordered_by_features (list)
		)

		(declare (assoc
			sourced_features (indices (get_all_labels (parse raw_code_string)))
			cycle_length (null)
		))

		;declare all the features that are necessary that are needed to derive this feature,
		;where the first features are the ones that need to be sorted on
		(declare (assoc
			;append series_ordered_by_features with sourced features and ensure no duplicates
			necessary_features
				(append
					series_ordered_by_features

					;filter out features in sourced_features that already exist in series_ordered_by_features
					;leaving only the ones that are unique to sourced_features
					(filter
						(lambda (not (contains_value series_ordered_by_features (current_value))))
						sourced_features
					)
				)
			ts_series_length_limit (retrieve_from_entity "!tsSeriesLimitLength")

			;store whether this is a rate or delta feature and the order, e.g., 'rate' and 2
			feature_time_series_type (get !featureAttributes (list feature "ts_type"))
			feature_time_series_order (get !featureAttributes (list feature "ts_order"))
		))

		;process each series individually
		;pull all the values for the necessary_features, sort them, and then derive this feature based on the specified code
		(map
			(lambda (let
				;(current_value) is in the format of (list (query_equals "series_feature_name" value) ... ) for all series_feature_name
				(assoc series_case_ids (contained_entities (current_value 1)) )

				;now that we know how long each new series is, ensure that ts_series_length_limit is e*(longest series)
				(if (> (* 2.718281828459 (size series_case_ids)) ts_series_length_limit)
					(assign (assoc ts_series_length_limit (* 2.718281828459 (size series_case_ids)) ))
				)

				(declare (assoc
					;series_data is all the necessary_features's values along with the case_id appended as the last column
					series_data
						(map
							(lambda (append (retrieve_from_entity (current_value) necessary_features) (current_value)))
							series_case_ids
						)
				))

				;sort the series data according to the specified features if ordering has been provided
				(if (size series_ordered_by_features)
					(assign (assoc
						series_data
							(call !MultiSortList (assoc
								data series_data
								column_order_indices (range 0 (size series_ordered_by_features))
							))
					))
				)

				;store the case ids in the new sorted order of series_data
				(assign (assoc
					series_case_ids
						(map
							(lambda (last (current_value)))
							series_data
						)
				))

				;remove the case_id column from series_data
				(assign (assoc
					series_data
						(map
							(lambda (trunc (current_value)))
							series_data
						)
				))

				;overwrite series data with just the new generated series values
				(assign (assoc
					series_data
						(call !AddDerivedCodeFeature (assoc
							feature feature
							features necessary_features
							series_data series_data
						))
				))

				;add feature, setting each case's corresponding value
				(call !StoreCaseValues (assoc
					;map of case id -> value
					case_values_map (zip series_case_ids series_data)
					label_name feature
					overwrite (true)
				))

				;if derived feature was inactive, remove it from inactive list
				(if (contains_index !inactiveFeaturesMap feature)
					(if
						(size (contained_entities (list (query_not_equals feature (null)))) )
						(let
							(assoc updated_inactive_features_map (remove !inactiveFeaturesMap feature) )

							(if (size updated_inactive_features_map)
								(assign_to_entities (assoc !inactiveFeaturesMap updated_inactive_features_map ))

								;else all features have some non-null values
								(assign_to_entities (assoc
									!inactiveFeaturesMap (null)
									!inactiveFeaturesNeedCaching (false)
								))
							)

							(call !SetFeatureWeightsForFeatures (assoc
								features_weights_map (associate feature 1)
								overwrite (true)
							))
						)
					)
				)
			))

			;generates a list of queries for each unique series id (where each series id may be a conjuction of several features)
			(call !GenerateUniqueSeriesQueries (assoc series_id_features series_id_features ))
		)

		;if ts_series_length_limit has been been updated to a larger value in the loop above, update the model with this new value
		(if (> ts_series_length_limit !tsSeriesLimitLength)
			(assign_to_entities (assoc !tsSeriesLimitLength ts_series_length_limit ))
		)
	)

	;derives the feature value for the specified feature provided the data to derive from
	;parameters:
	; feature: name of feature being derived
	; features: list of feature names to match the series_data
	; series_data: list of lists, where the inner list is in order of features
	;  where the code can access the series_data via series_data via index series_row_index and values via series_row_values
	;returns a list of lists, where the inner list is a single value for this specified derived feature
	#!AddDerivedCodeFeature
	(declare
		(assoc
			feature ""
			features (list)
			series_data (list)
		)

		(declare (assoc
			feat_index_map (zip features (indices features))
			new_feature_transform (get !featureCustomDerivedMethods (list feature "train"))
			op_limit (* (size series_data) !sandboxedComputeLimit)
		))

		;process and return the generated series data
		(map
			(lambda (let
				(assoc series_row_index (current_index 1) )

				(get_value
					(call_sandboxed new_feature_transform (assoc
						series_data series_data
						series_row_index series_row_index
						feat_index_map feat_index_map
					)  op_limit !sandboxedMemoryLimit)
				)
			))

			series_data
		)
	)

	;derives multiple feature values for the specified derived features provided the data to derive from
	;parameters:
	; derived_features: list of features to derived
	; features: list of feature names to match the series_data in the same order as the columns of series_data
	; series_data: list of lists, where the inner list is in the order of features
	;  where the code can access the series_data via series_data via index series_row_index and values via series_row_values
	;returns a list of lists of data, where the inner list values are the derived features matching derived_features
	#!AddDerivedIndependentCodeFeatures
	(declare
		(assoc
			derived_features (list)
			features (list)
			series_data (list)
		)

		(declare (assoc
			feat_index_map (zip features (indices features))
			;assoc of derived feature -> code of function for its derivation
			new_feature_transform_map
				(map
					(lambda (get !featureCustomDerivedMethods (list (current_index 1) "train")) )
					(zip derived_features)
				)
			op_limit (* (size series_data) !sandboxedComputeLimit)
		))

		(map
			(lambda (let
				(assoc series_row_index (current_index 1) )

				(map
					(lambda (get_value
						(call_sandboxed (get new_feature_transform_map (current_value)) (assoc
							series_data series_data
							series_row_index series_row_index
							feat_index_map feat_index_map
						)  op_limit !sandboxedMemoryLimit)
					))
					derived_features
				)
			))
			series_data
		)
	)

	;constrains code to the specified list of allowed_opcodes
	; then it finds any node that has a label and replaces it by a copy of label_to_code,
	; replacing label_value with the value at the label and label_name with the label name
	#!ParseDerivedFeatureCode
	(declare
		(assoc
			code_string (null)
			label_to_code (null)
		)

		(declare (assoc code (parse code_string)))

		(rewrite
			(lambda (let
				(assoc
					node (current_value 1)
					label_name (first (get_labels (current_value 1)))
				)

				(if
					;if not a label, just use
					(not label_name)
					node

					;else need to rewrite label_to_code
					(rewrite
						(lambda (let
							(assoc to_replace_node (current_value 1))
							(if
								;replaces instance of 'label_value' found in the passed in label_to_code with the actual node value (i.e., offset)
								(= to_replace_node (lambda label_value))
								(get_value node)

								;replaces instance of 'label_name' found in the passed in label_to_code with the actual name of the label (i.e., feature)
								(= to_replace_node (lambda label_name))
								(concat label_name)

								to_replace_node
							)
							;to_replace_node
						))
						label_to_code
					)
				)
			))
			code
		)
	)

	;Derive feature values from the provided features and values using each derived feature's custom code string, output a list of computed values.
	;
	;parameters:
	; derived_features: list of strings, feature name(s) for which values should be derived, in the specified order.
	; features_values_map: assoc of feature -> values used to compute the resulting value.
	#!ComputeFeatureValuesFromCode
	(declare
		(assoc
			derived_features (list)
			feature_values_map (assoc)

			;not a parameter
			has_derived_datetime_features (false)
		)

		;if there are datetime features, make sure to convert them appropriately
		(if !hasDateTimeFeatures
			(seq
				(assign (assoc has_derived_datetime_features (size (intersect (zip derived_features) !featureDateTimeMap)) ))

				;if feature_values_map has datetime features, convert them to epoch
				(if (size (intersect feature_values_map !featureDateTimeMap))
					(assign (assoc
						feature_values_map
							(map
								(lambda
									(if (contains_index !featureDateTimeMap (current_index))
										;encode datetime by converting string date time into seconds since epoch
										(if (!= (null) (current_value))
											(format
												(current_value)
												(get !featureDateTimeMap (list (current_index 1) "date_time_format"))
												"number"
												(assoc "locale" (get !featureDateTimeMap (list (current_index 2) "locale")))
												(null)
											)
										)

										;else output original value
										(current_value)
									)
								)
								feature_values_map
							)
					))
				)
			)
		)

		(declare (assoc
			op_limit (* (size feature_values_map) !sandboxedComputeLimit)
		))

		(declare (assoc
			derived_values
				;iterate over the list of derived features and compute each feature value from the provided features and feature_values
				(map
					(lambda
						(if (contains_index (get !featureAttributes (current_value)) "derived_feature_code")
							(let
								(assoc
									raw_code_string (get !featureAttributes (list (current_value 2) "derived_feature_code"))
								)

								(declare (assoc
									new_feature_transform_processed  (get !featureCustomDerivedMethods (list (current_value 2) "react"))
									output_value (null)
								))
								(assign (assoc
									output_value
										(get_value
											(call_sandboxed new_feature_transform_processed (assoc feature_values_map feature_values_map) op_limit !sandboxedMemoryLimit)
										)
								))

								;append derived feature and value to the input features and values so that they could be used by the next derived feature
								(accum (assoc feature_values_map (associate (current_value 2) output_value)))

								output_value
							)
						)
					)
					derived_features
				)
		))

		;if derived_features has datetime features, convert them to strings
		(if has_derived_datetime_features
			(map
				(lambda (let
					(assoc feature (get derived_features (current_index 1)))

					(if (contains_index !featureDateTimeMap feature)
						;encode datetime by converting seconds since epoch back into a string date
						(if (!= (null) (current_value))
							(format
								(current_value)
								"number"
								(get !featureDateTimeMap (list feature "date_time_format"))
								(null)
								(assoc "locale" (get !featureDateTimeMap (list feature "locale")))
							)
						)

						;else output original value
						(current_value)
					)
				))
				derived_values
			)

			;else just return the values
			derived_values
		)
	)
)
