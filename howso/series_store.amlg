;Contains methods to update internal series stores.
(null

	;append cases to a series
	;
	;parameters:
	; series: series id, the key for storing series of react cases
	; context_features: list of context features for the corresponding context_values
	; context_values: list of lists. Case values corresponding to the context features to store into a series.
	#append_to_series_store
	(declare
		(assoc
			series (null)
			context_features (null)
			context_values (null)
		)

		(if (contains_value (list series context_features context_values) (null))
			(call !Return (assoc
				errors (list "Must specify 'series', 'context_features' and 'context_values' to append to the series store.")
			))
		)

		(map
			(lambda (let
				(assoc case_context_values (current_value 1))

				(call !AppendCaseToSeriesStoreWithoutEncoding (assoc
					series series
					context_features context_features
					context_values
						(if !hasFeaturesNeedEncodingFromInput
							(call !ConvertFromInput (assoc
								feature_values case_context_values
								features context_features
							))

							case_context_values
						)
				))
			))
			context_values
		)

		(call !Return)
	)



	;helper method to store react case and features into the specified into_series_store !seriesStore
	;outputs the react case object
	;
	;parameters:
	; react_case: the react output whose values to store. React action values are assumed to be unencoded
	; action_features: list of action features corresponding to the react_case action_values
	; context_features: list of context features used during react
	; context_values: list of context_values used during react
	; series: series id, the key for storing a series of react cases in !seriesStore
	#!AppendCaseToSeriesStoreWithoutEncoding
	(declare
		(assoc
			series (null)
			action_features (list)
			context_features (list)
			context_values (list)
			react_case (assoc)
		)

		(declare (assoc
			series_store (get !seriesStore series)
			action_values (get react_case "action_values")
			all_features (append context_features action_features)
		))

		;encode values so that they are stored as encoded
		(if !hasFeaturesNeedEncodingFromInput
			(assign (assoc
				action_values
					(call !ConvertFromInput (assoc
						features action_features
						feature_values action_values
					))
				context_values
					(call !ConvertFromInput (assoc
						features context_features
						feature_values context_values
					))
			))
		)

		(declare (assoc
			all_values (append context_values action_values)
			reorder_values (false)
		))

		;if there are duplicate features among context and action features, remove them here
		;with action_values taking precedence over(writing) their 'same-feature' context values
		(if (!=
				(size all_features)
				(size (values all_features (true) ))
			)
			(let
				(assoc combined_values_map (zip all_features all_values) )
				(assign (assoc
					all_features (indices combined_values_map)
					all_values (values combined_values_map)
					;values will need to be stored in the same order as all other previous cases in this series
					reorder_values (true)
				))
			)
		)

		;if it doesn't exist, initialize it to an empty list and store the features
		(if (= (null) series_store)
			(seq
				(assign (assoc series_store (list)))
				(accum_to_entities (assoc !seriesFeatures (associate series all_features)))
			)
		)

		;all_values might be in a different order due to unzipping due to duplicate features,
		;fix the order here to match other cases in series
		(if reorder_values
			(assign (assoc
				all_values
					(unzip
						(zip all_features all_values)
						(get !seriesFeatures series)
					)
			))
		)

		;add the generated case to !seriesStore, format of { series:  [ react values ] }
		(assign_to_entities (assoc
			!seriesStore
				(set !seriesStore series
					(append series_store (list all_values))
				)
		))

		;output the case object
		react_case
	)

	;clears stored series
	;
	;parameters:
	; series: optional, series id to clear. if not provided, removes entire store
	#remove_series_store
	(seq
		;remove entire store if series isn't provided
		(if (= (null) series)
			(assign_to_entities (assoc
				!seriesStore (assoc)
				!seriesFeatures (assoc)
			))

			;else remove only the series for the session
			(assign_to_entities (assoc
				!seriesStore (remove !seriesStore series)
				!seriesFeatures (remove !seriesFeatures series)
			))
		)
		(accum_to_entities (assoc !revision 1))
		(call !Return)
	)
)