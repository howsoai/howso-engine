;Contains methods for calculating conviction for cases.
(null

	;computes various data, such as familiarity convictions and distance contribution for each case in the model and stores them into specified features.
	; After this method is called, if "similarity_conviction" or "distance_contribution" are selected, then they may be used as `derived_context_features`
	; in `react` under the same feature name specified in this method.
	;{long_running (true)}
	#react_into_features
	(declare
		(assoc
			;{type "list" values "string"}
			;list of features for which to calculate conviction, will default to trainee's default features if unspecified
			features (null)
			;{type "list" values {type "list" values ["string" "number"] min_size 2 max_size 2}}
			;the list of case ids for the model to calculate conviction for
			case_ids (null)
			;{type ["boolean" "string"]}
			;true or string, if true will use default value of "familiarity_conviction_addition" for feature name
			familiarity_conviction_addition (null)
			;{type ["boolean" "string"]}
			;true or string, if true will use default value of "familiarity_conviction_removal" for feature name
			familiarity_conviction_removal (null)
			;{type ["boolean" "string"]}
			;true or string, default is false. if true will use default value of 'p_value_of_addition' for feature name
			p_value_of_addition (null)
			;{type ["boolean" "string"]}
			;true or string, default is false. if true will use default value of 'p_value_of_removal' for feature name
			p_value_of_removal (null)
			;{type ["boolean" "string"]}
			;true or string, if true will use default value of "distance_contribution" for feature name
			distance_contribution (null)
			;{type ["boolean" "string"]}
			;true or string, if true will use default value of "similarity_conviction" for feature name
			similarity_conviction (null)
			;{type ["boolean" "string"]}
			;true or string, if true will use default value of "influence_weight_entropy"
			influence_weight_entropy (null)
			;{type "boolean"}
			;flag, if set to true, will enable auto_analyze and analyze with these specified features computing their values.
			;   Only applicable when reacting for the entire dataset,  when case_ids is null.
			analyze (null)
			;{ref "UseCaseWeights"}
			;flag, if set to true will scale influence weights by each case's weight_feature weight. If unspecified,
			;	case weights will be used if the trainee has them.
			use_case_weights (null)
			;{type "string"}
			;name of feature whose values to use as case weights
			weight_feature ".case_weight"
		)
		(call !ValidateParameters)

		(declare (assoc
			valid_weight_feature (false)
			warnings (assoc)
		))

		;if no parameters specified, do nothing
		(if
			(= (null)
			   familiarity_conviction_addition familiarity_conviction_removal distance_contribution
			   p_value_of_addition p_value_of_removal similarity_conviction influence_weight_entropy
			)
			(conclude (call !Return))
		)

		;if any of the compute options are true, overwrite with their corresponding default feature names
		(if (= (true) familiarity_conviction_addition)
			(assign (assoc familiarity_conviction_addition "familiarity_conviction_addition"))
		)
		(if (= (true) familiarity_conviction_removal)
			(assign (assoc familiarity_conviction_removal "familiarity_conviction_removal"))
		)
		(if (= (true) p_value_of_addition)
			(assign (assoc p_value_of_addition "p_value_of_addition"))
		)
		(if (= (true) p_value_of_removal)
			(assign (assoc p_value_of_removal "p_value_of_removal"))
		)
		(if (= (true) distance_contribution)
			(assign (assoc distance_contribution "distance_contribution"))
		)
		(if (= (true) similarity_conviction)
			(assign (assoc similarity_conviction "similarity_conviction"))
		)
		(if (= (true) influence_weight_entropy)
			(assign (assoc influence_weight_entropy "influence_weight_entropy"))
		)

		;flag set to true if similarity_conviction was requested without distance_contribution
		(declare (assoc only_similiarity_conviction (false) ))

		(if (and
				(!= (null) similarity_conviction)
				(or (= (null) distance_contribution) (= (false) distance_contribution))
				(= (null) case_ids)
			)
			;if computing similarity_conviction for all cases, distance_contribution is needed for all cases
			(assign (assoc
				distance_contribution "distance_contribution"
				only_similiarity_conviction (true)
			))
		)

		(if (= (null) features)
			(assign (assoc features !trainedFeatures))
		)

		;if user doesn't want to use case weights, change weight_feature to '.none'
		(if (= (false) use_case_weights)
			(assign (assoc weight_feature ".none"))
		)

		(declare (assoc
			cache_values (false)
			;create assoc of type of computation -> stored feature name
			computed_map
				(filter
					(lambda (current_value))
					(assoc
						"familiarity_conviction_addition" familiarity_conviction_addition
						"familiarity_conviction_removal" familiarity_conviction_removal
						"p_value_of_addition" p_value_of_addition
						"p_value_of_removal" p_value_of_removal
						"distance_contribution" distance_contribution
						"similarity_conviction" similarity_conviction
						"influence_weight_entropy" influence_weight_entropy
					)
				)
		))

		;when storing values for entire dataset, update feature attributes with the feature so it's known that the feature has been cached
		(if (= (null) case_ids)
			(assign_to_entities (assoc
				!featureAttributes
					(append
						!featureAttributes
						(zip
							(values computed_map)
							(map
								(lambda
									(if (or (= "p_value_of_addition" (current_value)) (= "p_value_of_removal" (current_value)))
										{"type" "continuous" "data_type" "number" "bounds" {"min" 0 "max" 1} }

										;else convictions, entropy and distance contribution ranges are 0 to infinity
										{"type" "continuous" "data_type" "number" "bounds" {"min" 0 "max" .infinity} }
									)
								)
								(indices computed_map)
							)
						)
					)
			))
		)

		(if (and analyze (= (null) case_ids))
			(seq
				(assign_to_entities (assoc
					!computedFeaturesMap
						(assoc
							"computed_features"
								(values
									;don't use distance_contribution as a feature for analysis if only similarity_conviction was explicitly specified
									(if only_similiarity_conviction
										(remove computed_map "distance_contribution")
										computed_map
									)
								)
							"computed_map"
								(if only_similiarity_conviction
									(set computed_map "distance_contribution" (false))
									computed_map
								)
							"context_features" features
							"weight_feature" (if use_case_weights weight_feature)
						)
					!autoAnalyzeEnabled (true)
					!queryDistanceTypeMap (append !queryDistanceTypeMap (zip (values computed_map) "continuous_number") )
				))

				;need to cache computed values to be able to approximate any of these listed computations during future train calls
				(assign (assoc
					cache_values
						(or familiarity_conviction_addition p_value_of_addition familiarity_conviction_removal p_value_of_removal)
				))
			)
		)

		(declare (assoc
			hyperparam_map
				(call !GetHyperparameters (assoc
					feature (null)
					context_features features
					weight_feature weight_feature
				))
			dataset_size (call !GetNumTrainingCases)
		))

		(call !UpdateCaseWeightParameters)

		(declare (assoc
			feature_weights (get hyperparam_map "featureWeights")
			feature_deviations  (get hyperparam_map "featureDeviations")
			closest_k (get hyperparam_map "k")
			p_parameter (get hyperparam_map "p")
			dt_parameter (get hyperparam_map "dt")
			query_feature_attributes_map (get hyperparam_map "featureDomainAttributes")
			;get the min k if using dynamic k
			k_parameter_value (if (~ 0 (get hyperparam_map "k")) (get hyperparam_map "k") (get hyperparam_map ["k" 1]) )
			case_to_dc_map (null)
		))

		;output a warning when trainee has not been analyzed (using default hyperparameters w/o residuals)
		(if (and
				(!= (zip !trainedFeatures) (zip (indices (get hyperparam_map "featureResiduals"))) )
				(= (list ".default") (get hyperparam_map "paramPath"))
			)
			(accum (assoc
				warnings (assoc "Results may be inaccurate because trainee has not been analyzed for targetless flows.\nRun 'analyze()' prior to calling this method.")
			))

			;warn if specified weight_feature hasn't been analyzed
			(and use_case_weights (!= weight_feature (last (get hyperparam_map "paramPath"))))
			(accum (assoc
				warnings
					(associate (concat
						"Results may be inaccurate because trainee has not been analyzed with case weights.\n"
						"Run 'analyze()' with use_case_weights=true, weight_feature='" weight_feature "' "
						"prior to calling this method."
					))
			))
		)

		;if not using dynamic k, closest k must be at least 2 smaller than model size, i.e., a model of 5 needs a K of 3 or less:
		;when knocking out a case during conviction calculations, each remaining case searches for K cases around itself
		;meaning that the K must be at least 2 less than the model size
		(if (and (~ 0 closest_k) (< dataset_size (+ closest_k 2)) )
			(assign (assoc closest_k (- dataset_size 2)))
		)

		;will need to compute distance_contributions if caching values even if distance_contribution were not explicitly requested
		(if (or distance_contribution cache_values)
			(seq
				(assign (assoc
					case_to_dc_map
						(compute_on_contained_entities
							||(query_entity_distance_contributions
								closest_k
								features
								case_ids
								p_parameter
								feature_weights
								!queryDistanceTypeMap
								query_feature_attributes_map
								feature_deviations
								(null)
								(if (= dt_parameter "surprisal_to_prob") "surprisal" dt_parameter )
								(if valid_weight_feature weight_feature (null))
								;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
								"fixed rand seed"
								(null) ;radius
								!numericalPrecision
							)
						)
				))

				(if distance_contribution
					(seq
						(call !StoreCaseValues (assoc
							label_name distance_contribution
							case_values_map case_to_dc_map
						))

						(if (not (contains_value !reactIntoFeaturesList distance_contribution))
							(accum_to_entities (assoc !reactIntoFeaturesList distance_contribution))
						)

						(assign_to_entities (assoc !storedDistanceContributionsFeatureSet (sort features) ))
					)
				)

				;if computing for the whole model, update the calculated average distance contribution
				(if (= (null) case_ids)
					(assign_to_entities (assoc
						!averageCaseDistanceContribution (generalized_mean case_to_dc_map)
					))
				)

				;cache converted distance_contributions into probabilities for future familiarity conviction approximations
				(if cache_values
					(let
						(assoc
							scale (/ dataset_size (+ 1 dataset_size))
							total_dc (apply "+" (values case_to_dc_map))
						)
						(assign_to_entities (assoc
							!cachedExpectedCaseProbabilities
								;convert each dc value to a probability by dividing by the total_dc and scale it by the next expected case scale value
								;e.g, given dc probabilities [ .1 .2 .3 .4 ], next case will be 5th, so its expected probability is (1/5 = 0.2)
								;need to multiple each dc prob by 4/5 so the end result will be [ .08 .16 .24 .32 .2 ]
								(append
									(map
										(lambda (* scale (/ (current_value) total_dc)) )
										(values case_to_dc_map)
									)
									(/ 1 (+ 1 dataset_size))
								)
						))
					)
				)
			)
		)

		(if (or familiarity_conviction_addition p_value_of_addition)
			;calculates the conviction for each case, making a map of case id -> conviction
			(let
				(assoc
					entropies_map
						(compute_on_contained_entities
							||(query_entity_kl_divergences
								closest_k
								features
								case_ids
								p_parameter
								feature_weights
								!queryDistanceTypeMap
								query_feature_attributes_map
								feature_deviations
								(null)
								(if (= dt_parameter "surprisal_to_prob") "surprisal" dt_parameter )
								(if valid_weight_feature weight_feature (null))
								;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
								"fixed rand seed"
								(null) ;radius
								!numericalPrecision
							)
						)
				)

				(if p_value_of_addition
					(seq
						(call !StoreCaseValues (assoc
							label_name p_value_of_addition
							case_values_map
								(map
									(lambda (exp (- (current_value))) )
									entropies_map
								)
						))

						(if (not (contains_value !reactIntoFeaturesList p_value_of_addition))
							(accum_to_entities (assoc !reactIntoFeaturesList p_value_of_addition))
						)
					)
				)

				(if familiarity_conviction_addition
					(let
						(assoc avg_entropy (generalized_mean entropies_map) )

						(assign_to_entities (assoc
							!storedCaseConvictionsFeatureAddition familiarity_conviction_addition
							!storedConvictionsFeatureSet (sort features)
						))

						(if cache_values
							(accum_to_entities (assoc !computedFeaturesMap (assoc "cached_average_entropy_addition" avg_entropy) ))
						)

						;store the conviction for the cases into the specified label name
						(call !StoreCaseValues (assoc
							label_name familiarity_conviction_addition
							case_values_map
								;store convictions into entropies_map by dividing avg_entropy by each individual entropy
								(if (= 0 avg_entropy)
									(map (lambda 1.0) entropies_map)

									(map (lambda (/ avg_entropy (current_value))) entropies_map)
								)
						))

						(if (not (contains_value !reactIntoFeaturesList familiarity_conviction_addition))
							(accum_to_entities (assoc !reactIntoFeaturesList familiarity_conviction_addition))
						)
					)
				)
			)
		)

		(if (or familiarity_conviction_removal p_value_of_removal)
			;calculates the conviction for each case, making a map of case id -> conviction
			(let
				(assoc
					entropies_map
						(compute_on_contained_entities
							||(query_entity_kl_divergences
								closest_k
								features
								case_ids
								p_parameter
								feature_weights
								!queryDistanceTypeMap
								query_feature_attributes_map
								feature_deviations
								(null)
								(if (= dt_parameter "surprisal_to_prob") "surprisal" dt_parameter )
								(if valid_weight_feature weight_feature (null))
								;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
								"fixed rand seed"
								(null) ;radius
								!numericalPrecision
								(true) ;conviction of removal
							)
						)
				)

				(if p_value_of_removal
					(seq
						(call !StoreCaseValues (assoc
							label_name p_value_of_removal
							case_values_map
								(map
									(lambda (exp (- (current_value))) )
									entropies_map
								)
						))

						(if (not (contains_value !reactIntoFeaturesList p_value_of_removal))
							(accum_to_entities (assoc !reactIntoFeaturesList p_value_of_removal))
						)
					)
				)

				(if familiarity_conviction_removal
					(let
						(assoc avg_entropy (generalized_mean entropies_map) )

						(if cache_values
							(accum_to_entities (assoc !computedFeaturesMap (assoc "cached_average_entropy_removal" avg_entropy) ))
						)

						(call !StoreCaseValues (assoc
							label_name familiarity_conviction_removal
							case_values_map
								;store convictions into entropies_map by dividing avg_entropy by each individual entropy
								(if (= 0 avg_entropy)
									(map (lambda 1.0) entropies_map)

									(map (lambda (/ avg_entropy (current_value))) entropies_map)
								)
						))

						(if (not (contains_value !reactIntoFeaturesList familiarity_conviction_removal))
							(accum_to_entities (assoc !reactIntoFeaturesList familiarity_conviction_removal))
						)
					)
				)
			)
		)

		(if similarity_conviction
			(seq
				(declare (assoc
					similarity_convictions_map
						||(map
							(lambda
								(get
									(call !SimilarityConviction (assoc
										features features
										feature_values (unzip (current_value 1) features)
										use_case_weights use_case_weights
										weight_feature weight_feature
										case_id (current_index 1)
									))
									"similarity_conviction"
								)
							)
							;pull all relevant feature values for the cases
							;assoc of case id -> assoc of feature -> values
							(if (= (null) case_ids)
								(compute_on_contained_entities (map (lambda (query_exists (current_value))) features))

								(compute_on_contained_entities
									(query_in_entity_list case_ids)
									(map (lambda (query_exists (current_value))) features)
								)
							)
						)
				))

				(call !StoreCaseValues (assoc
					label_name similarity_conviction
					case_values_map similarity_convictions_map
				))

				(if (not (contains_value !reactIntoFeaturesList similarity_conviction))
					(accum_to_entities (assoc !reactIntoFeaturesList similarity_conviction))
				)
			)
		)

		(if influence_weight_entropy
			(seq
				(call !ComputeAndStoreInfluenceWeightEntropies (assoc
					features features
					label_name influence_weight_entropy
					compute_all (true)
				))

				(if (not (contains_value !reactIntoFeaturesList influence_weight_entropy))
					(accum_to_entities (assoc !reactIntoFeaturesList influence_weight_entropy))
				)
			)
		)

		;kick off an analyze run if analyze is enabled
		(if (and analyze (= (null) case_ids))
			(if (!= (null) !savedAnalyzeParameterMap)
				;prevent calling react_into_features during the analyze()
				(call !Analyze (append !savedAnalyzeParameterMap (assoc "from_react_into_features" (true)) ))

				(call !Analyze (assoc
					targeted_model "targetless"
					context_features !trainedFeatures
					weight_feature
						(if (and !autoAblationEnabled !autoAblationWeightFeature)
							!autoAblationWeightFeature
							weight_feature
						)
					use_case_weights (or (and !autoAblationEnabled !autoAblationWeightFeature) use_case_weights)
					k_folds 1
					;prevent calling react_into_features during the analyze()
					from_react_into_features (true)
				))
			)
		)
		;update the known features to include these
		(call !UpdateDefinedFeatures)
		(accum_to_entities (assoc !revision 1))

		;output warnings
		(call !Return (assoc warnings (if (size warnings) (indices warnings)) ))
	)

	;Used by Impute to compute the familiarity conviction of addition for a given case in the model
	; features: list of features
	; case_id : the entity id of the case we want conviction for
	#!ComputeCaseAdditionFamiliarityConviction
	(declare
		(assoc
			features (list)
			case_id (null)
		)

		;if the model is too small, just return 0, otherwise compute conviction
		(if (<= (call !GetNumTrainingCases) 2)
			(conclude 0)
		)

		;if convictions have already been calculated and stored for this feature set, just retrieve them
		(if (and
				(!= (null) !storedCaseConvictionsFeatureAddition)
				(= !storedConvictionsFeatureSet (sort features))
			)
			(conclude (retrieve_from_entity case_id !storedCaseConvictionsFeatureAddition))
		)

		;calculate and store them and then retrieve the value for this case
		(call react_into_features (assoc
			features features
			familiarity_conviction_addition (true)
		))

		(retrieve_from_entity case_id !storedCaseConvictionsFeatureAddition)
	)

	;Compute and output similarity conviction and dc of a case
	;
	;parameters:
	; features: list of features
	; feature_values: list of corresponding feature values
	; filtering_queries: (optional) list of filtering queries (such as ignoring a specific case) during computation
	; case_id: optional, id of case to compute similarity conviction for
	; react_group: optional, default false. if true this is being called from react_group and should compute local dc map
	#!SimilarityConviction
	(declare
		(assoc
			features (list)
			feature_values (null)
			filtering_queries (list)
			use_case_weights (false)
			weight_feature ".case_weight"
			case_id (null)
			react_group (false)
		)

		(declare (assoc
			feature_weights (get hyperparam_map "featureWeights")
			feature_deviations (get hyperparam_map "featureDeviations")
		))

		;use dynamic deviations subtrainee if present
		(if (get hyperparam_map "subtraineeName")
			(call !UseDynamicDeviationsAndWeights (assoc
				context_features features
				context_values feature_values
				hyperparam_map hyperparam_map
			))
		)

		(declare (assoc
			case_dc
				;when computing similarity_conviction for all cases, distance_contribution is needed for all cases and
				;was computed and stored into 'case_to_dc_map' earlier in the flow.  This method is being called for each case,
				;thus if case_id is specified, this is part of computing similarity_conviction on the entire dataset,
				;and 'case_to_dc_map' already exists, pull distance contribution value from 'case_to_dc_map' instead of computing it
				(if case_id
					(get case_to_dc_map case_id)

					;else compute distance contribution for the provided case feature_values
					(first
						(compute_on_contained_entities
							filtering_queries
							(query_distance_contributions
								(get hyperparam_map "k")
								features
								[feature_values]
								(get hyperparam_map "p")
								feature_weights
								!queryDistanceTypeMap
								(get hyperparam_map "featureDomainAttributes")
								feature_deviations
								(null)
								(if (= (get hyperparam_map "dt") "surprisal_to_prob") "surprisal" (get hyperparam_map "dt") )
								(if use_case_weights weight_feature (null))
								;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
								"fixed rand seed"
								(null) ;radius
								!numericalPrecision
							)
						)
					)
				)
			local_cases
				(contained_entities
					(if case_id
						(query_not_in_entity_list [case_id] )
						filtering_queries
					)
					(query_nearest_generalized_distance
						(max k_parameter_value !regionalMinSize)
						features
						feature_values
						(get hyperparam_map "p")
						feature_weights
						!queryDistanceTypeMap
						(get hyperparam_map "featureDomainAttributes")
						feature_deviations
						(null)
						(if (= (get hyperparam_map "dt") "surprisal_to_prob") "surprisal" (get hyperparam_map "dt") )
						(if use_case_weights weight_feature (null))
						;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
						"fixed rand seed"
						(null) ;radius
						!numericalPrecision
					)
				)
		))

		(declare (assoc
			local_distance_contributions_map
				(if case_id
					(zip local_cases (unzip case_to_dc_map local_cases))

					;number of cases in datasets does not equal the number of cases with distance contributions,
					;not all cases have distance_contribution, must calculate distance_contribution for nearest neighbors
					(or
						(!= (size (contained_entities (query_exists "distance_contribution") )) (call !GetNumTrainingCases))
						;or react_group specified filtering_queries to filter out group case ids
						(and react_group (size filtering_queries))
						;or features don't match feature set that was used to store DCs
						(!= !storedDistanceContributionsFeatureSet (sort features))
					)
					(compute_on_contained_entities
						filtering_queries
						||(query_entity_distance_contributions
							(get hyperparam_map "k")
							features
							local_cases
							(get hyperparam_map "p")
							feature_weights
							!queryDistanceTypeMap
							(get hyperparam_map "featureDomainAttributes")
							feature_deviations
							(null)
							(if (= (get hyperparam_map "dt") "surprisal_to_prob") "surprisal" (get hyperparam_map "dt") )
							(if use_case_weights weight_feature (null))
							;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
							"fixed rand seed"
							(null) ;radius
							!numericalPrecision
						)
					)

					;cases have distance_contribution, just retrieve them from the local cases as an assoc of case id : dc value
					(map
						(lambda (first (current_value)))
						;outputs an assoc of {case id : { feature : value } }
						(compute_on_contained_entities
							(query_in_entity_list local_cases)
							(query_exists "distance_contribution")
						)
					)
				)
		))

		;output similarity conviction as ratio of expected (avg local cases) / calculated case distance contribution
		(assoc
			"similarity_conviction" (/ (generalized_mean local_distance_contributions_map) case_dc)
			"distance_contribution" case_dc
		)
	)
)