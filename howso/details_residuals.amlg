;Contains helper methods for calculating case and feature residuals and optionally prediction stats for details and explanations.
(null

	;Helper method to compute and add to output local feature residuals and optionally prediction stats
	#!ComputeReactFeatureResiduals
	(declare
		(assoc
			relevant_features (append context_features action_features)
			regional_cases_map
				(compute_on_contained_entities (append
					filtering_queries
					(query_nearest_generalized_distance
						(max k_parameter !regionalMinSize)
						context_features
						context_values
						feature_weights
						!queryDistanceTypeMap
						query_feature_attributes_map
						feature_deviations
						p_parameter
						dt_parameter
						(if valid_weight_feature weight_feature (null))
						;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
						"fixed rand seed"
						(null)
						!numericalPrecision
					)
				))
		)

		(declare (assoc
			local_feature_metrics
				(if (>= dataset_size 2)
					(call !ExpandResidualValuesToUncertainty  (assoc
						feature_residuals_map
							(call !CalculateFeatureResiduals (assoc
								;only the features from the details
								context_features relevant_features
								features (or details_features relevant_features)
								case_ids (indices regional_cases_map)
								regional_data_only (true)
								robust_residuals robust_residuals
								compute_all_statistics compute_all_statistics
								;use the same hyperparameters that were used to make the original prediction
								custom_hyperparam_map hyperparam_map
								compute_null_uncertainties (false)
							))
					))

					;can't compute residuals or prediction stats if model is too small
					(assoc
						"residual_map" (zip relevant_features 0)
						"prediction_stats" (zip relevant_features (assoc))
					)
				)
		))

		;append feature deviations to output if selected
		(if (or (get details "feature_full_residuals") (get details "feature_robust_residuals"))
			(accum (assoc output
				(if robust_residuals
					(assoc "feature_robust_residuals" (get local_feature_metrics "residual_map"))
					(assoc "feature_full_residuals" (get local_feature_metrics "residual_map"))
				)
			))
		)

		;append prediction stats to output if selected
		(if (get details "prediction_stats")
			(accum (assoc
				output
					(assoc
						"prediction_stats"
							(append
								(keep
									(get local_feature_metrics "prediction_stats")
									;Only keep the selected prediction stats
									(append selected_prediction_stats "residual_map")
								)
								(if (contains_value selected_prediction_stats "mae")
									(assoc mae (get local_feature_metrics "residual_map"))
								)
							)
					)
			))
		)
	)

	;Helper method to compute and add to output local feature residuals and optionally prediction stats
	#!ComputeReactFeatureDeviations
	(declare
		(assoc
			relevant_features (append context_features action_features)
			regional_case_ids
				(contained_entities (append
					filtering_queries
					(query_nearest_generalized_distance
						(max k_parameter !regionalMinSize)
						context_features
						context_values
						feature_weights
						!queryDistanceTypeMap
						query_feature_attributes_map
						feature_deviations
						p_parameter
						dt_parameter
						(if valid_weight_feature weight_feature (null))
						;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
						"fixed rand seed"
						(null)
						!numericalPrecision
					)
				))
		)

		(accum (assoc
			output
				(assoc
					feature_deviations
						(get
							(call !ExpandResidualValuesToUncertainty  (assoc
								feature_residuals_map
									(call !CalculateFeatureResiduals (assoc
										features (or details_features relevant_features)
										context_features context_features
										case_ids regional_case_ids
										regional_data_only (true)
										robust_residuals "deviations"
										;use the same hyperparameters that were used to make the original prediction
										custom_hyperparam_map hyperparam_map
										compute_null_uncertainties (false)
										weight_feature (if valid_weight_feature weight_feature (null))
										valid_weight_feature valid_weight_feature
									))
							))
							"residual_map"
						)
				)
		))
	)

	;calculate residuals for a given case, assuming the case is already not in the model
	;outputs an assoc of features -> residual value (mean absolute error for continuous, difference in categorical action probability for categorical)
	;parameters:
	; context_features: features to use as contexts in residuals calculations, may include action_features
	; action_features: features for which to calculate residuals
	; case_value_map : map of case values, i.e. the expected values
	; ignore_case: case_id, if set will query for K+1 cases and ignore the perfect matching case during the reaction
	#!CalculateResidualsForCase
	(declare
		(assoc
			context_features (list)
			action_features (list)
			case_value_map (assoc)
			ignore_case (null)
			case_residuals_map (null)
		)

		;if model is too small to compute residuals, output fixed values
		(if (<= dataset_size 2)
			(conclude
				(seq
					(if (get details "feature_full_residuals_for_case")
						(accum (assoc output (assoc "feature_full_residuals_for_case" (zip features 0)) ))
					)
					(if (get details "feature_robust_residuals_for_case")
						(accum (assoc output (assoc "feature_robust_residuals_for_case" (zip features 0)) ))
					)
					(if (get details "feature_full_residual_convictions_for_case")
						(accum (assoc output (assoc "feature_full_residual_convictions_for_case" (zip features 1)) ))
					)
				)
			)
		)

		(declare (assoc
			context_map (keep case_value_map context_features)
			inactive_features_zeros_map (assoc)
		))

		;remove any inactive features from all features lists so they are ignored during compute
		;and create an assoc of inactive feature -> 0 for all of them to add to output of all residual computations
		(if !inactiveFeaturesMap
			(assign (assoc
				features (filter (lambda (not (contains_index !inactiveFeaturesMap (current_value)))) features)
				inactive_features_zeros_map (zip (indices !inactiveFeaturesMap) 0)
			))
		)

		(if (get details "feature_robust_residuals_for_case")
			(call !CalculateCaseResiduals (assoc robust_residuals (true)))
		)

		(if
			(or
				(get details "feature_full_residuals_for_case")
				(get details "feature_full_residual_convictions_for_case")
			)
			(seq
				(declare (assoc predicted_case_values_map (assoc) ))
				(call !CalculateCaseResiduals (assoc robust_residuals (false)))
				(accum (assoc
					output
						(assoc
							"predicted_values_for_case"
								(zip
									(indices predicted_case_values_map)
									(call !ConvertToOutput (assoc
										features (indices predicted_case_values_map)
										feature_values (values predicted_case_values_map)
									))
								)
						)
				))
				(if (get details "feature_full_residual_convictions_for_case")
					(call !CalculateLocalCaseFeatureResidualConvictions)
				)
			)
		)
	)

	#!CalculateCaseResiduals
	(declare
		(assoc
			case_residuals
				(if robust_residuals
					;for each feature, do 30 reacts with randomly selected contexts
					(map
						(lambda (let
							(assoc
								expected_case_value (get case_value_map (current_value 1))
								action_feature (current_value 1)
								action_is_nominal (contains_index !nominalsMap (current_value 1))
								action_feature (current_value 1)
								contexts_only_map (remove context_map (current_value 1))
								robust_predictions (list)
							)

							;if the case value is null, but nulls aren't allowed, return null as residual so it can be computed below
							(if (and (= (null) expected_case_value) (not allow_nulls))
								(null)

								(seq
									(assign (assoc
										robust_predictions
											(range
												(lambda (let
													(assoc
														;randomly remove features from the context map
														filtered_context_map (filter (lambda (< (rand) .5)) contexts_only_map)
													)
													(declare (assoc
														reaction
															(call !ReactDiscriminative (assoc
																return_action_values_only (true)
																context_features (indices filtered_context_map)
																context_values (values filtered_context_map)
																action_features (list action_feature)
																ignore_case ignore_case
																;bypass encoding since stored case values are all encoded and we're reacting to raw retrieved values
																skip_encoding 1
																;bypass decoding since computing distances to each reaction uses encoded numeric values
																skip_decoding 1
																force_targetless force_targetless
																substitute_output (false)
																details (if action_is_nominal (assoc "categorical_action_probabilities" (true)))
															))
													))

													;if feature is nominal get the categorical action probability for expected value, if it's null then set it to 0
													;else it's: 1 - probability
													(if action_is_nominal
														(let
															(assoc
																predicted_probability
																	(or (get reaction (list "categorical_action_probabilities" action_feature expected_case_value)) 0)
															)

															(- 1 predicted_probability)
														)

														;else this is a continuous feature, return the absolute difference between the expected and the actual
														(abs (- expected_case_value (get reaction 0)))
													)
												))
												1 30 1
											)
									))

									;return average of all the robust predictions for each feature
									(/ (apply "+" robust_predictions) 30)
								)
							)
						))
						action_features
					)

					;else standard computation, do leave-one-out for each feature and predict it once
					(map
						(lambda (let
							(assoc
								filtered_context_features (indices (remove context_map (current_value 1)))
								expected_case_value (get case_value_map (current_value 1))
								action_feature (current_value 1)
								action_is_nominal (contains_index !nominalsMap (current_value 1))
							)

							;if the case value is null, but nulls aren't allowed, return null as residual so it can be computed below
							(if (and (= (null) expected_case_value) (not allow_nulls) )
								(null)

								(let
									(assoc
										reaction
											(call !ReactDiscriminative (assoc
												return_action_values_only (true)
												context_features filtered_context_features
												context_values (unzip context_map filtered_context_features)
												action_features (list action_feature)
												ignore_case ignore_case
												;bypass encoding since stored case values are all encoded and we're reacting to raw retrieved values
												skip_encoding 1
												;bypass decoding since computing distances to each reaction uses encoded numeric values
												skip_decoding 1
												force_targetless force_targetless
												substitute_output (false)
												details (if action_is_nominal (assoc "categorical_action_probabilities" (true)))
											))
									)

									(accum (assoc
										predicted_case_values_map
											(associate
												action_feature
												(if action_is_nominal
													(get reaction ["action_values" 0])
													(get reaction 0)
												)
											)
									))

									;if feature is nominal get the categorical action probability for expected value, if it's null then set it to 0
									;else it's: 1 - probability
									(if action_is_nominal
										(let
											(assoc
												predicted_probability
													(or (get reaction (list "categorical_action_probabilities" action_feature expected_case_value)) 0)
											)

											(- 1 predicted_probability)
										)

										;else this is a continuous feature, return the absolute difference between the expected and the actual
										(abs (- expected_case_value (get reaction 0)))
									)
								)
							)
						))
						action_features
					)
				)
			local_null_feature_convictions (assoc)
		)
		(assign (assoc
			case_residuals_map (zip action_features case_residuals)
			local_null_conviction_ratios_map (null)
		))
		;replace case residual nulls with computed values if nulls aren't allowed
		(if (and (contains_value case_residuals (null)) (not allow_nulls) )
			(let
				(assoc
					;leave only features with null values
					null_features
						(indices (filter (lambda (= (null) (current_value))) case_residuals_map))
					regional_cases
						(contained_entities (append
							filtering_queries
							(query_nearest_generalized_distance
								(max k_parameter !regionalMinSize)
								context_features
								context_values
								feature_weights
								!queryDistanceTypeMap
								query_feature_attributes_map
								feature_deviations
								p_parameter
								dt_parameter
								(if valid_weight_feature weight_feature (null))
								;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
								"fixed rand seed"
								(null)
								!numericalPrecision
							)
						))
					computing_case_feature_residual_convictions (get details "case_feature_residual_convictions")
					null_residual_and_ratio_tuple_map (assoc)
				)

				;iterate over all the null features and populate a map of feature -> [ residual value, local_non_null_ratio, global_non_null_ratio ]
				(assign (assoc
					null_residual_and_ratio_tuple_map
						(map
							(lambda (let
								(assoc
									null_feature (current_index 1)
									num_local_cases (size regional_cases)
									;list of all non null values for this null_feature in this regional model
									non_null_local_values (list)
								)
								;pull all values for this feature and filter out nulls
								(assign (assoc
									non_null_local_values
										(filter (map
											(lambda (retrieve_from_entity (current_value) null_feature))
											regional_cases
										))
								))

								;if all cases in local model have nulls for this feature as well, and we will be computing local
								;feature residual convictions, set that conviction to be 1 for this case
								(if (and
										computing_case_feature_residual_convictions
										(= 0 (size non_null_local_values))
									)
									(accum (assoc local_null_feature_convictions (associate null_feature 1)))
								)

								;if nominal, output residual of 1 and the appropriate ratio
								(if (contains_index !nominalsMap null_feature)
									(list
										1
										;output global ratio if there are no local values
										(if (= 0 (size non_null_local_values))
											(get !featureNullRatiosMap (list null_feature "non_null_ratio"))

											(/ num_local_cases (size non_null_local_values))
										)
										(get !featureNullRatiosMap (list null_feature "non_null_ratio"))
									)

									;else continuous
									(let
										(assoc
											local_feature_min (apply "min" non_null_local_values)
											local_feature_max (apply "max" non_null_local_values)
											num_unique_local_values (size (values non_null_local_values (true) ))
										)

										;if entire local model is null or only has 1 non-null value, use the global null residual
										(if (<= num_unique_local_values 1)
											(list
												(get !featureNullRatiosMap (list null_feature "null_residual"))
												(get !featureNullRatiosMap (list null_feature "non_null_ratio"))
												(get !featureNullRatiosMap (list null_feature "non_null_ratio"))
											)

											;else there are enough local values to compute local null residual
											(list
												(- local_feature_max local_feature_min)
												(/ num_local_cases (size non_null_local_values))
												(get !featureNullRatiosMap (list null_feature "non_null_ratio"))
											)
										)
									)
								)
							))
							(zip null_features)
						)
				))

				(accum (assoc
					case_residuals_map
						(map
							(lambda (first (current_value)))
							null_residual_and_ratio_tuple_map
						)
				))

				(assign (assoc
					local_null_conviction_ratios_map
						(map
							(lambda (get (current_value) 1))
							null_residual_and_ratio_tuple_map
						)
				))
			)
		)

		;add case_feature_residuals to output if requested
		(if (or (get details "feature_full_residuals_for_case")  (get details "feature_robust_residuals_for_case"))
			(accum (assoc output
				(if robust_residuals
					(assoc "feature_robust_residuals_for_case" (append case_residuals_map inactive_features_zeros_map))
					(assoc "feature_full_residuals_for_case" (append case_residuals_map inactive_features_zeros_map))
				)
			))
		)
	)

	#!CalculateLocalCaseFeatureResidualConvictions
	(declare
		(assoc
			action_features_map (keep case_value_map action_features)
			global_residuals_map (get hyperparam_map "featureResiduals")
		)

		;compute the local area residuals for each context feature by
		;a) finding the corresponding local model using all context features without the specific residual feature
		;b) computing the feature residual in that local model
		(declare (assoc
			local_residuals_map
				(map
					(lambda (let
						(assoc
							;the feature for which to compute the residual
							residual_feature (current_index 1)
							;context features without the residual feature
							local_context_features (indices (remove context_map (current_index 1)))
							residual_feature_map (assoc)
							regional_cases_map (assoc)
						)
						(assign (assoc
							regional_cases_map
								(compute_on_contained_entities (append
									filtering_queries
									(query_nearest_generalized_distance
										(replace (max k_parameter !regionalMinSize))
										(replace local_context_features)
										(replace (unzip case_value_map local_context_features))
										(replace feature_weights)
										(replace !queryDistanceTypeMap)
										(replace query_feature_attributes_map)
										(replace feature_deviations)
										(replace p_parameter)
										(replace dt_parameter)
										(if valid_weight_feature (replace weight_feature) (null))
										;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
										"fixed rand seed"
										(null)
										(replace !numericalPrecision)
									)
								))
						))
						(get
							(call !ExpandResidualValuesToUncertainty  (assoc
								feature_residuals_map
									(call !CalculateFeatureResiduals (assoc
										features (append local_context_features residual_feature)
										target_residual_feature residual_feature
										case_ids (indices regional_cases_map)
										regional_data_only (true)
										robust_residuals (false)
										focal_case ignore_case
										;use the same hyperparameters that were used to make the original prediction
										custom_hyperparam_map hyperparam_map
										compute_null_uncertainties (false)
									))
							))
							["residual_map" residual_feature]
						)
					))
					action_features_map
				)
		))

		;if there were pre-computed null feature convictions, overwrite them here
		(if (size local_null_feature_convictions)
			(accum (assoc local_residuals_map local_null_feature_convictions))
		)

		(assign (assoc
			local_convictions_map
				(map
					(lambda
						;current_index is the feature
						;current_value is a list of residuals [local, case]

						;conviction is: local / case residual, prevent divide by 0 by using the minimum residual instead if necesssary
						; conviction is expected surprisal E(I) divided by observed surprisal, I
						; C = E(I) / I
						; The expected surprisal E(I) is the model residual divided by the model residual: MR / MR = 1.0
						; The observed surprisal I is the observed residual divded by the model residual: OR / MR
						; So, E(I) / I = (MR / MR) / (OR / MR) = MR / OR
						; In this way, we can directly divide the model (global or local) residual by the observed residual to get conviction
						(if (= 0 (last (current_value)) )
							(/
								(call !LK_metric (assoc
									difference (first (current_value 1))
									deviation (or (get global_residuals_map (current_index 1)) 0)
								))
								(call !LK_metric (assoc
									difference (get !cachedFeatureMinResidualMap (current_index 1))
									deviation (or (get global_residuals_map (current_index 1)) 0)
								))
							)

							;prevent nan from divide by null, output null as-is when nulls are allowed
							(= (null) (last (current_value)))
							(null)

							(/
								(call !LK_metric (assoc
									difference (first (current_value 1))
									deviation (or (get global_residuals_map (current_index 1)) 0)
								))
								(call !LK_metric (assoc
									difference (last (current_value 1))
									deviation (or (get global_residuals_map (current_index 1)) 0)
								))
							)
						)
					)
					local_residuals_map
					case_residuals_map
				)
		))

		; convictions are multiplied by the null_conviction_ratios, which are (num_cases / num_not_null_cases)
		; this can be thought of as dividing the surprisal of the observed feature value by the proportion of
		; non-null values for the given feature
		; so, as the amount of null_values in the model increases, the observed surprisal of a null decreases
		(if local_null_conviction_ratios_map
			(assign (assoc
				local_convictions_map
					(map
						(lambda
							;current_value is a list of [conviction, ratio], if ratio is null use 1 instead
							(* (first (current_value)) (or (last (current_value)) 1))
						)
						local_convictions_map
						local_null_conviction_ratios_map
					)
			))
		)

		(accum (assoc
			output
				(assoc
					"feature_full_residual_convictions_for_case"
						(append local_convictions_map inactive_features_zeros_map)
				)
		))
	)

	;compute the lk given a difference and a deviation
	;difference and deviation should be positive already (this method won't take the absolute value)
	#!LK_metric
	(+
		difference
		(/
			(*
				(exp
					(/
						(- difference)
						deviation
					)
				)
				(+
					(* 3 deviation)
					difference
				)
			)
			2
		)
	)
)