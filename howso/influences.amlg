;Contains methods for computing and outputting feature MDA.
(null
	;calculate the accuracy contribution for each feature as the decrease in accuracy for the specified list of context and action features
	;outputs an assoc of context features -> decrease in accuracy Mean Absolute Error value
	; if output_ratio, the ratio is: feature_mae / baseline_mae
	; else:  feature_mae - baseline_mae
	;
	;parameters:
	; action_features : list of action features
	; context_features : list of context features
	; case_ids : optional list of case_ids, will use the full model if not provided, otherwise will validate against only the specified case_ids
	; sensitivity_to_randomization: optional flag. if set to true will scramble feature values being reacted to instead of dropping out the feature
	; output_ratio : optional flag, if set to true will output of ratio of Feature-error / model-error
	; classification_precision: 0=low, 1=medium, 2=high. low uses 1 or 0 for residuals. medium uses categorical action probability for incorrect
	;			predictions, high uses categorical action probabilities for both correct and incorrect predictions
	; num_samples: run decrease in accuracy only a specified sample of the model, default is 1000
	; robust: flag, default to false. when true, the power set/permutations of features are used as contexts
	;			to calculate the decrease in accuracy for a given feature. when false, the full set of features is used to calculate the
	;			decrease in accuracy for a given feature.
	; use_case_weights: flag, if set to true will scale influence weights by each case's weight_feature weight. If unspecified,
	;   			case weights will be used if the trainee has them.
	; weight_feature: optional, default '.case_weight'.  name of feature whose values to use as case weights
	; context_condition_filter_query: a list of queries that can be used to filter the possible set of cases that can be used for predictions
	; features_to_derive: list of features whose values should be derived rather than interpolated
	#!CalculateFeatureAccuracyContributions
	(declare
		(assoc
			context_features (list)
			action_features (list)
			case_ids (null)
			sensitivity_to_randomization (false)
			classification_precision 1
			output_ratio (false)
			num_samples 1000
			robust (false)
			weight_feature ".case_weight"
			use_case_weights (null)
			hyperparam_map (null)
			context_condition_filter_query (list)
			regional_data_only (false)
			features_to_derive []
		)

		;if computing robust accuracy contributions, use the fast method and output raw mda values as accuracy contributions
		(if (and robust (not sensitivity_to_randomization) (not regional_data_only))
			(let
				(assoc
					mda_matrix_map
						(get
							(call !CalculateFeatureResiduals (assoc
								features (values (append context_features action_features) (true))
								robust_residuals "robust_mda"
								case_ids case_ids
								custom_hyperparam_map hyperparam_map
								output_raw_mda (true)
								mda_action_feature (if (= 1 (size action_features)) (first action_features) )
							))
							"feature_mda_map"
						)
				)

				(conclude
					;output only the specified action feature accuracy contributions if action_features are specified
					(if (size action_features)
						(keep mda_matrix_map action_features)
						mda_matrix_map
					)
				)
			)
		)

		(if (= (null) hyperparam_map)
			(assign (assoc
				hyperparam_map
					(if (= 1 (size action_features))
						(call !GetHyperparameters (assoc
							context_features context_features
							feature (first action_features)
							weight_feature weight_feature
						))
					)
			))
		)
		(call !UpdateCaseWeightParameters (assoc set_valid_weight_feature (false) ))

		(declare (assoc
			;create an output assoc that will wind up storing the accuracy decrease value for each feature
			context_features_set (zip context_features)
			valid_weight_feature (and use_case_weights (or !hasPopulatedCaseWeight (!= weight_feature ".case_weight")) )
			;store an assoc of lag/rate/delta feature -> lag/order amount for time series flows
			ts_feature_lag_amount_map (if !tsTimeFeature (call !BuildTSFeatureLagAmountMap))
			max_lag_index_value (null)
		))
		(if ts_feature_lag_amount_map
			(assign (assoc max_lag_index_value (apply "max" (values ts_feature_lag_amount_map)) ))
		)


		;if case_ids were not explicitly specified but num_samples was, we're computing global MDA, randomly sample case_ids to be the num_samples
		(if (and (!= (null) num_samples) (= (null) case_ids))
			(assign (assoc
				case_ids
					(call !SampleCases (assoc
						num num_samples
						case_weight_feature (if valid_weight_feature weight_feature)
					))
			))
		)

		(declare (assoc
			baseline_error
				(call !CalculateMAE (assoc
					action_features action_features
					context_features context_features
					case_ids case_ids
					ignore_exact_cases (true)
					classification_precision classification_precision
					robust_residuals robust
					custom_hyperparam_map hyperparam_map
					use_case_weights use_case_weights
					weight_feature weight_feature
					context_condition_filter_query context_condition_filter_query
					features_to_derive features_to_derive
				))
		))

		(zip
			(or details_context_features context_features)
			(map
				(lambda (let
					(assoc
						mae_context_features context_features
					)

					;regular Decrease in accuracy is feature knockout instead of scrambling the feature
					(if (not sensitivity_to_randomization)
						;remove the feature
						(assign (assoc
							mae_context_features (indices (remove context_features_set (current_value 1)))
						))
					)

					(let
						(assoc
							feature_mda
								(call !CalculateMAE (assoc
									action_features action_features
									context_features mae_context_features
									case_ids case_ids
									ignore_exact_cases (true)
									classification_precision classification_precision
									robust_residuals robust
									custom_hyperparam_map hyperparam_map
									use_case_weights use_case_weights
									weight_feature weight_feature
									context_condition_filter_query context_condition_filter_query
									features_to_derive features_to_derive

									;the scramble feature index will be null if doing feature knockout
									scramble_feature_index
										(if sensitivity_to_randomization
											(current_index 2)
											(null)
										)
								))
						)

						;output the decrease in accuracy as a ratio of the feature / baseline MAE
						(if output_ratio
							;prevent output of (null) in case all maes are 0
							(if (= 0 baseline_error)
								.infinity

								(/ feature_mda baseline_error)
							)

							;else output the difference in the MAE
							(if (= .infinity baseline_error feature_mda)
								0

								(- feature_mda baseline_error)
							)
						)
					)
				))

				(or details_context_features context_features)
			)
		)
	)


	;calculates the model Mean Absolute Error (MAE) using one-by-one case knockout, validating against each knockout out case
	;using the specified parameters and returns the total geometric mean of the MAE
	;if a scramble feature index is specified, will scramble the specified feature values being reacted to instead of knocking the feature it out
	;this is done so that the model doesn't need to be retrain and shows how sensitive is the feature to randomized input
	;parameters:
	; action_features : list of action features
	; context_features : list of context features
	; p_param_categorical_mean : optional, default to 1. used to calculate the mean of all MAEs for categorical feature values for a feature
	; case_ids : optional list of case_ids, will use the full model if not provided, otherwise will validate against only the specified case_ids
	; case_feature_list: optional, list of features corresponding 1-1 to case_ids, to select each cases's feature value, specifically for targetless computation
	; cases_already_removed : optional flag, if set to true, will assume the passed in case_ids are already in a temp entity/removed from the model
	; scramble_feature_index : optional index of the context feature that should be scrambled. if unspecified will use feature knockout
	; classification_precision: 0=low, 1=medium, 2=high. low uses 1 or 0 for residuals. medium uses categorical action probability for incorrect
	;			predictions, high uses categorical action probabilities for both correct and incorrect predictions
	; ignore_exact_cases: flag, if set to true will call !ReactDiscriminative with the case ids so that perfect matches will be ignored
	; robust_residuals: flag, default to false. when true calculates residuals robust with respect to the set of contexts used (across the power set of contexts)
	; custom_hyperparam_map: optional assoc of hyperparameters to use (instead of system-determined ones) when calculating MAE
	; use_case_weights: flag, if set to true will scale influence weights by each case's weight_feature weight. If unspecified,
	;   			case weights will be used if the trainee has them.
	; weight_feature: optional, default '.case_weight'.  name of feature whose values to use as case weights
	; context_condition_filter_query: a list of queries that can be used to filter the possible set of cases that can be used for predictions
	; features_to_derive: list of features whose values should be derived rather than interpolated
	#!CalculateMAE
	(declare
		(assoc
			action_features (list)
			context_features (list)
			p_param_categorical_mean 1
			p_param_accuracy_mean 0.2
			case_ids (null)
			case_feature_list (list)
			cases_already_removed (false)
			scramble_feature_index (null)
			ignore_exact_cases (false)
			;default to medium precision
			classification_precision 1
			robust_residuals (false)
			custom_hyperparam_map (null)
			use_case_weights (null)
			weight_feature ".case_weight"
			context_condition_filter_query (list)
			features_to_derive (list)
		)

		(if (size features_to_derive)
			(seq
				(declare (assoc
					;map of action_features to features needed for derivation
					features_for_derivation_map
						(map
							(lambda
								(indices (filter
									;filter out derivation code that reaches to previous rows of a series
									(lambda (= (current_value) 0))
									(get_all_labels (parse (get !featureAttributes [(current_index 1) "derived_feature_code"]) ))
								))
							)
							(keep (zip action_features) features_to_derive)
						)
				))

				(if !tsTimeFeature
					(let
						(assoc
							;the rate of change features for any of the action features (deltas or rates)
							rate_of_change_features_set
								(zip (filter
									(lambda
										(and
											(contains_value action_features (get !derivedFeaturesMap (current_value)))
											(or
												(contains_value (get !tsFeaturesMap "rate_features") (current_value))
												(contains_value (get !tsFeaturesMap "delta_features") (current_value))
											)
										)
									)
									(apply "append" (values features_for_derivation_map))
								))
						)

						;filter out the rate_of_change features of the action features, these should always be derived/predicted and used for derivation
						(assign (assoc
							context_features
								(filter
									(lambda (not (contains_index rate_of_change_features_set (current_value))))
									context_features
								)
						))
					)
				)
			)
		)

		;if a corresponding feature list for each case was provided, only consider action features from that list
		(if (and targetless (size case_feature_list))
			(let
				(assoc grid_feature_map (zip case_feature_list) )

				;only keep those action_features that were in the provided case_feature_list
				(assign (assoc
					action_features
						(filter
							(lambda (contains_index grid_feature_map (current_value)))
							action_features
						)
				))

				;for targetless context_features are same as action_features
				(assign (assoc context_features action_features))
			)
		)

		(declare (assoc
			num_cases
				(if (= (null) case_ids)
					(call !GetNumTrainingCases)
					(size case_ids)
				)
			scrambled_feature_data (null)
			action_feature_indices
				;remove all unique features for targetless MAE calculation since uniques can't be predicted and don't have an MAE
				(if (and targetless (> (size !uniqueNominalsSet) 0))
					(filter
						(lambda
							;leave only action features that are not unique
							(not (contains_index !uniqueNominalsSet (get action_features (current_value))))
						)
						(indices action_features)
					)

					(indices action_features)
				)
		))

		;scramble the specified feature as necessary
		(if (!= (null) scramble_feature_index)
			(let
				(assoc scramble_feature (get context_features scramble_feature_index ))

				;scramble the feature data by pulling the feature value out of a randomized case list
				(assign (assoc
					scrambled_feature_data
						(map
							(lambda (retrieve_from_entity (current_value) scramble_feature))
							(unzip
								(if (= (null) case_ids)
									(call !AllCases)
									case_ids
								)
								(rand (range 0 (- num_cases 1)) num_cases (true))
							)
						)
				))
			)
		)

		(declare (assoc
			;list to store resulting mean absolute errors, starts out with all zeros for continuous, and an assoc of counts for nominal
			action_feature_maes
				(map
					(lambda
						(if (contains_index !nominalsMap (get action_features (current_value)))
							(assoc
								"num_incorrect_map" (assoc)
								"num_total_map" (assoc)
							)

							0
						)
					)
					action_feature_indices
				)
			;count of each encountered action feature for mae calculation during targetless flow, since each action feature may have diff counts
			action_feature_counts_map (zip action_features 0)
			action_feature_indices_map (zip action_features action_feature_indices)
		))

		;iterate over the cases and store all the predictions and expected values so that they can be processed afterwards
		(declare (assoc
			predictions_list
				||(map
					(lambda (let
						(assoc
							case_id (current_value 1)
							case_index (current_index 1)
							corresponding_context_values (list)
							react_action_features action_features
							react_context_features context_features
						)

						(if !tsTimeFeature
							(assign (assoc
								react_context_features
									(call !FilterContextsBySeriesIndex (assoc
										all_context_features react_context_features
										series_index (retrieve_from_entity case_id ".series_index")
									))
							))
						)

						(assign (assoc
							corresponding_context_values
								(if (= (null) scramble_feature_index )
									;if case was already removed, pull the values from its temp storage, othrewise pull the values directly from the case
									(retrieve_from_entity (if cases_already_removed (list "_temp_" case_id ) case_id) react_context_features)

									;else scramble set the feature value to a scrambled value
									(set (retrieve_from_entity case_id react_context_features) scramble_feature_index (get scrambled_feature_data case_index))
								)
						))

						;when doing targetless analysis, for each case, pull the the feature we're reacting to
						;and set all other features as context features
						(if targetless
							(let
								(assoc
									feature_index (get action_feature_indices_map (get case_feature_list case_index))
								)
								(assign (assoc
									react_context_features (remove react_action_features feature_index)
									corresponding_context_values (remove corresponding_context_values feature_index)
								))
								(assign (assoc
									react_action_features (list (get react_action_features feature_index))
								))
							)
						)

						;if using robust residuals flow, randomly pick context features instead of using all of them
						(if robust_residuals
							(let
								(assoc context_feature_indices_map (zip (filter (lambda (< (rand) .5)) (indices react_context_features))))
								(if (!= 0 (size context_feature_indices_map))
									(assign (assoc
										corresponding_context_values
											(filter
												(lambda (contains_index context_feature_indices_map (current_index)))
												corresponding_context_values
											)
										react_context_features
											(filter
												(lambda (contains_index context_feature_indices_map (current_index)))
												react_context_features
											)

									))
								)
							)
						)

						(declare (assoc
							reaction_values (call !SingleMAEReact)
							expected_values (retrieve_from_entity (if cases_already_removed (list "_temp_" case_id ) case_id) react_action_features)
						))

						(if (contains_value expected_values (null))
							(null)

							;output as a tuple
							(list reaction_values react_action_features expected_values)
						)
					))
					;iterate over the specified num_cases sample of all cases if the specific list of cases was not specified
					(if (= (null) case_ids)
						(call !AllCases (assoc num num_cases rand_seed (rand)))

						;else use the specified case_ids in the same order as case_feature_list if case_feature_list is provided
						(if (size case_feature_list)
							case_ids

							;else shuffled randomly in place
							(rand case_ids (size case_ids) (true))
						)
					)
				)
		))

		;iterate over the prediction pairs and accumulate/compute the errors
		(map
			(lambda (let
				(assoc prediction_tuple (current_value 1))

				(if (= (null) prediction_tuple)
					;if the case being compared to has a null for a feature value, skip it and decrease the count of cases tested
					(accum (assoc num_cases -1))

					;else process the prediction
					(let
						(assoc
							reaction_values (first prediction_tuple)
							react_action_features (get prediction_tuple 1)
							expected_values (last prediction_tuple)
						)

						;accumulate errors into a list matching each action feature:
						;for continuous features the values in the list will have the summed up error value
						;for categorical features the values in the list will have an assoc of total and incorrect counts for each feature value
						(assign (assoc
							action_feature_maes
								;iterate over the list all action features, accumulating errors for each one
								;the list of action_feature_maes is size of all the action features
								(map
									(lambda
										;if targetless analysis, reacting to only one action feature, action_features is of size 1 (index=0),
										;therefore we skip over all the other action features, and only store the mae for that action feature

										;otherwise pull the action value for each action feature as their index matches the index of each action
										;feature's accumulated error
										(if (or (not targetless) (= (get action_features (get action_feature_indices (current_index))) (first react_action_features)))
											(seq
												;targetless analysis deals with one action feature at a time, set index to be 0
												(assign (assoc
													index
														(if targetless 0 (current_index 1))
												))

												;if this is a nominal feature, do balanced accuracy check:
												;add up total encountered and total incorrect for every feature value
												;this will provide an mae for each classification feature value
												;the maes of all the feature values will be averaged out later to provide the mae of feature as a whole
												(if (contains_index !nominalsMap (get react_action_features index))
													(let
														(assoc
															expected_value (get expected_values index)
															;an assoc of feature value -> incorrect prediction count
															num_incorrect_map (get (current_value 1) "num_incorrect_map")
															;an assoc of feature value -> total expected count
															num_total_map (get (current_value 1) "num_total_map")
															probability_correct
																;or statement converts nulls to false/0
																(or (get reaction_values
																	(list
																		"categorical_action_probabilities"
																		(get react_action_features index)
																		(get expected_values index)
																	)
																))
															prediction_correct
																(+ (= (get expected_values index) (get reaction_values (list "action_values" index))))
														)

														;increase the count of total wrong predictions for this feature value if the values don't match
														(accum (assoc
															num_incorrect_map
																(associate expected_value
																		(+
																			(if classification_precision
																				;for incorrect predictions or if using high classification precision
																				;use (1 - categorical_action_probability) of the correct answer such that
																				;if probability is 0, it's same as increasing the incorrect count by 1
																				(if (or (not prediction_correct) (= 2 classification_precision))
																					(- 1 probability_correct)

																					0
																				)

																				;else this is low precision, use either 0 or 1 for residual value
																				(if prediction_correct
																					0

																					;else just increase the count by one if incorrect
																					1
																				)
																			)

																			(or (get num_incorrect_map expected_value))
																		)
																)
														))
														;increase the total count this feature value has been encountered
														(accum "num_total_map" (list expected_value) 1)

														;output the assoc of updated counts of incorrect and total for each feature value
														(assoc
															"num_incorrect_map" num_incorrect_map
															"num_total_map" num_total_map
														)
													)

													;else this is a continuous feature, add the difference to the total
													(let
														(assoc action_feature (get action_features (get action_feature_indices (current_index 1))))

														;targetless analysis deals with one action feature at a time, set index to be 0
														(if targetless
															(assign (assoc index 0 ))
														)

														;if a continuous feature isn't edit distance and isn't a numerical value, skip over it
														(if (not (contains_index !editDistanceFeatureTypesMap action_feature))
															(if (or
																	(!~ 0 (get reaction_values ["action_values" index]) )
																	(!~ 0 (get expected_values index) )
																)
																(seq
																	(accum (assoc num_cases -1))
																	(conclude (current_value))
																)
															)
														)

														;increase the count that this feature was reacted to
														(if targetless
															(assign (assoc
																action_feature_counts_map
																	(set action_feature_counts_map (first react_action_features)
																		(+ 1 (get action_feature_counts_map (first react_action_features)))
																	)
															))
														)

														;accumulate the continuous difference
														(+
															(current_value)

															(if (contains_index !editDistanceFeatureTypesMap  action_feature)
																(edit_distance
																	(get expected_values index)
																	(get reaction_values ["action_values" index])
																	(or
																		(= "string" (get !editDistanceFeatureTypesMap  action_feature))
																		(= "string_mixable" (get !editDistanceFeatureTypesMap  action_feature))
																	)
																)

																(abs (-
																	(get expected_values index)
																	(get reaction_values ["action_values" index])
																))
															)
														)
													)
												)
											)

											;else doing targetless analysis and this feature wasn't reacted to, keep the value as-is
											(current_value)
										)
									)
									action_feature_maes
								)
						))
					)
				)
			))

			;iterate over all predictions
			predictions_list
		)

		;output a 'mean' of all the maes for all the features. using a P of 0.1 is somewhere between 0(geometric) and 1(arithmetic)
		;and provides a somewhat balanced mean, even for features with large mae values
		(generalized_distance
			(null)
			(null)
			(null)
			(null)
			p_param_accuracy_mean
			(call !CalculateActionFeatureMAEs)
		)
	)

	;helper method for !CalculateMAE, calculates the mean of the accumulated error value
	;for each action feature
	#!CalculateActionFeatureMAEs
	(map
		(lambda (let
			(assoc
				feature (get action_features (get action_feature_indices (current_index 1)))
				mae_value (current_value 1)
			)
			;if nominal, the MAE is the average of all the incorrect/total counts for all the feature values
			(if (contains_index !nominalsMap feature)
				;output the average of the mae for each of the categorical values as the mae for this categorical feature
				; use 1 / num categories with distance to compute average
				(generalized_distance
					(/ 1 (size (get mae_value "num_total_map")))
					(null)
					(null)
					(null)
					p_param_categorical_mean
					;the error for each category
					(map
						(lambda
							(/
								(get mae_value (list "num_incorrect_map" (current_value 1)))
								(get mae_value (list "num_total_map" (current_value 1)))
							)
						)
						(indices (get mae_value "num_total_map"))
					)
				)


				;else continuous, take the mean of the summed errors
				(if targetless
					;if targetless, each feature has its own count, don't allow divide by null or zero
					(if (get action_feature_counts_map feature)
						(/ mae_value (get action_feature_counts_map feature))
					)

					;targeted count matches the number of cases, don't allow divide by zero
					(if num_cases
						(/ mae_value num_cases)
					)
				)
			)
		))
		action_feature_maes
	)

	#!SingleMAEReact
	(if (not (size features_for_derivation_map))
		(call !ReactDiscriminative (assoc
			return_action_values_only (true)
			context_features react_context_features
			action_features react_action_features
			;retreive the raw/stored case values for each validation case from _temp_
			context_values corresponding_context_values
			;bypass encoding since stored case values are all encoded and we're reacting to raw retrieved values
			skip_encoding 1
			;bypass decoding since computing distances to each reaction uses encoded numeric values
			skip_decoding 1
			details (assoc "categorical_action_probabilities" (true) "ignore_case" (null))
			ignore_case (if ignore_exact_cases case_id (null))
			substitute_output (false)
			hyperparam_map custom_hyperparam_map
			weight_feature weight_feature
			use_case_weights use_case_weights
			;disable usage of dependent features for resdiual computation to prevent recursive behaviour in reacts
			has_dependent_features (false)
			filtering_queries context_condition_filter_query
		))

		;otherwise need to derive the value for each action_feature, and return a react-like format
		;NOTE: !! This code is fundamentally different than calling ReactDiscriminative with multiple action features
		;in the fact that the action_values are not accumulated to the context with each prediction. However,
		;at the time of writing, there is no path where features_to_derive should be non-empty with multiple action
		;features - so this should not be impactful.
		(let
			(assoc
				reaction_list
					(map
						(lambda
							(let
								;map over each action feature, predict the features needed to derive and then derive
								(assoc
									action_feature (current_value 1)
									features_for_derivation (get features_for_derivation_map (current_value 1))
								)

								(if (size features_for_derivation)
									;if a derived feature, predict the features needed to derive and derive
									(seq
										(declare (assoc
											values_for_derivation_map
												(zip
													features_for_derivation
													(get
														(call !ReactDiscriminative (assoc
															return_action_values_only (true)
															context_features react_context_features
															action_features features_for_derivation
															;retreive the raw/stored case values for each validation case from _temp_
															context_values corresponding_context_values
															;bypass encoding since stored case values are all encoded and we're reacting to raw retrieved values
															skip_encoding 1
															;bypass decoding since computing distances to each reaction uses encoded numeric values
															skip_decoding 1
															details (assoc "categorical_action_probabilities" (true) "ignore_case" (null))
															ignore_case (if ignore_exact_cases case_id (null))
															substitute_output (false)
															hyperparam_map custom_hyperparam_map
															weight_feature weight_feature
															use_case_weights use_case_weights
															;disable usage of dependent features for resdiual computation to prevent recursive behaviour in reacts
															has_dependent_features (false)
															filtering_queries context_condition_filter_query
														))
														"action_values"
													)
												)
										))

										{
											"action_values"
												[(call_sandboxed
													(call !ParseDerivedFeatureCode (assoc
														code_string (get !featureAttributes [action_feature "derived_feature_code"])
														label_to_code
															(lambda
																(if (= (lambda label_value) 0)
																	;pull the feature value
																	(get case (lambda label_name))

																	(null)
																)
															)
													))
													{"case" (append (zip react_context_features corresponding_context_values) values_for_derivation_map)}
													!sandboxedComputeLimit !sandboxedMemoryLimit !sandboxedOpcodeDepthLimit (false)
												)]
										}
									)

									;otherwise just return the reaction
									(call !ReactDiscriminative (assoc
										return_action_values_only (true)
										context_features react_context_features
										action_features [action_feature]
										;retreive the raw/stored case values for each validation case from _temp_
										context_values corresponding_context_values
										;bypass encoding since stored case values are all encoded and we're reacting to raw retrieved values
										skip_encoding 1
										;bypass decoding since computing distances to each reaction uses encoded numeric values
										skip_decoding 1
										details (assoc "categorical_action_probabilities" (true) "ignore_case" (null))
										ignore_case (if ignore_exact_cases case_id (null))
										substitute_output (false)
										hyperparam_map custom_hyperparam_map
										weight_feature weight_feature
										use_case_weights use_case_weights
										;disable usage of dependent features for resdiual computation to prevent recursive behaviour in reacts
										has_dependent_features (false)
										filtering_queries context_condition_filter_query
									))
								)
							)
						)
						action_features
					)
			)

			;append together the reacts
			{
				"action_values" (apply "append" (map (lambda (get (current_value) "action_values")) reaction_list))
				"categorical_action_probabilities" (apply "append" (filter (map (lambda (get (current_value) "categorical_action_probabilities")) reaction_list)))
			}
		)
	)

)