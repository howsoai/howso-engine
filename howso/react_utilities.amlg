;Contains utility methods for reacting.
(null

	;Helper method, if there's a detail, we may need to cache the filtering_queries and possibly the candidate_cases_map
	#!PopulateFilteringQueriesForDetails
	(if (!= (null) details)
		(seq
			;for details persist all the fitering queries to be able to query on the exact same local model
			(if (= (list) filtering_queries)
				(assign (assoc
					filtering_queries
						(append
							not_null_features_queries
							;if ignoring null action feature, query for cases where action feature is not null
							(if ignore_null_action_feature
								(query_not_equals (first action_features) (null))
								(list)
							)
							dependent_queries_list
							(if custom_extra_filtering_queries
								custom_extra_filtering_queries
								(list)
							)
							(if ignore_case
								(if focal_case
									(query_not_in_entity_list (list ignore_case focal_case))
									(query_not_in_entity_list (list ignore_case))
								)
								(list)
							)
						)
				))
			)

			;backup the list of candidate cases map for these specific details that can reuse this exact output
			(if (and
					(or (get details "feature_mda") (get details "outlying_feature_values"))
					(= (null) cached_candidate_cases_map)
					(size (first candidate_cases_lists))
				)
				(assign (assoc
					cached_candidate_cases_map (zip (first candidate_cases_lists) (get candidate_cases_lists 1))
				))
			)
		)
	)

	;Generate lists of unique values for each 'unique' feature that isn't being conditioned on for use in #SingleReact
	; returns an assoc of:  feature -> (list unique values).  if num_reacts is 1, returns an assoc of: feature -> unique value
	;
	;parameters:
	;
	; num_reacts: number of values to generate for each feature
	; action_features: list of features that will be output (reacted to/generated)
	; context_features: list of features that condition the reaction
	; preserve_feature_values: list of features that are used to condition the reaction whose values will be preserved during the reaction
	#!GenerateUniquesListMap
	(let
		;create a list of unique features that should have values generated
		(assoc
			unique_features_to_generate
				;do not generate values for any unique features that are used as contexts
				(if (or (> (size preserve_feature_values) 0) (> (size context_features) 0))
					(filter
						(lambda
							;keep only those features that are not being conditioned on
							(not (or
								(contains_value preserve_feature_values (current_value))
								(contains_value context_features (current_value))
							))
						)
						;intersection of two assocs keeps all the same features regardless of ordering
						(indices (intersect (zip action_features) !uniqueNominalsSet))
					)

					;else all the unique features that in the action_features list
					(indices (intersect (zip action_features) !uniqueNominalsSet))
				)
		)

		(if (> (size unique_features_to_generate) 0)
			(map
				(lambda (let
					(assoc
						unique_values_map
							(zip (range
								(lambda (call !GenerateInt64String))
								1 num_reacts 1
							))
					)

					;if by some small chance any duplicates were generated, accumulate enough new uniques to replace the dupes
					(while (< (size unique_values_map) num_reacts)
						;accumulate-append new generated subsitutions to the map, dupclicates will be clobbered
						(accum (assoc unique_values_map  (associate (call !GenerateInt64String) (null))))
					)

					;output a list of num_reacts unique int64s if batch is > 1, otherwise return just the unique int64
					(if (= 1 num_reacts)
						(first (indices unique_values_map))

						(indices unique_values_map)
					)
				))
				(zip unique_features_to_generate)
			)
		)
	)

	;validate passed in series stop map against the optionally specified feature_bounds_map and the trainee's !featureBoundsMap.
	;If a stopmap feature min is <= boundary min, or a stopmap max is >= boundary max, series won't ever reach the stopping point
	;because the boundary will prevent that value from being generated.  For nominals, ensure that at least one stopping value is
	;allowed.
	;
	;returns the name of a stop map feature with an invalid stopping value
	;
	;parameters:
	; series_stop_maps: list of series stop maps with specified stopping condition for each feature
	; feature_bounds_map: optional assoc of user specified feature bounds, takes precedence over the trainee stored feature bounds
	#!ValidateSeriesStopMaps
	(declare
		(assoc
			series_stop_maps (list)
			feature_bounds_map (assoc)

			invalid_stopmap_feature (null)
		)

		(map
			(lambda (let
				(assoc series_stop_map (current_value 1)  )
				(map
					(lambda
						;current_index = feature
						;current_value = stop map

						;if this stop map feature has a bound, verify it
						(if (or
								(contains_index feature_bounds_map (current_index))
								(contains_index !featureBoundsMap (current_index))
							)
							(let
								(assoc
									bounds_map
										;if the bound is defined specifically for this react call
										(if (contains_index feature_bounds_map (current_index 1))
											(get feature_bounds_map (current_index 1))

											;else the bound is defined in the trainee feature bounds
											(get !featureBoundsMap (current_index 1))
										)
								)

								;stop map has explicit stop values, ensure bounds map allows at least one of them
								(if (and (contains_index (current_value) "values") (get bounds_map "allowed"))
									(if (=
											(size (get bounds_map "allowed"))
											;when we remove all the stop values from the allowed list, if the resulting allowed list hasn't changed size,
											;that means none of the stopping values were on the allowed list, which is an invalid stopping condition
											(size (remove
												(zip (get bounds_map "allowed"))
												(get (current_value) "values")

											))
										)
										(assign (assoc invalid_stopmap_feature (current_index 1) ))
									)
								)

								;datetime features need to compare to epoch min and max, continuous can just directly compare min and max
								(if (contains_index !featureDateTimeMap (current_index))
									(let
										(assoc
											stop_map (current_value 1)
											epoch_bounds_min (get bounds_map "epoch_min_value")
											epoch_bounds_max (get bounds_map "epoch_max_value")
											feature (current_index 1)
										)

										(declare (assoc
											epoch_stop_min
												(if (get stop_map "min")
													(format
														(get stop_map "min")
														(get !featureDateTimeMap (list feature "date_time_format"))
														"number"
														(assoc "locale" (get !featureDateTimeMap (list feature "locale")))
														(null)
													)
												)
											epoch_stop_max
												(if (get stop_map "max")
													(format
														(get stop_map "max")
														(get !featureDateTimeMap (list feature "date_time_format"))
														"number"
														(assoc "locale" (get !featureDateTimeMap (list feature "locale")))
														(null)
													)
												)
										))

										(if (not (get bounds_map "has_epoch_bounds"))
											;convert the bounds min and max from string date to epoch seconds
											(assign (assoc
												epoch_bounds_max
													(if (!= (null) (get bounds_map "max"))
														(format
															(get bounds_map "max")
															(get !featureDateTimeMap (list feature "date_time_format"))
															"number"
															(assoc "locale" (get !featureDateTimeMap (list feature "locale")))
															(null)
														)
													)

												epoch_bounds_min
													(if (!= (null) (get bounds_map "min"))
														(format
															(get bounds_map "min")
															(get !featureDateTimeMap (list feature "date_time_format"))
															"number"
															(assoc "locale" (get !featureDateTimeMap (list feature "locale")))
															(null)
														)
													)
											))
										)

										;invalid condition if the stopping min value is same or smaller than bounds min
										(if (<= epoch_stop_min epoch_bounds_min)
											(assign (assoc invalid_stopmap_feature feature))
										)

										;invalid condition if the stoppnig max value is same or larger than bounds max
										(if (>= epoch_stop_max epoch_bounds_max )
											(assign (assoc invalid_stopmap_feature feature))
										)
									)

									;else regular continuous feature, compare min and max bounds
									(seq
										;invalid condition if the stopping min value is same or smaller than bounds min
										(if (<= (get (current_value) "min") (get bounds_map "min") )
											(assign (assoc invalid_stopmap_feature (current_index 1) ))
										)

										;invalid condition if the stoppnig max value is same or larger than bounds max
										(if (>= (get (current_value) "max") (get bounds_map "max") )
											(assign (assoc invalid_stopmap_feature (current_index 1) ))
										)
									)
								)
							)
						)
					)
					series_stop_map
				)
			))
			series_stop_maps
		)

		;output the invalid feature
		invalid_stopmap_feature
	)

	;dependent features map is a map of each feature that has relationships/dependents and is stored in the format of:
	;
	; feature : { "dependent_features": [ list of all related features ] }
	;		  "min" and "max" attributes are added for continuous features once those are computed.
	;
	;compute and output filter query conditions for dependent features to be used in queries
	#!ComputeDependentQueries
	(declare
		(assoc
			action_feature (null)
			context_features (list)
			context_values (list)
		)

		(declare (assoc
			dependent_features (get dependent_features_map (list action_feature "dependent_features"))
		))

		; determine if there are any dependents in context features by only keeping those that context_features contains
		(declare (assoc
			dependent_context_features
				(filter
					(lambda (contains_value dependent_features (current_value)) )
					context_features
				)
		))
		;generate query filtering if there are dependent context features
		(if (size dependent_context_features)
			(let
				(assoc
					dependent_context_map (keep (zip context_features context_values) dependent_context_features)
					output_queries (list)
					continuous_context_features (list)
				)

				;if a continuous dependent feature is in contexts and we are reacting to a nominal value, limit what those nominal values can be
				;by creating a list of query_among for the nominal features whose bounds encompass the continuous context value
				;e.g., given a continous value of 200, 'heartrate' or 'weight in lbs' could be selected as valid nominal values, but 'bmi' or 'age' would not be
				(if (contains_index !nominalsMap action_feature)
					(seq
						(if (size !continuousToNominalDependenciesMap)
							(map
								(lambda
									;if a continuous dependent feature is in the contexts, then check if any of its dependent nominals are also in the contexts
									(if (contains_index dependent_context_map (current_index))
										(seq
											(accum (assoc continuous_context_features (current_index 1) ))
											;if the continuous feature's corresponding dependent nominals are not in the contexts, create query_among filters
											(if (= (size dependent_context_map) (size (remove dependent_context_map (current_value))))
												(let
													(assoc
														continuous_feature (current_index 1)
														continuous_value (get dependent_context_map (current_index 1))
														dependent_combos_encompassing_value (list)
													)

													(assign (assoc
														;filter out all dependent feature value combinations whose bounds don't encompass the context value
														dependent_combos_encompassing_value
															(filter
																(lambda (let
																	(assoc bounds_pair (get !dependentsBoundaryMap (append continuous_feature (current_value 1))))
																	;if the dependent boundary is a tuple of 3, that means the continuous feature has null_is_dependent
																	;thus null values are allowed and are considered in-bounds
																	(if (= 3 (size bounds_pair))
																		(or
																			(= (null) continuous_value)
																			(and
																				(>= continuous_value (first bounds_pair))
																				(<= continuous_value (last bounds_pair))
																			)
																		)

																		(and
																			(>= continuous_value (first bounds_pair))
																			(<= continuous_value (last bounds_pair))
																		)
																	)
																))
																(get !dependentValuesCombinationsMap continuous_feature)
															)
													))

													;it's possible the context value is outside all bounds, don't do among queries for privacy and exploratory reasons
													(if (size dependent_combos_encompassing_value)
														(accum (assoc
															output_queries
																;create a list of corresponding query_among queries in the format of:
																; (query_among <!dependentFeature> (list <values that encompass the context value>))
																(map
																	(lambda (let
																		(assoc f_index (current_index 1))
																		(query_among
																			(current_value)
																			(map (lambda (get (current_value) f_index)) dependent_combos_encompassing_value)
																		)
																	))
																	;list of nominal dependent features for this continuous one
																	(get !continuousToNominalDependenciesMap continuous_feature)
																)
														))

														;else this continuous value isn't encompassed by nominal combos, find the one closest case to this continuous value
														;and use its nominal value for this action feature since it's the most "resonable"
														(let
															(assoc
																reasonable_nominal_value_case
																	(first
																		(contained_entities (list
																			(query_nearest_generalized_distance
																				1 ; k = 1
																				(list continuous_feature)
																				(list continuous_value)
																				(null) ; weight don't matter because there's only one context
																				(null) ; not a nominal
																				(null) ; not cyclic since it's a multi-purpose continuous
																				(null) ; deviations don't matter because it's one context
																				1 ;p value isn't relevant because it's one context
																				1 ;dt
																				(null) ; weight feature doesn't matter
																				(rand)
																				(null) ; radius
																				!numericalPrecision
																			)
																		))
																	)
															)

															(accum (assoc
																output_queries
																	(list
																		(query_among action_feature (list (retrieve_from_entity reasonable_nominal_value_case action_feature)))
																	)
															))
														)
													)
												)
											)
										)
									)
								)
								!continuousToNominalDependenciesMap
							)
						)
					)
				)

				;generate one query_between (for continuous) or query_equals (for nominal) per dependent context feature
				;e.g., if a nominal dependent context feature "measure" has a value of "heartrate" ,this will accumulate: (query_equals "measure" "heartrate") to the queries output
				(accum (assoc
					output_queries
						(map
							(lambda (let
								(assoc
									context_feature (current_value 1)
									context_value (get dependent_context_map (current_value 1))
								)
								(if (contains_index !nominalsMap context_feature)
									(if
										;explicitly filter by this value if it's not null or is null and has null_is_dependent set
										(or
											(!= (null) context_value)
											(get !featureAttributes (list context_feature "null_is_dependent"))
										)
										(query_equals context_feature context_value)

										;else the value is null and not marked as null_is_dependent, don't filter on this context feature
										(query_between )
									)

									;else continuous value, get min+max range for it
									(let
										(assoc
											min (get dependent_features_map (list context_feature "min"))
											max (get dependent_features_map (list context_feature "max"))
										)
										;min and max are null only if the feature value is null, then don't filter on this feature
										(if (= (null) min max)
											(query_between )

											(query_between context_feature min max)
										)
									)
								)
							))
							;reorder the list of dependent_context_features such that all the nominals are first, then the continuous ones
							;so that all the query_betweens are last, and thus if needbe, will be truncated first
							(append
								(filter (lambda (contains_index !nominalsMap (current_value))) dependent_context_features)
								continuous_context_features
							)
						)
				))

				output_queries
			)

			;else return empty list
			(list)
		)
	)

	#!ComputeAndCacheMinMaxForDependentContinuousContexts
	(declare
		(assoc
			context_features (list)
			context_values (list)
			use_regional_residuals (true)
			hyperparam_map (assoc)
		)

		(declare (assoc
			dependent_continuous_features_map
				(filter
					(lambda
						(and
							(contains_index dependent_features_map (current_index))
							(not (contains_index !nominalsMap (current_index)))
						)
					)
					(zip context_features context_values)
				)
		))

		(if (= 0 (size dependent_continuous_features_map))
			(conclude)
		)

		(declare (assoc
			local_k (if (~ 0 (get hyperparam_map "k")) (get hyperparam_map "k") (get hyperparam_map ["k" 1]))
		))

		(declare (assoc
			regional_model_cases_tuple
				(compute_on_contained_entities (append
					(if ignore_case
						(query_not_in_entity_list (list ignore_case))
						(list)
					)
					(query_nearest_generalized_distance
						(if use_regional_residuals
							(max local_k 30)

							(max (* 2.718281828459045 local_k) 30)
						)
						context_features
						context_values
						(get hyperparam_map "featureWeights")
						!queryDistanceTypeMap
						(get hyperparam_map "featureDomainAttributes")
						(get hyperparam_map "featureDeviations")
						(get hyperparam_map "p")
						(get hyperparam_map "dt")
						(if valid_weight_feature weight_feature (null))
						(rand)
						(null) ;radius
						!numericalPrecision
						(true) ;output sorted list
					)
				))
		))

		(if use_regional_residuals
			(let
				(assoc regional_cases_map (apply "zip" regional_model_cases_tuple) )

				;update the the min/max for all the dependent context features from the computed regional residuals
				(map
					(lambda (let
						(assoc
							feature (current_index 1)
							regional_residuals (assoc)
							feature_residual 0
						)
						(assign (assoc
							regional_residuals
								(call !ExpandResidualValuesToUncertainty (assoc
									feature_residuals_map
										(call !ComputeRegionalResiduals (assoc
											regional_model_cases_map regional_cases_map
											features (append context_features feature)
											target_residual_feature feature
											ignore_case ignore_case
										))
								))
						))
						(assign (assoc feature_residual (get regional_residuals (list "residual_map" feature))  ))

						(accum "dependent_features_map"
							(list feature "min") (- (current_value) feature_residual)
							(list feature "max") (+ (current_value) feature_residual)
						)
					))
					dependent_continuous_features_map
				)
			)

			;else approximate residual for each dependent context feature
			(let
				(assoc regional_case_ids (first regional_model_cases_tuple))
				(declare (assoc local_case_ids (trunc regional_cases local_k) ))

				(map
					(lambda (let
						(assoc feature (current_index 1) )
						(declare (assoc
							feature_residual
								(max
									(get !cachedFeatureHalfMinGapMap feature)

									(min
										(compute_on_contained_entities (list
											(query_in_entity_list local_case_ids)
											(query_max_difference feature (get !cyclicFeaturesMap feature))
										))

										(compute_on_contained_entities (list
											(query_in_entity_list regional_case_ids)
											(query_max_difference feature (get !cyclicFeaturesMap feature))
										))
									)
								)
						))

						(accum "dependent_features_map"
							(list feature "min") (- (current_value) feature_residual)
							(list feature "max") (+ (current_value) feature_residual)
						)
					))
					dependent_continuous_features_map
				)
			)
		)
	)

	;accumulate influence weight for a given case in a prediction, updates influence_weights_map variable resulting in a map of case_id -> weight
	;parameters:
	; case_ids: list of case ids to accumulate weights for
	; weight: the weight value for the case, if specified will use this weight for all the cases
	; weights: list of weight values corresponding to each id, will be used if the single weight is not specified
	#!AccumulateInfluenceWeights
	(seq
		;if a single weight is specified, use that for all the cases
		(if (!= (null) weight)
			(assign (assoc weights (range (lambda weight) 1 (size case_ids) 1) ))
		)

		;increase the accumulated weight for each of the specified cases, appending to the existing list that may have cases that aren't
		;being accumulated here
		(accum (assoc
			influence_weights_map
				(map
					(lambda
						;or the existing value to make it null-safe cast to 0
						(+ (or (get influence_weights_map (current_index) )) (current_value) )
					)
					(zip case_ids weights)
				)
		))
	)

	;helper method to output time series filter queries based on the time series feature 'universal' flag
	;parameters:
	; context_map: assoc of feature -> value for all contexts
	#!ComputeTimeSeriesFilterQuery
	(if !tsTimeFeatureUniversal
		;if time feature is universal, only consider cases that are not in the future
		(list (query_less_or_equal_to
			!tsTimeFeature
			(max (get context_map !tsTimeFeature) (get !tsModelFeaturesMap "minimum_time_bound"))
		))

		;else not universal and only applies to this specific series, if series IDs are provided
		(if
			(not (contains_value
				(unzip context_map (get !tsModelFeaturesMap "series_id_features"))
				(null)
			))
			;exclude all cases for this series from the future
			(list
				(query_not_in_entity_list
					(contained_entities (append
						;cases matching this series id
						(map
							(lambda (query_equals (current_value) (get context_map (current_value))) )
							(get !tsModelFeaturesMap "series_id_features")
						)
						;where !tsTimeFeature > time value
						(query_greater_or_equal_to !tsTimeFeature (get context_map !tsTimeFeature))
						(query_not_equals !tsTimeFeature (get context_map !tsTimeFeature))
					))
				)
			)

			;else series id features are not provided in the context, don't restrict the query
			(list)
		)
	)

	;helper method for code that predicts on trained cases (MDA, contributions, residuals, etc)
	;returns the filtered list of features given in `all_context_features` to remove those that did not have
	;enough prior series cases to derive a feature value.
	;requires max_lag_index_value, series_index, ts_feature_lag_amount_map, and all_context_features.
	#!FilterContextsBySeriesIndex
	(if (< series_index max_lag_index_value)
		(filter
			(lambda
				(not (< series_index (get ts_feature_lag_amount_map (current_value))) )
			)
			all_context_features
		)

		;else leave context features as-is
		all_context_features
	)

	;helper method to build the map of TS-derived feautres to the amount of "lag" rows
	;needed to derive them.
	;no parameters.
	#!BuildTSFeatureLagAmountMap
	(map
		(lambda (or
			;store value of 'max_row_lag' for lag features and 'ts_order' for delta or rate features
			(get (current_value) "max_row_lag")
			(get (current_value) "ts_order")
		))
		;only lag, delta and rate features have a ts_type defined
		(filter
			(lambda (get (current_value) "ts_type") )
			!featureAttributes
		)
	)

	;helper method that updates the stack's values of use_case_weights, weight_feature, and optionally valid_weight_feature
	;according to the user inputs and selected hyperparameters. No value is returned.
	; accesses variables: use_case_weights, hyperparam_map
	; assigns to variables: use_case_weights, weight_feature, optionally valid_weight_feature
	;parameters:
	;  set_valid_weight_feature: flag, if true will assign to valid_weight_feature appropriately
	#!UpdateCaseWeightParameters
	(declare
		(assoc
			set_valid_weight_feature (true)
		)
		(if (= (null) use_case_weights)
			(if (or (= (get hyperparam_map "paramPath") [".default"]) (= (get hyperparam_map "paramPath") (null)))
				;if default params, no case weights
				(assign (assoc
					use_case_weights (false)
					weight_feature ".none"
				))

				;otherwise non-default HPs
				(let
					(assoc
						param_path_weight_index
							(if (= "targetless" (get hyperparam_map ["paramPath" 0]))
								2
								3
							)
					)
					(assign (assoc
						use_case_weights (!= (get hyperparam_map ["paramPath" param_path_weight_index]) ".none")
						weight_feature (get hyperparam_map ["paramPath" param_path_weight_index])
					))
				)
			)
		)

		(if (and set_valid_weight_feature use_case_weights)
			;weight feature is valid if it's custom (not .case_weight) or !hasPopulatedCaseWeight
			(assign (assoc valid_weight_feature (or !hasPopulatedCaseWeight (!= weight_feature ".case_weight"))))
		)
	)

	;Computes the dynamic deviations for a set of context features and values by querying the deviation subtrainee.
	;May assign to feature_weights or feature_deviations, according to the HPs
	;params:
	;  context_features: list of feature names to compute dynamic deviations for (also to query the subtrainee with)
	;  context_values: list of values corresponding to context_features
	;  hyperparam_map: the hyperparameters selected for the query
	;
	;assigns to:
	;	feature_weights: the feature weights to be used in a query, only assigns if HPs are targetless
	;	feature_deviations: the feature deviations to be used in a query, only assigns if HPs contain featureDeviations
	#!UseDynamicDeviationsAndWeights
	(declare
		(assoc
			context_features []
			context_values []
			hyperparam_map (null)

			;not param
			local_deviations (null)
		)

		(declare (assoc
			continuous_context_features
				;filter the context features to get just continuous
				(filter
					(lambda (= "continuous" (get !featureAttributes [(current_value 1) "type"])))
					context_features
				)
		))

		(assign (assoc
			local_deviations
				(let
					(assoc
						inf_cases
							(get
								(call_entity [!traineeContainer (get hyperparam_map "subtraineeName")] "single_react" (assoc
									context_features context_features
									context_values context_values
									extra_features (map (lambda (concat "." (current_value) "_residual") ) continuous_context_features)
									details {influential_cases (true)}
								))
								[1 "payload" "influential_cases"]
							)
						total_weight (null)
						case_weights (null)
					)

					(assign (assoc
						case_weights (map (lambda (get (current_value) ".influence_weight")) inf_cases)
					))

					(assign (assoc
						total_weight (apply "+" case_weights)
					))

					(map
						(lambda
							(/
								(dot_product
									(map (lambda (get (current_value) (concat "." (current_index 1) "_residual"))) inf_cases)
									case_weights
								)
								total_weight
							)
						)
						(zip continuous_context_features)
					)
				)
		))

		(assign (assoc
			local_deviations
				;bound the deviation so that it is not less than the min residual or user specified error
				(map
					(lambda
						(max
							(get !cachedFeatureMinResidualMap (current_index))
							(current_value)
							(get !userSpecifiedFeatureErrorsMap (current_index))
						)
					)
					local_deviations
				)
		))

		;if hyperparams are using deviations, overwrite feature_deviations with dynamic deviations
		(if (get hyperparam_map "featureDeviations")
			(assign (assoc
				feature_deviations
					(map
						(lambda
							(if (contains_index local_deviations (current_index))
								;this feature has a local deviation
								(if (~ 0 (current_value))
									;if deviation is just a value, replace with local deviation
									(get local_deviations (current_index))

									;deviation is a list, overwrite first value with local deviation (don't clobber null-null, null-known, etc)
									(~ [] (current_value))
									(set (current_value) 0 (get local_deviations (current_index)) )

									;otherwise its something else? fall back to original value
									(current_value)
								)

								;else return original value
								(current_value)
							)
						)
						feature_deviations
					)
			))
		)

	)

	#!CheckDerivedActionFeatures
	(let
		(assoc
			;features that will be available at the time of derivation
			available_features (append context_features action_features)
		)

		(map
			(lambda
				(if
					(size (remove
						(get_all_labels (parse (get !featureAttributes [(current_value 1) "derived_feature_code"])))
						available_features
					))
					(accum (assoc
						warnings
							(associate (concat
								"\""(current_value 2) "\" is specified in `derived_action_features` but not all of the features required "
								"for its derivation are specified as either context or action features. The features necessary for derivation are: "
								(apply "concat" (trunc (weave
									(map
										(lambda (concat "\"" (current_value) "\""))
										(indices (get_all_labels (parse (get !featureAttributes [(current_value 3) "derived_feature_code"]))))
									)
									"\, "
								)))
							))
					))
				)
			)
			derived_action_features
		)
	)

	;Helper method for reacts to update contexts with goal feature values from results of local_model_cases_tuple and rerun the query
	#!UpdateLocalInfluencesForGoals
	(seq
		(assign (assoc
			;set feature weight of goal features, zero out all other weights
			feature_weights
				(map
					(lambda
						(if (contains_index goal_features_map (current_index))
							;for non-surprisal space, use the provided weight as-is, otherwise set all goal feature weights to 1
							(if (and (!= "suprisal_to_prob" dt_parameter) feature_weights)
								(current_value)
								1
							)

							;all non-goal features have weight of 0
							0
						)
					)
					(if feature_weights
						;ensure goal features are included in feature weights and have a value
						(append
							feature_weights
							(zip
								goal_features
								(if (= "suprisal_to_prob" dt_parameter)
									1
									(map (lambda (or (get feature_weights (current_value)) 1) ) goal_features)
								)
							)
						)
						(zip (append context_features goal_features))
					)
				)

			context_features (append context_features goal_features)

			;set goal to max/min/specified value in local space
			context_values
				(append
					context_values
					(map
						(lambda (let
							(assoc
								goal_feature (current_value 1)
								not_nominal (not (contains_index !nominalsMap (current_value 1)))
							)

							(if (and not_nominal (= "max" (get goal_features_map [goal_feature "goal"])) )
								(get
									(first
										(compute_on_contained_entities [
											(query_in_entity_list (first local_model_cases_tuple))
											(query_max goal_feature 1)
											(query_exists goal_feature)
										])
									)
									goal_feature
								)

								(and not_nominal (= "min" (get goal_features_map [goal_feature "goal"])) )
								(get
									(first
										(compute_on_contained_entities [
											(query_in_entity_list (first local_model_cases_tuple))
											(query_min goal_feature 1)
											(query_exists goal_feature)
										])
									)
									goal_feature
								)

								;else approach specified value
								(let
									(assoc
										goal_value (get goal_features_map [goal_feature "value"])
										local_goal_values
											(map
												(lambda (retrieve_from_entity (current_value) goal_feature))
												(first local_model_cases_tuple)
											)
									)
									(declare (assoc local_max (apply "max" local_goal_values) ))
									(if (>= goal_value local_max) (conclude local_max) )

									(declare (assoc local_min (apply "min" local_goal_values) ))
									(if (<= goal_value local_min)
										local_min

										;else goal value is within the local space, use it as-is
										goal_value
									)
								)
							)
						))
						goal_features
					)
				)

			;limit the secondary goal-oriented query to only run on cases in this local space
			custom_extra_filtering_queries
				(if custom_extra_filtering_queries
					(append custom_extra_filtering_queries (query_in_entity_list (first local_model_cases_tuple)) )
					(query_in_entity_list (first local_model_cases_tuple))
				)
		))

		;call the react query again with the goal-oriented contexts and weights
		(assign (assoc local_model_cases_tuple (call (retrieve_from_entity query_label)) ))
	)
)