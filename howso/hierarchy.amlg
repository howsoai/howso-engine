;Contains methods for hierarchy and subtrainee operations.
(null

	;Pull the hierarchy for a trainee, returns an assoc of:
	;the currently contained hierarchy as a nested assoc with (false) for trainees that are stored independently.
	#get_hierarchy
	(call !Return (assoc payload (call !GetHierarchy) ))

	;Returns the full entity path to a child trainee provided its unique trainee id if it is contained in the hierarchy.
	;Iterates down the hierarchy searching for a trainee that matches the specified id, returns null if not found or
	;a string error if found but trainee is stored externally as an independent trainee.
	;
	;parameters:
	; id: unique id of trainee
	; path: optional, list of strings, entity path to parent of trainee
	#get_entity_path_by_id
	(call !Return (assoc
		payload (call !GetEntityPathById (assoc id id path path))
	))

	;Rename a contained trainee
	;
	;parameters:
	; child_name_path: optional, list of strings specifying the user-friendly path of the child subtrainee to rename
	; child_id: optional, id of child trainee to rename. Ignored if child_name_path is specified
	; new_name: new name of child trainee
	#rename_subtrainee
	(declare
		(assoc
			child_name_path (null)
			child_id (null)
			new_name (null)
		)

		(if (= (null) new_name)
			(conclude (call !Return (assoc errors (list "Must specify new_name."))))
		)

		(declare (assoc
			child_entity_path
				(call !ResolveChildEntityPath (assoc
					name_path child_name_path
					id child_id
				))
		))

		(if (~ "string" child_entity_path)
			(conclude (call !Return (assoc errors (list child_entity_path))) )
		)

		(declare (assoc new_name_path (append (trunc child_entity_path) new_name) ))

		(if (contains_entity new_name_path)
			(conclude (call !Return (assoc errors (list "Trainee with specified new name already exists."))))
		)

		(move_entities child_entity_path new_name_path)

		(call !RemoveChildTraineeReferences (assoc child_entity_path child_entity_path ))
		(call !AddChildTraineeReferences (assoc
			child_id (call_entity new_name_path "get_trainee_id")
			child_entity_path new_name_path
		))

		(call !Return)
	)


	;Execute any method in the API directly on any child trainee of this trainee, used for hierarchy operations.
	;
	;parameters:
	; method: name of method to execute
	; payload: payload to pass to the method
	; child_name_path: optional, list of strings specifying the user-friendly path of the child subtrainee for execution of method
	; child_id: optional, id of child trainee to execute method. Ignored if child_name_path is specified
	; as_external: optional, boolean, applicable only to 'load_subtrainee' and 'save_subtrainee' and if specifying child_name_path or child_id.
	;	For 'save_subtrainee', stores the child out as an independent trainee and removes it as a contained entity.
	;	For 'load_subtrainee' updates hierarchy by adding the child as an independently stored trainee to the hierarchy without loading the trainee as a subtrainee.
	; load_external_trainee_id: optional, trainee id of trainee being loaded, must be specified only when 'load_subtrainee' and as_external is true.
	#execute_on_subtrainee
	(declare
		(assoc payload (assoc))

		;providing id of child under which to creating/loading a trainee, find the path to that child using its id
		(if (and child_id (= (null) child_name_path) (or (= "create_subtrainee" method) (= "load_subtrainee" method)))
			(seq
				(assign (assoc
					child_name_path (call !ResolveChildEntityPath (assoc id child_id))
				))
				(if (~ "string" child_name_path)
					(conclude (call !Return (assoc errors (list child_name_path))) )
				)
				(assign (assoc child_name_path (filter (lambda (!= !traineeContainer (current_value))) child_name_path)))
			)
		)

		(declare (assoc
			child_entity_path
				(call !ResolveChildEntityPath (assoc
					name_path
						(if (or (= "create_subtrainee" method) (= "load_subtrainee" method))
							(append (or child_name_path (list)) (get payload "trainee"))
							child_name_path
						)
					id child_id
					;if creating or loading, the child should not already exist
					child_should_not_exist (or (= "create_subtrainee" method) (= "load_subtrainee" method))
				))
			is_internal (true)
		))

		(if (~ "string" child_entity_path)
			(if (and (= "delete_subtrainee" method)  "Specified an indepedently stored trainee." child_entity_path)
				(assign (assoc is_internal (false) ))

				(conclude (call !Return (assoc errors (list child_entity_path))) )
			)
		)

		(if (= "delete_subtrainee" method)
			(let
				(assoc
					child_entity_path
						(call !ResolveChildEntityPath (assoc
							name_path child_name_path
							id child_id
							child_must_be_contained (false)
						))
				)
				(call !RemoveChildTraineeReferences (assoc child_entity_path child_entity_path))
				(conclude
					(if is_internal
						(call delete_subtrainee (assoc trainee child_entity_path))
						;TODO: 19626 route the delete message to any independent parent in the path to the child trainee
						(call !Return (assoc warnings (list "Hierarchy has been updated but child trainee was not removed because it is stored independently of this trainee.")))
					)
				)
			)
		)

		;TODO: 19626 route output the message to the child trainee instead of erroring out
		(if (= (false) is_internal)
			(conclude
				(call !Return (assoc errors (list "Specified child trainee is not a subtrainee.")))
			)
		)

		(declare (assoc
			child_name
				(if (contains_value (list "create_subtrainee" "load_subtrainee" "delete_subtrainee") method)
					;set name to the trainee in the payload
					(get payload "trainee")
				)
		))

		(if (= (null) child_entity_path)
			(assign (assoc child_entity_path (list !traineeContainer child_name)))
		)

		;if loading as external, update the hierarchy maps and return without actually loading the trainee
		(if (and (= "load_subtrainee" method) as_external)
			(seq
				(if (= (null) load_external_trainee_id)
					(conclude (conclude
						(call !Return (assoc errors (list "load_external_trainee_id must be specified when loading as external.")))
					))
				)

				(declare (assoc
					path_to_existing_by_id (call !GetEntityPathById (assoc id load_external_trainee_id))
				))

				(if (!= (null) path_to_existing_by_id)
					(conclude (conclude
						(call !Return (assoc errors (list "A trainee with this id is already loaded.")))
					))
				)

				(call !AddChildTraineeReferences (assoc
					child_id load_external_trainee_id
					child_entity_path child_entity_path
					is_contained (false)
				))
				(conclude (call !Return))
			)
		)

		;call the method on the child directly with the payload
		;convert (list method (assoc trainee (list path_to_trainee))) into: (call method (assoc trainee (list path_to_trainee)))
		(declare (assoc
			output
				;create, save and load need root access to filesystem, so they must be executed by the parent trainee, otherwise the child trainee can execute the method itself
				(if (contains_value (list "create_subtrainee" "load_subtrainee" "save_subtrainee") method)
					(apply "call"
						;parse method to evaluate it, when the opcode 'call' is applied, it'll be the actual name of the method instead of the literal 'method'
						(list (parse method) (append
							payload
							(assoc "trainee" (tail child_entity_path))
						))
					)

					;else have the child trainee run the method itself
					(call_entity child_entity_path method payload)
				)
		))

		;post-execute operations if the execution was succesfull
		(if (= 0 (size (get output "errors")))
			(if (= "load_subtrainee" method)
				(call !AddChildTraineeReferences (assoc
					child_entity_path child_entity_path
					;should pull that from loaded child
					child_id (null)
				))

				;saving a child trainee sets it as independent and removes it as a contained trainee
				(and (= "save_subtrainee" method) as_external)
				(seq
					(call !UpdateParentsIsContainedMap (assoc
						child_entity_path child_entity_path
						is_contained (false)
					))
					(destroy_entities child_entity_path)
				)
			)
		)

		output
	)


	;creates a new instance of a contained trainee as specified by the entity label "trainee".
	;parameters:
	; filepath: path to the file (optional)
	; trainee: name of trainee to create
	; trainee_id: optional, unique id for trainee
	#create_subtrainee
	(seq
		;create contained trainee inside the !traineeContainer
		(assign (assoc trainee_path (append !traineeContainer trainee) ))

		(declare (assoc
			result (load_entity (concat filepath !trainee_template_filename "." !file_extension) trainee_path (false) (false))
		))

		(if (!= (null) result)
			(seq
				(call_entity trainee_path "initialize" (assoc trainee_id trainee_id))

				(call !AddChildTraineeReferences (assoc
					child_id trainee_id
					child_entity_path trainee_path
				))

				(call !Return (assoc payload (assoc "name" result "id" trainee_id) ))
			)

			;else error out
			(call !Return (assoc errors (list "Failed to create trainee: ensure a valid filepath.")))
		)
	)


	;Attempts to load a subtrainee with the following optional parameters.
	;If a parameter is not specified, it will look to this entity's own label of the same name.
	;If the saved instance does not exist the existing trainee will remain unmodified and the function will return null.
	;assumes loaded trainee filenames need to be escaped
	;returns the trainee name if successful, null if not
	;
	;parameters:
	; filepath: base path to load from
	; filename: name to load (without extension)
	; trainee: name path of trainee to laod
	; separate_files: flag, default to false. if set to true will load each case from its individual file
	#load_subtrainee
	(seq
		(declare (assoc trainee_path (append !traineeContainer trainee) ))

		(declare (assoc
			loaded_trainee
				(if (and (not separate_files) (= "amlg" !file_extension))
					;load one flattened entity trainee and parse it out by 'call'ing its code to create all the contained entities
					(let
						(assoc temptrainee (call (load (concat filepath filename "." !file_extension))) )

						(if (and (!= (null) temptrainee) (contains_entity temptrainee))
							(seq
								;destroy the previously existing trainee
								(destroy_entities trainee_path)
								;move the trainee under the temporary label to the trainee label;
								(move_entities temptrainee trainee_path)
								;return the name of the trainee to indicate a successful load attempt
								trainee_path
							)

							;else return null
							(null)
						)
					)

					;else load entity as-is
					(seq
						;destroy the previously existing trainee
						(destroy_entities trainee_path)
						;attempt to load the entity into the specified path
						(load_entity (concat filepath filename "." !file_extension) trainee_path (true))
					)
				)
		))

		(if loaded_trainee
			(call !Return (assoc payload (assoc "name" loaded_trainee) ))

			(call !Return (assoc errors (list (concat "Failed to load trainee " filename))  ))
		)
	)

	;Saves a subtrainee with the following optional parameters, escapes trainee filenames on save
	;
	;parameters:
	; filepath: base path to store to
	; filename: name to store (without extension)
	; trainee: trainee instance name path to store
	; trainee_id: optional, unique id for trainee. Must be provided if trainee does not have one already specified.
	; separate_files: flag, default to false. if set to true will save each case as an individual file
	#save_subtrainee
	(seq
		(declare (assoc trainee_path (append !traineeContainer trainee) ))

		(if (= (null) trainee_id (call_entity trainee_path "get_trainee_id"))
			(conclude
				(call !Return (assoc errors (list "Trainee must have a unique trainee_id specified.")))
			)

			;else the trainee doesn't have its !traineeId set, update it here prior to saving
			(= (null) (call_entity trainee_path "get_trainee_id"))
			(call_entity trainee_path "set_trainee_id" (assoc trainee_id trainee_id))
		)

		(declare (assoc
			success
				(if (and (not separate_files) (= "amlg" !file_extension))
					(store (concat filepath filename "." !file_extension) (flatten_entity trainee_path (false)) )

					;store out the trainee and escape all filenames
					(store_entity (concat filepath filename "." !file_extension) trainee_path (true) (true))
				)
		))

		(if success
			(call !Return)

			(call !Return (assoc errors (list (concat "Failed to save trainee as " filename)) ))
		)
	)


	;Destroys the instance of the trainee specified by the parameter "trainee".
	;
	;parameters:
	; trainee: name path of trainee
	#delete_subtrainee
	(seq
		;calling directly on trainee, set trainee to be the entity path to and remove references
		(if (not (contains_value trainee !traineeContainer))
			(seq
				(assign (assoc trainee (append !traineeContainer trainee)))
				(call !RemoveChildTraineeReferences (assoc child_entity_path trainee))
			)
		)
		(destroy_entities trainee)
		(call !Return)
	)

	;creates a copy of a trainee and stores it a subtrainee, returns the name of the copied trainee on success
	;
	;parameters:
	; target_trainee: name of copy
	; target_name_path: optional, list of strings specifying the user-friendly path of the child subtrainee to copy trainee into.
	; target_id: optional, id of target trainee to copy trainee into.  Ignored if target_name_path is specified.
	;		If neither target_name_path nor target_id are specified, copies as a direct child of trainee
	; source_name_path: optional, list of strings specifying the user-friendly path of the child subtrainee to copy.
	; source_id: optional, id of source trainee to copy. Ignored if source_name_path is specified.
	;		If neither source_name_path nor source_id are specified, copies the trainee itself.
	#copy_subtrainee
	(let
		(assoc
			;flag will be set if copying a trainee into the hierarchy and the hirearchy definition will need to be updated
			update_hierarchy (false)
			source_trainee (list)
		)

		(if (or target_id target_name_path)
			(let
				(assoc
					target_entity_path
						(call !ResolveChildEntityPath (assoc
							name_path target_name_path
							id target_id
						))
				)
				(if (~ "string" target_entity_path)
					(conclude (conclude (call !Return (assoc errors (list target_entity_path))) ))
				)

				(assign (assoc
					target_entity_path
						(call !ResolveChildEntityPath (assoc
							name_path (append target_name_path target_trainee)
							id target_id
							child_should_not_exist (true)
						))
				))
				(if (~ "string" target_entity_path)
					(conclude (conclude (call !Return (assoc errors (list target_entity_path))) ))
				)

				(assign (assoc
					update_hierarchy (true)
					target_trainee target_entity_path
				))
			)

			;else making a direct copy into the main trainee
			(seq
				(assign (assoc target_trainee (append !traineeContainer target_trainee) ))

				(if (contains_entity target_trainee)
					(conclude (conclude (call !Return (assoc errors (list "Specified target_trainee already exists."))) ))
				)

				(if (= (false) (get !childTraineeIsContainedMap target_trainee))
					(conclude (conclude (call !Return (assoc errors (list "Specified target location trainee is stored independently."))) ))
				)
			)
		)

		(if (or source_id source_name_path)
			(let
				(assoc
					source_entity_path
						(call !ResolveChildEntityPath (assoc
							name_path source_name_path
							id source_id
						))
				)
				(if (~ "string" source_entity_path)
					(conclude (conclude (call !Return (assoc errors (list source_entity_path))) ))
				)

				(assign (assoc
					update_hierarchy (true)
					source_trainee source_entity_path
				))

				;if copying directly into the trainee, target_trainee will be the name of the target instead of the path, overwrite as the path to it
				(if (~ "string" target_trainee)
					(assign (assoc target_trainee (list !traineeContainer target_trainee) ))
				)
			)
		)

		;do the actual copy here
		(declare (assoc
			name (first (clone_entities source_trainee target_trainee))
		))

		;update the hierarchy definition if copy was a success
		(if (and name update_hierarchy)
			(seq
				;remove !traineeId from copy to make sure there aren't two trainees with the same id
				(call_entity target_trainee "set_trainee_id" (assoc trainee_id (null) ))

				(call !AddChildTraineeReferences (assoc
					child_entity_path target_trainee
					child_id (null)
				))
			)
		)

		(call !Return (assoc payload (assoc "name" name ) ))
	)


	;moves all cases that match the specified conditions in the hierarchy of the specified trainee
	;
	;parameters:
	; target_name_path: optional, list of strings specifying the user-friendly path of the child subtrainee to move cases to.
	; target_id: optional, id of target trainee to move cases to. Ignored if target_name_path is specified.
	;		If neither target_name_path nor target_id are specified, moves cases to the trainee itself.
	; source_name_path: optional, list of strings specifying the user-friendly path of the child subtrainee from which to move cases.
	; source_id: optional, id of source trainee from which to move cases. Ignored if source_name_path is specified.
	;		If neither source_name_path nor source_id are specified, moves cases from the trainee itself.
	;
	; case_indices: a list of session id and training index tuples that specify which cases are to be moved
	; precision: flag, whether to query for 'exact' matches; if set to 'similar' will move num_cases with the most similar values. Ignored if case_indices is specified.
	; condition: assoc of feature->value(s) (no value = must have feature, one value = must equal exactly the value, two values = inclusive between). Ignored if case_indices is specified.
	; condition_session: optional, if specified, ignores condition and instead operates on all cases that were trained with this session id. Ignored if case_indices is specified.
	; num_cases: optional, limit on the number of cases to move; If set to zero there will be no limit. Ignored if case_indices is specified.
	;		If null, will be set to k if precision is "similar" or no limit if precision is "exact". default is null
	; preserve_session_data: if true will just move cases from source to target, otherwise will do session cleanup
	; session: the session id when this call is being made. Used for training the cases into the target_trainee once when not preserving session data.
	; distribute_weight_feature: name of feature into which to distribute the removed cases' weights to their neighbors.
	;  	Applicable only if not preserving session data.
	#move_cases
	(declare
		(assoc
			case_indices (null)
			condition (assoc)
			precision "exact"
			num_cases (null)
			preserve_session_data (false)
			session "none"
			distribute_weight_feature (null)
		)

		(declare (assoc
			target_trainee (null)
			trainee (null)
		))

		(if (or target_id target_name_path)
			(let
				(assoc
					target_entity_path
						(call !ResolveChildEntityPath (assoc
							name_path target_name_path
							id target_id
						))
				)
				(if (~ "string" target_entity_path)
					(conclude (conclude (call !Return (assoc errors (list target_entity_path))) ))
				)

				(assign (assoc target_trainee target_entity_path ))
			)

			;else target is self
			(assign (assoc target_trainee (list) ))
		)

		(if (or source_id source_name_path)
			(let
				(assoc
					source_entity_path
						(call !ResolveChildEntityPath (assoc
							name_path source_name_path
							id source_id
						))
				)
				(if (~ "string" source_entity_path)
					(conclude (conclude (call !Return (assoc errors (list source_entity_path))) ))
				)

				(assign (assoc trainee source_entity_path ))
			)
		)

		(if (= trainee target_trainee)
			(conclude (call !Return (assoc errors (list "Can't move to cases to self."))))
		)

		;build list of case ids that match criteria
		(declare (assoc
			cases_to_move
				(if (= (null) case_indices)
					;compute the cases to re/move
					(get
						(call_entity trainee "get_cases" (assoc
							condition condition
							session condition_session
							precision precision
							num_cases num_cases
							output_ids (true)
						))
						(list 1 "payload" "cases")
					)

					;else use case_indices
					(get
						(call_entity trainee "get_cases" (assoc
							case_indices case_indices
							output_ids (true)
						))
						(list 1 "payload" "cases")
					)
				)
		))


		;iterate over each case and move it from the trainee into target_trainee
		(if preserve_session_data
			;just move the cases without editing session data
			(map
				(lambda
					;if target already has an entity with this exact id, move it into the target without maintaining original id
					(if (contains_entity (append target_trainee (current_value)))
						(move_entities (append trainee (current_value)) target_trainee)

						;else move the entity to the target maintaining its id
						(move_entities (append trainee (current_value)) (append target_trainee (current_value)))
					)
					)
				cases_to_move
			)

			;else move the cases by retraining them in the target trainee and clearing out session data from trainee
			(seq
				(map
					(lambda (let
						(assoc
							;grab all the case data as an assoc
							case_map (get_all_labels (retrieve_entity_root (append trainee (current_value 1)) 1 ))
						)
						(declare (assoc
							;keep all features from the case except for 'sessions' since that'll have to be recomputed
							case_features
								(filter
									(lambda (!= (current_value) ".session"))
									(indices case_map)
								)
						))
						(call_entity target_trainee "train" (assoc
							features case_features
							input_cases (list (unzip case_map case_features))
							session session
							;allow training on reserved features to preserve all case data
							allow_training_reserved_features (true)
						))
					))
					cases_to_move
				)

				;remove cases and do session cleanup
				(if (= (null) case_indices)
					(call_entity trainee "remove_cases" (assoc
						condition condition
						condition_session condition_session
						precision precision
						num_cases num_cases
						distribute_weight_feature distribute_weight_feature
					))

					(call_entity trainee "remove_cases" (assoc
						cases_indices case_indices
						distribute_weight_feature distribute_weight_feature
					))
				)
			)
		)

		(accum_to_entities (assoc !revision 1))

		;return the number of cases moved
		(call !Return (assoc payload (assoc "count" (size cases_to_move)) ))
	)

	;method to update the references for contained trainees, should only be used for debugging purposes.
	;
	;parameters:
	; contained_trainee_name_to_id_map: optional, map of contained trainee name to its unique id
	; contained_trainee_id_to_name_map: optional, map of contained trainee unique id to its name
	; child_trainee_is_contained_map: optional, map of trainee name to boolean if it's contained internally
	#set_contained_trainee_maps
	(declare
		(assoc
			contained_trainee_name_to_id_map (null)
			contained_trainee_id_to_name_map (null)
			child_trainee_is_contained_map (null)
		)

		(if contained_trainee_name_to_id_map
			(assign_to_entities (assoc !containedTraineeNameToIdMap contained_trainee_name_to_id_map))
		)
		(if contained_trainee_id_to_name_map
			(assign_to_entities (assoc !containedTraineeIdToNameMap contained_trainee_id_to_name_map))
		)
		(if child_trainee_is_contained_map
			(assign_to_entities (assoc !childTraineeIsContainedMap child_trainee_is_contained_map))
		)

		(call !Return)
	)

	;Helper method to create the actual full contained entity path by interleaving !traineeContainer with each name in the path
	#!ConvertNamePathToEntityPath
	(weave (range !traineeContainer 1 (size path) 1) path)

	;method to recurse down the the hierarchy to output the currently contained hierarchy as a nested assoc
	;with (false) for trainees that are stored independently
	#!GetHierarchy
	(let
		(assoc children (indices !childTraineeIsContainedMap))

		(zip
			children
			(map
				(lambda
					(if (get !childTraineeIsContainedMap (current_value))
						(get (call_entity (list !traineeContainer (current_value 1)) "get_hierarchy") (list 1 "payload"))

						;can't traverse down trainees that are stored externally
						(false)
					)
				)
				children
			)
		)
	)

	;Returns the full entity path to a child trainee provided its unique trainee id if it is contained in the hierarchy.
	;Iterates down the hierarchy searching for a trainee that matches the specified id, returns null if not found or
	;a string error if found but trainee is stored externally as an independent trainee.
	;
	;parameters:
	; id: unique id of trainee
	; path: optional, list of strings, entity path to parent of trainee
	#!GetEntityPathById
	(declare
		(assoc
			path (list)
			id (null)
		)

		;this id is a child
		(if (contains_index !containedTraineeIdToNameMap id)
			(let
				(assoc name (get !containedTraineeIdToNameMap id))
				(if (get !childTraineeIsContainedMap name)
					(conclude (append path !traineeContainer name))
					;else it's stored externally
					(conclude "Specified an independently stored trainee.")
				)
			)
		)

		(declare (assoc
			child_name (null)
			contained_trainees (contained_entities !traineeContainer)
			output_path (null)
		))

		;traverse contained hierarchy searching all id->name lookups to find specified id, then generate path if id is found
		(while (< (current_index) (size contained_trainees))
			(assign (assoc child_name (get contained_trainees (current_index 1)) ))

			(assign (assoc
				output_path
					(get
						(call_entity (list !traineeContainer child_name) "get_entity_path_by_id" (assoc
							path (append path !traineeContainer child_name)
							id id
						))
						(list 1 "payload")
					)
			))

			(if (or
					(~ "string" output_path)
					(~ (list) output_path)
				)
				(conclude (conclude output_path))
			)
		)

		(null)
	)

	;Validates, finds and returns the matching full entity path for a specified subtrainee.
	;output is in the format of (list !traineeContainer child1 !traineeContainer child2)
	;
	;parameters:
	; name_path: optional,  list of strings specifying the user-friendly path to the child subtrainee.
	;		May be an incomplete path as long as it uniquely identifies the trainee.
	; id: optional, unique id of the subtrainee. Ignored if name_path is specified.
	; child_should_not_exist: optional, boolean.  when true, checks that the specified child does not already exist and errors if it does.
	; child_must_be_contained: optional, boolean.  default true. when false true won't error out of child is stored externally
	#!ResolveChildEntityPath
	(declare
		(assoc
			name_path (null)
			id (null)
			child_should_not_exist (false)
			child_must_be_contained (true)
		)

		;use id instead of name_path if provided only id
		(if (and (= 0 (size name_path)) id)
			(let
				(assoc child_entity_path (call !GetEntityPathById (assoc id id)))
				(conclude
					(if (!= (null) child_entity_path)
						child_entity_path
						"Invalid trainee id specified."
					)
				)
			)
		)

		(if (and (= (null) id) (= 0 (size name_path)))
			(conclude (null))
		)

		(declare (assoc
			path_length (- (size name_path) 1)
			entity_path (list)
			child_name (null)
		))

		;traverse down the path to validate it
		(while (<= (current_index) path_length)
			(assign (assoc
				child_name (get name_path (current_index 1))
				child_is_contained_map (call_entity entity_path "debug_label" (assoc label "!childTraineeIsContainedMap"))
			))

			;if this is the last trainee in the path and it should not exist
			(if (and child_should_not_exist (= (current_index) path_length))
				(if (contains_index child_is_contained_map child_name)
					(conclude (conclude "Specified trainee is already in the hierarchy."))
				)

				;else child must exist
				(if (not (contains_index child_is_contained_map child_name))
					(conclude (conclude "Invalid name path specified."))

					(and child_must_be_contained (= (false) (get child_is_contained_map child_name)))
					(conclude (conclude "Specified an independently stored trainee."))
				)
			)

			(accum (assoc
				entity_path (list !traineeContainer child_name)
			))
		)

		;output entity path
		entity_path
	)

	;Method to update this trainee's Parent's is_contained status, used when a trainee is saved as an independent external trainee.
	;The parent's is_contained value for this trainee and all its child trainees will then also be set to false.
	;
	;parameters:
	; child_entity_path: path to child trainee
	; is_contained: boolean, true means this child is contained inside !traineeContainer, false means it is stored and loaded independently
	#!UpdateParentsIsContainedMap
	(seq
		(declare (assoc path_to_parent (trunc child_entity_path -2) ))

		(declare (assoc
			trainee_is_contained_map
				(append
					(call_entity path_to_parent "debug_label" (assoc label "!childTraineeIsContainedMap"))
					(associate (last child_entity_path) is_contained)
				)
		))

		(call_entity path_to_parent "set_contained_trainee_maps" (assoc
			child_trainee_is_contained_map trainee_is_contained_map
		))
	)

	;Store the name -> is_contained for the specified child in its parent and update the child's !parentId
	;
	;parameters:
	; child_id: optional, unique id of child trainee to add
	; child_entity_path: path to child trainee in the format of a list with repeating pairs of [!traineeContainer child_name]
	;	for each layer of hierarchy. e.g., (list !traineeContainer first_child !traineeContainer grand_child) for a 2 level hirearchy
	; is_contained: boolean, default true, meaning this child is contained inside !traineeContainer, false means it is stored and loaded independently
	#!AddChildTraineeReferences
	(declare
		(assoc is_contained (true))

		(declare (assoc
			path_to_parent (trunc child_entity_path -2)
			child_name (last child_entity_path)
		))

		;if child_id wasn't specified, set it to child's !traineeId if it exists
		(if (= (null) child_id)
			(assign (assoc child_id (call_entity child_entity_path "get_trainee_id") ))
		)

		(declare (assoc
			trainee_is_contained_map
				(append
					(call_entity path_to_parent "debug_label" (assoc label "!childTraineeIsContainedMap"))
					(associate child_name is_contained)
				)

		))
		(call_entity path_to_parent "set_contained_trainee_maps" (assoc
			child_trainee_is_contained_map trainee_is_contained_map
		))

		(if child_id
			(let
				(assoc
					contained_name_to_id_map (call_entity path_to_parent "debug_label" (assoc label "!containedTraineeNameToIdMap" ))
					contained_id_to_name_map (call_entity path_to_parent "debug_label" (assoc label "!containedTraineeIdToNameMap" ))
				)
				(call_entity path_to_parent "set_contained_trainee_maps" (assoc
					contained_trainee_name_to_id_map (append contained_name_to_id_map (associate child_name child_id))
					contained_trainee_id_to_name_map (append contained_id_to_name_map (associate child_id child_name))
				))
			)
		)

		;set the !parentId for the child
		(call_entity child_entity_path "set_parent_id" (assoc
			parent_id (call_entity path_to_parent "get_trainee_id")
		))
	)

	;Removes all hierarchy references to a child trainee given the path to the child.
	;
	;parameters:
	; child_entity_path: path to child trainee to remove in the format of: (list !traineeContainer child1 !traineeContainer child2 etc..)
	#!RemoveChildTraineeReferences
	(seq
		(declare (assoc
			path_to_parent (trunc child_entity_path -2)
			child_name (last child_entity_path)
		))

		(declare (assoc
			parent_contained_trainee_name_to_id_map (call_entity path_to_parent "debug_label" (assoc label "!containedTraineeNameToIdMap"))
			parent_contained_trainee_id_to_name_map (call_entity path_to_parent "debug_label" (assoc label "!containedTraineeIdToNameMap"))
			parent_child_trainee_is_contained_map (call_entity path_to_parent "debug_label" (assoc label "!childTraineeIsContainedMap"))
		))

		(declare (assoc child_id (get parent_contained_trainee_name_to_id_map child_name) ))

		(call_entity path_to_parent "set_contained_trainee_maps" (assoc
			contained_trainee_name_to_id_map (remove parent_contained_trainee_name_to_id_map child_name)
			contained_trainee_id_to_name_map (remove parent_contained_trainee_id_to_name_map child_id)
			child_trainee_is_contained_map (remove parent_child_trainee_is_contained_map child_name)
		))
	)

)