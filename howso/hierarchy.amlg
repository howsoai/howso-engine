;Contains methods for hierarchy and subtrainee operations.
(null

	;Pull the hierarchy for a trainee, returns an assoc of:
	;the currently contained hierarchy as a nested assoc with (false) for trainees that are stored independently.
	;{read_only (true) idempotent (true)}
	#get_hierarchy
	(declare
		;returns {
		; 	type "assoc"
		; 	description "The map showing the full hierarchy of the Trainee and all of its subtrainees."
		; }
		(assoc
			;{ref "TraineePath"}
			;path to this trainee as a list of path labels
			path_list []
		)
		(call !Return (assoc payload (call !GetHierarchy) ))
	)

	;Returns the full entity path to a child trainee provided its unique trainee id if it is contained in the hierarchy.
	;Iterates down the hierarchy searching for a trainee that matches the specified id, returns null if not found or
	;a string error if found but trainee is stored externally as an independent trainee.
	;{read_only (true) idempotent (true) protected (true)}
	#get_entity_path_by_id
	(declare
		;returns {
		; 	type ["list" "string" "null"]
		; 	values "string"
		; 	description "The full entity path to the child trainee, a string describing an error, or null if the child trainee was not found"
		; }
		(assoc
			;{type "string" required (true)}
			;unique id of trainee
			id (null)
			;{type "list" values "string"}
			;list of strings, entity path to parent of trainee
			entity_path (null)
		)
		(call !ValidateParameters)
		(call !Return (assoc
			payload (call !GetEntityPathById (assoc id id entity_path entity_path))
		))
	)

	;Rename a contained trainee
	#rename_subtrainee
	(declare
		(assoc
			;{ref "TraineePath"}
			;list of strings specifying the user-friendly path of the child subtrainee to rename
			path (null)
			;{type "string"}
			;id of child trainee to rename. Ignored if path is specified
			child_id (null)
			;{ref "TraineePathLabel" required (true)}
			;new path label of child trainee
			label (null)
		)
		(call !ValidateParameters)

		(if (= (null) label)
			(conclude (call !Return (assoc errors (list "Must specify label."))))
		)

		(declare (assoc
			child_entity_path
				(call !ResolveChildEntityPath (assoc
					path path
					id child_id
				))
		))

		(if (= (null) child_entity_path)
			(conclude
				(call !Return (assoc
					errors ["Must specify path or child_id."]
					error_code "invalid"
				))
			)
		)

		(if (~ "string" child_entity_path)
			(conclude (call !Return (assoc errors [child_entity_path])) )
		)

		(declare (assoc new_name_path (append (trunc child_entity_path) label) ))

		(if (contains_entity new_name_path)
			(conclude (call !Return (assoc errors (list "Trainee with specified label already exists."))))
		)

		(move_entities child_entity_path new_name_path)

		(call !RemoveChildTraineeReferences (assoc child_entity_path child_entity_path ))
		(call !AddChildTraineeReferences (assoc
			child_id (call_entity new_name_path "get_trainee_id")
			child_entity_path new_name_path
		))

		(call !Return)
	)


	;Execute any method in the API directly on any child trainee of this trainee, used for hierarchy operations.
	;{long_running (true)}
	#execute_on_subtrainee
	(declare
		;returns {
		; 	type "any"
		; 	description "The response of the called method on the child trainee."
		; }
		(assoc
			;{type "assoc"}
			;payload to pass to the method
			payload (assoc)
			;{type "string" required (true)}
			;name of method to execute
			method (null)
			;{ref "TraineePath"}
			;list of strings specifying the user-friendly path of the child subtrainee for execution of method
			path (null)
			;{type "string"}
			;id of child trainee to execute method. Ignored if path is specified
			child_id (null)
		)
		(call !ValidateParameters)

		(if (contains_value ["rename_subtrainee" "create_subtrainee" "load_subtrainee" "save_subtrainee" "delete_subtrainee" "copy_subtrainee" "move_cases"] method)
			(conclude (call !Return (assoc errors ["Please call subtrainee methods directly on the root trainee with the appropriate path."])) )
		)

		(declare (assoc
			child_entity_path
				(call !ResolveChildEntityPath (assoc
					path path
					id child_id
				))
		))

		(if (~ "string" child_entity_path)
			(conclude (call !Return (assoc errors [child_entity_path])) )
		)

		(call_entity child_entity_path method payload)
	)


	;creates a new instance of a contained trainee
	#create_subtrainee
	(declare
		;returns {
		; 	type "assoc"
		;	additional_indices (false)
		; 	indices {
		; 		"path" {
		; 			type ["string" "list"]
		;			values "string"
		; 			description "The path of the resulting trainee that was created."
		; 		}
		; 		"id" {
		; 			type "string"
		; 			description "The ID of the resulting trainee that was created."
		; 		}
		; 	}
		; }
		(assoc
			;{type "string"}
			;path to the file (optional)
			filepath (null)
			;{ref "TraineePath" required (true)}
			;list of strings specifying the user-friendly path of the child subtrainee to create
			;including the label of the child as the last value in the path
			path (null)
			;{type "string" required (true)}
			;unique id of child trainee to create
			child_id (null)
		)
		(call !ValidateParameters)

		(declare (assoc
			trainee_path
				(call !ResolveChildEntityPath (assoc
					path path
					id child_id
					child_should_not_exist (true)
				))
		))

		(if (~ "string" trainee_path)
			(conclude (call !Return (assoc errors [trainee_path] )) )
		)

		(declare (assoc
			result
				(load_entity
					(concat (or filepath (retrieve_from_entity "filepath")) !trainee_template_filename "." !file_extension)
					trainee_path
					(null)
					(false)
					{escape_resource_name (false) escape_contained_resource_names (false)}
				)
		))

		(if (!= (null) result)
			(seq
				(call_entity trainee_path "initialize" (assoc trainee_id child_id))

				(call !AddChildTraineeReferences (assoc
					child_id child_id
					child_entity_path trainee_path
				))

				(call !Return (assoc
					payload (assoc "path" (call !FriendlyPath (assoc path result)) "id" child_id)
				))
			)

			;else error out
			(call !Return (assoc errors (list "Failed to create trainee: ensure a valid filepath.")))
		)
	)

	;Attempts to load a subtrainee with the following optional parameters.
	;If the saved instance does not exist the existing trainee will remain unmodified and the function will return null.
	;assumes loaded trainee filenames need to be escaped
	;returns the trainee path if successful, null if not
	#load_subtrainee
	(declare
		;returns {
		; 	type "assoc"
		; 	indices {
		;		"path" {
		; 			type ["string" "list"]
		;			values "string"
		; 			description "The path of the resulting trainee that was loaded."
		;			required (true)
		; 		}
		; 	}
		; }
		(assoc
			;{type "string"}
			;base path to load from
			filepath ""
			;{type "string" required (true)}
			;name to load (without extension)
			filename (null)
			;{ref "TraineePath" required (true)}
			;list of strings specifying the user-friendly path of the child subtrainee to load
			;including the label of the child as the last value in the path
			path (null)
			;{type "string" required (true)}
			;unique id of child trainee to load
			child_id (null)
			;{type "boolean"}
			;flag, default to false. if set to true will load each case from its individual file
			separate_files (false)
		)
		(call !ValidateParameters)
		(declare (assoc
			trainee_path
				(call !ResolveChildEntityPath (assoc
					path path
					id child_id
					child_should_not_exist (true)
				))
		))

		(if (~ "string" trainee_path)
			(conclude (call !Return (assoc errors [trainee_path] )) )
		)

		(declare (assoc
			path_to_existing_by_id (call !GetEntityPathById (assoc id child_id))
		))

		(if (!= (null) path_to_existing_by_id)
			(conclude
				(call !Return (assoc errors (list "A trainee with this id is already loaded.")))
			)
		)

		(declare (assoc
			loaded_trainee
				(if (and (not separate_files) (= "amlg" !file_extension))
					;load one flattened entity trainee and parse it out by 'call'ing its code to create all the contained entities
					(let
						(assoc
							temptrainee
								(call (load (concat (or filepath (retrieve_from_entity "filepath")) filename "." !file_extension)))
						)

						(if (and (!= (null) temptrainee) (contains_entity temptrainee))
							(seq
								;destroy the previously existing trainee
								(destroy_entities trainee_path)
								;move the trainee under the temporary label to the trainee label;
								(move_entities temptrainee trainee_path)
								;return the label of the trainee to indicate a successful load attempt
								trainee_path
							)

							;else return null
							(null)
						)
					)

					;else load entity as-is
					(seq
						;destroy the previously existing trainee
						(destroy_entities trainee_path)
						;attempt to load the entity into the specified path
						(load_entity
							(concat filepath filename "." !file_extension)
							trainee_path
							(null)
							(false)
							{escape_resource_name (true) escape_contained_resource_names (true)}
						)
					)
				)
		))

		(if (= (null) loaded_trainee)
			(conclude
				(call !Return (assoc errors (list (concat "Failed to load trainee: " filename))  ))
			)
		)

		(call !AddChildTraineeReferences (assoc
			child_id child_id
			child_entity_path trainee_path
		))
		(call !Return (assoc
			payload (assoc "path" (call !FriendlyPath (assoc path loaded_trainee)) )
		))
	)

	;Saves a subtrainee with the following optional parameters, escapes trainee filenames on save
	#save_subtrainee
	(declare
		(assoc
			;{type "string"}
			;base path to store to
			filepath ""
			;{type "string" required (true)}
			;name to store (without extension)
			filename (null)
			;{ref "TraineePath"}
			;list of strings specifying the user-friendly path of the child subtrainee to save
			;including the label of the child as the last value in the path
			path (null)
			;{type "string"}
			;unique id of child trainee to save. Ignored if path is specified
			child_id (null)
			;{type "boolean"}
			;When true, stores the child out as an independent trainee and removes it as a contained entity.
			as_external (false)
			;{type "boolean"}
			;flag, default to false. if set to true will save each case as an individual file
			separate_files (false)
		)
		(call !ValidateParameters)

		(declare (assoc
			trainee_path
				(call !ResolveChildEntityPath (assoc
					path path
					id child_id
				))
		))

		(if (~ "string" trainee_path)
			(conclude (call !Return (assoc errors [trainee_path])) )
		)

		(declare (assoc
			success
				(if (and (not separate_files) (= "amlg" !file_extension))
					(store (concat filepath filename "." !file_extension) (flatten_entity trainee_path (false)) )

					;store out the trainee as a caml
					(store_entity (concat filepath filename "." !file_extension) trainee_path)
				)
		))

		(if success
			(seq
				(if as_external
					(seq
						(call !UpdateParentsIsContainedMap (assoc
							child_entity_path trainee_path
							is_contained (false)
						))
						(destroy_entities trainee_path)
					)
				)
				(call !Return)
			)

			(call !Return (assoc errors (list (concat "Failed to save trainee as " filename)) ))
		)
	)


	;Destroys the instance of the trainee specified by the parameter "trainee".
	;{idempotent (true)}
	#delete_subtrainee
	(declare
		(assoc
			;{ref "TraineePath"}
			;list of strings specifying the user-friendly path of the child subtrainee to delete
			;including the label of the child as the last value in the path
			path (null)
			;{type "string"}
			;unique id of child trainee to delete. Ignored if path is specified
			child_id (null)
		)
		(call !ValidateParameters)

		(declare (assoc
			child_entity_path
				(call !ResolveChildEntityPath (assoc
					path path
					id child_id
				))
			is_internal (true)
		))

		(if  (= "Specified an independently stored trainee." child_entity_path)
			(assign (assoc is_internal (false) ))
		)

		(if (not is_internal)
			(assign (assoc
				child_entity_path
					(call !ResolveChildEntityPath (assoc
						path path
						id child_id
						child_must_be_contained (false)
					))
			))
		)

		(call !RemoveChildTraineeReferences (assoc child_entity_path child_entity_path))

		(if (not is_internal)
			(conclude
				;TODO: 19626 route the delete message to any independent parent in the path to the child trainee
				(call !Return (assoc warnings (list "Hierarchy has been updated but child trainee was not removed because it is stored independently of this trainee.")))
			)
		)

		(destroy_entities child_entity_path)
		(call !Return)
	)

	;creates a copy of a trainee and stores it a subtrainee, returns the path of the copied trainee on success
	#copy_subtrainee
	(declare
		;returns {
		; 	type "assoc"
		; 	description "Map containing the path of the newly copied trainee."
		;	additional_indices (false)
		; 	indices {
		; 		"path" {
		; 			type ["string" "list"]
		;			values "string"
		; 			description "The path of the resulting trainee that was copied."
		; 		}
		; 	}
		; }
		(assoc
			;{ref "TraineePath" required (true)}
			;list of strings specifying the resulting destination user-friendly path of the child subtrainee.
			;including the label of the child as the last value in the path
			target_path (null)
			;{type "string" required (true)}
			;new unique id of copied target trainee
			target_id (null)
			;{ref "TraineePath"}
			;list of strings specifying the user-friendly path of the child subtrainee to copy.
			source_path (null)
			;{type "string"}
			;id of source trainee to copy. Ignored if source_path is specified.
			;	If neither source_path nor source_id are specified, copies the trainee itself.
			source_id (null)
		)
		(call !ValidateParameters)

		(declare (assoc
			target_entity_path
				(call !ResolveChildEntityPath (assoc
					path target_path
					id target_id
					child_should_not_exist (true)
				))
			;default path as self
			source_trainee []
		))
		(if (~ "string" target_entity_path)
			(conclude (call !Return (assoc errors [target_entity_path])) )
		)

		(if (contains_entity target_entity_path)
			(conclude (call !Return (assoc errors ["Specified target_trainee already exists."])) )
		)

		(if (= (false) (get !childTraineeIsContainedMap (last target_entity_path)))
			(conclude (call !Return (assoc errors ["Specified target location trainee is stored independently."])) )
		)


		(if (or source_id source_path)
			(let
				(assoc
					source_entity_path
						(call !ResolveChildEntityPath (assoc
							path source_path
							id source_id
						))
				)
				(if (~ "string" source_entity_path)
					(conclude (conclude (call !Return (assoc errors [(concat "source: " source_entity_path)])) ))
				)

				(assign (assoc source_trainee source_entity_path))
			)
		)

		;do the actual copy here
		(declare (assoc
			path (first (clone_entities source_trainee target_entity_path))
		))

		;update the hierarchy definition if copy was a success
		(if path
			(seq
				;remove !traineeId from copy to make sure there aren't two trainees with the same id
				(call_entity target_entity_path "set_trainee_id" (assoc trainee_id target_id ))

				(call !AddChildTraineeReferences (assoc
					child_entity_path target_entity_path
					child_id target_id
				))

				(call !Return (assoc
					payload (assoc "path" (call !FriendlyPath) )
				))
			)

			(call !Return (assoc errors ["Failed to copy trainee."]  ))
		)
	)


	;moves all cases that match the specified conditions in the hierarchy of the specified trainee
	;{use_active_session (true)}
	#move_cases
	(declare
		;returns {
		; 	type "assoc"
		; 	description "Map containing the count of how many cases were moved."
		; 	indices {
		; 		"count" {type "number" required (true)}
		; 	}
		; }
		(assoc
			;{ref "TraineePath"}
			;list of strings specifying the user-friendly path of the child subtrainee to move cases to.
			target_path (null)
			;{type "string"}
			;id of target trainee to move cases to. Ignored if target_path is specified.
			;	If neither target_path nor target_id are specified, moves cases to the trainee itself.
			target_id (null)
			;{ref "TraineePath"}
			;list of strings specifying the user-friendly path of the child subtrainee from which to move cases.
			source_path (null)
			;{type "string"}
			;id of source trainee from which to move cases. Ignored if source_path is specified.
			;	If neither source_path nor source_id are specified, moves cases from the trainee itself.
			source_id (null)
			;{ref "CaseIndices"}
			;a list of session id and training index tuples that specify which cases are to be moved
			case_indices (null)
			;{ref "Condition"}
			;assoc of feature->value(s) (no value or (null) = select cases where that feature is (null)/missing, one value = must equal exactly the value, two values = inclusive between with support for (null) on either side for less than/greater than conditions, [(null) (null)] = select all non-null cases). Ignored if case_indices is specified.
			condition (assoc)
			;{type "string"}
			;session from which to move cases (even if by condition).
			condition_session (null)
			;{ref "Precision"}
			;flag, whether to query for 'exact' matches; if set to 'similar' will move num_cases with the most similar values. Ignored if case_indices is specified.
			precision "exact"
			;{type "number"}
			;limit on the number of cases to move; If set to zero there will be no limit. Ignored if case_indices is specified.
			;	If null, will be set to k if precision is "similar" or no limit if precision is "exact". default is null
			num_cases (null)
			;{type "boolean"}
			;if true will just move cases from source to target, otherwise will do session cleanup
			preserve_session_data (false)
			;{type "string"}
			;the session id when this call is being made. Used for training the cases into the target_trainee once when not preserving session data.
			session "none"
			;{type "string"}
			;name of feature into which to distribute the removed cases' weights to their neighbors.
			;  	Applicable only if not preserving session data.
			distribute_weight_feature (null)
		)
		(call !ValidateParameters)
		(call !ValidateCondition)

		(declare (assoc
			target_trainee (null)
			trainee (null)
		))

		(if (or target_id target_path)
			(let
				(assoc
					target_entity_path
						(call !ResolveChildEntityPath (assoc
							path target_path
							id target_id
						))
				)
				(if (~ "string" target_entity_path)
					(conclude (conclude (call !Return (assoc errors (list target_entity_path))) ))
				)

				(assign (assoc target_trainee target_entity_path ))
			)

			;else target is self
			(assign (assoc target_trainee (list) ))
		)

		(if (or source_id source_path)
			(let
				(assoc
					source_entity_path
						(call !ResolveChildEntityPath (assoc
							path source_path
							id source_id
						))
				)
				(if (~ "string" source_entity_path)
					(conclude (conclude (call !Return (assoc errors (list source_entity_path))) ))
				)

				(assign (assoc trainee source_entity_path ))
			)
		)

		(if (= trainee target_trainee)
			(conclude (call !Return (assoc errors (list "Can't move to cases to self."))))
		)

		;build list of case ids that match criteria
		(declare (assoc
			cases_to_move
				(if (= (null) case_indices)
					;compute the cases to re/move
					(get
						(call_entity trainee "get_cases" (assoc
							condition condition
							session condition_session
							precision precision
							num_cases num_cases
							output_ids (true)
						))
						(list 1 "payload" "cases")
					)

					;else use case_indices
					(get
						(call_entity trainee "get_cases" (assoc
							case_indices case_indices
							output_ids (true)
						))
						(list 1 "payload" "cases")
					)
				)
		))


		;iterate over each case and move it from the trainee into target_trainee
		(if preserve_session_data
			;just move the cases without editing session data
			(map
				(lambda
					;if target already has an entity with this exact id, move it into the target without maintaining original id
					(if (contains_entity (append target_trainee (current_value)))
						(move_entities (append trainee (current_value)) target_trainee)

						;else move the entity to the target maintaining its id
						(move_entities (append trainee (current_value)) (append target_trainee (current_value)))
					)
					)
				cases_to_move
			)

			;else move the cases by retraining them in the target trainee and clearing out session data from trainee
			(seq
				(map
					(lambda (let
						(assoc
							;grab all the case data as an assoc
							case_map (get_all_labels (retrieve_entity_root (append trainee (current_value 1)) 1 ))
						)
						(declare (assoc
							;keep all features from the case except for 'sessions' since that'll have to be recomputed
							case_features
								(filter
									(lambda (!= (current_value) ".session"))
									(indices case_map)
								)
						))
						(call_entity target_trainee "train" (assoc
							features case_features
							cases (list (unzip case_map case_features))
							session session
							;allow training on reserved features to preserve all case data
							allow_training_reserved_features (true)
						))
					))
					cases_to_move
				)

				;remove cases and do session cleanup
				(if (= (null) case_indices)
					(call_entity trainee "remove_cases" (assoc
						condition condition
						condition_session condition_session
						precision precision
						num_cases num_cases
						distribute_weight_feature distribute_weight_feature
					))

					(call_entity trainee "remove_cases" (assoc
						cases_indices case_indices
						distribute_weight_feature distribute_weight_feature
					))
				)
			)
		)

		(accum_to_entities (assoc !revision 1))

		;return the number of cases moved
		(call !Return (assoc payload (assoc "count" (size cases_to_move)) ))
	)

	;method to combine cases from all subtrainees into the root trainee and then deletes the subtrainees and removes them from the hierarchy
	;{long_running (true) idempotent (true)}
	#combine_with_subtrainees
	(declare
		;returns {ref "CombineResponse"}
		(assoc
			;{type ["list" "null"]}
			subtrainees (null)
			;{type "boolean"}
			;flag, if set to true, will not auto_analyze, but will instead return the status "analyze" which indicates that an analyze call is recommended
			skip_auto_analyze (false)
		)

		(call !ValidateParameters)

		(if (= (null) subtrainees)
			(assign (assoc subtrainees (contained_entities !traineeContainer)))
		)

		(declare (assoc
			sessions (contained_entities (query_exists ".replay_steps"))
			no_session_index_collisions (true)
			collision_subtrainee (null)
			status_output (null)
		))

		;check for session-index collisions, error out if a subtrainee has an existing session name and index as this trainee
		(map
			(lambda (if no_session_index_collisions
				(let
					(assoc subtrainee [!traineeContainer (current_value 2)])
					(map
						(lambda (if no_session_index_collisions
							(let
								(assoc subtrainee_session (current_value 1))
								(map
									(lambda (if no_session_index_collisions
										;there's a name collision between session names
										(if (= subtrainee_session (current_value))
											;no indices should be same, i.e., indices should not intersect, but if they do intersect, error out
											(if (!=
													0
													(size (intersect
														;subtrainee_session_indices
														(indices (retrieve_from_entity (append subtrainee subtrainee_session) ".indices_map"))
														;session_indices
														(indices (retrieve_from_entity (current_value 1) ".indices_map"))
													))
												)
												(assign (assoc
													no_session_index_collisions (false)
													collision_subtrainee (last subtrainee)
												))
											)
										)
									))
									sessions
								)
							)
						))
						;all sessions in subtrainee
						(contained_entities subtrainee (query_exists ".replay_steps"))
					)
				)
			))
			subtrainees
		)

		(if (not no_session_index_collisions)
			(conclude
				(call !Return (assoc
					errors [(concat "Session-index collision with subtrainee: " collision_subtrainee)]
					payload { "status" status_output}
				))
			)
		)

		(declare (assoc pre_combine_dataset_size (call !GetNumTrainingCases)))

		;clear all query caches
		(reclaim_resources (null) (true) (true))

		(map
			(lambda (let
				(assoc subtrainee [!traineeContainer (current_value 2)])
				;move the cases over
				(map
					(lambda
						;if target already has an entity with this exact id, move it into the target
						;without maintaining original id, note: this should happen very rarely
						(if (contains_entity (current_value))
							(let
								(assoc collision_case_id (current_value 1))
								(declare (assoc
									new_case_id (first (move_entities (append subtrainee collision_case_id) ) )
									case_index (retrieve_from_entity collision_case_id !internalLabelSessionTrainingIndex)
								))

								new_case_id
								;TODO: update session info
								;map over .replay_steps replace with new_case_id
								;set .indices_map case_index to new_case_id
							)


							;else move the entity to the target maintaining its id
							(move_entities (append subtrainee (current_value)) (current_value))
						)
					)
					;all cases in subtrainee
					(contained_entities subtrainee (query_exists !internalLabelSession))
				)

				;move the sessions over
				(map
					(lambda
						;if there's a session name collision, combine the values from the subtrainee session into this one
						;there should be no index collisions since it would have errored out earlier if there were
						(if (contains_entity (current_value))
							(accum_to_entities (current_value) (assoc
								".replay_steps" (retrieve_from_entity (append subtrainee (current_value 1)) ".replay_steps")
								".indices_map" (retrieve_from_entity (append subtrainee (current_value 1)) ".indices_map")
								".trained_instance_count" (size (retrieve_from_entity (append subtrainee (current_value 1)) ".indices_map"))
								".total_instance_count" (size (retrieve_from_entity (append subtrainee (current_value 1)) ".indices_map"))
							))

							;else move session over as-is
							(move_entities (append subtrainee (current_value)) (current_value))
						)
					)
					;all sessions in subtrainee
					(contained_entities subtrainee (query_exists ".replay_steps"))
				)

				;remove subtrainee and clear references
				(call delete_subtrainee (assoc child_id (last subtrainee) ))
			))
			subtrainees
		)

		(declare (assoc dataset_size (call !GetNumTrainingCases) ))
		(call !UpdateRegionalMinSize)
		(call !ClearCachedDataProperties)
		(if !inactiveFeaturesMap
			(assign_to_entities (assoc !inactiveFeaturesNeedCaching (true) ))
		)

		(accum_to_entities (assoc !dataMassChangeSinceLastAnalyze (- dataset_size pre_combine_dataset_size) ))
		(call !AutoAnalyzeIfNeeded)

		(accum_to_entities (assoc !revision 1))

		(call !Return (assoc payload { "status" status_output}))
	)

	;method to update the references for contained trainees
	;{idempotent (true) protected (true)}
	#set_hierarchy_relationships
	(declare
		(assoc
			;{type ["string" "null"]}
			;the unique string identifier for the parent of the trainee
			parent_id (null)
			;{type "assoc" additional_indices "string"}
			;map of contained trainee path label to its unique id
			path_to_id_map (null)
			;{type "assoc" additional_indices {ref "TraineePathLabel"}}
			;map of contained trainee unique id to its path label
			id_to_path_map (null)
			;{type "assoc" additional_indices "boolean"}
			;map of trainee path label to boolean if it's contained internally
			is_contained_map (null)
		)
		(call !ValidateParameters)

		;need to manually verify the labels in path_to_id_map and is_contained_map are alphanumeric
		;no mechanism to check the patterns of the indices in the type system
		(let
			(assoc
				invalid_labels_path_to_id_map
					(filter
						(lambda
							(= (null) (substr (current_value) "^[^.\\s]+$"))
						)
						(indices path_to_id_map)
					)
				invalid_labels_is_contained_map
					(filter
						(lambda
							(= (null) (substr (current_value) "^[^.\\s]+$"))
						)
						(indices is_contained_map)
					)
			)

			(if (size invalid_labels_path_to_id_map)
				(conclude
					(call !Return (assoc
						errors [(concat
							"The following path labels contain invalid characters in \"path_to_id_map\": "
							(trunc (weave invalid_labels_path_to_id_map ", "))
						)]
					))
				)

				(size invalid_labels_is_contained_map)
				(conclude
					(call !Return (assoc
						errors [(concat
							"The following path labels contain invalid characters in \"is_contained_map\": "
							(trunc (weave invalid_labels_is_contained_map ", "))
						)]
					))
				)
			)
		)

		(declare (assoc bump_revision (false) ))

		(if (and path_to_id_map (!= path_to_id_map !containedTraineeNameToIdMap) )
			(seq
				(assign (assoc bump_revision (true) ))
				(assign_to_entities (assoc !containedTraineeNameToIdMap path_to_id_map))
			)
		)
		(if (and id_to_path_map  (!= id_to_path_map  !containedTraineeIdToNameMap) )
			(seq
				(assign (assoc bump_revision (true) ))
				(assign_to_entities (assoc !containedTraineeIdToNameMap id_to_path_map ))
			)
		)
		(if (and is_contained_map (!= is_contained_map !childTraineeIsContainedMap) )
			(seq
				(assign (assoc bump_revision (true) ))
				(assign_to_entities (assoc !childTraineeIsContainedMap is_contained_map))
			)
		)

		(if (and parent_id (!= parent_id !parentId) )
			(seq
				(assign (assoc bump_revision (true) ))
				(assign_to_entities (assoc !parentId parent_id))
			)
		)

		(if bump_revision (accum_to_entities (assoc !revision 1)) )

		(call !Return)
	)

	;method to output references for contained trainees
	;{read_only (true) idempotent (true)}
	#get_hierarchy_relationships
	(declare
		;returns {
		; 	type "assoc"
		;	additional_indices (false)
		; 	indices {
		; 		"parent_id" {
		; 			type ["string" "null"]
		; 			description "The unique string identifier for the parent of the trainee."
		; 		}
		; 		"path_to_id_map" {
		; 			type "assoc"
		;			additional_indices "string"
		; 			description "Map of contained trainee path label to its unique id."
		; 		}
		; 		"id_to_path_map" {
		; 			type "assoc"
		;			additional_indices "string"
		; 			description "Map of contained trainee unique id to its path label."
		; 		}
		; 		"is_contained_map" {
		; 			type "assoc"
		;			additional_indices "boolean"
		; 			description "Map of trainee path label to boolean if it's contained internally."
		; 		}
		; 	}
		; }
		(assoc)
		(call !Return (assoc
			payload
				{
					parent_id !parentId
					path_to_id_map !containedTraineeNameToIdMap
					id_to_path_map  !containedTraineeIdToNameMap
					is_contained_map !childTraineeIsContainedMap
				}
		))
	)


	;Helper method to create the actual full contained entity path by interleaving !traineeContainer with each name in the path
	#!ConvertNamePathToEntityPath
	(weave (range !traineeContainer 1 (size path) 1) path)

	;method to recurse down the the hierarchy to output the currently contained hierarchy as a nested assoc
	;with (false) for trainees that are stored independently
	#!GetHierarchy
	(append
		!metaData
		(assoc
			"id" (retrieve_from_entity "!traineeId")
			"path" path_list
			"contained" (true)
			"children"
				(map
					(lambda
						(if (get !childTraineeIsContainedMap (current_value))
							(get
								(call_entity (list !traineeContainer (current_value 1)) "get_hierarchy" (assoc
									path_list
										(if (size path_list)
											(append path_list (current_value 1))
											[(current_value 2)]
										)
								))
								[1 "payload"]
							)

							;can't traverse down trainees that are stored externally
							(assoc
								"id" (get !containedTraineeNameToIdMap (current_value 1))
								"path"
									(if (size path_list)
										(append path_list  (current_value 1))
										[(current_value 2)]
									)
								"contained" (false)
								"children" []
							)
						)
					)
					(indices !childTraineeIsContainedMap)
				)
		)
	)

	;Returns the full entity path to a child trainee provided its unique trainee id if it is contained in the hierarchy.
	;Iterates down the hierarchy searching for a trainee that matches the specified id, returns null if not found or
	;a string error if found but trainee is stored externally as an independent trainee.
	;
	;parameters:
	; id: unique id of trainee
	; entity_path: optional, list of strings, entity path to parent of trainee
	#!GetEntityPathById
	(declare
		(assoc
			entity_path (list)
			id (null)
		)

		;this id is a child
		(if (contains_index !containedTraineeIdToNameMap id)
			(let
				(assoc name (get !containedTraineeIdToNameMap id))
				(if (get !childTraineeIsContainedMap name)
					(conclude (append entity_path !traineeContainer name))
					;else it's stored externally
					(conclude "Specified an independently stored trainee.")
				)
			)
		)

		(declare (assoc
			child_name (null)
			contained_trainees (contained_entities !traineeContainer)
			output_path (null)
		))

		;traverse contained hierarchy searching all id->name lookups to find specified id, then generate entity_path if id is found
		(while (< (current_index) (size contained_trainees))
			(assign (assoc child_name (get contained_trainees (current_index 1)) ))

			(assign (assoc
				output_path
					(get
						(call_entity (list !traineeContainer child_name) "get_entity_path_by_id" (assoc
							entity_path (append entity_path !traineeContainer child_name)
							id id
						))
						(list 1 "payload")
					)
			))

			(if (or
					(~ "string" output_path)
					(~ (list) output_path)
				)
				(conclude (conclude output_path))
			)
		)

		(null)
	)

	;Validates, finds and returns the matching full entity path for a specified subtrainee.
	;output is in the format of (list !traineeContainer child1 !traineeContainer child2)
	;
	;parameters:
	; path: optional,  list of strings specifying the user-friendly path to the child subtrainee.
	;		May be an incomplete path as long as it uniquely identifies the trainee.
	; id: optional, unique id of the subtrainee. Ignored if path is specified.
	; child_should_not_exist: optional, boolean.  when true, checks that the specified child does not already exist and errors if it does.
	; child_must_be_contained: optional, boolean.  default true. when false true won't error out of child is stored externally
	#!ResolveChildEntityPath
	(declare
		(assoc
			path (null)
			id (null)
			child_should_not_exist (false)
			child_must_be_contained (true)
		)

		;use id instead of path if provided only id
		(if (and (= 0 (size path)) id)
			(let
				(assoc child_entity_path (call !GetEntityPathById (assoc id id)))
				(conclude
					(if (!= (null) child_entity_path)
						child_entity_path
						"Invalid trainee id specified."
					)
				)
			)
		)

		(if (and (= (null) id) (= 0 (size path)))
			(conclude (null))
		)

		(declare (assoc
			path_length (- (size path) 1)
			entity_path (list)
			child_name (null)
		))

		;traverse down the path to validate it
		(while (<= (current_index) path_length)
			(assign (assoc
				child_name (get path (current_index 1))
				child_is_contained_map (call_entity entity_path "debug_label" (assoc label "!childTraineeIsContainedMap"))
			))

			;if this is the last trainee in the path and it should not exist
			(if (and child_should_not_exist (= (current_index) path_length))
				(if (contains_index child_is_contained_map child_name)
					(conclude (conclude
						(concat
							"A trainee already exists in the hierarchy at path: "
							;convert path list into a period-separated string of labels
							(apply "concat" (tail
								(weave (range "." 1 (size path) 1) path)
							))
						)
					))
				)

				;else child must exist
				(if (not (contains_index child_is_contained_map child_name))
					(conclude (conclude "Invalid path specified."))

					(and child_must_be_contained (= (false) (get child_is_contained_map child_name)))
					(conclude (conclude "Specified an independently stored trainee."))
				)
			)

			(accum (assoc
				entity_path (list !traineeContainer child_name)
			))
		)

		;output entity path
		entity_path
	)

	;Method to update this trainee's Parent's is_contained status, used when a trainee is saved as an independent external trainee.
	;The parent's is_contained value for this trainee and all its child trainees will then also be set to false.
	;
	;parameters:
	; child_entity_path: path to child trainee
	; is_contained: boolean, true means this child is contained inside !traineeContainer, false means it is stored and loaded independently
	#!UpdateParentsIsContainedMap
	(seq
		(declare (assoc path_to_parent (trunc child_entity_path -2) ))

		(declare (assoc
			trainee_is_contained_map
				(append
					(call_entity path_to_parent "debug_label" (assoc label "!childTraineeIsContainedMap"))
					(associate (last child_entity_path) is_contained)
				)
		))

		(call_entity path_to_parent "set_hierarchy_relationships" (assoc
			is_contained_map trainee_is_contained_map
		))
	)

	;Store the label -> is_contained for the specified child in its parent and update the child's !parentId
	;
	;parameters:
	; child_id: optional, unique id of child trainee to add
	; child_entity_path: path to child trainee in the format of a list with repeating pairs of [!traineeContainer child_name]
	;	for each layer of hierarchy. e.g., (list !traineeContainer first_child !traineeContainer grand_child) for a 2 level hirearchy
	; is_contained: boolean, default true, meaning this child is contained inside !traineeContainer, false means it is stored and loaded independently
	#!AddChildTraineeReferences
	(declare
		(assoc is_contained (true))

		(declare (assoc
			path_to_parent (trunc child_entity_path -2)
			child_name (last child_entity_path)
		))

		;if child_id wasn't specified, set it to child's !traineeId if it exists
		(if (= (null) child_id)
			(assign (assoc child_id (call_entity child_entity_path "get_trainee_id") ))
		)

		(declare (assoc
			trainee_is_contained_map
				(append
					(call_entity path_to_parent "debug_label" (assoc label "!childTraineeIsContainedMap"))
					(associate child_name is_contained)
				)

		))
		(call_entity path_to_parent "set_hierarchy_relationships" (assoc
			is_contained_map trainee_is_contained_map
		))

		(if child_id
			(let
				(assoc
					contained_path_to_id_map (call_entity path_to_parent "debug_label" (assoc label "!containedTraineeNameToIdMap" ))
					contained_id_to_path_map  (call_entity path_to_parent "debug_label" (assoc label "!containedTraineeIdToNameMap" ))
				)
				(call_entity path_to_parent "set_hierarchy_relationships" (assoc
					path_to_id_map (append contained_path_to_id_map (associate child_name child_id))
					id_to_path_map  (append contained_id_to_path_map  (associate child_id child_name))
				))
			)
		)

		;set the !parentId for the child
		(call_entity child_entity_path "set_parent_id" (assoc
			parent_id (call_entity path_to_parent "get_trainee_id")
		))
	)

	;Removes all hierarchy references to a child trainee given the path to the child.
	;
	;parameters:
	; child_entity_path: path to child trainee to remove in the format of: (list !traineeContainer child1 !traineeContainer child2 etc..)
	#!RemoveChildTraineeReferences
	(seq
		(declare (assoc
			path_to_parent (trunc child_entity_path -2)
			child_name (last child_entity_path)
		))

		(declare (assoc
			parent_path_to_id_map (call_entity path_to_parent "debug_label" (assoc label "!containedTraineeNameToIdMap"))
			parent_id_to_path_map  (call_entity path_to_parent "debug_label" (assoc label "!containedTraineeIdToNameMap"))
			parent_is_contained_map (call_entity path_to_parent "debug_label" (assoc label "!childTraineeIsContainedMap"))
		))

		(declare (assoc child_id (get parent_path_to_id_map child_name) ))

		(call_entity path_to_parent "set_hierarchy_relationships" (assoc
			path_to_id_map (remove parent_path_to_id_map child_name)
			id_to_path_map  (remove parent_id_to_path_map  child_id)
			is_contained_map (remove parent_is_contained_map child_name)
		))
	)

	;helper method to filter out the built-in ".trainee_container" entity from a provided entity path
	;
	;parameters:
	; path:  list of strings denoting the entity path to a subtrainee
	#!FriendlyPath
	(filter (lambda (!= !traineeContainer (current_value))) path)

)