;Contains methods for series reacting.
(null

	;React in a series until a series_stop_map condition is met. Aggregates rows of data corresponding to the specified context, action,
	;derived_context and derived_action features, utilizing previous rows to derive values as necessary. Outputs an assoc of "action_features" and
	;corresponding "series" where "series" is the completed 'matrix' for the corresponding action_features and derived_action_features.
	;{long_running (true) statistically_idempotent (true) read_only (true)}
	#single_react_series
	(declare
		(assoc
			;{type "list" values "string"}
			;list of series ID features used to uniquely select a trained series.
			;	This list should contain all ID features, but the order can vary depending on the order of the
			;	features values given in series_id_values.
			series_id_features (list)
			;{type "list" values "any"}
			;list of values whose order corresponds to the list of features defined in series_id_features, used to identify trained series.
			series_id_values (null)
			;{type "assoc"}
			;assoc of feature -> stop conditions:
			;	for continuous features:  { feature:  { "min" : val,  "max": val } } - stops series when feature value exceeds max or is smaller than min
			;	for nominal features:  { feature:  { "values" : ['val1', 'val2' ]} }  - stops series when feature value matches any of the values listed
			;	specifying ".series_progress" with a value between 0 and 1.0 corresponding to percent completion e.g., { ".series_progress" : .95 } -
			;		stops series when it progresses at or beyond 95%.
			series_stop_map (assoc)
			;{type "boolean"}
			;flag, default to True. If true, series ids are replaced with unique values on output.
			;	If False, will maintain or replace ids with existing trained values, but also allows output of series with duplicate existing ids.Â 
			output_new_series_ids (true)
			;{type "string" enum ["fixed" "dynamic" "no"]}
			;Controls how closely generated series should follow existing series (plural).
			;	Choices are: "fixed", "dynamic" or "no". If "fixed", tracks the particular relevant series ID. If "dynamic", tracks the particular
			;	relevant series ID, but is allowed to change the series ID that it tracks based on its current context. If "no", does not track any particular series ID.
			series_id_tracking "fixed"
			;{type "boolean"}
			;flag, default is false.  When true, react_series will do a forecast of a series.
			;	When true, either series_id_values or continue_series_values must be specified.
			continue_series (false)
			;{type "list" values "string"}
			;list of features corresponding to the values in each row of continue_series_values.
			;	This value is ignored if continue_series_values is not specified.
			continue_series_features (null)
			;{type "list" values {type "list"} }
			;list of lists of values, when specified will continue this specific untrained series as defined by these values.
			;	continue_series flag will be ignored and treated as true if this value is specified.
			continue_series_values (null)
			;{type "list" values "string"}
			;list of feature names corresponding to values in each row of action_values
			action_features (list)
			;{type "list" values "string"}
			;list of action features whose values should be computed from the resulting last row in series, in the specified
			;	order. Must be a subset of action_features.
			;	Note: both of these derived feature lists rely on the features' "derived_feature_code" attribute to compute the values.
			;	If 'derived_feature_code' attribute is undefined or references non-existing feature indices, the derived value will be null.
			derived_action_features (list)
			;{type "list" values "string"}
			;list of context features whose values should be computed from the entire series in the specified order.
			;	Must be different than context_features.
			derived_context_features (list)
			;{type "list" values "string"}
			;list of features corresponding to series_context_values
			series_context_features (list)
			;{type "list" values {type "list"} }
			;2d-list of values, context value for each feature for each row of the series.
			;	If specified, max_series_length is ignored.
			series_context_values (list)
			;{type "list" values "string"}
			;list of additional features to return with audit data from details
			extra_features (list)
			;{ref "UseCaseWeights"}
			;flag, whether to use case weights or not. If unspecified will automatically select based on cached parameters
			use_case_weights (null)
			;{type "string"}
			;name of the feature that stores case weights
			weight_feature ".case_weight"
			;{ref "DesiredConviction"}
			;If null, will do a discriminative react. If specified, will do a generative react
			;	For Generative React, value of desired avg conviction of generated cases, in the range of (0,infinity] with 1 as standard
			;	larger values will increase the variance (or creativity) of the generated case from the existing model
			;	smaller values will decrease the variance (or creativity) of the generated case from the existing model
			desired_conviction (null)
			;{type "number"}
			;maximum size a series is allowed to be.  Default is 3 * model_size, a 0 or less is no limit.
			;	If forecasting with 'continue_series', this defines the maximum length of the forecast.
			max_series_length (null)
			;{type "boolean"}
			;flag, if false uses model feature residuals, if true recalculates regional model residuals.
			use_regional_model_residuals (true)
			;{type "assoc" additional_indices {ref "FeatureBounds"}}
			;assoc of :
			;	{ feature : { "min": a, "max": b, "allow_null": false/true } }
			;	to ensure that specified features' generated values stay in bounds
			;	for nominal features instead of min/max it's a set of allowed values, ie:
			;	{ feature: { "allowed" : [ "value1", "value2" ... ] }, "allow_null": false/true }
			;	allow_null - default is true, if true nulls may be generated per their distribution in the data
			feature_bounds_map (assoc)
			;{type "list" values "string"}
			;list of features that will preserve their values from the case specified by case_indices, appending and
			;	overwriting the specified context and context features as necessary.  For generative reacts, if case_indices isn't specified,
			;	will preserve feature values of a random case.
			preserve_feature_values (list)
			;{type "string"}
			;distance to determine privacy cutoff. Used to query the local minimum distance used in the distance ratio
			; 	accepted values:
			; 		'max': the maximum local distance
			; 		'min': the minimum local distance
			; 		'most_similar': the closest distance of the most similar case
			; 		null: the minimum local distance
			new_case_threshold "min"
			;{type "boolean"}
			;flag, default is true, only applicable if a substitution value map has been set. If set to false, will not substitute categorical feature values.
			substitute_output (true)
			;{type "boolean"}
			;flag, if true and series IDs are specified with series_id_values, then that series' cases will be held out of queries made within the
			;react_series call.
			leave_series_out (false)
			;{type "boolean"}
			;flag, if set to true assumes provided categorical (nominal or ordinal) feature values already been substituted.
			input_is_substituted (false)
			;{ref "GenerateNewCases"}
			;enum, acceptable values are:
			;	null or 'no' : output any generated case
			;	'always' : only output original cases, outputs null for all feature values if unable to generate a new case
			;	'attempt' : output any generated case only if generation fails all initial attempts to output original cases
			generate_new_cases "no"
		)
		(call !ValidateParameters)
		(call !ValidateFeatures)

		(declare (assoc
			invalid_react_parameters (null)
			warnings (assoc)
		))

		(if series_stop_map
			(assign (assoc
				invalid_react_parameters
					(call !ValidateSeriesStopMaps (assoc
						series_stop_maps (list series_stop_map)
						feature_bounds_map feature_bounds_map
					))
			))
		)

		(if invalid_react_parameters
			(conclude
				(call !Return (assoc
					errors (list (concat "Failed to react_series: invalid stopping condition specified for " invalid_react_parameters) )
				))
			)
		)

		(let
			(assoc invalid_ts_details (indices (remove (zip requested_details) !tsSupportedDetails) ) )

			(if (size invalid_ts_details)
				(accum (assoc
					warnings
						(associate
							(concat
								"The following details are not officially supported for react series: "
								(apply "concat" (map (lambda (concat (current_value) ",") ) invalid_ts_details) )
								". Behavior is experimental."
							)
						)
				))
			)
		)

		(if (and
				continue_series
				(not (xor
					(size series_id_values)
					(size continue_series_values)
				))
			)
			(conclude
				(call !Return (assoc
					errors
						(list (concat
							"When using the continue_series flag, either series_id_values or continue_series_values "
							"must be specified, but not both."
						))
				))
			)
		)

		(if !hasDateTimeFeatures
			(call !ValidateDateTimeInputs (assoc single_series (true)))
		)

		(call !ValidateDerivedActionFeaturesIsSubset)


		(declare (assoc
			output_features action_features
			hyperparam_map
				(call !GetHyperparameters (assoc
					feature (null)
					context_features series_context_features
					weight_feature weight_feature
				))
		))

		(call !UpdateCaseWeightParameters (assoc set_valid_weight_feature (false) ))

		;check and update caches if necessary
		(call !PreReactCacheChecks)

		;prep time series parameters if it's a time series model
		(if !tsTimeFeature
			(call !PrepTimeSeriesFeatures (assoc
				;singular series
				n_samples 1
				single_series (true)
			))
		)

		;if user passed in a series for continuing, create a temporary trainee to derive all the necessary values (lags, deltas, etc.)
		;and then overwrite the passed continue_series_values with the additional derived feature values
		(if (size continue_series_values)
			(seq
				(if (= 0 (size continue_series_features))
					(conclude (conclude
						(call !Return (assoc
							errors (list "continue_series_values is provided without continue_series_features, please specify continue_series_features")
						))
					))
				)

				(declare (assoc trainee_clone (first (create_entities (null))) ))

				;create a shollow copy (no contained entities, just the trainee data)
				(assign_entity_roots trainee_clone (retrieve_entity_root ) )

				;train and derive all the lags and other features as necessary
				(call_entity trainee_clone "train" (assoc
					cases continue_series_values
					features continue_series_features
					session "temp"
					input_is_substituted input_is_substituted
				))

				;use all the features including all the derived ones
				(assign (assoc continue_series_features !trainedFeatures ))

				(assign (assoc
					;explicitly set the continue_series flag to true since values are provided
					continue_series (true)
					continue_series_values
						(get
							(call_entity trainee_clone "get_cases" (assoc
								features continue_series_features
								session "temp"
							))
							(list 1 "payload" "cases")
						)
				))

				(declare (assoc
					time_feature_index
						(get
							(zip continue_series_features (indices continue_series_features))
							!tsTimeFeature
						)
				))

				;sort the passed in data by the time feature to ensure its order
				(assign (assoc
					continue_series_values
						(call !MultiSortList (assoc
							data continue_series_values
							column_order_indices (list time_feature_index)
						))
				))

				(destroy_entities trainee_clone)
			)
		)

		(call !Return
			(call !ReactSeries (assoc
				series_id_features series_id_features
				series_id_values series_id_values
				series_stop_map series_stop_maps
				max_series_length max_series_length
				output_new_series_ids output_new_series_ids
				output_features output_features
				continue_series continue_series
				continue_series_features continue_series_features
				continue_series_values continue_series_values

				initial_features initial_features
				initial_values initial_values
				action_features action_features
				derived_action_features derived_action_features
				derived_context_features derived_context_features
				series_context_features series_context_features
				series_context_values series_context_values
				details details
				extra_features extra_features
				substitute_output substitute_output
				input_is_substituted input_is_substituted
				use_case_weights use_case_weights
				leave_series_out leave_series_out
				weight_feature weight_feature
				rand_seed rand_seed

				desired_conviction desired_conviction
				use_regional_model_residuals use_regional_model_residuals
				feature_bounds_map feature_bounds_map
				ordered_by_specified_features ordered_by_specified_features
				exclude_novel_nominals_from_uniqueness_check exclude_novel_nominals_from_uniqueness_check
				generate_new_cases generate_new_cases
				preserve_feature_values preserve_feature_values
				new_case_threshold new_case_threshold
			))
		)
	)

	;React in a series until a series_stop_map condition is met. Aggregates rows of data corresponding to the specified context, action,
	;derived_context and derived_action features, utilizing previous rows to derive values as necessary. Outputs an assoc of "action_features" and
	;corresponding "series" where "series" is the completed 'matrix' for the corresponding action_features and derived_action_features.
	;{long_running (true) statistically_idempotent (true) read_only (true)}
	#react_series
	(declare
		;returns {ref "ReactSeriesResponse"}
		(assoc
			;{type "list" values "string"}
			;list of series ID features used to uniquely select a trained series.
			;	This list should contain all ID features, but the order can vary depending on the order of the
			;	features values given in series_id_values.
			series_id_features (list)
			;{type "list" values {type "list" values "any"}}
			;2d-list of values whose order corresponds to the list of features defined in series_id_features, used to identify trained series.
			series_id_values (null)
			;{type "list" values {type "assoc"} }
			;list of assocs of feature -> stop conditions:
			;	for continuous features:  { feature:  { "min" : val,  "max": val } } - stops series when feature value exceeds max or is smaller than min
			;	for nominal features:  { feature:  { "values" : ['val1', 'val2' ]} }  - stops series when feature value matches any of the values listed
			;	specifying ".series_progress" with a value between 0 and 1.0 corresponding to percent completion e.g., { ".series_progress" : .95 } -
			;		stops series when it progresses at or beyond 95%.
			; one assoc is used per series.
			series_stop_maps (list)
			;{type "list" values "number"}
			;list of maximum sizes each series is allowed to be.  Default is 3 * model_size, a 0 or less is no limit.
			;	If forecasting with 'continue_series', this defines the maximum length of the forecast.
			max_series_lengths (null)
			;{type "boolean"}
			;flag, if true series ids are replaced with unique values on output.
			output_new_series_ids (true)
			;{type "string" enum ["fixed" "dynamic" "no"]}
			;Controls how closely generated series should follow existing series (plural).
			;	Choices are: "fixed", "dynamic" or "no". If "fixed", tracks the particular relevant series ID. If "dynamic", tracks the particular
			;	relevant series ID, but is allowed to change the series ID that it tracks based on its current context. If "no", does not track any particular series ID.
			series_id_tracking "fixed"
			;{type "boolean"}
			;flag, default is false.  When true, react_series will do a forecast of a series.
			;	When true, either series_id_values or continue_series_values must be specified.
			continue_series (false)
			;{type "list" values "string"}
			;list of features corresponding to the values in each row of continue_series_values.
			;	This value is ignored if continue_series_values is not specified.
			continue_series_features (null)
			;{type "list" values {type "list"}}
			;3d-list of values, when specified will continue this specific untrained series as defined by these values.
			;	continue_series flag will be ignored and treated as true if this value is specified.
			continue_series_values (null)
			;{type "list" values ["number" "string"]}
			;time step values at which to begin synthesis for each series, applicable only for time series.
			init_time_steps (null)
			;{type "list" values ["number" "string"]}
			;time step values at which to end synthesis for each series, applicable only for time series.
			final_time_steps (null)
			;{type "list" values "string"}
			;list of feature names corresponding to values in each row of action_values
			action_features (list)
			;{type "list" values "string"}
			;list of context features whose values should be computed from the entire series in the specified order.
			;	Must be different than context_features.
			derived_context_features (list)
			;{type "list" values "string"}
			;list of action features whose values should be computed from the resulting last row in series, in the specified
			;	order. Must be a subset of action_features.
			;	Note: both of these derived feature lists rely on the features' "derived_feature_code" attribute to compute the values.
			;	If 'derived_feature_code' attribute is undefined or references non-existing feature indices, the derived value will be null.
			derived_action_features (list)
			;{type "list" values "string"}
			;list of features corresponding to series_context_values
			series_context_features (list)
			;{type "list" values {type "list" values {type "list"}}}
			;3d-list of values, context value for each feature for each row of a series.
			;	If specified max_series_lengths are ignored.
			series_context_values (null)
			;{type "list" values "string"}
			;list of additional features to return with audit data from details
			extra_features (null)
			;{ref "UseCaseWeights"}
			;flag, whether to use case weights or not. If unspecified will automatically select based on cached parameters
			use_case_weights (null)
			;{type "string"}
			;name of the feature that stores case weights
			weight_feature ".case_weight"
			;{ref "DesiredConviction"}
			;If null, will do a discriminative react. If specified, will do a generative react
			;	For Generative React, value of desired avg conviction of generated cases, in the range of (0,infinity] with 1 as standard
			;	larger values will increase the variance (or creativity) of the generated case from the existing model
			;	smaller values will decrease the variance (or creativity) of the generated case from the existing model
			desired_conviction (null)
			;{ref "GenerateNewCases"}
			;enum, acceptable values are:
			;	null or 'no' : output any generated case
			;	'always' : only output original cases, outputs null for all feature values if unable to generate a new case
			;	'attempt' : output any generated case only if generation fails all initial attempts to output original cases
			generate_new_cases "no"
			;{type "number"}
			;total number of series to generate, for generative reacts.
			;
			;	 All of the following parameters, if specified, must be either length of 1 or equal to the length of
			;	series_context_values for discriminative reacts, and num_series_to_generate for generative reacts.
			;
			num_series_to_generate (null)
			;{ref "ReactDetails"}
			;see the description for the details parameter of #react
			details (null)
			;{type "boolean"}
			;flag, if true order of generated feature values will match the order of features
			ordered_by_specified_features (null)
			;{type "boolean"}
			;If true will exclude sensitive features whose values will be
			;	replaced after synthesis from uniqueness check.
			exclude_novel_nominals_from_uniqueness_check (null)
			;{type "boolean"}
			;flag, if false uses model feature residuals, if true recalculates regional model residuals.
			use_regional_model_residuals (true)
			;{type "assoc" additional_indices {ref "FeatureBounds"}}
			;assoc of :
			;	{ feature : { "min": a, "max": b, "allow_null": false/true } }
			;	to ensure that specified features' generated values stay in bounds
			;	for nominal features instead of min/max it's a set of allowed values, ie:
			;	{ feature: { "allowed" : [ "value1", "value2" ... ] }, "allow_null": false/true }
			;	allow_null - default is true, if true nulls may be generated per their distribution in the data
			feature_bounds_map (assoc)
			;{type "list" values "string"}
			;list of features that will preserve their values from the case specified by case_indices, appending and
			;	overwriting the specified context and context features as necessary.  For generative reacts, if case_indices isn't specified,
			;	will preserve feature values of a random case.
			preserve_feature_values (list)
			;{ref "NewCaseThreshold"}
			;distance to determine privacy cutoff. Used to query the local minimum distance used in the distance ratio
			; 	accepted values:
			; 		'max': the maximum local distance
			; 		'min': the minimum local distance
			; 		'most_similar': the closest distance of the most similar case
			; 		null: the minimum local distance
			new_case_threshold "min"
			;{type "boolean"}
			;flag, default is true, only applicable if a substitution value map has been set. If set to false, will not substitute categorical feature values.
			substitute_output (true)
			;{type "boolean"}
			;flag, if true and series IDs are specified with series_id_values, then that series' cases will be held out of queries made within the
			;react_series call.
			leave_series_out (false)
			;{type "boolean"}
			;flag, if set to true assumes provided categorical (nominal or ordinal) feature values already been substituted.
			input_is_substituted (false)
		)
		(call !ValidateParameters)
		(call !ValidateFeatures)

		;determine number of reacts to batch
		(declare (assoc
			num_reacts
				(max
					1
					(if (!= (null) desired_conviction)
						num_series_to_generate

						(!= (null) series_context_values)
						(size series_context_values)

						(!= (null) series_id_values)
						(size series_id_values)

						(!= (null) continue_series_values)
						(size continue_series_values)
					)
				)
		))

		;validate parameters
		(declare (assoc
			invalid_react_parameters (false)
			warnings (assoc)
			output_features action_features
		))

		(call !ValidateBatchReactParameter (assoc param series_id_valuess))
		(call !ValidateBatchReactParameter (assoc param series_stop_maps))
		(call !ValidateBatchReactParameter (assoc param max_series_lengths))

		(if (and
				(!= (null) rand_seed)
				(!= num_reacts (size rand_seed))
			)
			(assign (assoc invalid_react_parameters (true)))
		)

		(if invalid_react_parameters
			(conclude
				(call !Return (assoc errors (list "Failed to react_series: invalid react parameters.") ))
			)
		)

		(if series_stop_maps
			(assign (assoc
				invalid_react_parameters
					(call !ValidateSeriesStopMaps (assoc
						series_stop_maps series_stop_maps
						feature_bounds_map feature_bounds_map
					))
			))
		)

		(if invalid_react_parameters
			(conclude
				(call !Return (assoc
					errors (list (concat "Failed to react_series: invalid stopping condition specified for " invalid_react_parameters) )
				))
			)
		)

		(let
			(assoc invalid_ts_details (indices (remove (zip requested_details) !tsSupportedDetails) ) )

			(if (size invalid_ts_details)
				(accum (assoc
					warnings
						(associate
							(concat
								"The following details are not officially supported for react series: "
								(apply "concat" (map (lambda (concat (current_value) ",") ) invalid_ts_details) )
								". Behavior is experimental."
							)
						)
				))
			)
		)

		(if (and
				continue_series
				(not (xor
					(size series_id_values)
					(size continue_series_values)
				))
			)
			(conclude
				(call !Return (assoc
					errors
						(list (concat
							"When using the continue_series flag, either series_id_values or continue_series_values "
							"must be specified, but not both."
						))
				))
			)
		)

		(if !hasDateTimeFeatures
			(call !ValidateDateTimeInputs (assoc single_series (false)))
		)

		(call !ValidateDerivedActionFeaturesIsSubset)
		(declare (assoc
			initial_features (list)
			initial_values (null)
			hyperparam_map
				(call !GetHyperparameters (assoc
					feature (null)
					context_features series_context_features
					weight_feature weight_feature
				))
		))

		(call !UpdateCaseWeightParameters (assoc set_valid_weight_feature (false) ))

		;check and update caches if necessary
		(call !PreReactCacheChecks)

		;prep time series parameters if it's a time series model
		(if !tsTimeFeature
			(call !PrepTimeSeriesFeatures (assoc n_samples num_reacts))
		)

		;if user passed in a series for continuing, create a temporary trainee to derive all the necessary values (lags, deltas, etc.)
		;and then overwrite the passed continue_series_values with the additional derived feature values
		(if (size continue_series_values)
			(let
				(assoc
					original_continue_series_features continue_series_features
					time_feature_index 0
					time_feature (retrieve_from_entity "!tsTimeFeature")
				)

				(if (= 0 (size continue_series_features))
					(conclude (conclude
						(call !Return (assoc
							errors (list "continue_series_values is provided without continue_series_features, please specify continue_series_features")
						))
					))
				)

				;use all the features including all the derived ones
				(assign (assoc continue_series_features !trainedFeatures ))

				(assign (assoc
					;explicitly set the continue_series flag to true since values are provided
					continue_series (true)
					continue_series_values
						(map
							(lambda (let
								(assoc continue_values (current_value 1) )
								(declare (assoc trainee_clone (first (create_entities (null))) ))

								;create a shallow copy (no contained entities, just the trainee data)
								(assign_entity_roots trainee_clone (retrieve_entity_root ) )

								;train and derive all the lags and other features as necessary
								(call_entity trainee_clone "train" (assoc
									cases continue_values
									features original_continue_series_features
									session "temp"
									input_is_substituted input_is_substituted
								))

								(assign (assoc
									continue_values
										(get
											(call_entity trainee_clone "get_cases" (assoc
												features continue_series_features
												session "temp"
											))
											(list 1 "payload" "cases")
										)
									time_feature_index
										(get
											(zip continue_series_features (indices continue_series_features))
											time_feature
										)
								))

								;sort the passed in data by the time feature to ensure its order
								(assign (assoc
									continue_values
										(call !MultiSortList (assoc
											data continue_values
											column_order_indices (list time_feature_index)
										))
								))

								(destroy_entities trainee_clone)

								continue_values
							))
							continue_series_values
						)
				))
			)
		)

		(call !Return
			(call !BatchReactSeries (assoc
				series_id_features series_id_features
				series_id_values series_id_values
				series_stop_maps series_stop_maps
				max_series_lengths max_series_lengths
				output_new_series_ids output_new_series_ids
				series_id_tracking series_id_tracking
				output_features output_features
				continue_series continue_series
				continue_series_features continue_series_features
				continue_series_values continue_series_values

				initial_features initial_features
				initial_values initial_values
				action_features action_features
				derived_action_features derived_action_features
				derived_context_features derived_context_features
				series_context_features series_context_features
				series_context_values series_context_values
				details details
				extra_features extra_features
				substitute_output substitute_output
				input_is_substituted input_is_substituted
				use_case_weights use_case_weights
				leave_series_out leave_series_out
				weight_feature weight_feature
				rand_seed rand_seed
				num_reacts num_reacts

				desired_conviction desired_conviction
				use_regional_model_residuals use_regional_model_residuals
				feature_bounds_map feature_bounds_map
				ordered_by_specified_features ordered_by_specified_features
				exclude_novel_nominals_from_uniqueness_check exclude_novel_nominals_from_uniqueness_check
				generate_new_cases generate_new_cases
				preserve_feature_values preserve_feature_values
				new_case_threshold new_case_threshold
			))
		)
	)

)