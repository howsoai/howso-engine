;Contains methods for exporting and upgrading the trainee.
(null

	;export trainee's metadata, case and session data into json files.
	;this method should be run by a script from the ./migrations folder
	;{idempotent (true)}
	#export_trainee
	(declare
		(assoc
			;{type "string" required (true)}
			;name of trainee, reference for filename
			trainee (null)
			;{type "boolean"}
			;flag, default false. if true will decode (e.g., convert from epoch to datetime) any encoded feature values
			;	when exporting cases If false case feature values will be exported just as they are stored in the trainee
			decode_cases (false)
			;{type "string"}
			;path to save the exported meta.json and exp.json files.
			;	If unspecified, will save them into the base installation /migrations/ directory.
			trainee_filepath (null)
			;{type "string"}
			;base path to Howso Engine Core installation
			root_filepath (null)
		)
		(call !ValidateParameters)

		(declare (assoc
			migration_filepath
				(if (= (null) trainee_filepath)
					(concat root_filepath !migration_folder)
					trainee_filepath
				)
		))

		(declare (assoc
			success
				(call !export_trainee_metadata (assoc trainee trainee migration_filepath migration_filepath))
		))

		(if (not success)
			(conclude (call !Return (assoc errors (list "Failed to export trainee metadata."))))
		)

		(assign (assoc
			success
				(if decode_cases
					(call !export_cases_and_sessions_decoded (assoc trainee trainee migration_filepath migration_filepath))

					(call !export_cases_and_sessions (assoc trainee trainee migration_filepath migration_filepath))
				)
		))

		(if success
			(call !Return)

			(call !Return (assoc errors (list "Failed to export trainee cases and sessions.")))
		)
	)

	;method to return the list of all dataset attributes that can be exported/imported
	;{read_only (true)}
	#get_export_attributes
	(declare
		;returns {type "list" values "string" description "The list of names of dataset attributes that can be exported/imported."}
		(assoc)
		(indices (get (retrieve_from_entity "!InitializeValues") 0))
	)

	;Export trainee metadata in json format as a dict of: { label : value }
	;
	;parameters:
	; trainee: name of trainee, reference for filename
	; migration_filepath: path to migration folder where migration scripts are stored
	#!export_trainee_metadata
	(declare
		(assoc
			meta_labels_to_persist (call get_export_attributes)
			meta_values_to_persist (list)
		)

		(assign (assoc
			meta_values_to_persist
				(map
					(lambda
						;code needs to be stored as a string
						(if (= "!featureCustomDerivedMethods" (current_value))
							(unparse (retrieve_from_entity (current_value)))

							(retrieve_from_entity (current_value))
						)

					)
					meta_labels_to_persist
				)
		))

		;ensure the version of the trainee is exported along with the data
		(accum (assoc
			meta_values_to_persist (retrieve_from_entity (list "major_version" "minor_version" "point_version"))
			meta_labels_to_persist (list "major_version" "minor_version" "point_version")
		))

		(store
			(concat migration_filepath trainee ".meta.json")
			(zip meta_labels_to_persist meta_values_to_persist)
		)
	)


	;Export entities in json format as they are currently stored in the trainee
	;as dict of:  { entity_id : { feature : value } }
	;
	;parameters:
	; trainee: name of trainee, reference for filename
	; migration_filepath: path to migration folder where migration scripts are stored
	#!export_cases_and_sessions
	(store
		(concat migration_filepath trainee ".exp.json")
		(map
			(lambda
				(get_all_labels
					(retrieve_entity_root (current_index) (true))
				)
			)
			(zip (contained_entities))
		)
	)


	;Export entities in json format, keeping all original case values as they were trained,
	;instead of whatever they are encoded internally.
	;as dict of:  { entity_id : { feature : value } }
	;Decode nominal encoding, round and convert from epoch back to correct datetime formats as necessary
	;
	;parameters:
	; trainee: name of trainee, reference for filename
	; migration_filepath: path to migration folder where migration scripts are stored
	#!export_cases_and_sessions_decoded
	(seq
		(declare (assoc
			has_encoded_features (retrieve_from_entity "!hasEncodedFeatures")
			has_rounded_features (retrieve_from_entity "!hasRoundedFeatures")
			has_datetime_features (retrieve_from_entity "!hasDateTimeFeatures")
		))

		;if there are no encoded features, run the raw ExportCasesAndSessions call
		(if (= (false) has_encoded_features has_rounded_features has_datetime_features)
			(conclude (call !export_cases_and_sessions))
		)

		(store
			(concat migration_filepath trainee ".exp.json")
			(map
				(lambda (let
					(assoc
						;assoc of feature -> feature value
						entity_code_map	(get_all_labels (retrieve_entity_root (current_index 1) (true)) )
					)

					;"case" entity has a label named ".session", decode values as needed
					(if (contains_index entity_code_map !internalLabelSession)
						(zip
							(indices entity_code_map)
							;decode the values accordingly
							(if has_encoded_features
								(call !ConvertToOutput (assoc
									features (indices entity_code_map)
									feature_values (values entity_code_map)
									has_rounded_features has_rounded_features
									has_datetime_features has_datetime_features
								))

								has_rounded_features
								(call !RoundContinuousFeatures (assoc
									features (indices entity_code_map)
									feature_values (values entity_code_map)
								))
							)
						)

						;else non-case entity, output as-is
						entity_code_map
					)
				))
				(zip (contained_entities))
			)
		)
	)

	;update version to latest, auto importing any exported data.
	#upgrade_trainee
	(declare
		(assoc
			;{type "string" required (true)}
			;name of trainee to import and update
			trainee (null)
			;{type "string"}
			;base path to Howso Engine Core installation
			root_filepath (null)
			;{type "string"}
			;path from which to load previously exported amlg trainee
			;	If specified, trainee_json_filepath is ignored
			trainee_amlg_filepath (null)
			;{type "string"}
			;path from which to load previously exported meta.json and exp.json files.
			;	If unspecified, expects them to be located in the base installation /migrations/ directory.
			trainee_json_filepath (null)
			;{type "boolean"}
			;boolean flag used automatically by #upgrade_trainee when upgrading subtrainees. Not recommended to be used
			;manually by the user.
			;if true, then will import and use the trainee information in the subtrainee named ".old_trainee" rather
			;than load a trainee from the filesystem.
			preloaded (false)
		)
		(call !ValidateParameters)

		(if (!= !revision 0)
			(conclude
				(call !Return (assoc errors
					(list (concat
						"This Trainee has had modifications and cannot be used for upgrading. "
						"Please use a new Trainee to upgrade old Trainees."
					))
				))
			)
		)

		;create a temporary subtrainee from the latest howso code
		(declare (assoc
			new_trainee_path
				(load_entity
					(concat root_filepath !trainee_template_filename "." !file_extension)
					[!traineeContainer]
					(null)
					(false)
					{escape_resource_name (false) escape_contained_resource_names (false)}
				)
		))

		(if (= (null) new_trainee_path)
			(conclude
				(call !Return (assoc errors (list "Failed to load trainee: invalid filepath or filename provided") ))
			)
		)

		(call_entity new_trainee_path "initialize" (assoc trainee_id (retrieve_from_entity "!traineeId") ))

		(declare (assoc
			old_major_version (retrieve_from_entity "major_version")
			old_minor_version (retrieve_from_entity "minor_version")
			old_point_version (retrieve_from_entity "point_version")
			import_metadata_map (null)
			import_cases_and_sessions_map (null)
		))

		;if amalgam trainee is specified, load and upgrade it
		(if (or trainee_amlg_filepath preloaded)
			(let
				(assoc
					old_trainee
						(if preloaded
							[!traineeContainer ".old_trainee"]

							;else must load the old trainee properly
							(load_entity
								(concat trainee_amlg_filepath trainee ".amlg")
								[!traineeContainer ".old_trainee"]
								"amlg"
								(false)
								;assume flattened
								{execute_on_load (true)}
							)
						)
				)

				(call !UpgradeFromSubTrainee (assoc
					migration_trainee old_trainee
				))

				;cleanup
				(destroy_entities old_trainee)
			)

			;else loading from json
			;overwrite old version from exported file instead of from trainee
			(seq
				(assign (assoc
					;metadata json should be in the format of: { label : value }
					import_metadata_map (load (concat trainee_json_filepath trainee ".meta.json") )
					;cases and sessions json should be in the format of: { entity_id : { feature : value } }
					import_cases_and_sessions_map (load (concat trainee_json_filepath trainee ".exp.json") )
				))

				(if (or (= (null) import_metadata_map) (= (null) import_cases_and_sessions_map))
					(conclude (conclude
						(call !Return (assoc
							errors
								(list (concat
									"Error loading JSON from either '"
									(concat trainee_json_filepath trainee ".meta.json") "' or '"
									(concat trainee_json_filepath trainee ".exp.json")
									"': Invalid resource path."
								))
						))
					))
				)

				;when importing session .indices_map, numerify all the index keys for cases
				(assign (assoc
					import_cases_and_sessions_map
						(map
							(lambda
								;if this is a session, it has an .indices_map of session index -> case_id
								(if (contains_index (current_value) ".indices_map")
									(set
										(current_value)
										".indices_map"
										(zip
											;convert all the string number indices to numeric
											(map
												(lambda (+ (current_value)))
												(indices (get (current_value) ".indices_map"))
											)
											(values (get (current_value) ".indices_map"))
										)

									)
									(current_value)
								)
							)
							import_cases_and_sessions_map
						)
				))

				(assign (assoc
					old_major_version (get import_metadata_map "major_version")
					old_minor_version (get import_metadata_map "minor_version")
					old_point_version (get import_metadata_map "point_version")
				))

				;handle pre-api removal json imports where versions were stored as camelCase
				(if (and (contains_index import_metadata_map "majorVersion") (= (null) old_major_version old_minor_version old_point_version))
					(assign (assoc
						old_major_version (get import_metadata_map "majorVersion")
						old_minor_version (get import_metadata_map "minorVersion")
						old_point_version (get import_metadata_map "pointVersion")
					))
				)

				;remove old versions
				(assign (assoc import_metadata_map (remove import_metadata_map (list "major_version" "minor_version" "point_version")) ))

				(assign (assoc
					import_metadata_map
						(set import_metadata_map
							"!featureCustomDerivedMethods"
							(parse (get import_metadata_map "!featureCustomDerivedMethods"))
						)
				))

				;for each label pull its value from the old trainee and overwrite it in the new one
				(assign_to_entities import_metadata_map)

				;import cases and sessions from saved json and re-create them in the trainee
				(if import_cases_and_sessions_map
					;iterate over all the entities and re-create them as contained entities with corresponding features and values
					(map
						(lambda
							(create_entities
								(current_index)
								(set_type
									(zip_labels
										(indices (current_value))
										(values (current_value))
									)
									(null)
								)
							)
						)
						import_cases_and_sessions_map
					)
				)

				;iterate over all the applicable migration script versions and apply each one in order
				(call !execute_migration_scripts)

				;recreate custom derive feature code on trainee if it has derived features
				(call !recreate_feature_custom_derived_methods)
			)
		)

		(accum_to_entities (assoc !revision 1))
		(destroy_entities new_trainee_path)

		;print statement for use in utility scripts: upgrade_trainee and export_trainee
		(print
			"Updated " trainee " to version: "
			(retrieve_from_entity "major_version") "."
			(retrieve_from_entity "minor_version") "."
			(retrieve_from_entity "point_version")
			"\n"
		)

		(call !Return)
	)

	;Helper method for the upgrade process that is responsible for upgrading an older Trainee saved as a subtrainee
	;whose entity ID/path is specified by "migration_trainee".
	;This method retrieves an assoc of all of the export attributes of the older Trainee and assigns the value of each attribute
	;onto itself, then calls the migrations necessary to update these values appropriately
	;Additionally this method will also move the case/session entities from the older trainee into itself and recursively repeat
	;this process for any subtrainees within the older trainee.
	#!UpgradeFromSubTrainee
	(declare
		(assoc
			;entity id to "import" from
			migration_trainee (null)
		)

		(declare (assoc
			old_labels (call_entity migration_trainee "get_export_attributes")
			case_and_session_entities (filter (lambda (!= !traineeContainer (current_value))) (contained_entities migration_trainee))
		))

		;get all the old labels
		(declare (assoc
			import_metadata_map
				(map
					(lambda
						(call_entity migration_trainee "debug_label" (assoc label (current_index 1) ))
					)
					(zip old_labels)
				)
		))
		;assign all the old labels into the current entity/trainee
		(assign_to_entities import_metadata_map)

		;iterates through each case or session entity within the migration trainee and moves it
		;up into the current trainee under the same name
		(map
			(lambda
				(move_entities (append migration_trainee (current_value)) [(current_value)])
			)
			case_and_session_entities
		)

		;iterate over all the applicable migration script versions and apply each one in order
		(call !execute_migration_scripts)

		;recreate custom derive feature code on trainee if it has derived features
		(call !recreate_feature_custom_derived_methods)

		;if there are subtrainees, need to recursively upgrade those as well
		(if (size (contained_entities (append migration_trainee !traineeContainer)))
			(map
				(lambda (let
					(assoc new_contained_entity_path (append !traineeContainer (current_value 1)) )

					;create a new trainee with the same id and relative path to the current entity
					(clone_entities new_trainee_path new_contained_entity_path)

					;move the subtrainee that needs upgrading into the trainee that will do its upgrading
					(move_entities
						(append migration_trainee !traineeContainer (current_value))
						(append new_contained_entity_path !traineeContainer ".old_trainee")
					)

					;recursively upgrade that subtrainee and any subtrainees it may have
					(set_entity_permissions new_contained_entity_path {load (true) store (true)} )
					(call_entity new_contained_entity_path "upgrade_trainee" (assoc
						trainee (current_value 1)
						;specify its already preloaded with the ".old_trainee" subtrainee
						preloaded (true)
						root_filepath root_filepath
					))
					(set_entity_permissions new_contained_entity_path (false))
				))
				(contained_entities (append migration_trainee !traineeContainer))
			)
		)
	)


	;Helper method to re-create the !featureCustomDerivedMethods label from attributes for a trainee, used when upgrading a trainee
	#!recreate_feature_custom_derived_methods
	(let
		(assoc
			custom_derived_features_map
				(filter
					(lambda (or
						(!= (null) (get (current_value) "auto_derive_on_train"))
						(!= (null) (get (current_value) "derived_feature_code"))
					))
					(retrieve_from_entity "!featureAttributes")
				)
		)

		;only if there are derived features
		(if (size custom_derived_features_map)
			(let
				(assoc
					;filter features, leaving only those with custom derivations
					custom_derived_features_map
						(filter
							(lambda (or
								(= "custom" (get (current_value) (list "auto_derive_on_train" "derive_type")))
								(!= (null) (get (current_value) "derived_feature_code"))
							))
							custom_derived_features_map
						)
				)

				;cache all the custom specified derivation code into trainee
				(assign_to_entities (assoc
					!featureCustomDerivedMethods
						(call !ComposeCustomDerivedMethods (assoc
							custom_derived_features_map custom_derived_features_map
						))
				))
			)
		)
	)

	;Helper method to iterate over migration scripts and execute applicable ones
	;based on which version trainee is being upgraded from
	;parameters:
	; old_major_version: number, previous major version
	; old_minor_version: number, previous minor version
	; old_point_version: number, previous point version
	#!execute_migration_scripts
	(seq
		(declare (assoc migration_filepath (concat root_filepath !migration_folder) ))

		;perform all custom version-based conversions on metadata/cases/sessions here now that they are stored in the trainee
		(declare (assoc migration_conversions (load (concat migration_filepath "migrations" "." !file_extension))))

		;filter out all script versions older than the version of the trainee being upgraded
		(declare (assoc
			migration_versions
				(filter
					(lambda (let
						(assoc
							file_versions (split (current_value 1) "\\.")
							major 0
							minor 0
							point 0
						)
						(assign (assoc
							major (+ (first file_versions))
							minor (+ (get file_versions 1))
							point (+ (last file_versions))
						))

						;keep files with newer major version. if major is same, consider minor version, etc.
						(if (> major old_major_version)
							(true)

							;filter out older major versions
							(< major old_major_version)
							(false)

							(> minor old_minor_version)
							(true)

							;major is same, filter out older minor versions
							(< minor old_minor_version)
							(false)

							(> point old_point_version)
							(true)

							;else filter out any version that is same or older
							(false)
						)
					))
					(sort (indices (first migration_conversions)))
				)
		))

		;execute all the necessary conversion scripts in ascending version order
		(map
			(lambda (call (get (first migration_conversions) (current_value))))
			migration_versions
		)
	)

)
