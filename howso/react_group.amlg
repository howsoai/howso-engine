;Contains helper methods for group reacting.
(null

	;computes the convictions of an average case for each given set of cases specified by either a list of
	;case indices, a condition, or given data.
	; output an assoc react key -> list of corresponding values from each individual group.
	; example output for 2 groups:
	; (assoc
	; 	"base_model_average_distance_contribution" (list 4.0 4.1)
	;	"combined_model_average_distance_contribution" (list 4.05 3.9)
	;	"distance_contributions" (list 4.5 3.2)
	; )
	;{long_running (true) statistically_idempotent (true)}
	#react_group
	(declare
		;returns {ref "ReactGroupResponse"}
		(assoc
			;{type "list" values "string"}
			;list of feature names
			features (list)
			;{type "list" values {type "list" values {type "list"} } min_size 1}
			;a list of lists of lists of values corresponding to a list of sets of feature values, where the values are ordered corresponding to
			;	the features
			new_cases (null)
			;{type "list" values {ref "CaseIndices"} min_size 1}
			;a list of lists of tuples containing the session id and index that uniquely select trained cases. Each outer sublist makes a list of case indices
			;that define a group of trained cases to react to.
			case_indices (null)
			;{type "list" values {ref "Condition"} min_size 1}
			;a list of assocs defining conditions that each select a collection of cases to react to.
			conditions (null)
			;{type "boolean"}
			;calculate and output familiarity conviction of adding the specified new_cases in the output assoc
			familiarity_conviction_addition (true)
			;{type "boolean"}
			;calculate and output familiarity conviction of removing the specified new_cases in the output assoc
			familiarity_conviction_removal (false)
			;{type "boolean"}
			;calculate and output the KL divergence of adding the specified new_cases in the output assoc
			kl_divergence_addition (false)
			;{type "boolean"}
			;calculate and output the KL divergence of removing the specified new_cases in the output assoc
			kl_divergence_removal (false)
			;{type "boolean"}
			;if true will output p value of addition
			p_value_of_addition (false)
			;{type "boolean"}
			;if true will output p value of removal
			p_value_of_removal (false)
			;{type "boolean"}
			;calculate and output the mean similarity conviction of cases in each group
			similarity_conviction (false)
			;{type "boolean"}
			;calculate and output distance contribution ratios in the output assoc
			distance_contributions (false)
			;{ref "UseCaseWeights"}
			;flag, if set to true will scale influence weights by each case's weight_feature weight.
			;   If a weight is missing, uses 1 as the weight. If unspecified, case weights will be used if the trainee has them.
			use_case_weights (null)
			;{type "string"}
			;name of feature whose values to use as case weights
			weight_feature ".case_weight"
		)
		(call !ValidateParameters)

		(if (not (xor
				new_cases
				conditions
				case_indices
			))
			(conclude
				(call !Return (assoc
					errors ["Only one of `new_cases`, `conditions`, or `case_indices` should be specified."]
				))
			)
		)

		(if (and (size new_cases) (not (size features)))
			(conclude
				(call !Return (assoc
					errors ["`features` must be specified when using `new_cases`."]
				))
			)
		)

		(declare (assoc warnings (assoc) ))

		(declare (assoc
			react_results
				;don't run in parallel since SingleReactGroup creates and destroys entities
				(map
					(lambda
						(call !SingleReactGroup (assoc
							features features
							new_cases (get new_cases (current_index 1))
							condition (get conditions (current_index 1))
							case_indices (get case_indices (current_index 1))
							familiarity_conviction_addition familiarity_conviction_addition
							familiarity_conviction_removal familiarity_conviction_removal
							kl_divergence_addition kl_divergence_addition
							kl_divergence_removal kl_divergence_removal
							p_value_of_addition p_value_of_addition
							p_value_of_removal p_value_of_removal
							distance_contributions distance_contributions
							similarity_conviction similarity_conviction
							weight_feature weight_feature
							use_case_weights use_case_weights
						))
					)
					(or new_cases conditions case_indices)
				)
		))

		;convert react_results to a dict of react key -> lists of values (one per group)
		;e.g., for 3 groups: (assoc "distance_contributions" (list 1 2 3) )
		(declare (assoc react_group_keys (indices (first react_results)) ))

		(call !Return (assoc
			payload
				(zip
					react_group_keys
					(map
						(lambda (let
							(assoc key (current_value 1))
							(map
								(lambda (get (current_value) key))
								react_results
							)
						))
						react_group_keys
					)
				)
			warnings (indices warnings)
		))
	)



	;computes familiarity conviction of an avg case for each given hypothetical set of cases specified, returns a list of convictions, one per set
	;parameters:
	; features: list of feature names
	; new_cases: a list of lists of values corresponding to sets of feature values, where the values are ordered corresponding to the features
	; condition: a map specifying conditions that select a collection of trained cases
	; case_indices: a list of tuples describing case indices
	; distance_contributions : calculate and output distance contribution ratios in the output assoc
	; familiarity_conviction_addition: calculate and output familiarity conviction of adding the specified new_cases in the output assoc
	; familiarity_conviction_removal: calculate and output familiarity conviction of removing the specified new_cases in the output assoc
	; kl_divergence_addition: default to false, calculate and output the KL divergence of adding the specified new_cases in the output assoc
	; kl_divergence_removal: default to false, calculate and output the KL divergence of removing the specified new_cases in the output assoc
	; p_value_of_addition: default is false. if true will output p value of addition
	; p_value_of_removal: default is false. if true will output p value of removal
	; skip_encoding : flag, if set to true will bypass encoding features and assumes feature values are already encoded
	; use_case_weights: flag, if set to true will scale influence weights by each case's weight_feature weight. If unspecified,
	;  				case weights will be used if the trainee has them.
	; weight_feature: optional, default '.case_weight'.  name of feature whose values to use as case weights
	#!SingleReactGroup
	(declare
		(assoc
			features (list)
			new_cases (list)
			condition (assoc)
			case_indices (list)
			skip_encoding (false)
			familiarity_conviction_addition (true)
			familiarity_conviction_removal (false)
			kl_divergence_addition (false)
			kl_divergence_removal (false)
			p_value_of_addition (false)
			p_value_of_removal (false)
			distance_contributions (false)
			similarity_conviction (true)
			use_case_weights (null)
			weight_feature ".case_weight"
		)

		(declare (assoc dataset_size (call !GetNumTrainingCases)))

		;if the model is too small, just return 0, otherwise compute conviction
		(if (<= dataset_size 2)
			(conclude
				(assoc
					"familiarity_conviction_addition" 0
					"familiarity_conviction_removal" 0
					"kl_divergence_addition" 0
					"kl_divergence_removal" 0
					"p_value_of_addition" 0
					"p_value_of_removal" 0
					"distance_contribution" 0
					"base_average_distance_contribution" 0
					"combined_average_distance_contribution" 0
				)
			)
		)

		(if !inactiveFeaturesNeedCaching (call !UpdateInactiveFeatures))

		;if features aren't specified, assume all !trainedFeatures will need to have their mae calculated
		(if (= 0 (size features))
			(assign (assoc features !trainedFeatures))
		)

		;if features need to be encoded, overwrite the values in the new_cases list with the encoded values
		(if (and (size new_cases) !hasFeaturesNeedEncodingFromInput (not skip_encoding))
			(assign (assoc
				new_cases
					(map
						(lambda
							(call !ConvertFromInput (assoc
								feature_values (current_value 1)
								features features
							))
						)
						new_cases
					)
			))
		)

		;if user doesn't want to use case weights, change weight_feature to '.none'
		(if (= (false) use_case_weights)
			(assign (assoc weight_feature ".none"))
		)

		(declare (assoc
			hyperparam_map
				(call !GetHyperparameters (assoc
					feature (null)
					context_features features
					weight_feature weight_feature
				))
			valid_weight_feature (false)

			combined_average_distance_contribution (null)
			avg_new_cases_distance_contribution (null)
			new_case_entropies_value (null)
			average_new_cases_conviction_addition (null)
			average_new_cases_conviction_removal (null)
			kl_divergence_addition_value (null)
			kl_divergence_removal_value (null)
			p_value_of_addition_value (null)
			p_value_of_removal_value (null)
			mean_similarity_conviction (null)
		))

		(call !UpdateCaseWeightParameters)

		(declare (assoc
			feature_weights
				(if (size !inactiveFeaturesMap)
					(append
						(get hyperparam_map "featureWeights")
						(map 1 !inactiveFeaturesMap)
					)
					(get hyperparam_map "featureWeights")
				)
			feature_deviations (get hyperparam_map "featureDeviations")
			closest_k (get hyperparam_map "k")
			query_feature_attributes_map (get hyperparam_map "featureDomainAttributes")
		))

		;closest k must be at least 2 smaller than model size, i.e., a model of 5 needs a K of 3 or less:
		;when knocking out a case during conviction calculations, each remaining case searches for K cases around itself
		;meaning that the K must be at least 2 less than the model size
		(if (and (< dataset_size (+ closest_k 2)) (~ 0 closest_k))
			(assign (assoc closest_k (- dataset_size 2)))
		)

		;cache average case entropies and distance contributions if necessary
		(if (and familiarity_conviction_addition (= (null) !averageCaseEntropyAddition) )
			(call !CacheAverageCaseEntropyAddition)
		)

		(if (and familiarity_conviction_removal (= (null) !averageCaseEntropyRemoval) )
			(call !CacheAverageCaseEntropyRemoval)
		)

		(if (and distance_contributions (= (null) !averageCaseDistanceContribution) )
			(call !CacheAverageCaseDistanceContribution)
		)

		;get the case_ids, creating if necessary
		(declare (assoc
			new_cases_created (< 0 (size new_cases))
			case_ids
				(if (size new_cases)
					(map
						(lambda
							(call !CreateCase (assoc
								features features
								feature_values (current_value 1)
								session "none"
								session_index 0
							))
						)
						new_cases
					)

					(size condition)
					;get cases that match the condition
					(call !GetCasesByCondition (assoc condition condition))

					(size case_indices)
					;get the entity IDs of the cases with these case indices
					(call !GetCaseIds (assoc case_indices case_indices))
				)
		))

		(if (not (size case_ids))
			(accum (assoc
				warnings (associate "No case ids were selected for one of the given inputs. Please check your condition, case indices, or given value for new_cases")
			))

			(and
				(size condition)
				(< (size case_ids) 3)
			)
			(accum (assoc
				warnings (associate (concat "Only " (size case_ids) " case(s) were selected when using the following condition: " (format condition "code" "json")))
			))
		)

		(if distance_contributions
			(call !ComputeNewCasesDistanceContributions)
		)

		(if similarity_conviction
			(call !ComputeGroupMeanSimilarityConviction)
		)

		(if (or familiarity_conviction_addition p_value_of_addition kl_divergence_addition)
			(call !ComputeNewCasesFamiliarityConvictionAddition)
		)

		(if (or familiarity_conviction_removal p_value_of_removal kl_divergence_removal)
			(call !ComputeNewCasesFamiliarityConvictionRemoval)
		)

		;clean up temporary cases
		(if new_cases_created
			(apply "destroy_entities" case_ids)
		)

		;output only the requested keys
		(append
			(if familiarity_conviction_addition
				(assoc "familiarity_conviction_addition" average_new_cases_conviction_addition)
				(assoc)
			)
			(if familiarity_conviction_removal
				(assoc "familiarity_conviction_removal" average_new_cases_conviction_removal)
				(assoc)
			)
			(if kl_divergence_addition
				(assoc "kl_divergence_addition" kl_divergence_addition_value)
				(assoc)
			)
			(if kl_divergence_removal
				(assoc "kl_divergence_removal" kl_divergence_removal_value)
				(assoc)
			)
			(if p_value_of_addition
				(assoc "p_value_of_addition" p_value_of_addition_value)
				(assoc)
			)
			(if p_value_of_removal
				(assoc "p_value_of_removal" p_value_of_removal_value)
				(assoc)
			)
			(if distance_contributions
				(assoc
					"distance_contribution" avg_new_cases_distance_contribution
					"base_model_average_distance_contribution" !averageCaseDistanceContribution
					"combined_model_average_distance_contribution" combined_average_distance_contribution
				)
				(assoc)
			)
			(if similarity_conviction
				(assoc "similarity_conviction" mean_similarity_conviction)
				(assoc)
			)
		)
	)

	;Helper method to compute and cache average case entropy of addition for the model
	#!CacheAverageCaseEntropyAddition
	(let
		(assoc
			entropies_map
				(compute_on_contained_entities (list
					||(query_entity_kl_divergences
						closest_k
						features
						(null)
						feature_weights
						!queryDistanceTypeMap
						query_feature_attributes_map
						feature_deviations
						(get hyperparam_map "p")
						(if (= (get hyperparam_map "dt") "surprisal_to_prob") "surprisal" (get hyperparam_map "dt") )
						(if valid_weight_feature weight_feature (null))
						;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
						"fixed rand seed"
						(null) ;radius
						!numericalPrecision
					)
				))
		)

		(assign_to_entities (assoc
			!averageCaseEntropyAddition
				(/
					(apply "+" (values entropies_map))
					(size entropies_map)
				)
		))
	)

	;Helper method to compute and cache average case entropy of removal for the model
	#!CacheAverageCaseEntropyRemoval
	(let
		(assoc
			entropies_map
				(compute_on_contained_entities (list
					||(query_entity_kl_divergences
						closest_k
						features
						(null)
						feature_weights
						!queryDistanceTypeMap
						query_feature_attributes_map
						feature_deviations
						(get hyperparam_map "p")
						(if (= (get hyperparam_map "dt") "surprisal_to_prob") "surprisal" (get hyperparam_map "dt") )
						(if valid_weight_feature weight_feature (null))
						;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
						"fixed rand seed"
						(null) ;radius
						!numericalPrecision
						(true) ;conviction_of_removal
					)
				))
		)

		(assign_to_entities (assoc
			!averageCaseEntropyRemoval
				(/
					(apply "+" (values entropies_map))
					(size entropies_map)
				)
		))
	)

	;Helper method to compute and cache average case distance contribution for the model
	#!CacheAverageCaseDistanceContribution
	(let
		(assoc
			base_distance_contributions_map
				(compute_on_contained_entities (list
					||(query_entity_distance_contributions
						closest_k
						features
						(null)
						feature_weights
						!queryDistanceTypeMap
						query_feature_attributes_map
						feature_deviations
						(get hyperparam_map "p")
						(if (= (get hyperparam_map "dt") "surprisal_to_prob") "surprisal" (get hyperparam_map "dt") )
						(if valid_weight_feature weight_feature (null))
						;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
						"fixed rand seed"
						(null) ;radius
						!numericalPrecision
					)
				))
		)

		(assign_to_entities (assoc
			!averageCaseDistanceContribution
				(/
					(apply "+" (values base_distance_contributions_map))
					(size base_distance_contributions_map)
				)
		))
	)

	;Helper method to compute model avg distance contribution and new cases' avg distance contribution
	#!ComputeNewCasesDistanceContributions
	(let
		(assoc
			combined_distance_contributions_map
				(compute_on_contained_entities (list
					||(query_entity_distance_contributions
						closest_k
						features
						(null)
						feature_weights
						!queryDistanceTypeMap
						query_feature_attributes_map
						feature_deviations
						(get hyperparam_map "p")
						(if (= (get hyperparam_map "dt") "surprisal_to_prob") "surprisal" (get hyperparam_map "dt") )
						(if valid_weight_feature weight_feature (null))
						;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
						"fixed rand seed"
						(null) ;radius
						!numericalPrecision
					)
				))
		)

		(assign (assoc
			combined_average_distance_contribution
				(/
					(apply "+" (values combined_distance_contributions_map))
					(size combined_distance_contributions_map)
				)
			avg_new_cases_distance_contribution
				(/
					(apply "+" (unzip combined_distance_contributions_map case_ids))
					(size case_ids)
				)
		))
	)

	;Helper method to compute model avg new cases familiarity convction of addition and p value of addition
	#!ComputeNewCasesFamiliarityConvictionAddition
	(seq
		;compute entropies of the new cases
		(assign (assoc
			new_case_entropies_value
				(compute_on_contained_entities (list
					||(query_entity_group_kl_divergence
						closest_k
						features
						case_ids
						feature_weights
						!queryDistanceTypeMap
						query_feature_attributes_map
						feature_deviations
						(get hyperparam_map "p")
						(if (= (get hyperparam_map "dt") "surprisal_to_prob") "surprisal" (get hyperparam_map "dt") )
						(if valid_weight_feature weight_feature (null))
						;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
						"fixed rand seed"
						(null) ;radius
						!numericalPrecision
					)
				))
		))
		(assign (assoc
			average_new_cases_conviction_addition
				(if familiarity_conviction_addition
					;if the average entropy is 0, that means all cases have entropy of 0, thus return 1 for conviction
					(if (= 0 !averageCaseEntropyAddition)
						1.0

						;return conviction by taking the average case entropy dividing be the average new case entropy
						(/ !averageCaseEntropyAddition (/ new_case_entropies_value (size case_ids)))
					)
				)
			p_value_of_addition_value
				(if p_value_of_addition
					(exp (- (/ new_case_entropies_value (size case_ids))) )
				)
			kl_divergence_addition_value (/ new_case_entropies_value (size case_ids))
		))
	)

	;Helper method to compute model avg new cases familiarity convction of removal and p value of removal
	#!ComputeNewCasesFamiliarityConvictionRemoval
	(seq
		;compute entropies of the new cases
		(assign (assoc
			new_case_entropies_value
				(compute_on_contained_entities (list
					||(query_entity_group_kl_divergence
						closest_k
						features
						case_ids
						feature_weights
						!queryDistanceTypeMap
						query_feature_attributes_map
						feature_deviations
						(get hyperparam_map "p")
						(if (= (get hyperparam_map "dt") "surprisal_to_prob") "surprisal" (get hyperparam_map "dt") )
						(if valid_weight_feature weight_feature (null))
						;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
						"fixed rand seed"
						(null) ;radius
						!numericalPrecision
						(true) ;conviction_of_removal
					)
				))
		))
		(assign (assoc
			average_new_cases_conviction_removal
				(if familiarity_conviction_removal
					;if the average entropy is 0, that means all cases have entropy of 0, thus return 1 for conviction
					(if (= 0 !averageCaseEntropyRemoval)
						1.0

						;return conviction by taking the average case entropy dividing be the average new case entropy
						(/ !averageCaseEntropyRemoval (/ new_case_entropies_value (size case_ids)))
					)
				)
			p_value_of_removal_value
				(if p_value_of_removal
					(exp (- (/ new_case_entropies_value (size case_ids))) )
				)
			kl_divergence_removal_value (/ new_case_entropies_value (size case_ids))
		))
	)

	;helper method for react group to compute the mean similarity conviction of a group of cases
	#!ComputeGroupMeanSimilarityConviction
	(seq
		(declare (assoc
			case_similarity_convictions
				||(map
					(lambda
						(call !SimilarityConviction (assoc
							features features
							feature_values (retrieve_from_entity (current_value 1) features)
							use_case_weights use_case_weights
							weight_feature weight_feature
							filtering_queries [(query_not_in_entity_list case_ids)]
						))
					)
					case_ids
				)
		))

		(assign (assoc
			mean_similarity_conviction (/ (apply "+" case_similarity_convictions) (size case_similarity_convictions))
		))
	)

	#!PredictGroup
	(declare
		(assoc
			;list of feature names corresponding to values in cases
			features (list)
			;list of lists of feature values. If these cases make up a time-series,
			;then it is assumed these are in order of increasing time.
			cases (list)
			;list of feature names to use as context
			context_features (list)
			;list of feature names to predict and aggregate
			action_features (list)
			;standard desired conviction
			desired_conviction (null)

			goal_features_map (assoc)
			;pass through to !SingleReact (appended to those needed for aggregation)
			details (null)
			;pass through to !SingleReact
			skip_encoding (false)
			;flag, if true will return per-row reactions
			return_per_case_reactions (false)
		)

		(let
			(assoc
				context_feature_indices
					(unzip
						;make sure this zips/indices the same list of features retrieved above.
						(zip features (indices features))
						context_features
					)
				ts_derived_context_features
					(if !tsTimeFeature
						(filter
							(lambda (contains_value (get !tsFeaturesMap "ts_derived_features") (current_value)))
							context_features
						)
					)
				ts_feature_lag_amount_map (if !tsTimeFeature (call !BuildTSFeatureLagAmountMap))
			)

			;predict the action features for each row of the series
			(declare (assoc
				per_row_reactions
					(map
						(lambda
							(let
								(assoc
									case_context_map (zip context_features (unzip (current_value 1) context_feature_indices))
									react_context_features context_features
								)

								;filter any null derived TS features from the contexts
								(if ts_derived_context_features
									(assign (assoc
										react_context_features
											(filter
												(lambda
													(or
														(not (contains_index ts_feature_lag_amount_map (current_value)))
														(> (current_index 2) (get ts_feature_lag_amount_map (current_value)))
													)
												)
												context_features
											)
									))
								)

								(call !SingleReact (assoc
									context_features react_context_features
									context_values (unzip case_context_map react_context_features)
									action_features action_features
									leave_series_out (true)
									skip_encoding skip_encoding
									desired_conviction desired_conviction
									goal_features_map goal_features_map
									return_entity_ids_only (true)
									details
										(append
											details
											{
												"feature_full_residuals" (true)
												"feature_deviations" (true)
												"most_similar_cases" (!= (null) desired_conviction) ;need to compute max gaps if generative
												"num_most_similar_cases" 30 ;need max of k and 30, but k always < 30 in targetless
												"features" action_features
												"categorical_action_probabilities" (true)
											}
										)
								))
							)
						)
						cases
					)
			))

			;convert per_row_reactions to a dict of details key -> lists of values (one per row)
			(declare (assoc
				output_map
					(map
						(lambda (let
							(assoc details_key (current_index 1))
							(map
								(lambda (get (current_value) details_key) )
								per_row_reactions
							)
						))
						(if (size per_row_reactions)
							(first per_row_reactions)
							(assoc)
						)
					)
			))

			;for each action_feature, "interpolate" the per row reactions to get a prediction for the series
			(declare (assoc
				action_values
					(map
						(lambda
							(let
								(assoc
									action_feature (current_value 1)
									action_index (current_index 1)
								)

								(declare (assoc
									action_feature_row_residuals
										(map
											(lambda (get (current_value) action_feature))
											(get output_map "feature_full_residuals")
										)
								))

								(if (contains_index !nominalsMap action_feature)
									;nominals flow: accumulate the categorical action probabilities computed in each row, but
									;scale their values by the local probability of the correct prediction, which we can
									;measure with 1 - the local residual for that feature. Then predict the class with the largest
									;accumulated CAP
									(let
										(assoc
											scaled_per_row_caps
												(map
													(lambda
														(map
															(lambda
																;multiply each CAP by the probability of correct prediction (1-residual)
																(*
																	(current_value)
																	(- 1 (get action_feature_row_residuals (current_index 1)))
																)
															)
															(get (current_value) action_feature)
														)
													)
													(get output_map "categorical_action_probabilities")
												)
										)

										;add together the scaled CAPs for each row
										(declare (assoc
											aggregated_caps
												(reduce
													(lambda
														(map
															(lambda
																(+
																	(or (first (current_value)) 0)
																	(or (last (current_value)) 0)
																)
															)
															(previous_result)
															(current_value)
														)
													)
													scaled_per_row_caps
												)
										))

										(if (!= (null) desired_conviction)
											;sample from the classes according to the CAPs
											(rand aggregated_caps)

											(rand (index_max aggregated_caps))
										)
									)

									;edit_distance feats
									(contains_index !editDistanceFeatureTypesMap action_feature)
									(null)

									;continuous feats
									(and
										(not (contains_index !categoricalFeaturesSet action_feature))
										;interpolate continuous strings as categorical since we don't want to mix them
										(!= "string" (get !editDistanceFeatureTypesMap action_feature))
									)
									(let
										(assoc
											raw_timestep_weights
												(map
													(lambda
														(/
															(get (first (current_value)) action_feature)
															(get (last (current_value)) action_feature)
														)
													)
													(get output_map "feature_deviations")
													(get output_map "feature_full_residuals")
												)
											weight_sum (null)
											discriminative_prediction (null)
										)
										(assign (assoc weight_sum (apply "+" raw_timestep_weights) ))
										(assign (assoc
											discriminative_prediction
												;weighted average of the predictions at each timestep where the weight is
												;the react deviation divided by the react full residual
												(generalized_distance
													(map (lambda (/ (current_value) weight_sum)) raw_timestep_weights) ;weights
													(null) ;distance_types
													(null) ;attributes
													(null) ;deviations
													1 ;p
													;vec
													(map
														(lambda (get (current_value) action_index))
														(get output_map "action_values")
													)
												)
										))

										(if (!= (null) desired_conviction)
											;if generative, need to either add noise according to aggregated RMR or aggregated max gap
											(let
												(assoc
													generative_residual
														(if use_regional_residuals
															;aggregate each timesteps local residual with a weighted average
															(generalized_distance
																(map (lambda (/ (current_value) weight_sum)) raw_timestep_weights) ;weights
																(null) ;distance_types
																(null) ;attributes
																(null) ;deviations
																1 ;p
																;vec
																(map
																	(lambda (get (current_value) action_feature))
																	(get output_map "feature_full_residuals")
																)
															)

															;else
															;aggregate max gap by taking max of each case's max gaps (min of regional and local gaps, but no larger than half min gap)
															(apply "max"
																(map
																	(lambda
																		(max
																			(get !cachedFeatureHalfMinGapMap action_feature)

																			(min
																				(compute_on_contained_entities (list
																					(query_in_entity_list (trunc
																						(current_value 1)
																						(if (~ 0 (get hyperparam_map "k"))
																							(get hyperparam_map "k")
																							;else get the min value from dynamic k
																							(get hyperparam_map ["k" 1])
																						)
																					))
																					(query_max_difference action_feature (get !cyclicFeaturesMap action_feature))
																				))

																				(compute_on_contained_entities (list
																					(query_in_entity_list (current_value 1))
																					(query_max_difference action_feature (get !cyclicFeaturesMap action_feature))
																				))
																			)
																		)
																	)
																	(get output_map "most_similar_cases")
																)
															)
														)
												)

												(call !GenerateFeatureValue (assoc
													feature_is_nominal (false)
													action_value discriminative_prediction
													feature_residual generative_residual
													desired_conviction desired_conviction
													feature action_feature
												))
											)

											;discriminative.
											discriminative_prediction
										)

									)
								)
							)
						)
						action_features
					)
			))

			(append
				{"action_values" action_values}
				(if return_per_case_reactions
					{"per_case_reactions" output_map}
					{}
				)
			)
		)
	)
)
