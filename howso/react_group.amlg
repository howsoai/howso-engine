;Contains helper methods for group reacting.
(null

	;computes the convictions of an average case for each given hypothetical set of cases specified
	; output an assoc react key -> list of corresponding values from each individual group.
	; example output for 2 groups:
	; (assoc
	; 	"base_model_average_distance_contribution" (list 4.0 4.1)
	;	"combined_model_average_distance_contribution" (list 4.05 3.9)
	;	"distance_contributions" (list 4.5 3.2)
	; )
	;
	;parameters:
	; features: list of label names
	; distance_contributions : calculate and output distance contribution ratios in the output assoc
	; familiarity_conviction_addition: default to true, calculate and output familiarity conviction of adding the specified new_cases in the output assoc
	; familiarity_conviction_removal: default to false, calculate and output familiarity conviction of removing the specified new_cases in the output assoc
	; kl_divergence_addition: default to false, calculate and output the KL divergence of adding the specified new_cases in the output assoc
	; kl_divergence_removal: default to false, calculate and output the KL divergence of removing the specified new_cases in the output assoc
	; p_value_of_addition: default is false. if true will output p value of addition
	; p_value_of_removal: default is false. if true will output p value of removal
	; new_cases: a list of lists of lists of values corresponding to a list of sets of feature values, where the values are ordered corresponding to
	;			the features
	; weight_feature: optional, default '.case_weight'.  name of feature whose values to use as case weights
	; use_case_weights: optional, flag, if set to true will scale influence weights by each case's weight_feature weight.
	;				   If a weight is missing, uses 1 as the weight. If unspecified, case weights will be used if the trainee has them.
	#batch_react_group
	(declare
		(assoc
			;{type "list" values "string"}
			features (list)
			;{type "list" values {type "list" values {type "list"} } }
			new_cases (list)
			;{type "boolean"}
			familiarity_conviction_addition (true)
			;{type "boolean"}
			familiarity_conviction_removal (false)
			;{type "boolean"}
			kl_divergence_addition (false)
			;{type "boolean"}
			kl_divergence_removal (false)
			;{type "boolean"}
			p_value_of_addition (false)
			;{type "boolean"}
			p_value_of_removal (false)
			;{type "boolean"}
			distance_contributions (false)
			;{type "boolean"}
			use_case_weights (null)
			;{type "string"}
			weight_feature ".case_weight"
		)
		(call !ValidateParameters)

		(declare (assoc
			react_results
				;don't run in parallel since ReactGroup creates and destroys entities
				(map
					(lambda
						(call !ReactGroup (assoc
							features features
							new_cases (current_value 1)
							familiarity_conviction_addition familiarity_conviction_addition
							familiarity_conviction_removal familiarity_conviction_removal
							kl_divergence_addition kl_divergence_addition
							kl_divergence_removal kl_divergence_removal
							p_value_of_addition p_value_of_addition
							p_value_of_removal p_value_of_removal
							distance_contributions distance_contributions
							weight_feature weight_feature
							use_case_weights use_case_weights
						))
					)
					new_cases
				)
		))

		;convert react_results to a dict of react key -> lists of values (one per group)
		;e.g., for 3 groups: (assoc "distance_contributions" (list 1 2 3) )

		(declare (assoc react_group_keys (indices (first react_results)) ))

		(call !Return (assoc
			payload
				(zip
					react_group_keys
					(map
						(lambda (let
							(assoc key (current_value 1))
							(map
								(lambda (get (current_value) key))
								react_results
							)
						))
						react_group_keys
					)
				)
		))
	)



	;computes familiarity conviction of an avg case for each given hypothetical set of cases specified, returns a list of convictions, one per set
	;parameters:
	; features: list of label names
	; new_cases: a list of lists of values corresponding to sets of feature values, where the values are ordered corresponding to the features
	; distance_contributions : calculate and output distance contribution ratios in the output assoc
	; familiarity_conviction_addition: calculate and output familiarity conviction of adding the specified new_cases in the output assoc
	; familiarity_conviction_removal: calculate and output familiarity conviction of removing the specified new_cases in the output assoc
	; kl_divergence_addition: default to false, calculate and output the KL divergence of adding the specified new_cases in the output assoc
	; kl_divergence_removal: default to false, calculate and output the KL divergence of removing the specified new_cases in the output assoc
	; p_value_of_addition: default is false. if true will output p value of addition
	; p_value_of_removal: default is false. if true will output p value of removal
	; skip_encoding : flag, if set to true will bypass encoding features and assumes feature values are already encoded
	; use_case_weights: flag, if set to true will scale influence weights by each case's weight_feature weight. If unspecified,
	;  				case weights will be used if the trainee has them.
	; weight_feature: optional, default '.case_weight'.  name of feature whose values to use as case weights
	#!ReactGroup
	(declare
		(assoc
			features (list)
			new_cases (list)
			skip_encoding (false)
			familiarity_conviction_addition (true)
			familiarity_conviction_removal (false)
			kl_divergence_addition (false)
			kl_divergence_removal (false)
			p_value_of_addition (false)
			p_value_of_removal (false)
			distance_contributions (false)
			use_case_weights (null)
			weight_feature ".case_weight"
		)

		(declare (assoc model_size (call !GetNumTrainingCases)))

		;if the model is too small, just return 0, otherwise compute conviction
		(if (<= model_size 2)
			(conclude
				(assoc
					"familiarity_conviction_addition" 0
					"familiarity_conviction_removal" 0
					"kl_divergence_addition" 0
					"kl_divergence_removal" 0
					"p_value_of_addition" 0
					"p_value_of_removal" 0
					"distance_contribution" 0
					"base_model_average_distance_contribution" 0
					"combined_model_average_distance_contribution" 0
				)
			)
		)

		(if !inactiveFeaturesNeedCaching (call !UpdateInactiveFeatures))

		;if features aren't specified, assume all !trainedFeatures will need to have their mae calculated
		(if (= 0 (size features))
			(assign (assoc features !trainedFeatures))
		)

		;if features need to be encoded, overwrite the values in the new_cases list with the encoded values
		(if (and !hasFeaturesNeedEncodingFromInput (not skip_encoding))
			(assign (assoc
				new_cases
					(map
						(lambda
							(call !ConvertFromInput (assoc
								feature_values (current_value 1)
								features features
							))
						)
						new_cases
					)
			))
		)

		;if user doesn't want to use case weights, change weight_feature to '.none'
		(if (= (false) use_case_weights)
			(assign (assoc weight_feature ".none"))
		)

		(declare (assoc
			hyperparam_map
				(call !GetHyperparameters (assoc
					feature ".targetless"
					context_features features
					mode "robust"
					weight_feature weight_feature
				))
			valid_weight_feature (false)

			combined_model_average_distance_contributions (null)
			avg_new_cases_distance_contribution (null)
			new_case_entropies_value (null)
			average_new_cases_conviction_addition (null)
			average_new_cases_conviction_removal (null)
			kl_divergence_addition_value (null)
			kl_divergence_removal_value (null)
			p_value_of_addition_value (null)
			p_value_of_removal_value (null)
		))

		(call !UpdateCaseWeightParameters)

		(declare (assoc
			feature_weights (get hyperparam_map "featureWeights")
			feature_deviations (get hyperparam_map "featureDeviations")
			closest_k (get hyperparam_map "k")
			query_feature_attributes_map (get hyperparam_map "featureDomainAttributes")
		))

		;closest k must be at least 2 smaller than model size, i.e., a model of 5 needs a K of 3 or less:
		;when knocking out a case during conviction calculations, each remaining case searches for K cases around itself
		;meaning that the K must be at least 2 less than the model size
		(if (< model_size (+ closest_k 2))
			(assign (assoc closest_k (- model_size 2)))
		)

		;cache average case entropies and distance contributions if necessary
		(if (and familiarity_conviction_addition (= (null) !averageModelCaseEntropyAddition) )
			(call !CacheAverageModelCaseEntropyAddition)
		)

		(if (and familiarity_conviction_removal (= (null) !averageModelCaseEntropyRemoval) )
			(call !CacheAverageModelCaseEntropyRemoval)
		)

		(if (and distance_contributions (= (null) !averageModelCaseDistanceContribution) )
			(call !CacheAverageModelCaseDistanceContribution)
		)

		;create new cases
		(assign (assoc
			new_case_ids
				(map
					(lambda
						(call !CreateCase (assoc
							features features
							feature_values (current_value 1)
							session "none"
							session_index 0
						))
					)
					new_cases
				)
		))

		(if distance_contributions
			(call !ComputeNewCasesDistanceContributions)
		)

		(if (or familiarity_conviction_addition p_value_of_addition kl_divergence_addition)
			(call !ComputeNewCasesFamiliarityConvictionAddition)
		)

		(if (or familiarity_conviction_removal p_value_of_removal kl_divergence_removal)
			(call !ComputeNewCasesFamiliarityConvictionRemoval)
		)

		;clean up temporary cases
		(map (lambda (destroy_entities (current_value))) new_case_ids)

		;output only the requested keys
		(append
			(if familiarity_conviction_addition
				(assoc "familiarity_conviction_addition" average_new_cases_conviction_addition)
				(assoc)
			)
			(if familiarity_conviction_removal
				(assoc "familiarity_conviction_removal" average_new_cases_conviction_removal)
				(assoc)
			)
			(if kl_divergence_addition
				(assoc "kl_divergence_addition" kl_divergence_addition_value)
				(assoc)
			)
			(if kl_divergence_removal
				(assoc "kl_divergence_removal" kl_divergence_removal_value)
				(assoc)
			)
			(if p_value_of_addition
				(assoc "p_value_of_addition" p_value_of_addition_value)
				(assoc)
			)
			(if p_value_of_removal
				(assoc "p_value_of_removal" p_value_of_removal_value)
				(assoc)
			)
			(if distance_contributions
				(assoc
					"distance_contribution" avg_new_cases_distance_contribution
					"base_model_average_distance_contribution" !averageModelCaseDistanceContribution
					"combined_model_average_distance_contribution" combined_model_average_distance_contributions
				)
				(assoc)
			)
		)
	)
)
