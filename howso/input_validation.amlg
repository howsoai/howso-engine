;Contains helper methods for validating user-defined parameters
(null

	;helper method to validate specified batch react parameters are either length of num_reacts or 1
	; if the aren't, sets the variable invalid_react_parameters to (true)
	#!ValidateBatchReactParameter
	(if (and
			(> (size param) 0)
			(!= 1 (size param))
			(!= num_reacts (size param))
		)
		(assign (assoc invalid_react_parameters (true)))
	)

	#!ValidateFeatures
	(let
		(assoc
			errors
				(call !CheckForUntrainedFeatures (assoc
					context_features context_features
					action_features action_features
					action_feature action_feature
				))
		)
		(if (size errors)
			(conclude (call !Return (assoc errors errors)) )
		)
	)


	;Verifies that feature parameters do not contain untrained features
	; this method checks context_features, action_features, and action feature
	; returns a list of strings, one for each invalid parameter
	#!CheckForUntrainedFeatures
	(declare
		(assoc
			errors (list)
			context_features (list)
			action_features (list)
			action_feature (null)

			;not parameters
			valid_features (append !trainedFeatures !reactIntoFeaturesList)
			invalid_feature_set (assoc)
		)

		(if
			(size
				(remove
					(zip (append context_features action_features action_feature))
					valid_features
				)
			)
			;if there is an untrained feature in the any specified features, check each parameter
			;to give the correct error
			(seq
				(if (size context_features)
					(seq
						(assign (assoc invalid_feature_set (remove (zip context_features) valid_features) ))
						(if (size invalid_feature_set)
							(accum (assoc
								errors
									(concat
										"context_features contains features that are neither trained nor "
										"defined in the feature attributes: "
										(apply "concat" (trunc (weave (indices invalid_feature_set) ", ")))
									)
							))
						)
					)
				)

				(if (size action_features)
					(seq
						(assign (assoc invalid_feature_set (remove (zip action_features) valid_features) ))
						(if (size invalid_feature_set)
							(accum (assoc
								errors
									(concat
										"action_features contains features that are neither trained nor "
										"defined in the feature attributes: "
										(apply "concat" (trunc (weave (indices invalid_feature_set) ", ")))
									)
							))
						)
					)
				)

				(if (!= (null) action_feature)
					(if (not (contains_value valid_features action_feature))
						(accum (assoc
							errors
								(concat
									"action_feature is a feature that is neither trained nor "
									"defined in the feature attributes: "
									action_feature
								)
						))
					)
				)
			)
		)

		errors
	)

	;Validates parameter inputs for features that are in datetime format
	;verifies that the datetime format matches what is set in feature attributes
	; this method checks the following parameters:
	; - initial_values
	; - series_stop_map(s)
	; - init_time_steps
	; - final_time_steps
	;
	;parameters:
	; single_series: indicates if the method is called for a single series (from #single_react_series) or for multiple series (from #react_series)
	#!ValidateDateTimeInputs
	(let
		(assoc
			single_series (false)

			;not parameters
			epoch_value (null)
			datetime_value (null)
			invalid_value_message (false)
		)

		(if initial_features
			(map
				(lambda
					(map
						(lambda
							(if (contains_index !featureDateTimeMap (current_index))
								(call !CheckDateTimeFormat (assoc
									datetime_feature (current_index 1)
									datetime_string (current_value 1)
									parameter_name "initial_values"
								))
							)
						)
						;zip features to each list of values
						(zip initial_features (current_value))
					)
				)
				(if single_series (list initial_values) initial_values)
			)
		)
		(if invalid_value_message
			(conclude (conclude
				(call !Return (assoc errors (list invalid_value_message) ))
			))
		)

		(if init_time_steps
			(call !CheckDateTimeFormat (assoc
				datetime_feature !tsTimeFeature
				datetime_string (first init_time_steps)
				parameter_name "init_time_steps"
			))
		)
		(if invalid_value_message
			(conclude (conclude
				(call !Return (assoc errors (list invalid_value_message) ))
			))
		)

		(if final_time_steps
			(call !CheckDateTimeFormat (assoc
				datetime_feature !tsTimeFeature
				datetime_string (first final_time_steps)
				parameter_name "final_time_steps"
			))
		)
		(if invalid_value_message
			(conclude (conclude
				(call !Return (assoc errors (list invalid_value_message) ))
			))
		)

		(map
			(lambda
				(map
					(lambda
						(if (contains_index !featureDateTimeMap (current_index))
							(map
								(lambda
									(call !CheckDateTimeFormat (assoc
										datetime_feature (current_index 2)
										datetime_string (current_value 1)
										parameter_name "series_stop_maps"
									))
								)
								;individual stop map: (assoc max __ min __)
								(current_value)
							)
						)
					)
					;each series_stop_map
					(current_value)
				)
			)
			;will iterate over nulls if they are unspecified
			(if series_stop_map (list series_stop_map) series_stop_maps)
		)
		(if invalid_value_message
			(conclude (conclude
				(call !Return (assoc errors (list invalid_value_message) ))
			))
		)
	)

	;helper method that converts a datetime string to epoch and back to datetime in an
	; attempt to verify that the value matches the date_time_format specified in the feature attributes.
	; If the value is invalid, invalid_value_found will be assigned an error message as a string
	; assumes the following parameters are available on the stack:
	; - epoch_value
	; - datetime_value
	; - invalid_value_message
	;
	;parameters:
	; datetime_feature: the name of the feature being checked
	; datetime_string: the string datetime value whose format is being verified
	; parameter_name: the name of the parameter whose value is being checked, used in the error message
	#!CheckDateTimeFormat
	(seq
		(assign (assoc
			epoch_value
				(format
					datetime_string
					(get !featureDateTimeMap (list datetime_feature "date_time_format"))
					"number"
					(assoc "locale" (get !featureDateTimeMap (list datetime_feature "locale")))
					(null)
				)
		))

		(assign (assoc
			datetime_value
				(format
					epoch_value
					"number"
					(get !featureDateTimeMap (list datetime_feature "date_time_format"))
					(null)
					(assoc "locale" (get !featureDateTimeMap (list datetime_feature "locale")))
				)
		))

		(if (!= datetime_value datetime_string)
			(assign (assoc invalid_value_message (concat "Incorrect datetime format used in " parameter_name ".") ))
		)
	)

	;helper method that builds a map of label name to map of parameter name to type specification.
	;assigns the resulting map to #!parameterValidationMap, which is used in #!ValidateParameters
	;this should *only* be called within #initialize[_for_deployment]
	;no parameters
	#!BuildParameterValidationMap
	(let
		(assoc invalid_type_hints (list))
		(declare (assoc
			param_validation_map
				(map
					(lambda
						;when debugging, comments are injected to all lines, these must be removed
						;some parameters may have comments other than the type hint as well
						(map
							;(current_value) is a tuple of [comments of parameter, default value]
							(lambda
								(let
									(assoc
										parameter_comment (first (current_value 1))
										default_value (last (current_value 1))
										parameter_name (current_index 1)
										method_name (current_index 2)

										typing_map (null)
									)

									;uncomment this line if looking for which type annotation has mismatching symbols
									; (print method_name "-" parameter_name "\n")

									(assign (assoc
										typing_map
											;regex to just capture the {} information, debugger adds more and there can be other comments on the parameters
											(parse (substr parameter_comment "\\{.+\\}"))
									))

									;uses typing_map, method_name, and parameter_name. accums to invalid_type_hints
									#!CheckTypingMap
									(seq
										(if (= (null) typing_map)
											(accum (assoc invalid_type_hints (list (concat method_name "/" parameter_name))))
										)

										(if
											(size (call !SingleTypeCheck (assoc
												given_value typing_map
												specification {ref "TypeSchema"}
											)))
											(accum (assoc invalid_type_hints (list (concat method_name "/" parameter_name))))
										)

										(rewrite
											(lambda
												(if (or
														(and
															;if a string value that should be a type, ensure it is a valid type
															(~ "" (current_value))
															(or
																(contains_value ["type" "values" "additional_indices" "dynamic_indices"] (current_index))
																(and
																	(= "indices" (current_index 1))
																	;double indices problem when indices => "indices" for TypeSchema schema
																	(!= "indices" (current_index 2))
																)
															)
															(not (contains_value ["boolean" "number" "string" "list" "assoc" "null" "any"] (current_value) ))
														)
														(and
															;if a string value reference, ensure that reference is in the !customTypes
															(~ "" (current_value))
															(= "ref" (current_index))
															(not (contains_index !customTypes (current_value)))
														)
														(and
															;if an assoc (that's not the value of "indices"), it must have a type, ref, or any_of
															(~ (assoc) (current_value))
															(not (contains_value ["indices" "dynamic_indices"] (current_index)))
															(and
																(not (contains_index (current_value) "type"))
																(not (contains_index (current_value) "ref"))
																(not (contains_index (current_value) "any_of"))
															)
														)
														(and
															;type must be a string or list of strings
															(!= (current_index 1) "indices")
															(= (current_index) "type")
															(!~ (current_value) "")
															(!~ (current_value) [])
														)
													)
													(accum (assoc invalid_type_hints (list (concat method_name "/" parameter_name))))
												)
											)
											typing_map
										)
									)

									;return the typing map with default/optional added
									(append
										typing_map
										(assoc
											default default_value
										)
									)
								)
							)
							;first item is the assoc of parameter names to comments/default value
							(first (get_entity_comments (null) (current_index) (true)))
						)
					)
					(get_entity_comments (null) (null) (true))
				)
		))

		;also need to check the CustomTypes schemas
		(map
			(lambda
				(call !CheckTypingMap (assoc
					typing_map (call (current_value 1))
					method_name "CustomTypes"
					parameter_name (current_index 1)
				))
			)
			!customTypes
		)

		(if (size invalid_type_hints)
			;return list of invalid type hints
			invalid_type_hints

			(assign_to_entities (assoc !parameterValidationMap param_validation_map ))
		)
	)

	;Method that uses #!parameterValidationMap to get the appropriate typing specification for each parameter of the called label
	;and uses this specification to validate the parameter values given as defaults or by the user.
	;no parameters, but inspects the parameters passed along the label this method was called from.
	#!ValidateParameters
	(declare
		(assoc
			;this automatically determines the label/method that this method is being called within
			label_name (first (get_labels (opcode_stack 6 (true))))
			;the args passed to the method above
			given_parameters (args 1)
		)

		(declare (assoc
			undefined_parameters (indices (remove given_parameters (indices (get !parameterValidationMap label_name))))
		))

		(if (size undefined_parameters)
			(conclude (conclude
				(call !Return (assoc
					error_code "invalid"
					errors
						(list (concat
							"The following given parameters are not supported for \"" label_name "\": "
							(apply
								"concat"
								(trunc (weave
									(map
										(lambda (concat "\"" (current_value) "\""))
										undefined_parameters
									)
									", "
								))
							)
							"."
						))
				))
			))
		)

		(declare (assoc
			parameter_validity_map
				(map
					(lambda
						(let
							(assoc
								parameter_name (current_index 1)
								specification (current_value 1)
								exp_type (get (current_value 1) "type")
								given_value (get (args 1) (current_index 1))
							)

							;requires exp_type, specification, given_value
							#!SingleTypeCheck
							(seq
								(if (contains_index specification "ref")
									(seq
										;gotta do these in order so specification doesn't get written after exp_type
										(assign (assoc
											specification (call (get !customTypes (get specification "ref")))
										))
										(assign (assoc
											exp_type (get specification "type")
										))
									)
								)

								(if (= (null) given_value)
									(if (and
											(get specification "required")
											(not (contains_value exp_type "null"))
										)
										[{ message "This field is required."}]
										[]
									)

									;any_of logic
									(contains_index specification "any_of")
									(if (apply "or"
											(map
												(lambda
													(= (size
														(call !SingleTypeCheck (append
															{given_value given_value}
															(if (~ (assoc) (current_value))
																(assoc
																	specification (current_value 1)
																	exp_type (get (current_value 1) "type")
																)

																;otherwise, it should just be a string
																(assoc
																	specification (assoc)
																	exp_type (current_value 1)
																)
															)
														))
													) 0)
												)
												(get specification "any_of")
											)
										)
										[]

										[{ message "The value does not match any of the valid types."}]
									)

									;else start checking exp_type
									(if (~ exp_type (list))
										;list of possible types logic
										(if (apply "or"
												(map
													(lambda
														;size of 0 indicates a passed type check
														(= (size
															(call !SingleTypeCheck (assoc
																given_value given_value
																exp_type (current_value 1)
															))
														) 0)
													)
													exp_type
												)
											)
											[]

											[{
												message
													(concat
														"The value is not any of the following types: "
														(apply
															"concat"
															(trunc (weave
																exp_type
																", "
															))
														)
													)
											}]
										)

										(= exp_type "null")
										(if (!~ (null) given_value)
											[{ message "The value must be null."}]

											[]
										)

										(= exp_type "number")
										(if (!~ 0 given_value)
											[{ message "The value must be a number."}]

											(and
												(contains_index specification "max")
												(> given_value (get specification "max"))
											)
											[{ message (concat "The value must less than or equal to " (get specification "max") ".")}]

											(and
												(contains_index specification "min")
												(< given_value (get specification "min"))
											)
											[{ message (concat "The value must greater than or equal to " (get specification "min") ".")}]

											(and
												(contains_index specification "exclusive_max")
												(>= given_value (get specification "exclusive_max"))
											)
											[{ message (concat "The value must less than " (get specification "exclusive_max") ".")}]

											(and
												(contains_index specification "exclusive_min")
												(<= given_value (get specification "exclusive_min"))
											)
											[{ message (concat "The value must greater than " (get specification "exclusive_min") ".")}]

											[]
										)

										(= exp_type "string")
										(if (!~ "" given_value)
											[{ message "The value must be a string."}]

											(and
												(contains_index specification "min_length")
												;returns (null) if pattern is not matched
												(< (size given_value) (get specification "min_length"))
											)
											[{ message (concat "The value's length must be at least: " (get specification "min_length") " characters.")}]

											(and
												(contains_index specification "max_length")
												;returns (null) if pattern is not matched
												(> (size given_value) (get specification "max_length"))
											)
											[{ message (concat "The value's length must no greater than: " (get specification "max_length") " characters.")}]

											(and
												(contains_index specification "pattern")
												;returns (null) if pattern is not matched
												(= (null) (substr given_value (get specification "pattern")))
											)
											[{
												message
													(concat
														"The value does not match the specified pattern: "
														"\""(get specification "pattern") "\"."
													)
											}]

											(and
												(contains_index specification "enum")
												(not (contains_value (get specification "enum") given_value))
											)
											[{
												message
													(concat
														"The value: " given_value ", is not one of "
														(apply
															"concat"
															(trunc (weave
																(get specification "enum")
																", "
															))
														)
														"."
													)
											}]

											[]
										)

										(= exp_type "boolean")
										(if (contains_value (list (true) (false)) given_value)
											[]
											[{ message "The value must be a boolean value." }]
										)


										(= exp_type "list")
										(if (!~ (list) given_value)
											[{ message "The value must be a list."}]

											(and
												(contains_index specification "max_size")
												(> (size given_value) (get specification "max_size"))
											)
											[{ message (concat "The value must be no more than size: " (get specification "max_size") ".")}]

											(and
												(contains_index specification "min_size")
												(< (size given_value) (get specification "min_size"))
											)
											[{ message (concat "The value must be of at least size: " (get specification "min_size") ".")}]

											;else must start checking individual values
											(if (and (contains_index specification "values") (size given_value))
												;each type of the list must match the type defined by values
												(filter
													;passing values will return an empty list or assoc, filter those out
													(lambda (size (current_value)))
													(map
														(lambda
															(call !SingleTypeCheck (append
																(assoc given_value (current_value 1))
																(if (~ (assoc) (get specification "values"))
																	(assoc
																		specification (get specification "values")
																		exp_type (get specification (list "values" "type"))
																	)

																	;otherwise, "values" should just be a string
																	(assoc
																		specification (assoc)
																		exp_type (get specification "values")
																	)
																)
															))
														)
														(zip (indices given_value) given_value)
													)
												)

												[]
											)
										)

										(= exp_type "assoc")
										(if (!~ (assoc) given_value)
											[{ message "The value must be a mapping."}]

											(and
												(contains_index specification "max_indices")
												(> (size given_value) (get specification "max_indices"))
											)
											[{ message (concat "The value must contain no more than " (get specification "max_indices") " indices.")}]

											(and
												(contains_index specification "min_indices")
												(< (size given_value) (get specification "min_indices"))
											)
											[{ message (concat "The value must contain at least " (get specification "min_indices") " indices.")}]

											;if indices and no additional_indices, there should be no other indices
											(and
												(size given_value)
												(= (false) (get specification "additional_indices"))
												(!=
													0
													(size (remove given_value (indices (get specification "indices"))))
												)
											)
											[{
												message
													(concat
														"The following indices are not accepted within the given value: "
														(apply "concat" (trunc (weave
															(map
																(lambda (concat "\"" (current_value) "\""))
																(indices (remove given_value (indices (get specification "indices"))))
															)
															", "
														)))
														"."
													)
											}]

											;else must start checking indices and return a map
											(filter
												;scrap any empty lists/assocs
												(lambda (size (current_value)))
												(append
													(if (contains_index specification "indices")
														(map
															(lambda
																(if (contains_index given_value (current_index))
																	(call !SingleTypeCheck (append
																		(assoc given_value (get given_value (current_index 1)))
																		(if (~ (assoc) (current_value))
																			(assoc
																				specification (current_value 1)
																				exp_type (get (current_value 1) "type")
																			)

																			;otherwise, "values" should just be a string
																			(assoc
																				specification (assoc)
																				exp_type (current_value 1)
																			)
																		)
																	))

																	;if the index is not present but it is required, then return false
																	(and
																		(~ (assoc) (current_value))
																		(get (current_value) "required")
																	)
																	[{ message "This field is required."}]

																	[]
																)
															)
															(get specification "indices")
														)
														{}
													)
													(if (and
															;if there is typing info for additional_indices, and there actually are additional indices
															(contains_index specification "additional_indices")
															(!= (false) (get specification "additional_indices"))
															(size (remove given_value (indices (get specification "indices"))))
														)
														(map
															(lambda
																;check the additional indices
																(call !SingleTypeCheck (append
																	(assoc given_value (get given_value (current_index 1)))
																	(if (~ (assoc) (get specification "additional_indices"))
																		(assoc
																			specification (get specification "additional_indices")
																			exp_type (get (get specification "additional_indices") "type")
																		)

																		;otherwise, "values" should just be a string (or list of string)
																		(assoc
																			specification (assoc)
																			exp_type (get specification "additional_indices")
																		)
																	)
																))
															)
															(remove given_value (indices (get specification "indices")))
														)
														{}
													)
												)
											)
										)

										(= exp_type "any")
										[]
									)
								)
							)
						)
					)
					(get !parameterValidationMap label_name)
				)
		))

		(declare (assoc
			invalid_params (indices (filter (lambda (size (current_value))) parameter_validity_map))
		))

		(if (size invalid_params)
			(conclude
				(call !Return (assoc
					errors
						(list (concat
							"The following parameters contain invalid values: "
							(apply
								"concat"
								(trunc (weave
									(map
										(lambda (concat "\"" (current_value) "\""))
										invalid_params
									)
									", "
								))
							)
							"."
						))
					error_details (keep parameter_validity_map invalid_params)
					error_code "invalid"
				))
			)
		)
	)
)