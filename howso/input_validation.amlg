;Contains helper methods for validating user-defined parameters
(null

	;helper method to validate specified batch react parameters are either length of num_reacts or 1
	; if the aren't, sets the variable invalid_react_parameters to (true)
	#!ValidateBatchReactParameter
	(if (and
			(> (size param) 0)
			(!= 1 (size param))
			(!= num_reacts (size param))
		)
		(assign (assoc invalid_react_parameters (true)))
	)

	#!ValidateFeatures
	(let
		(assoc
			errors
				(call !CheckForUntrainedFeatures (assoc
					context_features context_features
					action_features action_features
					action_feature action_feature
				))
		)
		(if (size errors)
			(conclude (call !Return (assoc errors errors)) )
		)
	)


	;Verifies that feature parameters do not contain untrained features
	; this method checks context_features, action_features, and action feature
	; returns a list of strings, one for each invalid parameter
	#!CheckForUntrainedFeatures
	(declare
		(assoc
			errors (list)
			context_features (list)
			action_features (list)
			action_feature (null)

			;not parameters
			valid_features (append !trainedFeatures !reactIntoFeaturesList)
			invalid_feature_set (assoc)
		)

		(if
			(size
				(remove
					(zip (append context_features action_features action_feature))
					valid_features
				)
			)
			;if there is an untrained feature in the any specified features, check each parameter
			;to give the correct error
			(seq
				(if (size context_features)
					(seq
						(assign (assoc invalid_feature_set (remove (zip context_features) valid_features) ))
						(if (size invalid_feature_set)
							(accum (assoc
								errors
									(concat
										"context_features contains features that are neither trained nor "
										"defined in the feature attributes: "
										(apply "concat" (trunc (weave (indices invalid_feature_set) ", ")))
									)
							))
						)
					)
				)

				(if (size action_features)
					(seq
						(assign (assoc invalid_feature_set (remove (zip action_features) valid_features) ))
						(if (size invalid_feature_set)
							(accum (assoc
								errors
									(concat
										"action_features contains features that are neither trained nor "
										"defined in the feature attributes: "
										(apply "concat" (trunc (weave (indices invalid_feature_set) ", ")))
									)
							))
						)
					)
				)

				(if (and (!= (null) action_feature) (!= action_feature ".targetless"))
					(if (not (contains_value valid_features action_feature))
						(accum (assoc
							errors
								(concat
									"action_feature is a feature that is neither trained nor "
									"defined in the feature attributes: "
									action_feature
								)
						))
					)
				)
			)
		)

		errors
	)

	;Validates parameter inputs for features that are in datetime format
	;verifies that the datetime format matches what is set in feature attributes
	; this method checks the following parameters:
	; - initial_values
	; - series_stop_map(s)
	; - init_time_steps
	; - final_time_steps
	;
	;parameters:
	; single_series: indicates if the method is called for a single series (from #react_series) or for multiple series (from #batch_react_series)
	#!ValidateDateTimeInputs
	(let
		(assoc
			single_series (false)

			;not parameters
			epoch_value (null)
			datetime_value (null)
			invalid_value_message (false)
		)

		(if initial_features
			(map
				(lambda
					(map
						(lambda
							(if (contains_index !featureDateTimeMap (current_index))
								(call !CheckDateTimeFormat (assoc
									datetime_feature (current_index 1)
									datetime_string (current_value 1)
									parameter_name "initial_values"
								))
							)
						)
						;zip features to each list of values
						(zip initial_features (current_value))
					)
				)
				(if single_series (list initial_values) initial_values)
			)
		)
		(if invalid_value_message
			(conclude (conclude
				(call !Return (assoc errors (list invalid_value_message) ))
			))
		)

		(if init_time_steps
			(call !CheckDateTimeFormat (assoc
				datetime_feature !tsTimeFeature
				datetime_string (first init_time_steps)
				parameter_name "init_time_steps"
			))
		)
		(if invalid_value_message
			(conclude (conclude
				(call !Return (assoc errors (list invalid_value_message) ))
			))
		)

		(if final_time_steps
			(call !CheckDateTimeFormat (assoc
				datetime_feature !tsTimeFeature
				datetime_string (first final_time_steps)
				parameter_name "final_time_steps"
			))
		)
		(if invalid_value_message
			(conclude (conclude
				(call !Return (assoc errors (list invalid_value_message) ))
			))
		)

		(map
			(lambda
				(map
					(lambda
						(if (contains_index !featureDateTimeMap (current_index))
							(map
								(lambda
									(call !CheckDateTimeFormat (assoc
										datetime_feature (current_index 2)
										datetime_string (current_value 1)
										parameter_name "series_stop_maps"
									))
								)
								;individual stop map: (assoc max __ min __)
								(current_value)
							)
						)
					)
					;each series_stop_map
					(current_value)
				)
			)
			;will iterate over nulls if they are unspecified
			(if series_stop_map (list series_stop_map) series_stop_maps)
		)
		(if invalid_value_message
			(conclude (conclude
				(call !Return (assoc errors (list invalid_value_message) ))
			))
		)
	)

	;helper method that converts a datetime string to epoch and back to datetime in an
	; attempt to verify that the value matches the date_time_format specified in the feature attributes.
	; If the value is invalid, invalid_value_found will be assigned an error message as a string
	; assumes the following parameters are available on the stack:
	; - epoch_value
	; - datetime_value
	; - invalid_value_message
	;
	;parameters:
	; datetime_feature: the name of the feature being checked
	; datetime_string: the string datetime value whose format is being verified
	; parameter_name: the name of the parameter whose value is being checked, used in the error message
	#!CheckDateTimeFormat
	(seq
		(assign (assoc
			epoch_value
				(format
					datetime_string
					(get !featureDateTimeMap (list datetime_feature "date_time_format"))
					"number"
					(assoc "locale" (get !featureDateTimeMap (list datetime_feature "locale")))
					(null)
				)
		))

		(assign (assoc
			datetime_value
				(format
					epoch_value
					"number"
					(get !featureDateTimeMap (list datetime_feature "date_time_format"))
					(null)
					(assoc "locale" (get !featureDateTimeMap (list datetime_feature "locale")))
				)
		))

		(if (!= datetime_value datetime_string)
			(assign (assoc invalid_value_message (concat "Incorrect datetime format used in " parameter_name ".") ))
		)
	)
)