;Contains methods for computing, storing into the trainee, and returning residuals, prediction_stats, feature_mda, and feature_contributions.
(null
    ;Computes, caches, and returns specified details and feature prediction statistics such as Mean Decrease in Accuracy (MDA), residuals (accuracy, Mean Absolute Error),
    ; precision, recall, etc. Returns details and feature prediction stats for all features in the format of feature -> assoc stat -> value
	;{long_running (true) statistically_idempotent (true)}
	#react_aggregate
	(declare
		;returns {ref "ReactAggregateResponse"}
		(assoc
			;{type "list" values "string"}
			;list of features to use as contexts for computations. default is all features if unspecified.
			context_features (list)
			;{type "list" values "string"}
			;list of features to do residuals and prediction stats computations for. default is the value of context_features
			action_features (list)
			;{ref "UseCaseWeights"}
			;flag, if set to true will scale influence weights by each case's weight_feature weight. If unspecified,
			;	case weights will be used if the trainee has them.
			use_case_weights (null)
			;{type "string"}
			;name of feature whose values to use as case weights
			;	"generate_attempts" true or false. If true, outputs the total number of attempts to generate the unique case. Only applicable for generative
		    ;	reacts where generate_new_cases is "always" or "attempt". When used with ReactSeries, "series_generate_attempts" is also returned.
			weight_feature ".case_weight"
			;{type "number" min 0}
			;Total sample size of model to use (using sampling with replacement) for all non-robust computation.
    		;	Defaults to 1000. If specified overrides sample_model_fraction.
			num_samples (null)
			;{type "number" min 0 max 1}
			;value 0.0 - 1.0, percent of model to use in sampling (using sampling without replacement).
    		;	Applicable only to non-robust computation. Ignored if num_samples is specified.
			sample_model_fraction (null)
			;{type "list" values "string"}
			;full path for hyperparameters to use for computation.
    		;	If specified for any residual computations, takes precendence over action_feature parameter.
			hyperparameter_param_path (null)
			;{type "number" min 0}
			;if specified will calculate only on a sub model of the specified size from the full model.
    		;	Applicable only to models > 1000 cases.
			sub_model_size (null)
			;{type "string"}
			;target feature for which to do computations. If "prediction_stats_action_feature" and "feature_influences_action_feature"
			;	are not provided, they will default to this value.
			action_feature (null)
			;{type "string"}
			;When calculating residuals and prediction stats, uses this target features's hyperparameters. The trainee must have been analyzed
			;   with this feature as the action feature first. If both "prediction_stats_action_feature" and "action_feature" are not provided,
			;	or "action_feature" is provided and this value is an empty string "", residuals and prediction stats uses "targetless" hyperparameters.
			;	If this value is not specified but "action_feature" is provided, this value will default to the value of "action_feature".
			prediction_stats_action_feature (null)
			;{type "string"}
			;When feature influences such as contributions and mda, use this feature as the action feature.
			;	If not provided, will default to the "action_feature" if provided.
			feature_influences_action_feature (null)
			;{type "boolean"}
			;flag, optional. if specified, will attempt to return stats that were computed using hyperpparameters with the
    		;	specified robust or non-robust type.
			robust_hyperparameters (null)
			;{type "number" min 0}
			;Total sample size of model to use (using sampling with replacement) for robust feature_mda and residual computation.
		    ;	Defaults to 1000 * (1 + log(number of features)).  Note: robust feature_mda will be updated to use num_robust_influence_samples in a future release.
			num_robust_residual_samples (null)
			;{type "number" min 0}
			;Total sample size of model to use (using sampling with replacement) for robust contribution computation.
    		;	Defaults to 300.
			num_robust_influence_samples (null)
			;{type "number" min 0}
			;Specifies the number of robust samples to use for each case for robust contribution computations.
    		;	Defaults to 300 + 2 * (number of features).
			num_robust_influence_samples_per_case (null)
			;{type "number"}
			;number, optional, default is 15. Applicable only to confusion matrices when computing residuals, the number of predictions
			;	a class should have (value of a cell in the matrix) for it to remain in the confusion matrix. If the count is less than this value, it will
			;	be accumulated into a single value of all insignificant predictions for the class and removed from the confusion matrix.
			confusion_matrix_min_count 15
			;{type "boolean"}
			;flag, if true then features being predicted will use their derivation logic if possible
			use_derivation_logic (true)
			;{ref "ReactAggregateDetails"}
			;assoc, optional. an assoc of flags for which type of audit data to return, and corresponding values to return (if applicable) in the format of:
			;   (assoc
			;		prediction_stats: optional true/false. If true outputs full feature prediction stats for all (context and action)
			;				features. The prediction stats returned are set by the "selected_prediction_stats" parameter. Uses full calculations, which
			;				uses leave-one-out for features for computations. Uses full computation.
			;		feature_residuals_full: optional, none/true/false. For each context_feature, use the full set of all other context_features to
			;               predict the feature.  When true, computes, caches, and returns the residuals for all features. Uses full computation.
			;               When "prediction_stats" in the "details" parameter is true, it will also compute and cache the feature residuals.
			;		feature_residuals_robust: optional, none/true/false. For each context_feature, computes, caches, and returns the same stats as residuals but using the robust
			;               (power set/permutations) set of all other context_features to predict the feature. Uses robust computation.
			;		feature_contributions_full: optional, none/true/false. For each context_feature, use the full set of all other context_features to compute the
			;				mean absolute delta between prediction of action_feature with and without the context_feature in the model. Uses full computation.
			;		feature_contributions_robust: optional, none/true/false. For each context_feature, use the robust (power set/permutation) set of all other context_features
			;				to compute the mean absolute delta between prediction of action_feature with and without the context_feature in the model. Uses robust computation.
			;				Uses robust computation.
			;		feature_deviations: optional, none/true/false. if true will compute feature deviations for each feature in action_features. The feature deviation is the mean absolute
			;				error of predicting the feature using all the context features as well as value of the feature being predicted as the context for each prediction.
			;		feature_mda_full: optional, none/true/false. if true will compute Mean Decrease in Accuracy (feature_mda) for each context feature at predicting mda_action_features.
			;				Drop each feature and use the full set of remaining context features for each prediction. Uses full computation.
			;		feature_mda_permutation_full: optional, none/true/false. Compute feature_mda_full by scrambling each feature and using the full set of remaining context features
			;				for each prediction.  Uses full computation.
			;		feature_mda_robust: optional, none/true/false. Compute feature_mda by dropping each feature and using the robust (power set/permutations) set of
			;				remaining context features for each prediction. Uses robust computation.
			;		feature_mda_permutation_robust: optional, none/true/false. Compute feature_mda by scrambling each feature and using the robust (power set/permutations)
			;				set of remaining context features for each prediction.  Uses robust computation.
			;		selected_prediction_stats": list of strings, optional.  Allowed values are:
			;						"mae" : Mean absolute error. For continuous features, this is calculated as the mean of absolute values of the difference
			;							between the actual and predicted values. For nominal features, this is 1 - the average categorical action probability of each case's
			;							correct classes. Categorical action probabilities are the probabilities for each class for the action feature.
			;						"r2": r-squared coefficient of determination, for continuous features only.
			;						"rmse": root mean squared error, for continuous features only.
			;						"smape": Symmetric mean absolute percentage error, for continuous features only.
			;						"adjusted_smape": Symmetric mean absolute percentage error, for continuous features only. Adds the min gap / 2 to the actual and
			; 							predicted values.
			;						"spearman_coeff": Spearman's rank correlation coefficient, for continuous features only.
			;						"precision": precision (positive predictive) value for nominal features only. Aggregated by taking the unweighted means of each classes' precisions.
			;						"recall": recall (sensitivity) value for nominal features only. Aggregated by taking the unweighted means of each classes' recalls.
			;						"accuracy": The number of correct predictions divided by the total number of predictions.
			;						"confusion_matrix": A matrix showing the number of predicted values of each class
			;							for each unique value of the predicted feature. Outputs the sparse confusion matrix.
			;						"missing_value_accuracy" : The number of correct predictions on cases with missing values values divided by the total number of cases with missing
			;							values for a specified feature.
			;						"all": All of the available prediction stats including the confusion_matrix
			;				If empty, will return all of the available prediction stats not including the confusion matrices.
			;		action_condition: assoc of feature->value(s), optional. If specified, will condition the action set, which is the collection of cases that metrics will be computed upon.
			;			no value = must have feature
			;			- for continuous or numeric ordinal features:
			;				one value = must equal exactly the value or be close to it for fuzzy match
			;				two values = inclusive between
			;			- for nominal or string ordinal features:
			;				n values = must match any of these values exactly
			;		action_condition_precision: optional string,  default is 'exact', used only with 'action_condition' parameter, will find exact matches if 'exact' and similar cases if 'similar'.
			;		action_num_samples: optional, limit on the number of action cases used in calculating conditional prediction stats. Works with or without 'action_condition_filter_query'.
			;			If 'action_condition' is set:
			;				If null, will be set to k if precision is "similar" or no limit if precision is "exact". default is null
			;			If 'action_condition' is not set:
			;				If null, will be set to the Howso default limit of 2000. default is null
			;		context_condition: assoc of feature->value(s), optional. If specified, will condition the context set, which is the collection of cases available in queries made to compute metrics.
			;			no value = must have feature
			;			- for continuous or numeric ordinal features:
			;				one value = must equal exactly the value or be close to it for fuzzy match
			;				two values = inclusive between
			;			- for nominal or string ordinal features:
			;				n values = must match any of these values exactly
			;		context_condition_precision: optional string, default is 'exact'. Used only with 'context_condition' parameter, will find exact matches if 'exact' and similar cases if 'similar'.
			;		context_num_samples: optional, limit on the number of context cases when 'context_condition_precision' is set to 'similar'.
			;			If null, will be set to k. default is null
			;	)
			details (null)
		)

		(call !ValidateParameters)

		(declare (assoc
			invalid_parameters (false)
			output (assoc)
			num_training_cases (call !GetNumTrainingCases)
			holdout_entity_name (null)
			warnings (assoc)
		))

		(if hyperparameter_param_path
			(let
				(assoc hp_map (get (retrieve_from_entity "!hyperparameterMetadataMap") hyperparameter_param_path) )
				(if (= (null) hp_map)
					(assign (assoc invalid_parameters (true) ))
				)
			)
		)
		(if invalid_parameters
			(conclude
				(call !Return (assoc errors (list "Invalid hyperparameter param path provided. Please call 'get_params' for list of available param paths.")))
			)
		)

        ;if there is an action_feature, default the other types of action features if they are null
		(if action_feature
        	(seq
				(if (= (null) feature_influences_action_feature)
					(assign (assoc feature_influences_action_feature action_feature))
				)
				(if (= (null) prediction_stats_action_feature)
					(assign (assoc prediction_stats_action_feature action_feature))
				)
			)
        )

		;use "targetless" hyperparameters by setting prediction_stats_action_feature to null
		(if (= "" prediction_stats_action_feature)
			(assign (assoc prediction_stats_action_feature (null) ))
		)

		;action_feature must be specified if doing any influences
		(if (and
				(= (null) feature_influences_action_feature)
				(contains_value
					(unzip
						details
						[
							"feature_contributions_full"
							"feature_contributions_robust"
							"feature_mda_full"
							"feature_mda_robust"
							"feature_mda_permutation_full"
							"feature_mda_permutation_robust"
						]
					)
					(true)
				)
			)
			(conclude
				(call !Return (assoc errors (list "action_feature must be specified when computing feature_mda_permutation, feature_mda, or feature_contributions.")))
			)
		)

		;sample_model_fraction is ignored for any robust computation
		(if
			(or
				(get details "feature_contributions_robust")
				(get details "feature_residuals_robust")
				(get details "feature_mda_robust")
				(get details "feature_mda_permutation_robust")
			)
			(assign (assoc sample_model_fraction (null)))
		)

		;update case weight related parameters based on use_case_weights
		(if use_case_weights
			(assign (assoc
				valid_weight_feature (or !hasPopulatedCaseWeight (!= weight_feature ".case_weight"))
			))

			(= (false) use_case_weights)
			(assign (assoc weight_feature ".none" ))

			;set up case weight parameters appropriately since unspecified
			(let
				(assoc
					analyzed_weight_features
						(filter
							(lambda (!= (current_value) ".none"))
							(map
								(lambda (last (current_value)))
								!hyperparameterParamPaths
							)
						)
				)

				(assign (assoc
					use_case_weights (or !hasPopulatedCaseWeight (size analyzed_weight_features))
					weight_feature
						(if (and !hasPopulatedCaseWeight (contains_value analyzed_weight_features ".case_weight"))
							".case_weight"

							;use first weight feature,
							(size analyzed_weight_features)
							(first analyzed_weight_features)

							;else use none
							".none"
						)
				))

				(assign (assoc valid_weight_feature (and use_case_weights (!= ".none" weight_feature)) ))
			)
		)


		;provide detailed warning if model hasn't been analyzed for the specified action_feature
		(if (!= (null) feature_influences_action_feature)
			(if (or (get details "feature_mda_full") (get details "feature_mda_permutation_full") (get details "feature_contributions_full"))
				(call !ReactAggregateMismatchedParametersWarning (assoc action_feature feature_influences_action_feature))
			)
			(if (or (get details "feature_mda_robust") (get details "feature_mda_permutation_robust") (get details "feature_contributions_robust"))
				(call !ReactAggregateMismatchedParametersWarning (assoc action_feature (null)))
			)
		)

		;provide detailed warning if model hasn't been analyzed for the specified action_feature
		(if (!= (null) prediction_stats_action_feature)
			(if (get details "feature_residuals_full")
				(call !ReactAggregateMismatchedParametersWarning (assoc action_feature prediction_stats_action_feature))
			)
			(if (get details "feature_residuals_robust")
				(call !ReactAggregateMismatchedParametersWarning (assoc action_feature (null)))
			)
		)


		;if a sub_model_size has been specified and the model is non-trivial size
		;hold out random cases that the model that remains is sub_model_size
		(if (and (> sub_model_size 0) (> num_training_cases 1000))
			;if the sub_model is larger than the full model, don't holdout anything
			(if (> sub_model_size num_training_cases)
				(assign (assoc sub_model_size (null) ))

				;else holdout cases so that only sub_model_size remain
				(assign (assoc
					holdout_entity_name
						(call !HoldOutRandomCases (assoc
							num_samples (- num_training_cases sub_model_size)
						))
				))
			)
		)

		(if (= 0 (size context_features))
			(assign (assoc context_features !trainedFeatures ))
		)

		(if (= 0 (size action_features))
			(assign (assoc action_features context_features ))
		)

		(declare (assoc
			;set the custom hp map if specified a hyperparameter_param_path
			custom_hyperparam_map
				(if hyperparameter_param_path
					(get !hyperparameterMetadataMap hyperparameter_param_path)
				)
			;initialize conditional queries
			action_condition_filter_query
				(if (get details "action_condition")
					(call !GetQueryByCondition (assoc
						condition (get details "action_condition")
						precision (or (get details "action_condition_precision") "exact")
						num_cases (get details "action_num_samples")
					))
					(list)
				)
			context_condition_filter_query
				(if (get details "context_condition")
					(call !GetQueryByCondition (assoc
						condition (get details "context_condition")
						precision (or (get details "context_condition_precision") "exact")
						num_cases (get details "context_num_samples")
					))
					(list)
				)
		))

		;if num_samples was explicitly specified, use that many, even if it means
		;it should super-sample the model to match the exact number of samples specified
		;and by default sample 1000 out of the full model if num_samples wasn't specified
		(declare (assoc
			case_ids
				(if num_samples
					(call !SampleCases (assoc
						num num_samples
						case_weight_feature (if valid_weight_feature weight_feature)
						query_conditions action_condition_filter_query
					))

					(> sample_model_fraction 0)
					(call !AllCases (assoc
						num (* sample_model_fraction num_training_cases)
						query_conditions action_condition_filter_query
						rand_seed (rand)
					))

					;otherwise sample 1000 or the whole model
					(if (> num_training_cases 1000)
						;if more than 1000 cases, sample 1000
						(call !SampleCases (assoc
							num 1000
							case_weight_feature (if valid_weight_feature weight_feature)
							query_conditions action_condition_filter_query
						))

						;otherwise just use all the cases
						(call !AllCases (assoc
							query_conditions action_condition_filter_query
							rand_seed (rand)
						))
					)
				)
			robust_residual_case_ids
				(call !SampleCases (assoc
					num
						(if num_robust_residual_samples
							num_robust_residual_samples

							(* 1000 (+ 1 (log (size context_features))))
						)
					case_weight_feature (if valid_weight_feature weight_feature)
					query_conditions action_condition_filter_query
				))
			robust_influence_case_ids
				(call !SampleCases (assoc
					num
						(if num_robust_influence_samples
							num_robust_influence_samples

							;Ideally this would be larger, but performance is of significant concern here.
							300
						)
					case_weight_feature (if valid_weight_feature weight_feature)
					query_conditions action_condition_filter_query
				))
		))


		;calculates and stores the full residuals unless its conditioned prediction stats
		(if (get details "prediction_stats")
			(let
				(assoc
					prediction_stats_map
						(call !CalculateFeatureResiduals (assoc
							features action_features
							context_features context_features
							robust_residuals (false)
							hyperparameter_feature prediction_stats_action_feature
							use_case_weights use_case_weights
							weight_feature weight_feature
							custom_hyperparam_map custom_hyperparam_map
							compute_all_statistics (true)
							confusion_matrix_min_count confusion_matrix_min_count
							context_condition_filter_query context_condition_filter_query
							case_ids case_ids
							strict_case_ids (!= 0 (size action_condition_filter_query))
						))
					selected_prediction_stats
						(call !ProcessSelectedPredictionStats (assoc selected_prediction_stats (or (get details "selected_prediction_stats") [])))
				)
				(accum (assoc
					output
						(append
							(filter
								(lambda (contains_value selected_prediction_stats (current_index)))
								(remove (get prediction_stats_map "prediction_stats") [".robust" ".hyperparam_path"])
							)
							(if (contains_value selected_prediction_stats "mae")
								(assoc "mae" (get prediction_stats_map "residual_map"))
								{}
							)
							(if (contains_value selected_prediction_stats "missing_value_accuracy")
								(assoc "missing_value_accuracy" (get prediction_stats_map "null_accuracy_map"))
								{}
							)
							(if (get details "feature_residuals_full")
								{"feature_residuals_full" (get prediction_stats_map "residual_map")}
								{}
							)
						)
				))
			)

			;this should only run if prediction_stats is not requested, don't want to compute these residuals twice
			(get details "feature_residuals_full")
			(accum (assoc
				output
					(assoc
						"feature_residuals_full"
							(get
								(call !CalculateFeatureResiduals (assoc
									features action_features
									context_features context_features
									case_ids case_ids
									robust_residuals (false)
									hyperparameter_feature prediction_stats_action_feature
									use_case_weights use_case_weights
									weight_feature weight_feature
									custom_hyperparam_map custom_hyperparam_map
									compute_all_statistics (false)
									confusion_matrix_min_count confusion_matrix_min_count
									context_condition_filter_query context_condition_filter_query
									strict_case_ids (!= 0 (size action_condition_filter_query))
								))
								"residual_map"
							)
					)
			))
		)

		(if (get details "feature_residuals_robust")
			(accum (assoc
				output
					(assoc
						"feature_residuals_robust"
							(get
								(call !CalculateFeatureResiduals (assoc
									features action_features
									context_features context_features
									case_ids robust_residual_case_ids
									robust_residuals (true)
									hyperparameter_feature prediction_stats_action_feature
									use_case_weights use_case_weights
									weight_feature weight_feature
									custom_hyperparam_map custom_hyperparam_map
									compute_all_statistics (false)
									confusion_matrix_min_count confusion_matrix_min_count
									context_condition_filter_query context_condition_filter_query
									strict_case_ids (!= 0 (size action_condition_filter_query))
								))
								"residual_map"
							)
					)
			))
		)

		(if (get details "feature_deviations")
			(accum (assoc
				output
					(assoc
						"feature_deviations"
							(get
								(call !CalculateFeatureResiduals (assoc
									features action_features
									context_features context_features
									case_ids case_ids
									robust_residuals "deviations"
									custom_hyperparam_map custom_hyperparam_map
									compute_all_statistics (false)
									confusion_matrix_min_count confusion_matrix_min_count
									context_condition_filter_query context_condition_filter_query
									weight_feature (if valid_weight_feature weight_feature (null))
									valid_weight_feature valid_weight_feature
									strict_case_ids (!= 0 (size action_condition_filter_query))
								))
								"residual_map"
							)
					)
			))
		)

		;doing feature_contributions
		(if (or
				(get details "feature_contributions_full")
				(get details "feature_contributions_robust")
			)
			(let
				(assoc
					;make sure context_features doesnt have the specified action feature by filtering it out
					context_features (filter (lambda (!= feature_influences_action_feature (current_value))) context_features)
				)

				(if (get details "feature_contributions_full")
					(accum (assoc
						output
							(call !CalculateFeatureContributions (assoc
								context_features context_features
								action_feature feature_influences_action_feature
								robust (false)
								case_ids case_ids
								weight_feature weight_feature
								custom_hyperparam_map custom_hyperparam_map
								context_condition_filter_query context_condition_filter_query
								num_samples num_samples
								use_derivation_logic use_derivation_logic
							))
					))
				)

				(if (get details "feature_contributions_robust")
					(accum (assoc
						output
							(call !CalculateFeatureContributions (assoc
								context_features context_features
								action_feature feature_influences_action_feature
								robust (true)
								case_ids robust_influence_case_ids
								weight_feature weight_feature
								custom_hyperparam_map custom_hyperparam_map
								num_robust_influence_samples num_robust_influence_samples
								num_robust_influence_samples_per_case num_robust_influence_samples_per_case
								context_condition_filter_query context_condition_filter_query
								use_derivation_logic use_derivation_logic
							))
					))
				)
			)
		)

		;doing feature_mda
		(if (or
				(get details "feature_mda_full")
				(get details "feature_mda_robust")
				(get details "feature_mda_permutation_full")
				(get details "feature_mda_permutation_robust")
			)
			(let
				(assoc
					;make sure context_features doesnt have the specified action feature by filtering it out
					context_features (filter (lambda (!= feature_influences_action_feature (current_value))) context_features)
				)

				(if (get details "feature_mda_full")
					(accum (assoc
						output
							(assoc
								"feature_mda_full"
									(call !DecreaseInAccuracy (assoc
										context_features context_features
										action_features [feature_influences_action_feature]
										sensitivity_to_randomization (false)
										robust (false)
										case_ids case_ids
										use_case_weights use_case_weights
										weight_feature weight_feature
										hyperparam_map custom_hyperparam_map
										context_condition_filter_query context_condition_filter_query
										use_derivation_logic use_derivation_logic
									))
							)
					))
				)

				(if (get details "feature_mda_robust")
					(accum (assoc
						output
							(assoc
								"feature_mda_robust"
									(call !DecreaseInAccuracy (assoc
										context_features context_features
										action_features [feature_influences_action_feature]
										sensitivity_to_randomization (false)
										robust (true)
										case_ids robust_influence_case_ids
										use_case_weights use_case_weights
										weight_feature weight_feature
										hyperparam_map custom_hyperparam_map
										context_condition_filter_query context_condition_filter_query
										use_derivation_logic use_derivation_logic
									))
							)
					))
				)

				(if	(get details "feature_mda_permutation_full")
					(accum (assoc
						output
							(assoc
								"feature_mda_permutation_full"
									(call !DecreaseInAccuracy (assoc
										context_features context_features
										action_features [feature_influences_action_feature]
										sensitivity_to_randomization (true)
										robust (false)
										case_ids case_ids
										use_case_weights use_case_weights
										weight_feature weight_feature
										hyperparam_map custom_hyperparam_map
										context_condition_filter_query context_condition_filter_query
										use_derivation_logic use_derivation_logic
									))
							)
					))
				)

				(if (get details "feature_mda_permutation_robust")
					(accum (assoc
						output
							(assoc
								"feature_mda_permutation_robust"
									(call !DecreaseInAccuracy (assoc
										context_features context_features
										action_features [feature_influences_action_feature]
										sensitivity_to_randomization (true)
										robust (true)
										case_ids robust_influence_case_ids
										use_case_weights use_case_weights
										weight_feature weight_feature
										hyperparam_map custom_hyperparam_map
										context_condition_filter_query context_condition_filter_query
										use_derivation_logic use_derivation_logic
									))
							)
					))
				)
			)
		)

		(if holdout_entity_name
			(call !RestoreHeldOutCases (assoc holdout_entity_name holdout_entity_name))
		)

        (call !Return (assoc
			payload output
			warnings warnings
		))
	)

	#!ReactAggregateMismatchedParametersWarning
	(let
		(assoc
			expected_hp_map
				(call !GetHyperparameters (assoc
					feature action_feature
					context_features (filter (lambda (!= action_feature (current_value))) context_features)
					weight_feature weight_feature
				))
			param_path (list)
		)
		;hyperparameter path tuple
		(assign (assoc param_path (get expected_hp_map "paramPath") ))

		;if pulled hyperparameters don't match requested, display warning
		(if (or
				(!= weight_feature (last param_path))
				(and
					(= "targetless" (first param_path))
					(!= (null) action_feature)
				)
				(and
					(= "targeted" (first param_path))
					(!= action_feature (get param_path 1))
				)
			)
			(accum (assoc
				warnings
					(associate (concat
						"Results may be inaccurate because trainee has not been analyzed for these parameters.\n"
						"Run 'analyze()' with '" action_feature "' as action_features, "
						(if (= ".none" weight_feature)
							"with use_case_weights=False."
							(concat "with use_case_weights=true, weight_feature='" weight_feature "'.")
						)
					))
			))
		)
	)

	;Helper method for selecting the prediction stats.
	#!ProcessSelectedPredictionStats
	(declare
		(assoc selected_prediction_stats (list))

		(if (= 0 (size selected_prediction_stats))
			;if no prediction stats are selected, return all of the supported stats except the confusion matrix
			(assign (assoc
				selected_prediction_stats
					(filter (lambda (not (contains_value ["confusion_matrix" "all"] (current_value)))) !supportedPredictionStats)
			))
			;else if prediction stats are provided, and they contain all, then all supported stats including the confusion matrix are returned
			(if (contains_value selected_prediction_stats "all")
				(assign (assoc selected_prediction_stats (filter (lambda (!= "all" (current_value))) !supportedPredictionStats) ))
			)
		)

		selected_prediction_stats
	)
)
