;Contains methods for computing and storing residuals, MDA and contributions into the trainee.
(null

	;Compute and cache specified feature prediction statistics such as Mean Decrease in Accuracy (MDA), residuals (accuracy, Mean Absolute Error),
	; precision, recall, etc.
	;
	;parameters:
	; residuals: optional, none/true/false. For each context_feature, use the full set of all other context_features to
	;				 predict the feature.  When true, computes and caches MAE (mean absolute error), R^2, RMSE (root mean squared error), and
	;				Spearman Coefficient for continuous features, MAE, accuracy, precision and recall for nominal features.
	;				false removes cached values.
	; residuals_robust: optional, none/true/false. For each context_feature, computes and caches the same stats as residuals but using the robust
	;				(power set/permutations) set of all other context_features to predict the feature.  false removes cached values.
	;
	; contributions: optional, none/true/false.  For each context_feature, use the full set of all other context_features to compute the
	;				 mean absolute delta between prediction of action_feature with and without the context_feature in the model.  false removes cached values.
	; contributions_robust: optional, none/true/false. For each context_feature, use the robust (power set/permutation) set of all other context_features
	;				 to compute the mean absolute delta between prediction of action_feature with and without the context_feature in the model.
	;				false removes cached values.
	;
	; mda: optional, none/true/false. if true will compute Mean Decrease in Accuracy (MDA) for each context feature at predicting mda_action_features.
	;				Drop each feature and use the full set of remaining context features for each prediction.  false removes cached values.
	; mda_permutation: optional, none/true/false. Compute MDA by scrambling each feature and using the full set of remaining context features
	;				for each prediction.  false removes cached values.
	; mda_robust: optional, none/true/false. Compute MDA by dropping each feature and using the robust (power set/permutations) set of
	;				remaining context features for each prediction.  false removes cached values.
	; mda_robust_permutation: optional, none/true/false. Compute MDA by scrambling  each feature and using the robust (power set/permutations)
	;				set of remaining context features for each prediction.  false removes cached values.
	; action_feature: optional, target feature for which to do computations. Default is whatever the model was analyzed for, i.e.,
	;				  action feature for MDA and contributions, or ".targetless" if analyzed for targetless.
	;				  This parameter is required for any MDA or contributions computation.
	;
	; context_features: optional list of features to use as contexts for computations. default is all features if unspecified.
	; num_samples: optional. Total sample size of model to use (using sampling with replacement) for all non-robust computation.
	;				  Defaults to 1000. If specified overrides sample_model_fraction.
	; num_robust_residual_samples: optional. Total sample size of model to use (using sampling with replacement) for robust mda and residual computation.
	;				  Defaults to 1000 * (1 + log(number of features)).  Note: robust mda will be updated to use num_robust_influence_samples in a future release.
	; num_robust_influence_samples: optional. Total sample size of model to use (using sampling with replacement) for robust contribution computation.
	;				  Defaults to 300.
	; num_robust_influence_samples_per_case: optional, Specifies the number of robust samples to use for each case for robust contribution computations.
	;				  Defaults to 300 + 2 * (number of features).
	; sample_model_fraction : optional, value 0.0 - 1.0, percent of model to use in sampling (using sampling without replacement).
	;				  Applicable only to non-robust computation. Ignored if num_samples is specified.
	; sub_model_size: optional. if specified will calculate only on a sub model of the specified size from the full model.
	;				  Applicable only to models > 1000 cases.
	; hyperparameter_param_path: optional. full path for hyperparameters to use for computation.
	;				  If specified for any residual computations, takes precendence over action_feature parameter.
	; use_case_weights: optional, flag, if set to true will scale influence weights by each case's weight_feature weight
	; weight_feature: optional, default '.case_weight'.  name of feature whose values to use as case weights
	#react_into_trainee
	(declare
		(assoc
			context_features (list)
			use_case_weights (false)
			weight_feature ".case_weight"
			num_samples (null)

			sample_model_fraction (null)
			contributions (null)
			contributions_robust (null)
			residuals (null)
			residuals_robust (null)
			mda (null)
			mda_permutation (null)
			mda_robust (null)
			mda_robust_permutation (null)
			hyperparameter_param_path (null)
			sub_model_size (null)
			action_feature (null)
			num_robust_residual_samples (null)
			num_robust_influence_samples (null)
			num_robust_influence_samples_per_case (null)
		)

		(declare (assoc invalid_parameters (false)))

		(if hyperparameter_param_path
			(let
				(assoc hp_map (get (retrieve_from_entity "!hyperparameterMetadataMap") hyperparameter_param_path) )
				(if (= (null) hp_map)
					(assign (assoc invalid_parameters (true) ))
				)
			)
		)
		(if invalid_parameters
			(conclude
				(call !Return (assoc errors (list "Invalid hyperparameter param path provided. Please call 'get_internal_parameters' for list of available param paths.")))
			)
		)

		(if (and
				(= (null) action_feature)
				(not (= (null) contributions contributions_robust mda mda_permutation mda_robust mda_robust_permutation))
			)
			(conclude
				(call !Return (assoc errors (list "Must specify action_feature when computing feature MDA or contributions.")))
			)
		)

		;sample_model_fraction is ignored for any robust computation
		(if (or contributions_robust residuals_robust mda_robust mda_robust_permutation)
			(assign (assoc sample_model_fraction (null)))
		)

		;if not using case weights, change weight_feature to '.none'
		(if (not use_case_weights)
			(assign (assoc weight_feature ".none"))

			(assign (assoc valid_weight_feature (or !hasPopulatedCaseWeight (!= weight_feature ".case_weight")) ))
		)

		(declare (assoc
			num_training_cases (call !GetNumTrainingCases)
			holdout_entity_name (null)
			warnings (assoc)
		))

		;provide detailed warning if model hasn't been analyzed for the specified action_feature
		(if (!= (null) action_feature)
			(let
				(assoc robust_mode "full")

				(if (or mda mda_permutation contributions residuals)
					#!ReactIntoTraineeMismatchedParametersWarning
					(let
						(assoc
							expected_hp_map
								(call !GetHyperparameters (assoc
									feature action_feature
									context_features (filter (lambda (!= action_feature (current_value))) context_features)
									mode robust_mode
									weight_feature weight_feature
								))
							param_path (list)
						)
						;list of: action_feature robust_mode weight_feature
						(assign (assoc param_path (get expected_hp_map "paramPath") ))

						;if pulled hyperparameters don't match requested, display warning
						(if (or
								(!= action_feature (first param_path))
								(!= weight_feature (last param_path))
							)
							(accum (assoc
								warnings
									(associate (concat
										"Results may be inaccurate because trainee has not been analyzed for these parameters.\n"
										"Run 'analyze()' with '" action_feature "' as action_features, "
										(if (= ".none" weight_feature)
											"with use_case_weights=False."
											(concat "with use_case_weights=true, weight_feature='" weight_feature "'.")
										)
									))
							))
						)
					)
				)

				(if (or mda_robust mda_robust_permutation contributions_robust residuals_robust)
					(call !ReactIntoTraineeMismatchedParametersWarning (assoc robust_mode "robust"))
				)
			)
		)

		;if a sub_model_size has been specified and the model is non-trivial size
		;hold out random cases that the model that remains is sub_model_size
		(if (and (> sub_model_size 0) (> num_training_cases 1000))
			;if the sub_model is larger than the full model, don't holdout anything
			(if (> sub_model_size num_training_cases)
				(assign (assoc sub_model_size (null) ))

				;else holdout cases so that only sub_model_size remain
				(assign (assoc
					holdout_entity_name
						(call !HoldOutRandomCases (assoc
							num_samples (- num_training_cases sub_model_size)
						))
				))
			)
		)

		(if (= 0 (size context_features))
			(assign (assoc
				context_features
					(filter (lambda (not (contains_index !uniqueNominalsSet (current_value))) ) !trainedFeatures)
			))
		)


		;if num_samples was explicitly specified, use that many, even if it means
		;it should super-sample the model to match the exact number of samples specified
		;and by default sample 1000 out of the full model if num_samples wasn't specified
		(declare (assoc
			case_ids
				(if num_samples
					(call !SampleCases (assoc
						num num_samples
						case_weight_feature (if valid_weight_feature weight_feature)
					))

					(> sample_model_fraction 0)
					(call !AllCases (assoc
						num (* sample_model_fraction num_training_cases)
					))

					;else sample with replacement 1000 for all non-robust computations
					(or residuals mda mda_permutation contributions)
					(call !SampleCases (assoc
						num 1000
						case_weight_feature (if valid_weight_feature weight_feature)
					))
				)
			robust_residual_case_ids
				(if num_robust_residual_samples
					(call !SampleCases (assoc
						num num_robust_residual_samples
						case_weight_feature (if valid_weight_feature weight_feature)
					))

					;for robust residual flows, scale the number of cases relative to the log of context_features
					;TODO: remove mda from this logic
					(or robust_residuals mda_robust mda_permutation)
					(call !SampleCases (assoc
						num (* 1000 (+ 1 (log (size context_features))))
						case_weight_feature (if valid_weight_feature weight_feature)
					))
				)
			robust_influence_case_ids
				(if	num_robust_influence_samples
					(call !SampleCases (assoc
						num num_robust_influence_samples
						case_weight_feature (if valid_weight_feature weight_feature)
					))

					;TODO: add mda to this logic
					contributions_robust
					(call !SampleCases (assoc
						num 300
						case_weight_feature (if valid_weight_feature weight_feature)
					))
				)
			mda_map (null)
		))

		;if the hyperparameter action feature hasn't been provided, figure it out dynamically when computing residuals
		(if (or residuals residuals_robust)
			(if (= (null) action_feature)
				(let
					(assoc hp_features (indices !hyperparameterMetadataMap))

					(assign (assoc
						action_feature
							(if hyperparameter_param_path
								(first hyperparameter_param_path)

								;else auto-determine action_feature
								(if (= 1 (size hp_features))
									(first hp_features)

									;if there are exactly two HP sets, one is the default .targetless, thus the other must be a manually
									;analyzed targeted feature, so use that one
									(= 2 (size hp_features))
									(if (= ".targetless" (first hp_features))
										(last hp_features)
										(first hp_features)
									)

									;otherwise default to .targetless
									".targetless"
								)
							)
					))
				)
			)
		)

		;if any of residual sets should be removed
		(if (contains_value (list residuals residuals_robust) (false))
			(let
				(assoc
					residuals_map (retrieve_from_entity "!residualsMap")
					prediction_stats_map (retrieve_from_entity "!featurePredictionStatsMap")
					hyperparam_map (assoc)
				)
				;remove 'full' residuals
				(if (= (false) residuals)
					(seq
						(assign (assoc
							hyperparam_map
								(call !GetHyperparameters (assoc
									feature action_feature
									context_features (filter (lambda (!= action_feature (current_value))) context_features)
									mode
										(if (!= ".targetless" action_feature)
											"full"
											"robust"
										)
									weight_feature weight_feature
								))
						))
						;remove the specified values from the cached residuals and prediction stats
						(assign (assoc
							residuals_map
								(remove
									residuals_map
									(apply "concat" (append "full" (remove (get hyperparam_map "paramPath") 1) ) )
								)
							prediction_stats_map
								(remove
									prediction_stats_map
									(apply "concat" (append "full" (remove (get hyperparam_map "paramPath") 1) ) )
								)
						))
					)
				)
				;remove 'robust' residuals
				(if (= (false) residuals_robust)
					(seq
						(assign (assoc
							hyperparam_map
								(call !GetHyperparameters (assoc
									feature action_feature
									context_features (filter (lambda (!= action_feature (current_value))) context_features)
									mode "robust"
									weight_feature weight_feature
								))
						))
						;remove the specified values from the cached residuals and prediction stats
						(assign (assoc
							residuals_map
								(remove
									residuals_map
									(apply "concat" (append "robust" (remove (get hyperparam_map "paramPath") 1) ) )
								)
							prediction_stats_map
								(remove
									prediction_stats_map
									(apply "concat" (append "robust" (remove (get hyperparam_map "paramPath") 1) ) )
								)
						))
					)
				)

				(assign_to_entities (assoc
					!residualsMap residuals_map
					!featurePredictionStatsMap prediction_stats_map
				))
				(accum_to_entities (assoc !revision 1))
			)
		)

		;set the custom hp map if specified a hyperparameter_param_path
		(declare (assoc
			custom_hyperparam_map
				(if hyperparameter_param_path
					(get !hyperparameterMetadataMap hyperparameter_param_path)
				)
		))

		(if residuals
			(call !CalculateAndStoreFeatureResiduals (assoc
				features context_features
				case_ids case_ids
				robust_residuals (false)
				hyperparameter_feature action_feature
				weight_feature weight_feature
				use_case_weights use_case_weights
				custom_hyperparam_map custom_hyperparam_map
			))
		)

		(if residuals_robust
			(call !CalculateAndStoreFeatureResiduals (assoc
				features context_features
				case_ids robust_residual_case_ids
				robust_residuals (true)
				hyperparameter_feature action_feature
				weight_feature weight_feature
				use_case_weights use_case_weights
				custom_hyperparam_map custom_hyperparam_map
			))
		)

		;doing contributions
		(if (not (= (null) contributions contributions_robust))
			(seq
				(assign (assoc
					;make sure context_features doesnt have the specified action feature by filtering it out
					context_features (filter (lambda (!= action_feature (current_value))) context_features)
				))

				;if any of the stored contributions sets should be removed
				(if (contains_value (list contributions contributions_robust) (false))
					(let
						(assoc contributions_map (retrieve_from_entity "!contributionsMap"))

						(if (= (false) contributions)
							(assign (assoc contributions_map (remove contributions_map (concat "full" weight_feature action_feature)) ))
						)

						(if (= (false) contributions_robust)
							(assign (assoc contributions_map (remove contributions_map (concat "robust" weight_feature action_feature)) ))
						)

						(assign_to_entities (assoc !contributionsMap contributions_map))
						(accum_to_entities (assoc !revision 1))
					)
				)

				(if contributions
					(call !CalculateFeatureContributions (assoc
						context_features context_features
						action_feature action_feature
						robust (false)
						case_ids case_ids
						weight_feature weight_feature
						custom_hyperparam_map custom_hyperparam_map
						num_samples num_samples
					))
				)

				(if contributions_robust
					(call !CalculateFeatureContributions (assoc
						context_features context_features
						action_feature action_feature
						robust (true)
						case_ids robust_influence_case_ids
						weight_feature weight_feature
						custom_hyperparam_map custom_hyperparam_map
						num_robust_influence_samples num_robust_influence_samples
						num_robust_influence_samples_per_case num_robust_influence_samples_per_case
					))
				)
			)
		)

		;doing MDA
		(if (not (= (null) mda mda_robust mda_permutation mda_robust_permutation))
			(seq
				(assign (assoc
					;make sure context_features doesnt have the specified action feature by filtering it out
					context_features (filter (lambda (!= action_feature (current_value))) context_features)
				))

				;if any of the stored MDA sets should be removed
				(if (contains_value (list mda mda_robust mda_permutation mda_robust_permutation) (false))
					(let
						(assoc mda_map (retrieve_from_entity "!mdaMap"))

						(if (= (false) mda)
							(assign (assoc mda_map (remove mda_map (concat "dropfull" weight_feature action_feature)) ))
						)

						(if (= (false) mda_robust)
							(assign (assoc mda_map (remove mda_map (concat "droprobust" weight_feature action_feature)) ))
						)

						(if (= (false) mda_permutation)
							(assign (assoc mda_map (remove mda_map (concat "permutationfull" weight_feature action_feature)) ))
						)

						(if (= (false) mda_robust_permutation)
							(assign (assoc mda_map (remove mda_map (concat "permutationrobust" weight_feature action_feature)) ))
						)

						(assign_to_entities (assoc !mdaMap mda_map))
						(accum_to_entities (assoc !revision 1))
					)
				)

				(if mda
					(call !CalculateMDA (assoc
						context_features context_features
						action_feature action_feature
						sensitivity_to_randomization (false)
						robust (false)
						case_ids case_ids
						use_case_weights use_case_weights
						weight_feature weight_feature
						custom_hyperparam_map custom_hyperparam_map
					))
				)

				(if mda_robust
					(call !CalculateMDA (assoc
						context_features context_features
						action_feature action_feature
						sensitivity_to_randomization (false)
						robust (true)
						;TODO: replace with robust_influence_case_ids
						case_ids robust_residual_case_ids
						use_case_weights use_case_weights
						weight_feature weight_feature
						custom_hyperparam_map custom_hyperparam_map
					))
				)

				(if	mda_permutation
					(call !CalculateMDA (assoc
						context_features context_features
						action_feature action_feature
						sensitivity_to_randomization (true)
						robust (false)
						case_ids case_ids
						use_case_weights use_case_weights
						weight_feature weight_feature
						custom_hyperparam_map custom_hyperparam_map
					))
				)

				(if mda_robust_permutation
					(call !CalculateMDA (assoc
						context_features context_features
						action_feature action_feature
						sensitivity_to_randomization (true)
						robust (true)
						;TODO: replace with robust_influence_case_ids
						case_ids robust_residual_case_ids
						use_case_weights use_case_weights
						weight_feature weight_feature
						custom_hyperparam_map custom_hyperparam_map
					))
				)
			)
		)

		(if holdout_entity_name
			(call !RestoreHeldOutCases (assoc holdout_entity_name holdout_entity_name))
		)

		(call !Return (assoc warnings (if (size warnings) (indices warnings)) ))
	)
)
