;Contains methods for composing specific feature attribute maps.
(null

	#!ComposeCyclicsMap
	;map-filter weave produces a list of string, assoc combinations, assoc conversion makes the strings keys and values the assoc
	(apply "assoc"
		(weave
			(lambda
				(if (> (get (last (current_value)) "cycle_length") 0)
					(list (replace (first (current_value 1))) (replace (get (last (current_value 1)) "cycle_length")))
					;else don't output anything, map-filtering out any values that don't have cyclics
					(list)
				)
			)
			(indices feature_attributes)
			(values feature_attributes)
		)
	)

	;A list of tuples containing a datetime format symbol and its granularity in seconds
	; sorted in increasing granularity to help determine the granularity of a datetime format.
	#!DatetimeSymbolPrecisions
	[
		["%S" 0] ;Second padded (this value can be fractional)
		["%OS" 0] ;Second padded (this value can be fractional)
		["%T" 0] ;Time up to second
		["%M" 60] ;Minute padded
		["%OM" 60] ;Minute padded
		["%R" 60] ;Time up to minute
		["%I" (* 60 60)] ;Hour (12)
		["%OI" (* 60 60)] ;Hour (12)
		["%H" (* 60 60)] ;Hour (24)
		["%OH" (* 60 60)] ;Hour (24)
		["%p" (* 60 60 12)] ;am/pm
		["%d" (* 60 60 24)] ;Day of Month as number
		["%a" (* 60 60 24)] ;Day of Week as abbr string
		["%A" (* 60 60 24)] ;Day of Week as string
		["%w" (* 60 60 24)] ;Day of Week as number
		["%D" (* 60 60 24)] ;Full date format up to day
		["%F" (* 60 60 24)] ;Full date format up to day
		["%x" (* 60 60 24)] ;Day of Week as number
		["%Ow" (* 60 60 24)] ;Day of Week as number
		["%u" (* 60 60 24)] ;Day of Week as number
		["%Ou" (* 60 60 24)] ;Day of Week as number
		["%U" (* 60 60 24 7)] ;Week of year as number
		["%W" (* 60 60 24 7)] ;Week of year as number
		["%m" (* 60 60 24 31)] ;Month as number
		["%Om" (* 60 60 24 31)] ;Month as abbr string
		["%b" (* 60 60 24 31)] ;Month as abbr string
		["%h" (* 60 60 24 31)] ;Month as abbr string
		["%B" (* 60 60 24 31)] ;Month as string
		["%y" (* 60 60 24 365)] ;Year (2 digits)
		["%Oy" (* 60 60 24 365)] ;Year (2 digits)
		["%Ey" (* 60 60 24 365)] ;Year (2 digits)
		["%Y" (* 60 60 24 365)] ;Year (4 digits)
		["%EY" (* 60 60 24 365)] ;Year (4 digits)
		["%C" (* 60 60 24 365 100)] ;Century
		["%EC" (* 60 60 24 365 100)] ;Century
	]

	#!ComposeDateTimeMap
	(apply "assoc"
		(weave
			(lambda
				(if
					(and
						;ignore nominal features in the datetime map, even if a date time format is provided.
						(!= "nominal" (get (last (current_value)) "type"))
						(!= (null) (get (last (current_value)) "date_time_format"))
					)
					(let
						(assoc
							date_time_format (get (last (current_value 1)) "date_time_format")
							locale (get (last (current_value 1)) "locale")
							default_time_zone (get (last (current_value 1)) "default_time_zone")
							is_time (= "formatted_time" (get (last (current_value 1)) "data_type") )
						)

						[
							(first (current_value 1))
							{
								"date_time_format" (concat (if is_time "time:" "date:") date_time_format)
								;set default of en_US if locale is not specified
								"locale" (replace locale)
								"default_time_zone" (if default_time_zone default_time_zone "UTC")
								"min_nonzero_delta"
									(while (< (current_index) (size !DatetimeSymbolPrecisions))
										(if (contains_value
												date_time_format
												(concat ".*" (get !DatetimeSymbolPrecisions [(current_index 1) 0]) ".*")
											)
											(conclude (get !DatetimeSymbolPrecisions [(current_index 1) 1]))
										)
									)
							}
						]
					)
					;else don't output anything, map-filtering out any values that don't have datetimes
					(list)
				)
			)
			(indices feature_attributes)
			(values feature_attributes)
		)
	)

	;update feature attributes with correct date time format data types
	;any features that are 'formatted_date_time' but don't have a 'date_time_format' specified, set date_time_format to ISO8601
	;any features that do have a 'date_time_format', set 'data_type' to 'formatted_date_time'
	#!UpdateAttributesForDateTimeDataTypes
	(assign (assoc
		feature_attributes
			(map
				(lambda
					(if
						(and
							(= "continuous" (get (current_value) "type"))
							(= "formatted_date_time" (get (current_value) "data_type"))
							(= (null) (get (current_value) "date_time_format"))
						)
						(set (current_value) "date_time_format" "%Y-%m-%dT%H:%M:%S")

						(and
							(= "continuous" (get (current_value) "type"))
							(= (null) (get (current_value) "date_time_format"))
							(= "formatted_time" (get (current_value) "data_type"))
						)
						(set (current_value) "date_time_format" "%H:%M:%S")

						;force 'data_type' to 'formatted_date_time' for all features with a date_time_format
						;that are not already set to 'formatted_time'
						(and
							(= "continuous" (get (current_value) "type"))
							(!= (null) (get (current_value) "date_time_format"))
							(!= "formatted_time" (get (current_value) "data_type"))
						)
						(set (current_value) "data_type" "formatted_date_time")

						;else leave-as-is
						(replace (current_value))
					)
				)
				feature_attributes
			)
	))

	#!ComposeRoundingMap
	(apply "assoc"
		(weave
			(lambda
				(if (or
						(!= (null) (get (last (current_value)) "decimal_places"))
						(!= (null) (get (last (current_value)) "significant_digits"))
					)
					(let
						(assoc
							decimal_places (get (last (current_value 1)) "decimal_places")
							significant_digits (get (last (current_value 1)) "significant_digits")
							feature (first (current_value 1))
						)

						(if (and (!= (null) decimal_places) (!= (null) significant_digits))
							(list feature (list (replace significant_digits) (replace decimal_places)))

							(!= (null) decimal_places)
							;ignore the significant digit by setting it to max value of 18
							(list feature (list 18 (replace decimal_places)))

							;else if only the significant digits are specified, store that
							(!= (null) significant_digits)
							(list feature (list (replace significant_digits)))
						)
					)

					;else don't output anything, map-filtering out any values that don't have rounded features
					(list)
				)
			)
			(indices feature_attributes)
			(values feature_attributes)
		)
	)

	#!ComposeUserSpecifiedFeatureErrorsMap
	;map-filter weave
	(apply "assoc"
		(weave
			(lambda
				(if (!= (null) (get (last (current_value)) "observational_error" ))
					(list (replace (first (current_value 1))) (replace (get (last (current_value 1)) "observational_error")))
					;else don't output anything, map-filtering out any values that don't have cyclics
					(list)
				)
			)
			(indices feature_attributes)
			(values feature_attributes)
		)
	)

	#!ComposeDependentsMap
	(let
		(assoc
			dependents_map
				;map-filter weave, leaves an assoc of:  feature -> { "dependent_features": [ ... ] } for those that have dependent_features
				(apply "assoc"
					(weave
						(lambda
							(if (!= (null) (get (last (current_value)) "dependent_features" ))
								(list
									(replace (first (current_value 1)))
									(assoc
										"dependent_features"
										(replace (get (last (current_value 2)) "dependent_features"))
									)
								)
								;else don't output anything, map-filtering out any values that don't have dependent features
								(list)
							)
						)
						(indices feature_attributes)
						(values feature_attributes)
					)
				)
			full_dependents_map (assoc)
		)

		(if !tsTimeFeature
			;if time series, give the rate of change features (rates/deltas) the same dependencies
			;as the parent features
			(accum (assoc
				dependents_map
					(apply "append" (map
						(lambda
							(if (contains_value !derivedFeaturesMap (current_value))
								;get all rate of change features for this feature
								(map
									(lambda
										(get dependents_map (current_value 1))
									)
									(zip (filter
										(lambda
											(= (current_value 1) (get !derivedFeaturesMap (current_value)))
										)
										(append
											(get !tsFeaturesMap "rate_features")
											(get !tsFeaturesMap "delta_features")
										)
									))
								)

								;else no derived features based on this feature
								(assoc)
							)
						)
						(indices dependents_map)
					))
			))
		)

		;copy the original dependents_map so that it can be populated if necessary below
		(assign (assoc full_dependents_map (get_value dependents_map)))

		;ensure that every feature listed as a dependent feature has whatever feature referenced it in their own dependent_features list as well
		;e.g., if user only provided that  A -> [B, C] ensure that B -> [A] and C -> [A] as well
		(map
			(lambda (let
				(assoc feature (current_index 1) )

				;iterate over all the dependents and ensure they are added to full_dependents_map if they aren't there
				;e.g., from the example above, for feature A, iterate over [B, C], pulling B's and then C's
				;dependent_features lists and accumulate A to each if needed
				(map
					(lambda
						(if
							(not (contains_value
								(get full_dependents_map (list (current_value 1) "dependent_features"))
								feature
							))
							(accum "full_dependents_map" (list (current_value 1) "dependent_features") (list (replace feature)))
						)
					)
					;list of dependent_features for this feature
					(get (current_value) "dependent_features")
				)

			))
			dependents_map
		)

		;return the filled dependents map
		full_dependents_map
	)

	;Creates shared deviations dataset attributes:
	; shared_deviations_key_map:  mapping of shared deviations where the keys are each feature within a group of shared deviations, and the values are their
	; 	corresponding primary feature. For each group of shared deviations, they are stored under the first sorted feature in their group, a.k.a. the primary feature.
	;   e.g., a group of features with shared devations is [A, B, C], creates an mapping of {A : A, B : A, C : A}
	; shared_deviations_group_by_primary: mapping of primary key -> list of shared deviation features in the group, e.g. {A : [A, B, C]}
	; shared_deviations_primary_features: list of all primary features, e.g., [A]
	; shared_deviations_non_primary_features: list of all non-primary features  e.g., [B, C]
	#!ProcessSharedDeviationsMap
	(seq
		(assign (assoc
			shared_deviations_map
				(append
					(map
						(lambda
							(or
								(get shared_deviations_map (current_index))
								[(current_index  1)]
							)
						)
						(zip (apply "append" (values shared_deviations_map)))
					)
					shared_deviations_map
				)
		))

		;create lists of referenced features for each shared feature
		(declare (assoc
			shared_sets
				(map
					(lambda (let
						(assoc
							shared_features (current_value 1)
							feature (current_index 1)
						)
						(append
							feature
							;keep lists of shared features that reference either this feature or any of its shared_features
							(indices (filter
								(lambda
									(or
										(contains_value shared_features (current_index))
										(contains_value (current_value) feature)
										(!=
											(size shared_features)
											(size (remove (zip shared_features) (current_value)) )
										)
									)
								)
								(remove shared_deviations_map feature)
							))
						)
					))
					shared_deviations_map
				)
		))


		(declare (assoc
			combined_shared_sets
				(map
					(lambda (let
						(assoc
							shared_set (zip (current_value 1))
							num_features_in_set (size (current_value 1))
							feature (current_index 1)
						)

						;append all the overlapping shared sets and make them unique by zipping up the appended features
						(zip
							(apply "append"
								;if there's any overlap between shared_set and any other feature's shared_set, combine them
								(values (filter
									(lambda
										;attempt to remove all the features from each set from this one, if any are removed, there is overlap (they are shared)
										;e.g., given some sets: a->[a,b,c,d] and b->[b,c] and e->[e,f]  when processing "a"s shared_set
										;removing [b,c] from [a,b,c,d] will reduce the length of the list meaning "b" is shared with "a"
										;but removing [e,f] from [a,b,c,d] does not reduce its length, meaning "e" is not shared with "a"
										;and will be filtered out
										(!= num_features_in_set (size (remove shared_set (current_value))))
									)
									;iterate over all the shared sets that aren't for this feature
									(remove shared_sets feature)
								))
							)
						)
					))
					shared_sets
				)

		))

		(declare (assoc
			unique_sets (values combined_shared_sets .true)
		))

		(declare (assoc
			shared_deviations_key_map
				(map
					(lambda (let
						(assoc feature (current_index 1))
						;find the the shared set that this feature belongs to and output the first feature from that set
						(declare (assoc
							shared_features
								(indices
									(first (filter
										(lambda (contains_index (current_value) feature))
										unique_sets
									))
								)
						))

						;if the first feature in the set is a lag feature, output the original parent as the primary if it's in the list
						(if (= "lag" (get feature_attributes [(first shared_features) "ts_type"]))
							(if (contains_value shared_features (get feature_attributes [(first shared_features) "parent"]) )
								(get feature_attributes [(first shared_features) "parent"])
								(first shared_features)
							)

							(first shared_features)
						)
					))
					combined_shared_sets
				)
		))

		(declare (assoc
			primary_features (indices (zip (values shared_deviations_key_map)))
		))

		(assoc
			"shared_deviations_key_map" shared_deviations_key_map
			"shared_deviations_primary_features" primary_features
			"shared_deviations_group_by_primary"
				(map
					(lambda (indices (get combined_shared_sets (current_index))) )
					(zip primary_features)
				)
			"shared_deviations_non_primary_features" (indices (remove shared_deviations_key_map primary_features))
		)
	)

	;Validates the necessary parameters for shared deviations, making sure that no shared deviations features are unique nominals.
	#!ValidateSharedDeviations
	(let
		(assoc
			error_messages (list)
			invalid_unique_shared_deviations_features (null)
			invalid_nominals_non_nominals_shared_deviations (null)
		)
		;check to see if any features in a shared deviations group is a unique nominal
		(if (size unique_nominals_set)
			(assign (assoc
				invalid_unique_shared_deviations_features
					(filter
						(lambda (contains_index unique_nominals_set (current_value)))
						(indices (get shared_deviations_map "shared_deviations_key_map"))
					)
			))
		)

		(if (size invalid_unique_shared_deviations_features)
			(accum (assoc
				error_messages
					(list (concat
						"Features with shared deviations may not be unique nominals, as they have null deviations. "
						"The following features are in a shared deviations group and is a unique nominal: "
						(apply "concat" (trunc (weave invalid_unique_shared_deviations_features ", ")))
						"."
					))
			))
		)

		;check to see if nominal features has shared deviations with non-nominal features
		(if (size nominals)
			(assign (assoc
				invalid_nominals_non_nominals_shared_deviations
					;returns at least an empty assoc for each group of shared deviations, append only keeps the assocs with values
					(apply "append"
						(values (map
							;grab the type of the primary feature, and then filter out all the ones that match. Should be left
							; with a list of size 0 as all of the features should share the same type
							(lambda
								(let
									(assoc
										;the nominal type of the primary feature in the group of shared deviations
										is_primary_nominal (contains_value nominals (current_index 1))
									)
									(filter
										;if the current value's nominal type does not match the first value's return it
										(lambda
											(!= is_primary_nominal (contains_value nominals (current_value)) )
										)
										;list of shared deviations in the group ["a", "b"]
										(current_value)
									)
								)
							)
							;assoc of shared deviations groups, i.e. {"a": ["a", "b"], "c": ["c", "d"] }
							(get shared_deviations_map "shared_deviations_group_by_primary")
						))
					)
			))
		)

		(if (size invalid_nominals_non_nominals_shared_deviations)
			(accum (assoc
				error_messages (list "Nominal features may not share deviations with non-nominal features.")
			))
		)

		;warns if errors are present
		(if (size error_messages)
			(conclude (call !Return (assoc errors error_messages)))
		)
	)


	#!ComposeContinuousToNominalDependenciesMap
	(let
		(assoc
			dependent_continuous_features_map
				;filter out nominal features, leaving only continuous ones
				(filter
					(lambda (not (contains_index nominals_map (current_index))) )
					dependents_map
				)
		)

		;output an assoc of continuous feature -> [ list of sorted nominal dependents ]
		(map
			(lambda
				(filter
					(lambda (contains_index nominals_map (current_value)))
					(sort (replace (get (current_value) "dependent_features")))
				)
			)
			dependent_continuous_features_map
		)
	)

	#!ComposeNonStringNominalsMap
	;map-filter weave
	(apply "assoc"
		(weave
			(lambda
				;only allowed data_type values are number and boolean, all others are ignored
				(if (and
						(= "nominal" (get (last (current_value)) "type"))
						(contains_value (list "number" "boolean") (get (last (current_value)) "data_type") )
					)
					(list (replace (first (current_value 1))) (replace (get (last (current_value 1)) "data_type")))
					;else don't output anything, map-filtering out any values that don't have data_type defined
					(list)
				)
			)
			(indices feature_attributes)
			(values feature_attributes)
		)
	)

	#!ComposeNonNumberContinuousMap
	;map-filter weave
	(apply "assoc"
		(weave
			(lambda
				;only allowed data_type values are string, json and amalgam, all others are ignored
				(if (and
						(= "continuous" (get (last (current_value)) "type"))
						(contains_value (list "string" "string_mixable" "json" "yaml" "amalgam") (get (last (current_value)) "data_type") )
					)
					(list (replace (first (current_value 1))) (replace (get (last (current_value 1)) "data_type")))
					;else don't output anything, map-filtering out any values that don't have datype defined
					(list)
				)
			)
			(indices feature_attributes)
			(values feature_attributes)
		)
	)

	#!ComposeNovelSubstitionFeatureSet
	;map-filter weave
	(apply "assoc"
		(weave
			(lambda
				;only keep nominal features with a defined subtype
				(if (and
						(= "nominal" (get (last (current_value)) "type"))
						(!= (null) (get (last (current_value)) "subtype"))
					)
					(list (replace (first (current_value 1))) (replace (get (last (current_value 1)) "subtype")))
					;else don't output anything, map-filtering out any values that don't have subtype defined
					(list)
				)
			)
			(indices feature_attributes)
			(values feature_attributes)
		)
	)

	#!ComposeBoundariesMap
	(map
		(lambda (let
			(assoc
				feature (current_index 1)
				;ensure bounds map is an empty assoc if it wasn't specified
				bounds_map (or (get (current_value 1) "bounds") (assoc))
				allow_null_param (get (current_value 1) "allow_null")
			)

			;cache epoch max and min values so that they don't have to be repeatedly calculated later
			(if (contains_index feature_datetime_map feature)
				(let
					(assoc
						boundary_min (get bounds_map "min")
						boundary_max (get bounds_map "max")
					)

					(accum (assoc
						bounds_map
							(assoc
								"has_epoch_bounds" .true
								"epoch_max_value"
									(if (!= (null) boundary_max)
										(if (!= "number" (get_type_string boundary_max))
											(call !ConvertDateToEpoch (assoc
												date boundary_max
												feature feature
												feature_datetime_map feature_datetime_map
											))
											;else boundary value was provided in epoch number format already, keep it as-is
											(replace boundary_max)
										)
									)
								"epoch_min_value"
									(if (!= (null) boundary_min)
										(if (!= "number" (get_type_string boundary_min))
											(call !ConvertDateToEpoch (assoc
												date boundary_min
												feature feature
												feature_datetime_map feature_datetime_map
											))
											;else boundary value was provided in epoch number format already, keep it as-is
											(replace boundary_min)
										)
									)
							)
					))
				)
			)

			;bounds map contains the min and max from 'bounds' and allow_null parameters
			(append
				bounds_map
				(if (!= (null) allow_null_param)
					(assoc "allow_null"  (replace allow_null_param))
					;if the time feature, assume allow_null is false
					(if (= feature time_series_feature)
						(assoc "allow_null" .false)
						(assoc)
					)
				)
				;cache the referenced features in the constraint
				(if (contains_index bounds_map "constraint")
					(assoc "constraint_features" (zip (get constraint_referenced_features_map feature)) )
					(assoc)
				)
			)
		))
		boundaries_map
	)

	#!ComposePostProcessMap
	(apply "assoc"
		(weave
			(lambda
				(if (!= (null) (get (last (current_value)) "post_process"))
					(let
						(assoc
							post_process_code (get (last (current_value 1)) "post_process")
							feature (first (current_value 1))
						)
						(list (replace feature) (replace post_process_code))
					)

					;else don't output anything, map-filtering out any values that don't have a post_process attribute
					(list)
				)
			)
			(indices feature_attributes)
			(values feature_attributes)
		)
	)

	#!AccumulateSourceToDerivedFeatureMap
	(map
		(lambda (let
			(assoc
				feature (current_index 1)
				attributes (current_value 1)
			)

			(if (contains_index attributes "auto_derive_on_train")
				(let
					(assoc derive_type (get attributes (list "auto_derive_on_train" "derive_type")))

					;append this derived feature name to the list of derived features for its matching source feature(s)
					(if
						(= "custom" derive_type)
						(map
							(lambda
								(let
									(assoc
										source_feature_name (current_value 1)
										derived_features_list (get source_to_derived_feature_map (current_value 1))
									)
									(if (= (null) derived_features_list)
										(assign (assoc derived_features_list (list)))
									)
									(accum (assoc
										source_to_derived_feature_map (associate source_feature_name (replace (append derived_features_list feature)))
									))
								)
							)
							(call !FeaturesInCustomCode (assoc code_string (get attributes ["auto_derive_on_train" "code"]) ))
						)
					)
				)
			)
		))
		derived_features_map
	)

	;Helper method to create a map of feature -> distance type for all the features for use in queries
	#!ComposeDistanceTypeMap
	(map
		(lambda
			(if
				(contains_index nominals_map (current_index))
				(if (= "number" (get (current_value) "data_type"))
					"nominal_number"

					(or
						(= "amalgam" (get (current_value) "data_type"))
						(= "json" (get (current_value) "data_type"))
						(= "yaml" (get (current_value) "data_type"))
					)
					"nominal_code"

					;default nominals are strings
					"nominal_string"
				)

				(contains_index cyclics_map (current_index))
				"continuous_number_cyclic"

				(= "continuous" (get (current_value) "type"))
				(if
					(or
						(= "string" (get (current_value) "data_type"))
						(= "string_mixable" (get (current_value) "data_type"))
					)
					"continuous_string"

					(or
						(= "amalgam" (get (current_value) "data_type"))
						(= "json" (get (current_value) "data_type"))
						(= "yaml" (get (current_value) "data_type"))
					)
					"continuous_code"

					"continuous_number"
				)

				;else default value
				"continuous_number"
			)
		)
		feature_attributes
	)

	;Helper method to creata  map of feature -> limits, based on the type of feature it is and limits specified in boundaries map
	#!ComposeFeatureLimitsMap
	(map
		(lambda (let
			(assoc feature (current_index 1))
			(if
				;nominal can be (null) because null signifies to use the global unique nominal count for the given label
				(contains_index !nominalsMap feature)
				(null)

				;cyclic min/max is 0 - cycle length
				(contains_index !cyclicFeaturesMap feature)
				(replace (get !cyclicFeaturesMap feature))

				;max string length
				(and
					(= "continuous" (get (current_value) "type"))
					(= "string" (get (current_value) "data_type"))
				)
				(replace (get !featureBoundsMap (list feature "max")))

				;max code size
				(= "code" (get (current_value) "type"))
				(replace (get !featureBoundsMap (list feature "max")))

				;else "continuous", and min or max are specified, provide as a delta of max - min
				(if
					(and
						(!= (null) (get !featureBoundsMap (list feature "min")) )
						(!= (null) (get !featureBoundsMap (list feature "max")) )
					)
					(if (contains_index !featureDateTimeMap feature)
						(-
							(get !featureBoundsMap (list feature "epoch_max_value"))
							(get !featureBoundsMap (list feature "epoch_min_value"))
						)

						;else just take the diff
						(-
							(get !featureBoundsMap (list feature "max"))
							(get !featureBoundsMap (list feature "min"))
						)
					)
				)
			)
		))
		feature_attributes
	)

	;update !ordinalFeaturesValuesMap label by storing the sorted list of unique ordinal values for each ordinal feature
	#!UpdateOrdinalFeaturesMap
	(seq
		;for each ordinal feature, pull all the values, make the list unique by zipping it and then sort and store
		(declare (assoc
			ordinal_features_values_map
				(map
					(lambda (call !UpdateOrdinalFeaturesMapForFeature (assoc feature (current_index 1))) )
					!ordinalFeaturesSet
				)
		))

		(declare (assoc
			ordinal_features_ranges_map
				(map
					(lambda
						;if featue is cyclic, the range is the cycle length
						(if (contains_index !cyclicFeaturesMap (current_index))
							(replace (get !cyclicFeaturesMap (current_index)))
							;else it's the range of the values
							(- (last (current_value)) (first (current_value)))
						)
					)
					ordinal_features_values_map
				)
		))

		;store both maps and clear the stale flag since !ordinalFeaturesValuesMap is now up-to-date
		(assign_to_entities (assoc
			!ordinalFeaturesValuesMap ordinal_features_values_map
			!ordinalFeaturesRangesMap ordinal_features_ranges_map
			!staleOrdinalValuesCount .false

		))
	)

	;update !ordinalFeaturesValuesMap label for a specified feature if store_values is true
	;outputs the list of sorted_feature_values for this feature
	;parameters:
	; feature: name of feature for which to output sorted feature values
	; store_values: flag, when true will update the dataset with the new values as well
	#!UpdateOrdinalFeaturesMapForFeature
	(declare
		(assoc store_values .false)

		;pull all the values for this feature, make the list unique by zipping it and then sort the indices to store as a sorted unique
		;list of feature values
		(declare (assoc
			sorted_feature_values
				(sort (map
					;convert the indices to numbers since ordinals are numeric
					(lambda (+ (current_value)))
					;indices of the zipped list give us only unique ordinal values
					(indices
						;retrieve the list of all unique ordinal values from all the cases
						(compute_on_contained_entities
							(query_value_masses feature)
						)
					)
				))
		))

		(if store_values
			(accum_to_entities (assoc
				!ordinalFeaturesValuesMap (associate feature sorted_feature_values)

				;store the range of the ordinal feature, using the cycle length if feature is cyclic,
				;since it's possible that not all cycle values have been trained
				!ordinalFeaturesRangesMap
					(associate
						feature
							(if (contains_index !cyclicFeaturesMap feature)
								(get !cyclicFeaturesMap feature)

								(- (last sorted_feature_values) (first sorted_feature_values))
							)
					)
			))
		)

		;output sorted values for this ordinal feature
		sorted_feature_values
	)

	;If a feature's constraint does not reference itself, the constraint check will fail after looping to the max.
	;To prevent this scenario, error out if any feature has an invalid constraint.
	;Discover invalid constraints by finding any features that have constraints that do not reference the feature's own value
	#!ComposeInvalidConstraintFeatures
	(filter
		(lambda (let
			(assoc
				feature (current_value 1)
				constraint (get feature_attributes (list (current_value 2) "bounds" "constraint"))
			)
			(if constraint
				;keep feature if it isn't referenced in the constraint
				(not (contains_value (get constraint_referenced_features_map feature) feature))
			)
		))
		(indices feature_attributes)
	)

	#!ComposeConstraintReferencedFeaturesMap
	(filter (map
		(lambda (let
			(assoc
				feature (current_index 1)
				constraint (get (current_value 1) ["bounds" "constraint"])
			)
			(if constraint
				(call !FeaturesInCustomCode (assoc code_string constraint))
			)
		))
		feature_attributes
	))

	;output a list of all features referenced in custom code that uses (call value {feature <feature name>})
	;to pull feature values by feature name and lag
	;parameters:
	; code_string: custom code string to parse and to determine all referenced features
	#!FeaturesInCustomCode
	(let
		(assoc referenced_features [])
		;recurse through the code and accumulate all feature names from any calls to value
		(rewrite
			(lambda
				(if (= "call" (get_type_string (current_value)))
					(if (= (lambda value) (first (current_value)))
						(accum (assoc referenced_features (get (current_value 1) [1 "feature"]) ))
						(current_value)
					)
					(current_value)
				)
			)
			(parse code_string)
		)
		;output accumulated referenced features
		(values referenced_features .true)
	)

	;output the maximum lag value referenced in custom code that uses (call value {feature <feature name> lag <lag value>})
	;to pull feature values by feature name and lag
	;parameters:
	; code_string: custom code string to parse and to determine max lag value
	#!MaxLagInCustomCode
	(let
		(assoc max_lag 0)
		(rewrite
			(lambda
				(if (= "call" (get_type_string (current_value)))
					(if (= (lambda value) (first (current_value)))
						(if (> (get (current_value ) [1 "lag"]) max_lag)
							(assign (assoc max_lag (get (current_value 1) [1 "lag"]) ))
							(current_value)
						)
						(current_value)
					)
					(current_value)
				)
			)
			(parse code_string)
		)
		max_lag
	)

	;returns list of all zero lag features specified in the code
	;parameters:
	; code_string: custom code string to parse to determine all features with zero lags
	#!ZeroLagFeaturesInCustomCode
	(let
		(assoc zero_lag_features [])
		(rewrite
			(lambda
				(if (and
						(= "call" (get_type_string (current_value)))
						(= (lambda value) (first (current_value)))
						(= 0 (+ (or (get (current_value ) [1 "lag"]))) )
					)
					(accum (assoc zero_lag_features (get (current_value 1) [1 "feature"]) ))
					(current_value)
				)
			)
			(parse code_string)
		)
		(values zero_lag_features .true)
	)
)