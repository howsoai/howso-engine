;Contains methods for training (input of data into the trainee).
(null

	;private helper method that checks if the conditions for auto-analyze are met, and calls the analyze if so
	;this method should be called within #train
	;
	;parameters:
	; skip_auto_analyze: flag, if true and auto-analyze is needed, then status_output will be assigned to "analyze".
	;                    If false, and auto-analyze is needed, the analyze will be executed.
	#!AutoAnalyzeIfNeeded
	(if (>= !dataMassChangeSinceLastAnalyze !autoAnalyzeThreshold)
		(if skip_auto_analyze
			;if skip_auto_analyze, send back "analyze" status so users knows an analyze is needed/recommended
			; rather than performing it now.
			(assign (assoc status_output "analyze"))

			;otherwise do the analyze
			(seq
				(if (!= (null) !savedAnalyzeParameterMap)
					(call !Analyze !savedAnalyzeParameterMap)

					(call !Analyze (assoc
						targeted_model "targetless"
						context_features !trainedFeatures
						weight_feature
							(if (and !autoAblationEnabled !autoAblationWeightFeature)
								!autoAblationWeightFeature
								".none"
							)
						use_case_weights (and !autoAblationEnabled !autoAblationWeightFeature)
						k_folds 1
					))
				)
				(assign (assoc status_output "analyzed"))
			)
		)
	)

	;set specified feature weights for inactive features in all hyperparameter maps (!defaultHyperparameters and !hyperparameterMetadataMap)
	;If weights haven't been defined yet, set them to 0 for invacitves and 1 for actives
	;If already defined, will overwrite the weight of the specified features in feature_weights_map
	;
	;parameters:
	; features_weights_map: assoc of feature -> weight to overwrite in all hyperparameter sets
	#!SetInactiveFeatureWeights
	(declare
		(assoc
			features_weights_map (assoc)
		)

		(declare (assoc
			updated_hp_maps
				(map
					(lambda
						(rewrite
							;if this is a hp assoc, modify it
							(lambda
								(if (and (= (assoc) (get_type (current_value))) (contains_index (current_value) "k") )
									;hp already have featureDeviations defined, overwrite where necessary
									(let
										;take featureWeights in HP assoc and alter them
										(assoc num_features (size !trainedFeatures) )

										;if there is a featureMdaMap specified, temporarily set the weight of activated features to be 1/num_features
										;if features_weights_map value is 1, so that they can be used in queries until the dataset is reanalyzed
										;otherwise set it to 0
										(declare (assoc
											scaled_features_weights_map
												(if (size (get (current_value 1) "featureMdaMap"))
													(map
														(lambda (/ (current_value) num_features) )
														features_weights_map
													)
												)
										))

										;append the updated deviations_map to this hp map
										(append
											(current_value)

											(if scaled_features_weights_map
												(assoc
													"featureMdaMap"
														(map
															(lambda (append (current_value) scaled_features_weights_map))
															(get (current_value 1) "featureMdaMap")
														)
													;temporarily set the deviations of activated features to be initial values
													;so that they can be used in queries until the dataset is reanalyzed
													"featureDeviations"
														(append
															(get (current_value 1) "featureDeviations")
															(call !ComputeInitialResiduals (assoc features (indices scaled_features_weights_map) ))
														)
												)

												{}
											)
										)
									)

									;else not the hp assoc, return original
									(current_value)
								)
							)
							(current_value)
						)
					)
					(list !defaultHyperparameters !hyperparameterMetadataMap)
				)
		))

		(assign_to_entities (assoc
			!defaultHyperparameters (first updated_hp_maps)
			!hyperparameterMetadataMap (last updated_hp_maps)
		))
	)

	;Helper method for training, updates null flags and resets model level attributes based on the data such as
	;model case entropies, marginal stats, expected values, etc.
	#!ClearCachedDataProperties
	(seq
		(accum_to_entities (assoc
			!featureNullRatiosMap
				(map
					(lambda (let
						(assoc feature (current_index 1))
						(if (current_value)
							(set
								(current_value)
								"has_nulls"
								;leave true as true, otherwise set to null
								(if (get (current_value) "has_nulls") (true))
							)

							;else create the has_nulls key with a null
							(assoc "has_nulls" (null))
						)
					))
					(append (zip features) !featureNullRatiosMap)
				)
		))

		;model has changed so clear out these cached value
		#!ClearCachedCountsAndEntropies
		(assign_to_entities (assoc
			!averageCaseEntropyAddition (null)
			!averageCaseEntropyRemoval (null)
			!storedCaseConvictionsFeatureAddition (null)
			!averageCaseDistanceContribution (null)
			!staleOrdinalValuesCount (true)
			!nominalClassProbabilitiesMap (assoc)
			!expectedValuesMap (assoc)
			!featureMarginalStatsMap (assoc)
			!tsModelFeaturesMap (set !tsFeaturesMap ["minimum_time_bound"] (null))
		))
	)

	;Helper method to prime query caches for all !trainedFeatures and update the !inactiveFeaturesMap
	;parameters:
	; editing_existing_cases: boolean, default false. If true this method is being called from cases
	;		being edited and thus !inactiveFeaturesMap may be being added to or removed from and
	;		all the features are already defined in hyperparameters.
	#!UpdateInactiveFeatures
	(declare
		(assoc editing_existing_cases (false) )

		;prime the caches for the query engine using all the trained features
		(size (contained_entities
			(map (lambda (query_exists (current_value))) !trainedFeatures)
		))

		(declare (assoc
			inactive_features_map
				(filter
					(lambda (let
						(assoc feature (current_index 1))

						;only keep those features that only have one value
						(declare (assoc
							feature_value
								(first (first
									(compute_on_contained_entities [
										(query_exists !internalLabelSession)
										(query_select 1 0)
										(query_exists feature)
									])
								))
						))

						;there are no other cases that have a different value
						(= 0
							(size
								(compute_on_contained_entities [
									(query_exists !internalLabelSession)
									(query_not_equals feature feature_value)
								])
							)
						)
					))
					;once !inactiveFeaturesMap is created, add_feature and remove_feature edit it, so unless
					;cases are being edited, only need to check !inactiveFeaturesMap instead of all the trained features
					(if (and !inactiveFeaturesMap (not editing_existing_cases))
						!inactiveFeaturesMap
						(zip !trainedFeatures (range 0 1 (size !trainedFeatures) 1))
					)
				)
		))

		;if there are inactive features that are no longer inactive, set their feature weights to 1
		(if (size
				(indices (remove !inactiveFeaturesMap (indices inactive_features_map)) )
			)
			(call !SetInactiveFeatureWeights (assoc
				features_weights_map
					(zip
						(indices (remove !inactiveFeaturesMap (indices inactive_features_map)) )
						1
					)
			))
		)

		(if (size inactive_features_map)
			(seq
				;if there are inactive features and they haven't been set yet, set their weight to 0
				(if (!= !inactiveFeaturesMap inactive_features_map)
					(call !SetInactiveFeatureWeights (assoc
						features_weights_map inactive_features_map
					))
				)
				(assign_to_entities (assoc
					!inactiveFeaturesMap inactive_features_map
					!inactiveFeaturesNeedCaching (false)
				))
			)

			;else all features have more than one value
			(assign_to_entities (assoc
				!inactiveFeaturesMap (null)
				!inactiveFeaturesNeedCaching (false)
			))
		)
	)

	;sub method to compute and output rebalance case weights for provided rebalance_cases if there are rebalance features defined
	#!ComputeRebalanceCaseWeights
	(let
		(assoc
			hyperparam_map
				(call !GetHyperparameters (assoc
					context_features features
					weight_feature (if !autoAblationEnabled !autoAblationWeightFeature ".case_weight")
				))
		)
		(declare (assoc
			dataset_size (call !GetNumTrainingCases)
			weight_feature (if !autoAblationEnabled !autoAblationWeightFeature ".case_weight")
			feature_weights (get hyperparam_map "featureWeights")
			feature_deviations  (get hyperparam_map "featureDeviations")
			dt_parameter (get hyperparam_map "dt")
			p_parameter (get hyperparam_map "p")
			query_closest_k (get hyperparam_map "k")
			query_feature_attributes_map (get hyperparam_map "featureDomainAttributes")
			rebalance_feature_indices  (unzip (zip features (indices features)) !continuousRebalanceFeatures)
			continuous_rebalance_features !continuousRebalanceFeatures
			nominal_rebalance_features !nominalRebalanceFeatures
			feature_value_weight_map (null)
			nominal_rebalance_feature_indices (null)
		))

		;if there are nominal rebalance features, pull the corresponding nominal value weights
		(if (size nominal_rebalance_features)
			(assign (assoc
				;assoc of { feature -> { value -> weight } }
				feature_value_weight_map !cachedRebalanceClassValueWeightMap
				nominal_rebalance_feature_indices (unzip (zip features (indices features)) nominal_rebalance_features)
			))
		)

		||(map
			(lambda (let
				(assoc
					feature_values
						(if encode_features_on_train
							(call !ConvertFromInput (assoc
								feature_values (unzip (current_value 2) rebalance_feature_indices)
								features continuous_rebalance_features
							))

							;else use feature_values as-is
							(unzip (current_value 1) rebalance_feature_indices)
						)
					;default nominal weight to 1
					nominal_rebalance_features_weight 1
				)
				(declare (assoc
					distance_contribution
						(if (size continuous_rebalance_features)
							(first
								(compute_on_contained_entities [
									(query_distance_contributions
										query_closest_k
										continuous_rebalance_features
										[feature_values]
										feature_weights
										!queryDistanceTypeMap
										query_feature_attributes_map
										feature_deviations
										p_parameter
										(if (= dt_parameter "surprisal_to_prob") "surprisal" dt_parameter )
										(if use_case_weights
											(if !internalLabelProbabilityMass
												!internalLabelProbabilityMass
												weight_feature
											)
										)
										(rand)
										(null) ;radius
										!numericalPrecision
									)
								])
							)
						)

				))

				(if feature_value_weight_map
					(let
						(assoc
							nominal_values
									(if encode_features_on_train
										(call !ConvertFromInput (assoc
											feature_values (unzip (current_value 2) nominal_rebalance_feature_indices)
											features nominal_rebalance_features
										))

										;else use feature_values as-is
										(unzip (current_value 1) nominal_rebalance_feature_indices)
									)
						)

						(assign (assoc
							nominal_rebalance_features_weight
								;grab the weight for this value of the one nominal rebalance feature
								(if (= 1 (size nominal_values))
									(or
										(get
											feature_value_weight_map
											[ (first nominal_rebalance_features) (first nominal_values) ]
										)
										(get !cachedRebalanceUnknownValueWeightMap (first nominal_rebalance_features))
									)

									;multiple nominal rebalance feature weights are multiplied
									(apply "*"
										(map
											(lambda
												(or
													(get
														feature_value_weight_map
														[ (current_value 1) (get nominal_values (current_index 1)) ]
													)
													(get !cachedRebalanceUnknownValueWeightMap (current_value))
												)
											)
											nominal_rebalance_features
										)
									)
								)
						))
					)
				)

				;product of all the rebalance feature weights
				(if distance_contribution
					(*
						nominal_rebalance_features_weight
						;convert surprisal to probability
						(if (= "surprisal_to_prob" dt_parameter)
							(- 1 (exp (- distance_contribution)) )
							;else store DC as-is
							distance_contribution
						)
					)
					;else only the nominal rebalance weight
					nominal_rebalance_features_weight
				)
			))
			rebalance_cases
		)
	)

	;Helper method that computes Computed features specified by react_into_features (e.g., distance_contribution) everytime a case is trained
	#!ComputeFeaturesDuringTrain
	(let
		(assoc
			hyperparam_map
				(call !GetHyperparameters (assoc
					context_features features
					weight_feature
						(or
							(get !computedFeaturesMap "weight_feature")
							(if !autoAblationEnabled !autoAblationWeightFeature ".none")
						)
				))
			computed_map (get !computedFeaturesMap "computed_map")
			computed_context_features (get !computedFeaturesMap "context_features")
		)
		(declare (assoc
			dataset_size (call !GetNumTrainingCases)
			weight_feature
				(or
					(get !computedFeaturesMap "weight_feature")
					(if !autoAblationEnabled !autoAblationWeightFeature ".none")
				)
			feature_weights (get hyperparam_map "featureWeights")
			feature_deviations  (get hyperparam_map "featureDeviations")
			dt_parameter (get hyperparam_map "dt")
			p_parameter (get hyperparam_map "p")
			query_closest_k (get hyperparam_map "k")
			query_feature_attributes_map (get hyperparam_map "featureDomainAttributes")
		))

		(declare (assoc
			use_case_weights (or (!= (null) (get !computedFeaturesMap "weight_feature")) (!= weight_feature ".none"))
			computed_feature_indices (unzip (zip train_features (indices train_features)) computed_context_features)
			dc_feature_name (get computed_map "distance_contribution")
			compute_similarity_conviction (contains_index computed_map "similarity_conviction")
			compute_fc_addition (contains_index computed_map "familiarity_conviction_addition")
			compute_pval_addition (contains_index computed_map "p_value_of_addition")
			compute_fc_removal (contains_index computed_map "familiarity_conviction_removal")
			compute_pval_removal (contains_index computed_map "p_value_of_removal")
			influence_weight_entropy_name (get computed_map "influence_weight_entropy")
			cached_average_entropy_addition (get !computedFeaturesMap "cached_average_entropy_addition")
			cached_average_entropy_removal (get !computedFeaturesMap "cached_average_entropy_removal")
		))

		;pairs of [ distance_contribution similarity_conviction ]
		(declare (assoc
			case_dc_pairs
				(if (size (remove computed_map "influence_weight_entropy"))
					||(map
						(lambda (let
							(assoc case_values (unzip (current_value 1) computed_feature_indices) )

							(declare (assoc
								case_dc
									(first
										(compute_on_contained_entities [
											(query_distance_contributions
												query_closest_k
												computed_context_features
												[case_values]
												feature_weights
												!queryDistanceTypeMap
												query_feature_attributes_map
												feature_deviations
												p_parameter
												(if (= dt_parameter "surprisal_to_prob") "surprisal" dt_parameter )
												(if use_case_weights weight_feature)
												(rand)
												(null) ;radius
												!numericalPrecision
											)
										])
									)
							))

							(declare (assoc
								similarity_conviction
									(if compute_similarity_conviction
										(let
											(assoc
												local_cases
													(contained_entities [
														(query_nearest_generalized_distance
															!regionalMinSize
															computed_context_features
															case_values
															feature_weights
															!queryDistanceTypeMap
															query_feature_attributes_map
															feature_deviations
															p_parameter
															dt_parameter
															(if use_case_weights weight_feature (null))
															;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
															"fixed rand seed"
															(null) ;radius
															!numericalPrecision
														)
													])
											)

											(declare (assoc
												local_distance_contributions_map
													(map
														(lambda (retrieve_from_entity (current_index) dc_feature_name) )
														(zip local_cases)
													)
											))

											;output similarity conviction as ratio of expected / calculated distance contribution
											(/
												(/
													(apply "+" (values local_distance_contributions_map))
													(size local_distance_contributions_map)
												)
												case_dc
											)
										)
									)
							))

							;output a pair of [ dc sc ]
							[case_dc similarity_conviction]
						))
						cases
					)
				)
		))

		;list of tuples of [ fc_addition p_value_addition fc_removal p_value_removal ] for each case
		(declare (assoc
			familiarity_conviction_tuples
				(if (or compute_fc_addition compute_pval_addition compute_fc_removal compute_pval_removal)
					||(map
						(lambda (let
								(assoc
									expected_probability (last !cachedExpectedCaseProbabilities)
									; expected_probability * case_dc / average_dc
									new_probability (/ (* (last !cachedExpectedCaseProbabilities) (first (current_value 1)) ) !averageCaseDistanceContribution)
								)
								;will need to scale all existing existing probabilities so that all add up to 1 when added with new_probability
								; (1- expected_probability) / (1 - new_probability)
								(declare (assoc
									new_scalar (/ (- 1 expected_probability) (- 1 new_probability) )
								))

								(declare (assoc
									case_entropy_addition
										(if (or compute_fc_addition compute_pval_addition)
											(entropy
												!cachedExpectedCaseProbabilities
												;all existing probabilities scaled by the new scalar given the new probability
												(append
													(map
														(lambda (/ (current_value) new_scalar))
														(trunc !cachedExpectedCaseProbabilities)
													)
													new_probability
												)
											)
										)
								))

								(declare (assoc
									case_entropy_removal
										(if (or compute_fc_removal compute_pval_removal)
											(entropy
												;all existing probabilities scaled by the new scalar given the new probability
												(append
													(map
														(lambda (/ (current_value) new_scalar))
														(trunc !cachedExpectedCaseProbabilities)
													)
													new_probability
												)
												!cachedExpectedCaseProbabilities
											)
										)
								))

								;output a tuple of [ fc_addition p_value_addition fc_removal p_value_removal ]
								[
									(if compute_fc_addition (/ cached_average_entropy_addition case_entropy_addition) )
									(if compute_pval_addition (exp (- case_entropy_addition)) )
									(if compute_fc_removal (/ cached_average_entropy_removal case_entropy_removal) )
									(if compute_pval_removal (exp (- case_entropy_removal)) )
								]
						))
						case_dc_pairs
					)
				)
		))

		(declare (assoc
			influence_weight_entropies
				(if influence_weight_entropy_name
					||(map
						(lambda (let
							(assoc
								local_cases_map
									(compute_on_contained_entities [
										(query_nearest_generalized_distance
											query_closest_k
											computed_context_features
											(unzip (current_value 2) computed_feature_indices)
											feature_weights
											!queryDistanceTypeMap
											query_feature_attributes_map
											feature_deviations
											p_parameter
											dt_parameter
											(if use_case_weights weight_feature (null))
											;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
											"fixed rand seed"
											(null) ;radius
											!numericalPrecision
										)
									])
							)

							(declare (assoc total (apply "+" (values local_cases_map)) ))

							;if all cases are all extremely surprising (probability of 0), treat them as uniform
							(if (= 0 total)
								(entropy (map (/ 1 (size local_cases_map)) (values local_cases_map)) )

								;if there are perfect matches, it's 0 entropy, not surprising at all
								(= .infinity total)
								0

								;else entropy of normalized infuences
								(entropy
									(map
										(lambda (/ (current_value) total))
										(values local_cases_map)
									)
								)
							)
						))
						cases
					)
				)
		))

		(declare (assoc
			computed_features
				(append
					(if dc_feature_name dc_feature_name [])
					(if compute_similarity_conviction (get computed_map "similarity_conviction") [])
					(if compute_fc_addition (get computed_map "familiarity_conviction_addition") [])
					(if compute_pval_addition (get computed_map "p_value_of_addition") [])
					(if compute_fc_removal (get computed_map "familiarity_conviction_removal") [])
					(if compute_pval_removal (get computed_map "p_value_of_removal") [])
					(if influence_weight_entropy_name influence_weight_entropy_name [])
				)
			has_dc (or dc_feature_name compute_similarity_conviction)
			has_fc (or compute_fc_addition compute_pval_addition compute_fc_removal compute_pval_removal)
		))

		;feature indices of stored values in familiarity_conviction_tuples
		(declare (assoc
			fc_feature_indices
				(if has_fc
					(filter (append
						(if compute_fc_addition 0)
						(if compute_pval_addition 1)
						(if compute_fc_removal 2)
						(if compute_pval_removal 3)
					))
				)
		))

		;update all the cases with the computed features
		(if update_cases_and_features
			(assign (assoc
				train_features (append train_features computed_features )
				cases
					(map
						(lambda (append
							(current_value)
							(if has_dc
								(if compute_similarity_conviction
									(get case_dc_pairs (current_index))

									;else only distance_contribution
									(first (get case_dc_pairs (current_index)))
								)
								[]
							)
							(if has_fc
								(unzip (get familiarity_conviction_tuples (current_index)) fc_feature_indices)
								[]
							)
							(if influence_weight_entropy_name
								(get influence_weight_entropies (current_index))
								[]
							)
						))
						cases
					)
			))

			;else output only
			(assoc
				"computed_features" computed_features
				"computed_values"
					(map
						(lambda (append
							(if has_dc
								(if compute_similarity_conviction
									(get case_dc_pairs (current_index))

									;else only distance_contribution
									(first (get case_dc_pairs (current_index)))
								)
								[]
							)
							(if has_fc
								(unzip (get familiarity_conviction_tuples (current_index)) fc_feature_indices)
								[]
							)
							(if influence_weight_entropy_name
								(get influence_weight_entropies (current_index))
								[]
							)
						))
						cases
					)
			)
		)
	)

)
