(null

	;helper method for CalculateFeatureResiduals to calculate 'superfull' local accurate residuals
	#!ComputeDeviations
	(seq
		;keep a copy of all needed features
		(assign (assoc case_features (values (append features context_features) (true)) ))

		;if we only collected residuals for this one feature, set the residuals features list to have only target_residual_feature
		(if target_residual_feature
			(assign (assoc features (list target_residual_feature) ))
		)

		;create a map of feature -> flag, set to true if the feature has any null values
		;that way there's no need to explicitly filter nulls out when querying for a feature that no nulls
		(declare (assoc
			feature_may_have_nulls_map
				(map
					(lambda (!= (false) (get !featureNullRatiosMap (list (current_index 1) "has_nulls")) ) )
					(zip
						(if target_residual_feature
							(list target_residual_feature)
							features
						)
					)
				)
			series_id_features (if !tsTimeFeature (get !tsModelFeaturesMap "series_id_features") )
			;this variable is used in the use_derivation_logic branch of InterpolateAndComputeDiff
			react_context_features context_features
		))

		;if all 'features' are also context features, then we can do one query per case,
		;otherwise we must do multiple queries per case where the query to predict each
		;feature includes all context features and the specific feature being predicted,
		;excluding all other 'features' that are not contexts
		(declare (assoc
			single_query_per_case
				(and
					(not use_derivation_logic)
					(=
						0
						(size (remove
							(zip features)
							context_features
						))
					)
				)
		))

		;iterate over each case and accumulate residuals for all the feature(s)
		#!AccumulateLocalFeatureDeviations
		(assign (assoc
			case_residuals_lists
				||(map
					(lambda (let
						(assoc
							;assoc of all features to their residual values
							feature_residual_map (assoc)
							local_cases_map (assoc)
							case_id (current_value 1)
							;map of feature -> value for all the case values
							case_values_map (zip case_features (retrieve_from_entity (current_value 1) case_features) )
							time_series_filter_query (list)
						)

						(if !tsTimeFeature
							(if (contains_index case_values_map !tsTimeFeature)
								(assign (assoc
									time_series_filter_query (call !ComputeTimeSeriesFilterQuery (assoc context_map case_values_map))
								))
							)
						)

						;see comment where 'single_query_per_case' is defined above.
						;all features are also context features, so only the one query is needed.
						(if single_query_per_case
							(assign (assoc
								local_cases_map
									(compute_on_contained_entities (append
										(if focal_case
											(query_not_in_entity_list (list case_id focal_case))
											(query_not_in_entity_list (list case_id))
										)
										time_series_filter_query
										(if (size context_condition_filter_query)
											context_condition_filter_query
											(list)
										)
										(query_nearest_generalized_distance
											k_parameter
											context_features
											(unzip case_values_map context_features)
											(get hyperparam_map "featureWeights")
											!queryDistanceTypeMap
											query_feature_attributes_map
											(get hyperparam_map "featureDeviations")
											p_parameter
											dt_parameter
											(if valid_weight_feature weight_feature (null))
											tie_break_random_seed
											(null) ;radius
											!numericalPrecision
										)
									))
							))
						)

						;create a map of feature -> residual value for each feature
						(assign (assoc
							feature_residual_map
								(map
									(lambda (let
										(assoc
											feature (get_value (current_index 1))
											case_feature_value (get case_values_map (current_index 1))
											feature_is_nominal (contains_index !nominalsMap (current_index 1))
											interpolated_value 0
											diff 0
											output_categorical_action_probabilities (true)
											categorical_action_probabilities_map (assoc)
										)

										;see comment where 'single_query_per_case' is defined above.
										;there must be one query for each action feature where it alone is added to the contexts.
										(if (not single_query_per_case)
											(assign (assoc
												local_cases_map
													(let
														(assoc
															query_context_features
																;if using derivation logic and this feature can be derived
																(if (and use_derivation_logic (size (get features_for_derivation_map feature)))
																	;filter out the rate of change features from context for the feature being predicted
																	(values
																		(append
																			(filter
																				;stays in context if it is not needed for derivation or if it is not a rate-of-change feature
																				;(which should just be lags)
																				(lambda (or
																					(not (contains_value (get features_for_derivation_map feature) (current_value)))
																					(!= feature (get !derivedFeaturesMap (current_value)))
																					(contains_value (get !tsModelFeaturesMap "lag_features") (current_value))
																				))
																				context_features
																			)
																			feature
																		)
																		(true)
																	)
																	;otherwise just add feature to context features
																	(values (append context_features feature) (true))
																)
														)

														(compute_on_contained_entities (append
															(if focal_case
																(query_not_in_entity_list (list case_id focal_case))
																(query_not_in_entity_list (list case_id))
															)
															time_series_filter_query
															(if (size context_condition_filter_query)
																context_condition_filter_query
																(list)
															)
															(query_nearest_generalized_distance
																k_parameter
																query_context_features
																(unzip case_values_map query_context_features)
																(get hyperparam_map "featureWeights")
																!queryDistanceTypeMap
																query_feature_attributes_map
																(get hyperparam_map "featureDeviations")
																p_parameter
																dt_parameter
																(if valid_weight_feature weight_feature (null))
																tie_break_random_seed
																(null) ;radius
																!numericalPrecision
															)
														))
													)
											))
										)

										;create the feature-specific candidate_cases_lists tuple for intepolation
										(declare (assoc
											candidate_cases_lists
												(if (!= (null) local_cases_map)
													(list
														(indices local_cases_map)
														(values local_cases_map)
														(map (lambda (retrieve_from_entity (current_value) feature)) (indices local_cases_map))
													)
												)
										))

										(if (get feature_may_have_nulls_map feature)
											(let
												(assoc
													null_indices
														(filter
															(lambda (= (null) (get candidate_cases_lists (list 2 (current_value 1))) ) )
															(indices (last candidate_cases_lists))
														)
												)
												(if (size null_indices)
													(assign (assoc
														candidate_cases_lists
															;only remove cases with null values if there are going to be some remaining
															(if (< (size null_indices) (size (first candidate_cases_lists)))
																(list
																	(remove (first candidate_cases_lists) null_indices)
																	(remove (get candidate_cases_lists 1) null_indices)
																	(remove (last candidate_cases_lists) null_indices)
																)
															)
													))
												)
											)
										)

										;stores error into diff
										(call !InterpolateAndComputeDiffToCase)

									))
									(zip features)
								)
						))

						;return the computed values as a list
						(unzip feature_residual_map features)
					))
					case_ids
				)
		))


		;transpose (turn columns into rows) case_residuals_lists into a list the length of features
		;where each value matches a feature, and is comprised of each feature's residuals, then filter out nulls
		(assign (assoc
			feature_residuals_lists (call !TransposeResidualLists)
			;need to have at least 2.5% (that's a value of 50 using default sample of 2000) non-null values for a feature
			min_value_count (ceil (* 0.025 (size case_ids)))
		))

		;determine if any of the lists in feature_residuals_lists are too short (< 50 values), if so keep feature as needing to be resampled
		;applicable only to global models
		(if (and
				(!= (true) regional_model_only)
				(not strict_case_ids)
			)
			(let
				(assoc
					num_valid_values_per_feature_map
						(filter
							(lambda (< (current_value) min_value_count) )
							(zip
								features
								(map (lambda (size (current_value))) feature_residuals_lists)
							)
						)
				)

				;some features did not have 50 values, accrue case_ids, then call the main method agan
				(if (size num_valid_values_per_feature_map)
					(seq
						;create the resampled case_ids list that contains cases with enough necessary non-null feature values
						(assign  (assoc
							case_ids
								;append all the lists of cases ids for each feature into one list
								(apply "append"
									;for each (current_index) feature, need to find 50 - (current_value) cases to have enough values for those features
									(values (map
										(lambda (contained_entities
											(query_not_equals (current_index) (null))

											(if valid_weight_feature
												(query_sample (- min_value_count (current_value)) weight_feature (rand))
												(query_sample (- min_value_count (current_value)) (null) (rand))
											)
										))
										num_valid_values_per_feature_map
									))
								)
						))

						;re-compute residuals on these case_ids, store into case_residuals_lists
						(call !AccumulateLocalFeatureDeviations)

						;transpose case_residuals_lists into a list the length of features and append the results into feature_residuals_lists
						(assign (assoc
							feature_residuals_lists
								(map
									(lambda (append (first (current_value)) (last (current_value))))
									feature_residuals_lists
									(call !TransposeResidualLists)
								)
						))
					)
				)
			)
		)
	)

)