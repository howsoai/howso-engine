;Helper methods to derive and/or generate features or feature values as defined by feature attributes.
(null

	;Helper method to iterate over all the specified derived_features in order and derive them.  If unable to derive, will generate the value instead.
	; Updates series_data in place.
	; return true if derivation failed and series generation should stop, othewise returns false
	;
	; All parameters are passed in implicitly from the calling method except these:
	;parameters:
	; derived_features: list of feature names to derive, in the specified order
	; react_context_features: list of features name that serve as the starting context features. Each feature is appended to this list as it's derived
	;	so that it can be used in the generation of the next derived feature
	#!DeriveOrGenerateFeatures
	(declare
		(assoc derivation_failed (false))

		;first pass attempt to derive all the features, create a list of features that did not derive to a valid value (i.e., nulls)
		(declare (assoc
			invalid_derivation_features
				(filter (map
					(lambda (let
						(assoc
							feature (current_value 1)
							valid_derivation
								(call !DeriveSeriesValue (assoc
									derived_feature (current_value 2)
									feature_index_map feature_index_map
									last_series_index last_series_index
								))
						)

						;feature needs to be generated if it references a row that's not in the current series_data or is out of bounds
						(if (not valid_derivation)
							(seq
								;valid_derivation of (null) means a time feature generated a value past the max bondary, stop the series
								(if (= (null) valid_derivation)
									(assign (assoc derivation_failed (true) ))
								)
								;output feature name of the invalid derivation so its value can be generated below
								feature
							)
						)
					))
					derived_features
				))
		))

		;output (true) because derivation failed and series should be stopped
		(if derivation_failed (conclude (true)))

		(if (size invalid_derivation_features)
			(assign (assoc
				react_context_features
					(filter
						(lambda (not (contains_value invalid_derivation_features (current_value))) )
						(append react_context_features derived_features)
					)
			))
		)

		;iterate over invalid_derivation_features and synthesise their values instead
		(map
			(lambda (let
				(assoc
					feature (current_value 1)
					modified_feature_bounds_map (null)
				)

				;grab the latest case values
				(assign (assoc current_case_map (zip features (last series_data))))

				;rate and delta features must not synth nulls since derivation failed, specifically at the start of a series where they are nulls
				(if (> (get !featureAttributes [feature "ts_order"]) last_series_index)
					(assign (assoc
						modified_feature_bounds_map
							(if (size feature_bounds_map)
								(set feature_bounds_map [feature "allow_null"] (false))

								;else there's no feature_bounds_map, make one specifically for this feature
								(set
									(associate feature (get !featureBoundsMap feature))
									[feature "allow_null"]
									(false)
								)
							)
					))
				)

				;generate value for this feature
				(declare (assoc
					react_output
						(call !SingleReact (assoc
							context_features react_context_features
							context_values (unzip current_case_map react_context_features)
							action_features (list feature)
							action_values (null)
							;do not derive anything during this react
							derived_action_features (list)
							derived_context_features (list)
							details (if output_details details)
							extra_features (append (if extra_features extra_features []) action_features derived_action_features)
							substitute_output substitute_output
							input_is_substituted input_is_substituted
							use_case_weights use_case_weights
							weight_feature weight_feature
							rand_seed rand_seed

							desired_conviction desired_conviction
							use_differential_privacy use_differential_privacy
							feature_bounds_map
								(if modified_feature_bounds_map
									modified_feature_bounds_map
									feature_bounds_map
								)
							goal_features_map goal_features_map
							ordered_by_specified_features ordered_by_specified_features
							generate_new_cases "no"
							preserve_feature_values preserve_feature_values
							holdout_queries holdout_queries
						))
				))

				(declare (assoc feat_index (get feature_index_map feature) ))
				(declare (assoc
					feature_value
						(if (contains_index feature_post_process_code_map feature)
							(get_value
								(call_sandboxed (get feature_post_process_code_map feature) (assoc
									series_data
										;need to use series_data with the updated feature value
										;this is equivalent to the following:
										; [(set (last series_data) (get feature_index_map derived_feature) derived_feature_value) ]
										;but is much more memory efficient
										(append
											(trunc series_data)
											[ (append
												(if feat_index (trunc (last series_data) feat_index) [])
												(first (get react_output "action_values"))
												(tail (last series_data) (- (+ 1 feat_index)))
											) ]
										)
									series_row_index last_series_index
									feature_index_map feature_index_map
									!featureDateTimeMap !featureDateTimeMap
									!ConvertDateToEpoch !ConvertDateToEpoch
								) (* (size series_data) !sandboxedComputeLimit) !sandboxedMemoryLimit !sandboxedOpcodeDepthLimit (false))
							)

							;else just use the output of the react
							(first (get react_output "action_values"))
						)
				))

				;update series_data in place, updating the last row, the column matching the feature with the value
				(assign
					"series_data"
					(list last_series_index (get feature_index_map feature))
					feature_value
				)

				;if gathering details, update the case detail values with those from this react
				(if output_details
					(assign (assoc
						case_detail_values_map
							(map
								(lambda
									(append (current_value) (get react_output (current_index)))
								)
								case_detail_values_map
							)
					))
				)

				;grow the context features to be used in the generativereact as each feature is derived
				(accum (assoc react_context_features feature))
			))
			invalid_derivation_features
		)

		;derivation did not fail
		(false)
	)

	;Sort data by multiple columns. Used by series flows to ensure series data is sorted by its time features.
	;
	;parameters:
	; data : list of list of numbers
	; column_order_indices : zero-based column indices to sort by
	#!MultiSortList
	(declare
		(assoc
			data (list)
			column_order_indices (list 0)
		)
		(sort
			; generate the multi-column sort method in the format of:
			; (or
			;	(- (get a 0) (get b 0)) ; compare the first column
			;	(- (get a 1) (get b 1)) ; compare the second column
			;	...  ; etc
			; )
			(lambda (let
				(assoc
					a (current_value 1)
					b (current_value 2)
				)

				(apply "or"
					(map
						(lambda
							;use - for numeric value comparison, and > for strings so it compares them alphabetically
							(if (~ 0 (get a (current_value)))
								(- (get a (current_value)) (get b (current_value)) )

								(> (get a (current_value)) (get b (current_value)) )
							)
						)
						column_order_indices
					)
				)
			))
			data
		)
	)

	;Evaluate custom Amalgam code for feature values of every case in the model and returns
	;a list of the custom code's return values for each feature specified.
	;{read_only (true) idempotent (true)}
	#evaluate
	(declare
		;returns {
		; 	type "assoc"
		;	additional_indices (false)
		; 	indices {
		; 		"evaluated" {
		; 			type "assoc"
		;			required (true)
		; 			additional_indices {
		; 				type "list"
		; 				values "any"
		; 			}
		; 			description "A map of feature names to list of resulting values for the evaluation code for each case."
		; 		}
		; 		"aggregated" {
		; 			type "any"
		;			required (true)
		; 			description "The resulting value of the aggregation code."
		; 		}
		; 	}
		; }
		(assoc
			;{type "assoc" additional_indices "string" required (true)}
			;a assoc of feature names to custom code
			features_to_code_map (null)
			;{type "string"}
			;custom code to aggregrate the results from using features_to_code
			aggregation_code (null)
		)
		(call !ValidateParameters)

		(if (= (null) features_to_code_map)
			(conclude
				(call !Return (assoc errors (list "features_to_code_map must be specified.")))
			)
		)

		(declare (assoc
			has_aggregation (!= (null) aggregation_code)
			case_ids (call !AllCases)
		))

		(declare (assoc
			features !trainedFeatures
		))

		(declare (assoc feat_index_map (zip features (indices features)) ))

		(declare (assoc
			; Storing lists of values derived from evaluating custom code for each feature for each case
			; evaluated_map is an assoc with feature names as keys and lists of the custom-code output
			; for each case on that specific feature
			evaluated_map
				(map
					(lambda (let
						(assoc
							feature_name (current_index 1)
							code_string (current_value 1)
							op_limit (* (size (get case_list 0)) !sandboxedComputeLimit)
						)

						(map
							(lambda
								(let
									(assoc
										case (current_value 1)
									)
									; Calling the custom-code after it has been parsed and derived to get the corresponding feature values
									; for each case.
									(declare (assoc
										parsed_code
											(call !ParseDerivedFeatureCode (assoc
												code_string code_string
												get_val
													(lambda
														(if (and (= lag 0) (contains_index feat_index_map feature))
															(get case (get feat_index_map feature))
														)
													)
											))
									))
									(call_sandboxed parsed_code (assoc
										case (retrieve_from_entity case features)
										feat_index_map feat_index_map
									) op_limit !sandboxedMemoryLimit !sandboxedOpcodeDepthLimit (false))
								)
							)
							case_ids
						)
					))
					features_to_code_map
				)
		))

		(declare (assoc
			; Aggregated holds whatever the result of the aggregation code is
			aggregated
				(if has_aggregation
					; Calling the aggregation code that is parsed and derived to use the lists of values cached in evaluated_map
					; This does not function on a per-case basis, but rather on the lists of values per feature
					; NOTE: The labels in the aggregation code refer to the LIST of values computed through custom code for a feature
					(let
						(assoc
							parsed_code
								(call !ParseDerivedFeatureCode (assoc
									code_string aggregation_code
									get_val
										(lambda
											(if (and (= lag 0) (contains_index evaluated_map feature))
												(get evaluated_map feature)
											)
										)
								))
						)
						(call_sandboxed parsed_code (assoc
							evaluated_map evaluated_map
						) (* (size evaluated_map) !sandboxedComputeLimit) !sandboxedMemoryLimit !sandboxedOpcodeDepthLimit (false))
					)
				)
		))

		(call !Return (assoc
			payload
				(assoc
					evaluated evaluated_map
					aggregated aggregated
				)
		))
	)

	;automatically prepare inputs for BatchReactSeries for a time series model and outputs an updated assoc of react parameters.
	;parameters:
	; init_time_steps: optional, time step values at which to begin synthesis
	; final_time_steps:  optional, time step values at which to end synthesis
	; context_features: optional, list of features to condition with values for all series
	; series_context_features: optional, list of features to condition with indivdiual values for each series
	; initial_features: optional, list of features to condition the first case for each series
	; initial_values: optional, list of list of values corresponding to initial_features for each series
	; series_stop_maps: optional, list of assoc of stop conditions for each series
	; derived_context_features: optional, list of features that will be derived to use as contexts
	; derived_action_features: optional, list of features that will be derived for output as actions
	; single_series: optional flag, default false, if set to true will output a single value for initial_values and series_stop_maps
	; output_new_series_ids: optional flag, default True, if true series ids are replaced with unique values on output.
	; series_id_tracking: optional string, default "fixed".
	 ;	If "fixed", tracks the particular relevant series ID.
	 ;	If "dynamic", tracks the particular series ID, but is allowed to change the series ID that it tracks based on its current context.
	 ;	If "no", does not track any particular series ID.
	#!PrepTimeSeriesFeatures
	(declare
		(assoc single_series (false) )

		(declare (assoc
			automatic_timeseries_features_list (append !tsTimeFeature (get !tsFeaturesMap "series_id_features"))
		))

		;check if parameters include time series features to automatically prepare parameters for a time series react:
		;execute the rest of the flow if user didn't specify any action features or
		;they specified both the time feature and all series id features as action features.
		;otherwise it's not time series and no prep is necessary
		(if (and
				(> (size action_features) 0)
				(!= 0 (size (remove (zip automatic_timeseries_features_list) action_features)))
			)
			(conclude)
		)

		(if feature_post_process_code_map
			(seq
				;populate the map of features needed for post processing of each feature
				;e.g., if 'value' feature needs 'value', 'current' and 'previous' features, this will output { 'value' { 'previous' (null) 'current' (null) }}
				;since the feature itself isn't needed in that list
				(assign (assoc
					post_process_needed_features_map
						(map
							(lambda
								;store all the needed features as a set (assoc with nulls)
								(remove
									(zip (call !FeaturesInCustomCode (assoc code_string (current_value 1))) )
									(current_index)
								)
							)
							feature_post_process_code_map
						)
				))

				;if given the custom post process map, overwrite it with the parsed versions of the code
				(assign (assoc
					feature_post_process_code_map
						(map
							(lambda
								;parse it into code, requires passing series data as a list of list of values and feat_index_map
								(call !ParseDerivedFeatureCode (assoc
									code_string (current_value 1)
									get_val
										(lambda
											(if (and (>= (- series_row_index lag) 0) (contains_index feature_index_map feature))
												(get series_data (list (- series_row_index lag) (get feature_index_map feature)) )
											)
										)
								))
							)
							feature_post_process_code_map
						)
				))
			)
		)

		(declare (assoc
			all_contexts series_context_features
			n_samples
				(if (size series_context_values)
					(size series_context_values)

					(= (null) n_samples)
					1

					n_samples
				)
		))

		;if generating new series ids or series ids are given, only initial series progress of zero is needed
		(if (or output_new_series_ids (size series_id_values))
			(assign (assoc
				initial_features (list ".series_progress")
				initial_values (list (list 0.0))
			))

			;else if we want to retain the existing IDs, we must specify them as
			;initial features (and matching initial values).
			(let
				(assoc
					all_contexts_set (zip all_contexts)
					series_id_features (list)
				)

				(assign (assoc
					;Only ID features which are not already specified as contexts should be in initial values
					series_id_features
						(filter
							(lambda (not (contains_index all_contexts_set (current_value)) ) )
							(get !tsFeaturesMap "series_id_features")
						)
				))

				(declare (assoc
					all_id_values_defined
						;true if all series_id_features are in series_context_features
						(=
							(size series_id_features)
							(size (keep (zip series_context_features) series_id_features))
						)
				))

				;ID features may be in one of the context lists
				;(series_context or context features). It's possible that no IDs actually need to be set as initial.
				(if (size series_id_features)
					(let
						(assoc
							initial_values_list
								;if continuing an untrained series where all id values are specified, use the id values from the specified data
								(if (and
										(size series_context_values)
										;TODO: 22655 support partial ID specification
										all_id_values_defined
									)
									(map
										(lambda
											;only keep the series id values
											(unzip
												;create an assoc of features -> values from first row of series
												(zip series_context_features (first (current_value)))
												series_id_features
											)
										)
										;list of lists of values
										series_context_values
									)

									;else pull all unique id feature combos from dataset and sample n_samples worth
									(map
										(lambda
											;a list of feature values for each unique conjuction
											;each item in the list if there were two series id features would look like so:
											;(list 12345 800)
											(map
												(lambda
													;covnvert value back to number if feature is non-string
													(if (contains_index !numericNominalFeaturesMap (get series_id_features (current_index)))
														(+ (current_value))
														;else leave id as string
														(current_value)
													)
												)
												(parse (current_value))
											)
										)

										;unique conjuctions of feature values for all the series features in an unparsed list (string) format
										;each item in the list if there were two series id features would look like so: "(list 12345 800)"
										(values
											(map
												(lambda
													(unparse (retrieve_from_entity (current_value) series_id_features))
												)
												(call !AllCases)
											)
											(true)
										)
									)
								)
						)

						(assign (assoc
							initial_values_list
								;when explicitly provided a list of untrained series to continue, keep that list
								(if (and all_id_values_defined (size series_context_values))
									initial_values_list

									;keeping n_samples worth of ids, sample randomly with replacement
									(rand initial_values_list n_samples)
								)
							initial_features (append (list ".series_progress") series_id_features)
						))

						(assign (assoc
							initial_values
								(map
									(lambda (append (list 0.0) (current_value)) )
									initial_values_list
								)
						))
					)

					;else
					(assign (assoc
						initial_features (list ".series_progress")
						initial_values (list (list 0.0))
					))
				)
			)
		)

		;if initial time step is specified but the time feature isn't in the initial_features list,
		;append them to initial values and features
		(if
			(and (size init_time_steps) (not (contains_value initial_features !tsTimeFeature)) )
			(assign (assoc
				initial_features (append initial_features !tsTimeFeature)
				initial_values
					(map
						(lambda (append (current_value) (first init_time_steps))) ;TODO: 14829 support multiple time steps - 1 per series
						initial_values
					)
			))
		)

		;if the .series_progress was not included in initial values, put it in there if not specifying init time step instead
		(if
			(and
				(= 0 (size init_time_steps))
				(not (contains_value initial_features ".series_progress"))
				(not (contains_value all_contexts ".series_progress"))
			)
			(assign (assoc
				initial_features (append initial_features ".series_progress")
				initial_values
					(map
						(lambda (append (current_value) 0.0))
						initial_values
					)
			))
		)

		;The default series stop maps stops series generation if the generated end_feature is True
		;or the length of the series has exceeded 3x the length of the dataset.
		(if (= 0 (size series_stop_maps))
			(assign (assoc
				series_stop_maps
					(if (size final_time_steps)
						(list (associate !tsTimeFeature (assoc "max" (first final_time_steps))) )  ;TODO: 14829 support multiple time steps - 1 per series
						;else stop when series_progress reaches 1
						(list (assoc ".series_progress" (assoc "max" 1)) )
					)
			))
		)

		;convert dates to epoch in series_stop_maps if necessary
		(if (size series_stop_maps)
			(assign (assoc
				series_stop_maps
					(map
						(lambda
							;for each feature in the stop map
							(map
								(lambda
									(if (contains_index !featureDateTimeMap (current_index))
										(let
											(assoc
												stop_map (current_value 1)
												stop_feature (current_index 1)
											)
											;iterate over the 'min' and 'max' keys in the stop_map
											(map
												(lambda
													(if (contains_value (list "max" "min") (current_index))
														;convert to epoch
														(format
															(current_value)
															(get !featureDateTimeMap (list stop_feature "date_time_format"))
															"number"
															{
																"locale" (get !featureDateTimeMap [ stop_feature "locale" ] )
																"time_zone" (get !featureDateTimeMap [ stop_feature "default_time_zone" ] )
															}
															(null)
														)

														(current_value)
													)
												)
												stop_map
											)
										)

										;else leave value as-is
										(current_value)
									)
								)
								(current_value)
							)
						)
						series_stop_maps
					)
			))
		)

		(declare (assoc
			series_id_features_set (zip (get !tsFeaturesMap "series_id_features"))
			all_contexts_set (zip all_contexts)
		))

		;derived context features should contain the needed lags. This list was populated during their creation.
		;derived action features are the features from the original data that aren't the series id features
		(assign (assoc
			derived_context_features
				(append
					(if use_all_features
						(get !tsFeaturesMap "lag_features")

						;only keep the lags for the action features
						(filter
							(lambda (contains_value action_features (get !derivedFeaturesMap (current_value))))
							(get !tsFeaturesMap "lag_features")
						)
					)
					derived_context_features
					(if (size final_time_steps)
						(list)
						(list ".series_progress")
					)
				)
			derived_action_features
				(append
					(filter
						(lambda (contains_value action_features (get !derivedFeaturesMap (current_value))))
						(get !tsFeaturesMap "derived_order_features")
					)
					(filter
						(lambda (not (contains_index series_id_features_set (current_value))))
						;list of original features (ones not starting with a '.') that have derived_feature_code should be derived for output
						(filter
							(lambda
								(and
									(!= "." (first (current_value)))
									(get !featureAttributes (list (current_value 1) "derived_feature_code"))
								)
							)
							;only use specified action features if not all features are to be modelled
							(if use_all_features !trainedFeatures action_features)
						)
					)
					derived_action_features
				)
		))

		;Features which have a derived code but aren't in either of the derived list should be
		;placed in derived context features, by default.
		(accum (assoc
			derived_context_features
				(filter
					(lambda (and
						(get !featureAttributes (list (current_value 1) "derived_feature_code"))
						(if use_all_features
							(true)

							;if not using all features, to be a derived context feature it must be an ID feature
							;or a TS-feature of a given action feature
							(or
								(contains_value (get !tsFeaturesMap "series_id_features") (current_value))
								(contains_value action_features (get !derivedFeaturesMap (current_value)))
							)
						)
						(not (contains_value derived_context_features (current_value)))
						(not (contains_value derived_action_features (current_value)))
						;whether .series_progress should be in derived_context_features is determined above
						;prevent it from being re-added from !trainedFeatures
						(!= ".series_progress" (current_value))
					))
					!trainedFeatures
				)
		))

		;if series ids should not use a fixed value, remove them from derived_context_features
		(if (!= "fixed" series_id_tracking)
			(assign (assoc
				derived_context_features (filter (lambda (not (contains_index series_id_features_set (current_value))) ) derived_context_features)
			))
		)

		(assign (assoc
			action_features
				(append
					;don't synth id features if there should be no id tracking
					(if (!= "no" series_id_tracking)
						(get !tsFeaturesMap "series_id_features")
						(list)
					)
					(if use_all_features
						(get !tsFeaturesMap "delta_features")

						(filter
							(lambda
								(or
									;categorical features are in the "delta_features" list...
									(!= "continuous" (get !featureAttributes [(current_value 1) "type"]))
									(contains_value derived_action_features (get !derivedFeaturesMap (current_value)))
								)
							)
							(get !tsFeaturesMap "delta_features")
						)
					)
					(if use_all_features
						(get !tsFeaturesMap "rate_features")

						(filter
							(lambda (contains_value derived_action_features (get !derivedFeaturesMap (current_value))))
							(get !tsFeaturesMap "rate_features")
						)
					)
					(if (contains_index (first series_stop_maps) ".series_progress")
						(list ".series_progress_delta")
						(list)
					)
				)
		))

		;Ensure that the user specified context features are not being derived but still being output
		;when forecasting, these features still need be derived
		(if (and (size all_contexts) (not continue_series))
			(seq
				(assign (assoc
					;This line ensures that some features aren't double-added to action_features later.
					action_features (filter (lambda (not (contains_index all_contexts_set (current_value)))) action_features)
					derived_action_features (filter (lambda (not (contains_index all_contexts_set (current_value)))) derived_action_features)
					derived_context_features (filter (lambda (not (contains_index all_contexts_set (current_value)))) derived_context_features)
				))

				(accum (assoc action_features all_contexts))
			)
		)

		;update parameters for time series for single series
		(if single_series
			(assign (assoc
				initial_values (first initial_values)
				series_stop_maps (first series_stop_maps)
			))
		)
	)
)
