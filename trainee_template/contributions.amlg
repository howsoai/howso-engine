;Module for trainee_template.
;Contains methods for computing and outputting feature contributions.
(null

	;Calculate and cache feature contributions - average delta between predicted value for action_feature with and without a context feature
	; for all specified context_features.
	;
	;parameters:
	;
	; context_features: list of features to use as contexts for computations.
	; action_feature: string,  compute contributions of each context feature at predicting this specified action feature
	; robust: flag, optional. if true will use the robust (power set/permutation) set of all other context_features
	;				 to compute the difference between prediction of action_feature with and without the context_feature in the model.
	; case_ids: list of cases to use for computing contributions
	; custom_hyperparam_map: optional, hyperparameters to use for computation
	; weight_feature: optional, default '.case_weight'.  name of feature whose values to use as case weights
	; num_samples: optional. Sample size of model to use (using sampling with replacement) for non-robust computation. Defaults to 1000.
	; num_robust_influence_samples: optional. Total sample size of model to use (using sampling with replacement) for robust contribution computation.
	;				  Defaults to 300.
	; num_robust_influence_samples_per_case: optional, Specifies the number of robust samples to use for each case for robust contribution computations.
	;				  Defaults to 300 + 2 * (number of features).
	; run_on_local_model: optional, if true will use all the provided cases and not store results to model
	; store_values: flag, optional. if set to true will store the statistics in trainee-level caches, if set to false will return the set of values
	#CalculateFeatureContributions
	(declare
		(assoc
			context_features (list)
			action_feature ""
			robust (false)
			case_ids (list)
			weight_feature ".case_weight"
			custom_hyperparam_map (null)
			num_robust_influence_samples_per_case (null)
			num_robust_influence_samples (null)
			num_samples (null)
			run_on_local_model (false)
			store_values (true)
		)

		(declare (assoc
			context_set (zip context_features)
			action_is_nominal
				(or
					(contains_index nominalsMap action_feature)
					;continuous strings are treated as nominals since we don't want to mix them
					(= "string" (get editDistanceFeatureTypesMap (target_value 1)))
				)
			hyperparam_map
				(if custom_hyperparam_map
					custom_hyperparam_map
					;else auto-determine, prefer to pull targeted hyperparameters analyzed to predict this action_feature
					(call GetHyperparameters (assoc
						feature action_feature
						context_features context_features
						mode "full"
						weight_feature weight_feature
					))
				)
			param_path (concat (if robust "robust" "full") weight_feature action_feature)
			feature_contributions_map (assoc)
			features (values (append context_features action_feature) (true))
			num_training_cases (call GetNumTrainingCases)
			num_features (size context_features)
			edit_distance_action_feature (contains_index editDistanceFeatureTypesMap action_feature)
			is_string_mixable (= "string_mixable" (get editDistanceFeatureTypesMap action_feaure))
		))

		;for robust flows set a default number of reacts per case, 200 + 2 * num features
		(if (and robust (= (null) num_robust_influence_samples_per_case))
			(assign (assoc
				num_robust_influence_samples_per_case (+ 300 (* 2 num_features) )
			))
		)

		;select the appropriate amount of cases if not running on local model.
		;
		; ROBUST: total amount of reacts is equal to: num_robust_influence_samples_per_case * num_cases_to_sample
		;
		; FULL: total amount of reacts is proportional to: num_features * num_cases_to_sample * 2
		;	limited num_cases_to_sample:  min(num_cases, max(250,  min(25000/num_features, 1000)) )
		;
		; such that the total number of reacts should be <= 50k
		(if (not run_on_local_model)
			(let
				(assoc
					num_cases_to_sample
						;if unspecified num_robust_influence_samples, sample 300 cases
						(if robust
							(if num_robust_influence_samples num_robust_influence_samples 300)

							;the number of cases to sample is total samples / number of features with a minimum of 10
							(if num_samples
								num_samples

								;full, attempt to limit to 50k total reacts, divide 25000 by num_features but limit to at least 200 and at most 1000
								(min num_training_cases (max 200 (min 1000 (/ 25000 num_features))))
							)
						)
				)

				(assign (assoc
					case_ids
						(if (> (size case_ids) num_cases_to_sample)
							(rand case_ids num_cases_to_sample (true))

							;if there aren't enough case_ids, randomly sample the necessary difference from the list to fill it up
							(< (size case_ids) num_cases_to_sample)
							(append
								case_ids
								(rand
									case_ids
									(- num_cases_to_sample (size case_ids))
								)
							)

							;else keep them as-is
							case_ids
						)
				))
			)
		)

		(if robust
			(call !RunRobustContributions)

			(call !RunFullContributions)
		)

		(declare (assoc directional_contributions_map (map (lambda (last (target_value))) feature_contributions_map) ))
		(assign (assoc feature_contributions_map  (map (lambda (first (target_value))) feature_contributions_map) ))

		;replace .nan with 0 to prevent .nan output, in situations where there were not enough samples to compute a contribution for a feature
		(if (contains_value feature_contributions_map .nan)
			(assign (assoc
				feature_contributions_map (map (lambda (if (= .nan (target_value)) 0 (target_value) )) feature_contributions_map)
			))
		)
		(if (contains_value directional_contributions_map .nan)
			(assign (assoc
				directional_contributions_map (map (lambda (if (= .nan (target_value)) 0 (target_value) )) directional_contributions_map)
			))
		)

		;outputs the pair of assocs
		(if (or run_on_local_model (not store_values) )
			(conclude (list feature_contributions_map directional_contributions_map))
		)

		(declare (assoc
			identifier_map
				(assoc
					".robust" robust
					".weight_feature" weight_feature
					".action_feature" action_feature
				)
		))

		;store both into their respective maps
		(assign_to_entities (assoc
			contributionsMap (set contributionsMap param_path (append feature_contributions_map identifier_map) )
			directionalContributionsMap (set directionalContributionsMap param_path (append directional_contributions_map identifier_map) )
		))

		(accum_to_entities (assoc revision 1))
	)

	;helper method for computing robust feature contributions.
	;iterate over num_cases_to_sample cases and run num_robust_influence_samples_per_case.  Each react uses a robust set of features. For each feature, we average out the delta
	;of predicting the action_feature when using vs not using it as a context feature.  Sets feature_contributions_map.
	#!RunRobustContributions
	(let
		;iterate over all the local cases, for each case, react multiple times with a different robust context feature set each time
		;for each react, store the reacted value for features that were used as contexts into each of those features' 'with feature' list
		;and store that reacted value for feature that were not used into each of their 'without feature' list
		;Then for each feature, average out all the 'with' and all the 'without' values and take the delta to compute the average delta
		;repeat for all cases and average those out.
		(assoc
			accrued_cases_delta_lists
				||(map
					(lambda (let
						(assoc
							case_id (target_value 1)
							correct_value (retrieve_from_entity (target_value 1) action_feature)
							case_values_map (zip context_features (retrieve_from_entity (target_value 1) context_features))
							local_case_reaction_pairs (list)
						)

						;for this local case, run num_robust_influence_samples_per_case reacts and output a list of pairs of [reacts_with_feature, reacts_without_feature]
						;Example output of a *single* react execution for a 4 feature dataset where the react value was 0.75 and it only used 'a' and 'd' as contexts:
						; [
						;	 [ .75 (null) (null) .75 ]  ;values for the 'with' context features, list corresponding to features a through d
						;	 [ (null) .75 .75 (null) ]  ;values for the 'without' features, list corresponding to features a through d
						; ]
						;Labeled as a helper method so that local_case_reaction_pairs can be computed on a per-case basis provided the following parameters:
						;  case_id: id of case for which to compute robust contributions
						;  correct_value: correct action_feature value from the case_id
						;  case_values_map: all the feature values from the case
						;  action_feature: feature for which to compute contributions
						;  context_features: list of features from which to select a robust set to use as context features for each react
						;  num_robust_influence_samples_per_case: total number of robust reacts to run on this case
						;  hyperparam_map: optional custom hyperparameter map, specifying which hyperparameters to use for the react
						;and thus can be used in individual react explanations to compute feature contributions for a specific case.
						#!ComputeRobustContributionReactsPerCase
						(assign (assoc
							local_case_reaction_pairs
								(range
									(lambda (let
										(assoc
											;list of bits for each remaining (non-removed) feature
											remaining_feature_flags (list)
											all_flags_set (true)
											;list of remaining filtered context features
											filtered_context_features (list)
											;set of all removed features
											without_features_set (assoc)
											with_features_set (assoc)
											react_value 0
											reaction (null)
										)

										;for robust computation we randomly (50/50) decide whether to remove a feature from the context
										;by creating a random flag list to match each of the context features
										;ensure that at least one feature is removed
										;this while statement should only loop in rare edge cases
										(while all_flags_set
											(assign (assoc remaining_feature_flags (map (lambda (< (rand) 0.5)) context_features) ))
											(assign (assoc all_flags_set (apply "and" remaining_feature_flags) ))
										)
										;filter out context features based on the bitmask and also create a set of all the removed features
										(assign (assoc
											filtered_context_features (filter (lambda (get remaining_feature_flags (target_index))) context_features)
											without_features_set
												(zip (filter (lambda (not (get remaining_feature_flags (target_index)) )) context_features) )
										))

										(assign (assoc
											reaction
												(call ReactDiscriminative (assoc
													context_features filtered_context_features
													context_values (unzip case_values_map filtered_context_features)
													action_features (list action_feature)
													skip_decoding (true)
													skip_encoding (true)
													;ignore the local case
													ignore_case case_id
													details (assoc "categorical_action_probabilities" action_is_nominal)
													hyperparam_map hyperparam_map
												))
											with_features_set (zip filtered_context_features)
										))

										(assign (assoc
											react_value
												(if action_is_nominal
													(+ (or
														(get reaction (list "categorical_action_probabilities" action_feature correct_value))
													))

													(get reaction (list "action_values" 0))
												)
										))

										;output a pair of two lists, each of the two list is the length of context_features
										; (list (list react_values_with_feature_as_context) (list react_values_without_feature_as_context))
										(list
											;all context features with this react_value as the 'with' list
											(map
												(lambda
													(if (contains_index with_features_set (target_value)) react_value)
												)
												context_features
											)

											;all removed features with this react_value as the 'without' list
											(map
												(lambda
													(if (contains_index without_features_set (target_value)) react_value)
												)
												context_features
											)
										)
									))
									1 num_robust_influence_samples_per_case 1
								)
						))

						;for this case, compute the absolute difference between the average with and average without for the computed feature combinations
						;do this computation for each feature
						;Labeled as a helper method to output a list of feature contribution values on a per-case basis provided the following parameters:
						;  local_case_reaction_pairs: list of pairs of [reacts_with_feature, reacts_without_feature]
						;  context_features: list of features to use as robust context features
						;and thus can be used in individual react explanations to compute feature contributions for a specific case.
						#!ComputeRobustWithAndWithoutDeltaPerCase
						(map
							(lambda (let
								(assoc feature_index (target_index 1))

								(declare (assoc
									;for this feature, pull all the 'with' react values, filtering out nulls
									feature_reactions_with
										(filter (map
											(lambda (get (first (target_value)) feature_index) )
											local_case_reaction_pairs
										))
									;for this feature, pull all the 'without' react values, filtering out nulls
									feature_reactions_without
										(filter (map
											(lambda (get (last (target_value)) feature_index) )
											local_case_reaction_pairs
										))
								))

								(if edit_distance_action_feature
									(let
										(assoc
											;create lists of 1's with appropriate sizes
											weights_with (range 1 1 (size feature_reactions_with) 1)
											weights_without (range 1 1 (size feature_reactions_without) 1)
											mixes (list)
											num_mixes 30
										)

										;mix all the with and all the without, take difference between them; do it num_mixes times
										(assign (assoc
											mixes
												||(range
													(lambda (let
														(assoc
															mixed_with
																(call CombineCode (assoc
																	sources feature_reactions_with
																	weights weights_with
																))
															mixed_without
																(call CombineCode (assoc
																	sources feature_reactions_without
																	weights weights_without
																))
														)
														(list
															(edit_distance mixed_with mixed_without is_string_mixable)
															(difference mixed_with mixed_without)
														)
													))
													1 num_mixes 1
												)
										))

										;mixes is a list of pairs,
										;collapse into a single pair by averaging out column 1 and column 2 separately
										(list
											(/ (apply "+" (map (lambda (first (target_value))) mixes)) num_mixes)
											;TODO: 17356, roll up/average out differences
											(/ (apply "+" (map (lambda (last (target_value))) mixes)) num_mixes)
										)
									)

									;else average with - average without for this feature
									(list
										(abs (-
											(/ (apply "+" feature_reactions_with) (size feature_reactions_with))
											(/ (apply "+" feature_reactions_without) (size feature_reactions_without))
										))
										(-
											(/ (apply "+" feature_reactions_with) (size feature_reactions_with))
											(/ (apply "+" feature_reactions_without) (size feature_reactions_without))
										)
									)
								)

							))
							context_features
						)
					))
					case_ids
				)
		)

		;compute feature contributions by averaging out each "column" feature delta across all cases, which is in the format of:
		; (list
		;    (list [2.3,-1.2], [4.5,4.3], [0.7,0.1], [0.4,-0.1])  ;list of [abs_avg,avg] feature deltas for case 1, corresponding to features a through d
		;    (list [2.1,-0.8], [4.1,4.1], [0.8,0.2], [0.8,0.2])   ;case 2, etc.
		;    ...
		(assign (assoc
			feature_contributions_map
				(zip
					context_features
					(map
						(lambda (let
							(assoc feature_index (target_index 1) )
							(list
								;for each feature, iterate over the list of feature deltas for each case, and average them out
								(/
									(apply "+" (map
										(lambda (get (target_value) (list feature_index 0)) )
										accrued_cases_delta_lists
									))
									(size accrued_cases_delta_lists)
								)
								(/
									(apply "+" (map
										(lambda (get (target_value) (list feature_index 1)) )
										accrued_cases_delta_lists
									))
									(size accrued_cases_delta_lists)
								)
							)
						))
						context_features
					)
				)
		))
	)

	;helper method for computing feature contributions.
	;iterates over all context_features and do 2 * num_cases_to_sample reacts for each feature, one with a full context feature set and one without the feature
	;to compute the average delta for the predicted action feature.
	;Sets feature_contributions_map.
	#!RunFullContributions
	(assign (assoc
		feature_contributions_map
			;for each feature, iterate over the cases to average out the delta between reactions with and without the feature
			(map
				(lambda (let
					(assoc
						feature (target_index 1)
						filtered_context_features (indices (remove context_set (target_index 1)))
						deltas (list)
					)

					(assign (assoc
						deltas
							(map
								(lambda (let
									(assoc
										case_id (target_value 1)
										case_values_map (zip features (retrieve_from_entity (target_value 1) features))
									)
									;Labeled as a helper method so that feature contributions can be computed on a per-case basis provided the following parameters:
									;  case_id: id of case for which to compute robust contributions
									;  case_values_map: all the feature values from the case
									;  action_feature: feature for which to compute contributions
									;  filtered_context_features: list of features to use as context features for each react
									;  action_is_nominal: flag, should be true if action_feature is nominal
									;  hyperparam_map: optional custom hyperparameter map, specifying which hyperparameters to use for the react
									;and thus can be used in individual react explanations to compute feature contributions for a specific case.
									#!ComputeFullContributionForCase
									(let
										(assoc
											reaction_with
												(call ReactDiscriminative (assoc
													context_features (append filtered_context_features feature)
													context_values (unzip case_values_map (append filtered_context_features feature))
													action_features (list action_feature)
													skip_decoding (true)
													skip_encoding (true)
													;ignore the local case
													ignore_case case_id
													details (assoc "categorical_action_probabilities" action_is_nominal)
													hyperparam_map hyperparam_map
												))
											reaction_without
												(call ReactDiscriminative (assoc
													context_features filtered_context_features
													context_values (unzip case_values_map filtered_context_features)
													action_features (list action_feature)
													skip_decoding (true)
													skip_encoding (true)
													;ignore the local case
													ignore_case case_id
													details (assoc "categorical_action_probabilities" action_is_nominal)
													hyperparam_map hyperparam_map
												))
											correct_value
												(if action_is_nominal
													(get case_values_map action_feature)
												)
										)

										;compute delta
										(if action_is_nominal
											(let
												(assoc
													with_prob (+ (or (get reaction_with (list "categorical_action_probabilities" action_feature correct_value)) ))
													without_prob (+ (or (get reaction_without (list "categorical_action_probabilities" action_feature correct_value)) ))
												)

												(list
													(abs
														(- with_prob without_prob )
													)
													(- with_prob without_prob)
												)
											)

											;else continuous, output pair of [absolute, non-absolute] delta
											(if edit_distance_action_feature
												(list
													(edit_distance
														(get reaction_with (list "action_values" 0))
														(get reaction_without (list "action_values" 0))
														is_string_mixable
													)
													;TODO: 17356, deal with averaging out differences
													(difference
														(get reaction_with (list "action_values" 0))
														(get reaction_without (list "action_values" 0))
													)
												)

												(list
													(abs (-
														(get reaction_with (list "action_values" 0))
														(get reaction_without (list "action_values" 0))
													))
													(-
														(get reaction_with (list "action_values" 0))
														(get reaction_without (list "action_values" 0))
													)
												)
											)
										)
									)
								))
								case_ids
							)
					))

					(list
						(/ (apply "+" (map (lambda (first (target_value))) deltas)) (size deltas))
						(/ (apply "+" (map (lambda (last (target_value))) deltas)) (size deltas))
					)

				))
				context_set
			)
	))


	;returns cached feature contributions in the format of assoc feature -> contribution value
	;parameters are optional, when not specified will auto-select cached contributions for output, when specified will attempt to output the cached
	;contributions best matching the requested parameters, null if none match.
	;
	;parameters:
	;
	; directional: flag, optional. Default is false, returns absolute feature contributions. When true returns directional feature contributions.
	; robust: flag, optional. if specified will attempt to return contributions that was computed with the specified robust or non-robust type.
	; action_feature: string, optional. if specified will attempt to return contributions that were computed for the specified action_feature.
	; weight_feature: string, optional. if specified, will attempt to return contributions that were computed using this weight_feature.
	#GetFeatureContributions
	(declare
		(assoc
			directional (false)
			robust (null)
			action_feature (null)
			weight_feature (null)
		)

		(if (= (null) robust action_feature weight_feature)
			(let
				(assoc contributions_map (if directional directionalContributionsMap contributionsMap) )
				;if only one contributions set has been computed, return it
				(if (= 1 (size contributions_map))
					(remove
						(first (values contributions_map))
						(list ".action_feature" ".robust" ".weight_feature")
					)

					;there are several cached contributions, pick one 'smartly':
					(remove
						(call !AutoSelectFeatureInfluences (assoc
							original_influences_map
								(if directional
									(retrieve_from_entity "directionalContributionsMap")
									(retrieve_from_entity "contributionsMap")
								)
						))
						(list ".action_feature" ".robust" ".weight_feature")
					)
				)
			)

			;else specified parameters, try to find the matching one
			(call !SelectFeatureInfluences (assoc
				filtered_influences_map
					(if directional
						(retrieve_from_entity "directionalContributionsMap")
						(retrieve_from_entity "contributionsMap")
					)
			))
		)
	)
)