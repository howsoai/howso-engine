;Module for trainee_template.
;Contains methods for calculating conviction for features.
(null

	;computes and returns an assoc where each key is an entity and each value is the expected probability that
	; a randomly chosen new point affects expected distances in a multi-spanning tree would affect each point's distance contribution
	;parameters:
	; features: list of features
	; entities: list of entity ids
	#CalculateAllClosestCaseProbabilities
	(let
		(assoc
			;weighted average distance from every entity to its nearest neighbors
			entity_dist_contribution_map (assoc)

			;total distance of spanning tree based on weighted average distances
			total_distances 0

			;probability of a new point having each entity as its nearest neighbor
			nearest_entity_probabilities (assoc)
		)

		;calculate distance contribution from every neighbor
		(assign (assoc
			entity_dist_contribution_map
				(compute_on_contained_entities (list
					||(compute_entity_distance_contributions
						(get hyperparam_map "k")
						features
						entities ;if null, will compute on full model
						(get hyperparam_map "featureWeights")
						queryDistanceTypeMap
						(get hyperparam_map "featureDomainAttributes")
						(get hyperparam_map "featureDeviations")
						(get hyperparam_map "p")
						(get hyperparam_map "dt")
						(if valid_weight_feature weight_feature (null))
						;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
						"fixed rand seed"
						(null) ;radius
						numericalPrecision
					)
				))
		))

		;compute total distance
		(assign (assoc total_distance (apply "+" (values entity_dist_contribution_map))))

		;convert the distance contributions to probabilities by dividing each one by the total distance
		(map
			(lambda (/ (current_value) total_distance))
			entity_dist_contribution_map
		)
	)

	;computes the conviction for each feature and returns an assoc of feature -> conviction value
	;parameters:
	; features: list of label names
	; action_features: optional, list of action features to use as the baseline for conviction instead of the full model
	; case_ids: optional list of cases for which to use as the model to compute feature conviction
	; familiarity_conviction_addition: deafult to true, calculate and output familiarity conviction of adding the specified features
	; familiarity_conviction_removal: default to false, calculate and output familiarity conviction of removing the specified features
	; use_case_weights: flag, if set to true will scale influence weights by each case's weight_feature weight
	; weight_feature: optional, default '.case_weight'.  name of feature whose values to use as case weights
	#ComputeFeatureFamiliarityConviction
	(declare
		(assoc
			features (list)
			action_features (list)
			case_ids (list)
			familiarity_conviction_addition (true)
			familiarity_conviction_removal (false)
			use_case_weights (false)
			weight_feature ".case_weight"
		)

		;if features aren't specified, assume all defaultFeatures will need to have their mae calculated
		(if (= 0 (size features))
			(assign (assoc features defaultFeatures))
		)

		(declare (assoc
			hyperparam_map
				(call GetHyperparameters (assoc
					feature ".targetless"
					context_features features
					mode "robust"
					weight_feature ".none"
				))
			valid_weight_feature (false)
		))

		;if user doesn't want to use case weights, change weight_feature to '.none'
		(if (not use_case_weights)
			(assign (assoc weight_feature ".none"))

			;else using case weights, weight feature is valid if it's custom (not .case_weight) or hasPopulatedCaseWeight
			(assign (assoc valid_weight_feature (or hasPopulatedCaseWeight (!= weight_feature ".case_weight"))))
		)

		;can't compute feature conviction on 1 feature, return 0 if one or no features are specified
		(if (< (size features) 2)
			;output a map of feature -> value where the value is 0 for all features
			(zip features 0)

			(let
				(assoc
					feature_entropies
						(unzip
							(call ComputeEntropyOfFeatures (assoc
								features features
								action_features action_features
								case_ids case_ids
							))
							features
						)
				)

				;output assoc with 'familiarity_conviction_addition' and/or 'familiarity_conviction_removal'
				(append
					(if familiarity_conviction_addition
						(assoc
							"familiarity_conviction_addition"
								(let
									(assoc
										;the first of the pair is the addition familiarity kl value
										addition_entropies (map (lambda (first (current_value))) feature_entropies)
										avg_feature_entropy 0
									)
									(assign (assoc
										avg_feature_entropy (/ (apply "+" addition_entropies) (size feature_entropies))
									))

									;output assoc of conviction of each feature as : average feature entropy / feature entropy
									(map
										(lambda
											;if the average entropy is 0, that means all entropies are 0, thus return 1 for conviction
											(if (= 0 avg_feature_entropy)
												1.0

												(/ avg_feature_entropy (current_value))
											)
										)
										(zip features addition_entropies)
									)
								)
						)
						(assoc)
					)
					(if familiarity_conviction_removal
						(assoc
							"familiarity_conviction_removal"
								(let
									(assoc
										;the second of the pair is the removal familiarity kl value
										removal_entropies (map (lambda (last (current_value))) feature_entropies)
										avg_feature_entropy 0
									)
									(assign (assoc
										avg_feature_entropy (/ (apply "+" removal_entropies) (size feature_entropies))
									))

									;output assoc of conviction of each feature as : average feature entropy / feature entropy
									(map
										(lambda
											;if the average entropy is 0, that means all entropies are 0, thus return 1 for conviction
											(if (= 0 avg_feature_entropy)
												1.0

												(/ avg_feature_entropy (current_value))
											)
										)
										(zip features removal_entropies)
									)
								)
						)
						(assoc)
					)
				)
			)
		)
	)

	;computes the entropy of each feature given a list of features and their weights for the current model
	;returns an assoc of feature -> entropy
	; features: list of all features
	; action_features: optional, list of action features to use as the baseline for conviction instead of the full model
	; cases: optional list of cases for which to use as the model to compute feature conviction
	#ComputeEntropyOfFeatures
	(declare
		(assoc
			features (list)
			action_features (list)
			case_ids (list)
		)

		(if (> (call GetNumTrainingCases) 2)
			(let
				(assoc
					;current probability of a new point having each entity as its nearest neighbor
					prior_nearest_entity_probabilities (assoc)

					;probability of a new point having each entity as its nearest neighbor given new_cases
					full_model_entity_probabilities (assoc)

					entities
						(if (> (size case_ids) 0)
							case_ids
							;else compute on all the existing cases
							(null)
						)
				)

				;compute probabilities for trainee with all contexts
				(assign (assoc
					full_model_entity_probabilities
						(call CalculateAllClosestCaseProbabilities (assoc
							features
								(if (= 0 (size action_features))
									features
									action_features
								)
							entities entities
						))
				))

				;use knockout one feature at a time, unless action features then compute it between each feature and the action features
				;return an assoc of features -> entropy using one by one knockout/filtering of features
				(zip
					features

					;for every feature, store the index and filter out the features by that index
					;then calculate the probabilities for all the entities given the filtered list of features
					(map
						(lambda
							(let
								(assoc ct_index (current_index 1) )

								(if (> (size action_features) 0)
									(assign (assoc
										;compute probabilities of entities for this one feature
										filtered_features (list (current_value 2))
									))

									;else filter out the one feature from the list and its corresponding weight
									(assign (assoc
										filtered_features (filter (lambda (!= (current_index) ct_index)) features)
									))
								)

								;probabilities of entities for the filtered list
								(assign (assoc
									prior_nearest_entity_probabilities
										(call CalculateAllClosestCaseProbabilities (assoc
											features filtered_features
											entities entities
										))
								))

								(list
									;output the kl divergence for each feature as addition
									(entropy
										;prior data with model with specific feature subset
										prior_nearest_entity_probabilities
										;full model
										full_model_entity_probabilities
									)

									;output the kl divergence for each feature as removal
									(entropy
										;prior data of full model
										full_model_entity_probabilities
										;posterior data with model with specific feature subset
										prior_nearest_entity_probabilities
									)
								)
							)
						)
						features
					)
				)
			)

			;else model is too small, return 0 for each feature
			(zip features (range (lambda (list 0 0)) 1 (size features) 1))
		)
	)
)