;Module for trainee_template.
;Contains helper methods for calculating distances for explanations and audit data.
(null

	;Helper method to compute distance ratios.
	#ComputeDistanceRatio
	(let
		(assoc
			dist_to_closest_case 0
			;Search for 1 extra outside k to check for ties.
			query_k_parameter (min 15 (+ 1 k_parameter))
			num_most_similar_case_indices (min most_similar_case_indices_parameter 15)
			closest_case (null)
		)
		(declare (assoc
			local_model_cases_tuple
				#!DistanceRatioQuery
				(compute_on_contained_entities (append
					filtering_queries
					(query_nearest_generalized_distance
						query_k_parameter
						context_features
						context_values
						feature_weights
						queryDistanceTypeMap
						query_feature_attributes_map
						;Feature deviations are not used in order to ensure that we are measuring privacy
						;assuming it has been maximally preserved. Deviations make cases look farther away than they are.
						(null) ;feature_deviations
						p_parameter
						1 ;dt of 1 queries distance in ascending order
						(null) ;Weight_feature is set to null so the computation done here matches the rejection criteria
								;in generate.amlg.
						;Use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed").
						"fixed rand seed"
						(null) ;radius
						"precise"
						(true) ;output_sorted_list
					)
				))
		))
		(assign (assoc
			dist_to_closest_case (first (last local_model_cases_tuple))
		))

		;If the last and the second-to-last distances are same, need to expand the query to find all equidistant cases.
		(if (=
				(last (last local_model_cases_tuple))
				(get (last local_model_cases_tuple) (- (size (last local_model_cases_tuple)) 2))
			)
			(let
				(assoc
					expandeded_cases_tuple (list)
					expand (true)
					num_cases (call GetNumTrainingCases)
					tie_distance (last (last local_model_cases_tuple))
					expanded_case_distances (list)
					previous_k 0
				)

				(while expand
					;Store pre-doubled value so that we don't reduce it further than this.
					(assign (assoc previous_k query_k_parameter))
					;Double the query k value to exapand the search.
					(assign (assoc query_k_parameter (* 2 query_k_parameter) ))
					(assign (assoc expandeded_cases_tuple (call !DistanceRatioQuery) ))

					;Keep only distances that are <= tie_distance, but don't reduce past the previous_k.
					(assign (assoc
						expanded_case_distances
							(filter
								(lambda
									(or
										(<= (current_value) tie_distance)
										(< (current_index) previous_k)
									)
								)
								(last expandeded_cases_tuple)
							)
					))

					;If there are distances that were filtered out, we can stop expanding.
					(if (< (size expanded_case_distances) (size (first expandeded_cases_tuple)) )
						(assign (assoc
							expand (false)
							local_model_cases_tuple
								(list
									;keep the corresponding case ids
									(trunc (first expandeded_cases_tuple) (size expanded_case_distances))
									expanded_case_distances
								)
						))
					)

					;Stop if increased to size of dataset.
					(if (>= query_k_parameter num_cases)
						(assign (assoc expand (false)))
					)
				)
			)

			;Else drop the k+1'th case.
			(if (= (size (last local_model_cases_tuple)) (+ 1 k_parameter))
				(assign (assoc
					local_model_cases_tuple
						(list
							(trunc (first local_model_cases_tuple))
							(trunc (last local_model_cases_tuple))
						)
				))
			)
		)

		;Compute distance contributions with k=1 to determine the smallest non-zero
		;distance between any two cases in the local model.
		(assign (assoc
			local_model_min_distance_contribution
				(call QueryLocalModelMinDistanceContribution (assoc
					feature_labels context_features
					entity_ids_to_compute (first local_model_cases_tuple)
					filtering_queries filtering_queries
					use_feature_deviations (false)
				))
		))

		;Pull the session and session training index for the nearest neighbors.
		(declare (assoc
			audit_data
				(if
					(> num_most_similar_case_indices 0)
					(map
						(lambda
							(set
								(retrieve_from_entity (first (current_value)) ;case index
									(zip (list ".session" ".session_training_index"))
								)
								".distance"
								(last (current_value)) ;distance
							)
						)
						(trunc (first local_model_cases_tuple) num_most_similar_case_indices)
						(trunc (last local_model_cases_tuple) num_most_similar_case_indices)
					)
					(list)
				)
			distance_ratio
				(/ dist_to_closest_case local_model_min_distance_contribution)
		))

		(accum (assoc
			output
				(assoc
					distance_ratio
						;The distance_ratio can be .infinity or .nan if there are no cases
						;in the model which are different from the cases being reacted to.
						;Since these are effectively no different from duplicates, from a
						;privacy standpoint, we return 0 in these cases.
						(if (= distance_ratio .infinity)
							0
							(= distance_ratio .nan)
							0
							distance_ratio
						)
					distance_ratio_parts
						(assoc
							local_distance_contribution
								local_model_min_distance_contribution
							nearest_distance
								dist_to_closest_case
						)
					most_similar_case_indices
						audit_data
				)
		))
	)

	;Returns a list of computed distances between respective cases specified in either from_values or from_case_indices to to_values or to_case_indices.
	; If one case is specified in any of the lists, all respective distances are computed to/from that one case.
	;
	;parameters:
	; from_values: optional list of cases (lists of values), i.e., a 2d-list of values. Either from_values or from_case_indices must be specified, not both.
	;			if specified must be either length of 1 or match length of to_values or to_case_indices.
	; to_values: optional list of cases (lists of values), i.e., a 2d-list of values. Either to_values or to_case_indices must be specified, not both.
	;			if specified must be either length of 1 or match length of from_values or from_case_indices.
	; from_case_indices: optional, list of pair (list) of session id and index, where index is the original 0-based session_training_index of the case as it was trained.
	;			if specified must be either length of 1 or match length of to_values or to_case_indices.
	; to_case_indices: optional list of pair (list) of session id and index, where index is the original 0-based session_training_index of the case as it was trained.
	;			if specified must be either length of 1 or match length of from_values or from_case_indices.
	; features: optional, which features to use when computing pairwise distances. If unspecified uses all features.
	; action_feature: optional, if specified, uses targeted hyperparameters used to predict this action_feature, otherwise uses targetless hyperparameters.
	; weight_feature: optional, default '.case_weight'.  name of feature whose values to use as case weights
	; use_case_weights: optional flag, if set to true will scale influence weights by each case's weight_feature weight
	#PairwiseDistances
	(declare
		(assoc
			features (null)
			action_feature (null)
			from_values (list)
			to_values (list)
			from_case_indices (list)
			to_case_indices (list)
			weight_feature ".case_weight"
			use_case_weights (false)
		)

		(if (= (null) features)
			(assign (assoc features defaultFeatures))
		)

		;if user doesn't want to use case weights, change weight_feature to '.none'
		(if (not use_case_weights)
			(assign (assoc weight_feature ".none"))
		)

		(declare (assoc
			hyperparam_map
				(call GetHyperparameters (assoc
					context_features features
					feature (if action_feature action_feature ".targetless")
					mode (if action_feature "full" "robust")
					weight_feature weight_feature
				))
			;create a map of unique session ids -> (null)
			session_indices_map
				(append
					(zip
						;pull all the session ids from from_case_indices
						(map (lambda (first (current_value))) from_case_indices)
					)
					(zip
						;pull all the session ids from to_case_indices
						(map (lambda (first (current_value))) to_case_indices)
					)
				)
			repeat_from_index (or (= 1 (size from_values)) (= 1 (size from_case_indices)) )
			repeat_to_index (or (= 1 (size to_values)) (= 1 (size to_case_indices)) )
			has_from_values (> (size from_values) 0)
			has_to_values (> (size to_values) 0)
			;pre-compute value of last index of output distances list by taking the largest size and subtracting 1
			last_index (- (max (size from_values) (size to_values) (size from_case_indices) (size to_case_indices)) 1)
		))

		(declare (assoc
			feature_weights (get hyperparam_map "featureWeights")
			feature_deviations  (if (get hyperparam_map "useDeviations") (get hyperparam_map "featureDeviations") (get hyperparam_map "nullUncertainties") )
			p_value (get hyperparam_map "p")
			query_feature_attributes_map (get hyperparam_map "featureDomainAttributes")
		))

		;iterate over all the unique session ids and create a map of session id -> session indices map
		(assign (assoc
			session_indices_map
				(map
					(lambda (retrieve_from_entity (current_index) ".indices_map") )
					session_indices_map
				)
		))

		;if there is a single from or to value and it needs encoding, go ahead and do that encoding here once ahead of time
		;but keep from_values and to_values as 2-d lists
		(if (and has_from_values repeat_from_index hasFeaturesNeedEncodingFromInput)
			(assign (assoc
				from_values
					(list
						(call ConvertFromInput (assoc
							feature_values (first from_values)
							features features
						))
					)
			))
		)

		(if (and has_to_values repeat_to_index hasFeaturesNeedEncodingFromInput)
			(assign (assoc
				to_values
					(list
						(call ConvertFromInput (assoc
							feature_values (first to_values)
							features features
						))
					)
			))
		)

		||(map
			(lambda (let
				(assoc
					from_case_values
						(if has_from_values
							(if repeat_from_index
								;reuse the same already-encoded values
								(first from_values)

								(if hasFeaturesNeedEncodingFromInput
									(call ConvertFromInput (assoc
										feature_values 	(get from_values (current_index 2))
										features features
									))

									;else use values as-is
									(get from_values (current_index 1))
								)
							)

							;else has from_case_indices
							(if repeat_from_index
								(retrieve_from_entity (get session_indices_map (first from_case_indices)) features)
								(retrieve_from_entity (get session_indices_map (get from_case_indices (current_index 1))) features)
							)
						)

					to_case_values
						(if has_to_values
							(if repeat_to_index
								;reuse the same already-encoded values
								(first to_values)

								(if hasFeaturesNeedEncodingFromInput
									(call ConvertFromInput (assoc
										feature_values (get to_values (current_index 2))
										features features
									))

									;else use values as-is
									(get to_values (current_index 1))
								)
							)

							;else has to_case_indices
							(if repeat_to_index
								(retrieve_from_entity (get session_indices_map (first to_case_indices)) features)
								(retrieve_from_entity (get session_indices_map (get to_case_indices (current_index 1))) features)
							)
						)
				)

				;TODO: 12943, faster way to compute distance from_case_id to to_case_id, QUERY?
				(generalized_distance
					feature_weights
					queryDistanceTypeMap
					query_feature_attributes_map
					feature_deviations
					p_value
					from_case_values
					to_case_values
					(null)
					features
				)
			))
			(range 0 last_index)
		)
	)

	;Returns an assoc with case distances, containing a list of case session indices and a list of lists (matrix) of the computed distances.
	; in the following format:
	; {
	;	'column_case_indices' : [ session-indices ],
	;	'row_case_indices' : [ session-indices ],
	;	'distances': [ [ pairwise distances ] ]
	; }
	;
	;parameters:
	; features: optional, which features to use when computing case distances. If unspecified uses all features.
	; feature_values: optional, if specified, returns case distances of the local model relative to these values, ignores case_indices parameter.
	; action_feature: optional, if specified, uses targeted hyperparameters used to predict this action_feature, otherwise uses targetless hyperparameters.
	; case_indices: optional, list of pair (list) of session id and index, where index is the original 0-based session_training_index of the case as it was
	;		 trained. If specified, returns pairwise distances for all of these cases. Ignored if feature_values is provided. If neither feature_values nor
	;		case_indices is specified, runs on the full dataset.
	; column_offset: optional, starting column index of the full matrix of cases for which to compute distances. default value is 0
	; column_count: optional, number of columns to compute in the matrix.  If unspecified, is set to the same number as all the cases.
	; row_offset: optional, starting row index of the full matrix of cases for which to compute distances. default value is 0
	; row_count: optional, number of rows to compute in the matrix.  If unspecified, is set to the same number as all the cases.
	; weight_feature: optional, default '.case_weight'.  name of feature whose values to use as case weights
	; use_case_weights: optional flag, if set to true will scale influence weights by each case's weight_feature weight
	#Distances
	(declare
		(assoc
			features (null)
			feature_values (null)
			action_feature (null)
			case_indices (null)
			weight_feature ".case_weight"
			use_case_weights (false)
			column_offset 0
			row_offset 0
			column_count (null)
			row_count (null)

			;local variables, should not be passed in as a parameter
			valid_weight_feature (false)
		)

		(if (= (null) features)
			(assign (assoc features defaultFeatures))
		)

		;if user doesn't want to use case weights, change weight_feature to '.none'
		(if (not use_case_weights)
			(assign (assoc weight_feature ".none"))

			;else using case weights, weight feature is valid if it's custom (not .case_weight) or hasPopulatedCaseWeight
			(assign (assoc valid_weight_feature (or hasPopulatedCaseWeight (!= weight_feature ".case_weight"))))
		)

		(declare (assoc
			hyperparam_map
				(call GetHyperparameters (assoc
					context_features features
					feature (if action_feature action_feature ".targetless")
					mode (if action_feature "full" "robust")
					weight_feature weight_feature
				))
			case_ids (list)
			row_case_ids (list)
			column_case_ids (list)
			session_indices_map (assoc)
			column_case_indices (null)
			row_case_indices (null)
		))

		(declare (assoc
			feature_weights (get hyperparam_map "featureWeights")
			feature_deviations  (if (get hyperparam_map "useDeviations") (get hyperparam_map "featureDeviations") (get hyperparam_map "nullUncertainties") )
			p_value (get hyperparam_map "p")
			k_value (get hyperparam_map "k")
			dt_value (get hyperparam_map "dt")
			query_feature_attributes_map (get hyperparam_map "featureDomainAttributes")
		))

		(if feature_values
			;local model of case_ids
			(assign (assoc
				case_ids
					(contained_entities (list
						(query_nearest_generalized_distance
							k_value
							features
							(if hasFeaturesNeedEncodingFromInput
								(call ConvertFromInput (assoc
									feature_values feature_values
									features features
								))

								;else use values as-is
								feature_values
							)
							feature_weights
							queryDistanceTypeMap
							query_feature_attributes_map
							feature_deviations
							p_value
							dt_value
							(if valid_weight_feature weight_feature (null))
							(rand)
							(null) ;radius
							numericalPrecision
						)
					))
			))

			;else user specified case_indices
			(> (size case_indices) 1)
			(assign (assoc
				case_ids
					(map
						(lambda (let
							(assoc
								session (first (current_value 1))
								case_index (last (current_value 1))
							)

							;if session_indices_map doesn't have this session, add it
							(if (not (contains_index session_indices_map session))
								(accum (assoc session_indices_map (associate session (retrieve_from_entity session ".indices_map")) ))
							)

							(get session_indices_map (list session case_index))
						))
						case_indices
					)
				column_case_indices case_indices
				row_case_indices case_indices
			))

			;else use full dataset
			(= (size case_indices) 0)
			(assign (assoc case_ids (call AllCases)))
		)

		(declare (assoc
			num_cases (size case_ids)
			column_row_are_same (true)
		))

		(if (= (null) column_count)
			(assign (assoc column_count num_cases))
		)
		(if (= (null) row_count)
			(assign (assoc row_count num_cases))
		)

		;if user custom-specified offsets or sizes:
		(if (or (> column_offset 0) (> row_offset 0) (!= column_count num_cases) (!= row_count num_cases))
			(seq
				;size can't exceed dimension of matrix
				(assign (assoc
					column_count (min column_count (- num_cases column_offset))
					row_count (min row_count (- num_cases row_offset))
				))
				(assign (assoc
					column_case_ids (unzip case_ids (range column_offset (+ column_offset (- column_count 1))))
					row_case_ids (unzip case_ids (range row_offset (+ row_offset (- row_count 1))))
					column_row_are_same (false)
				))
			)

			;else iterate over the whole dataset, both x and y cases are the same list
			(assign (assoc
				column_case_ids case_ids
				row_case_ids case_ids
			))
		)

		(declare (assoc
			distances_matrix
				||(map
					(lambda
						(unzip
							(compute_on_contained_entities (list
								(query_in_entity_list column_case_ids)
								(query_within_generalized_distance
									.infinity ;distance
									features
									(retrieve_from_entity (current_value 1) features)
									feature_weights
									queryDistanceTypeMap
									query_feature_attributes_map
									feature_deviations
									p_value
									1 ;dt
									(if valid_weight_feature weight_feature (null))
									"fixed rand seed"
									(null) ;radius
									numericalPrecision
								)
							))
							column_case_ids
						)
					)
					row_case_ids
				)
		))

		;populate x and y case_indices for all the cases if necessary
		(if (= (null) column_case_indices)
			(assign (assoc
				column_case_indices
					(map
						(lambda
							;pair of: session, session training index
							(retrieve_from_entity (current_value) (list internalLabelSession internalLabelSessionTrainingIndex))
						)
						column_case_ids
					)
			))
		)

		(if (= (null) row_case_indices)
			(assign (assoc
				row_case_indices
					(if column_row_are_same
						column_case_indices

						(map
							(lambda
								;pair of: session, session training index
								(retrieve_from_entity (current_value) (list internalLabelSession internalLabelSessionTrainingIndex))
							)
							row_case_ids
						)

					)
			))
		)

		(assoc
			"column_case_indices" column_case_indices
			"row_case_indices" row_case_indices
			"distances" distances_matrix
		)
	)

	;given a list of entity ids, determine the minimum distance contribution between
	; all of those cases. Returns the minimum entity distance contribution.
	;parameters:
	; feature_labels : list of feature labels to use for determining distance contributions
	; entity_ids_to_compute : list of entity IDs to compute minimum distance between.
	; filtering_queries : optional, list of filtering queries to apply before computing entity distance
	;					  contributions. Most useful for when calling this method when computing distance ratios.
	; use_feature_deviations : optional, flag which determines whether feature_deviations are used in the query.

	; Queries local distances based on new_case_threshold
	; max is the maximum local distance
	; min is the minimum local distance
	; most_similar is the closest distance of the most similar case
	#QueryLocalModelMinDistanceContribution
	(declare
		(assoc
			feature_labels (list)
			entity_ids_to_compute (list)
			filtering_queries (list)
			use_feature_deviations (false)
		)
		(if (= "max" new_case_threshold)
			(apply "max"
				(values (compute_on_contained_entities
					(append
						filtering_queries
						(compute_entity_distance_contributions
							1 ;entities_returned
							feature_labels
							entity_ids_to_compute
							feature_weights
							queryDistanceTypeMap
							query_feature_attributes_map
							(if use_feature_deviations (get hyperparam_map "featureDeviations") (get hyperparam_map "nullUncertainties"))
							p_parameter
							1 ;dt = 1 means return computed distance to the case
							(null) ;weight_feature
							(rand)
							(null) ;radius
							"precise"
						)
					)
				))
			)

			(= "most_similar" new_case_threshold)
			(seq
				(if (= (null) closest_case)
					(assign (assoc closest_case (first entity_ids_to_compute) ))
				)
				(assign (assoc
					closest_dist_to_closest_case
						(compute_on_contained_entities (append
							(query_not_in_entity_list (list closest_case))
							;Filters out the closest case itself
							(query_nearest_generalized_distance
								;limit the number of considered nearby neighbors by limiting the bandwidth of local minimum distance
								;comparison for density-based anonymity preservation, for performance reasons.
								;May be more accuraty to remove the limit of 15 in the future.
								1
								feature_labels
								(retrieve_from_entity closest_case feature_labels)
								feature_weights
								queryDistanceTypeMap
								query_feature_attributes_map
								;Feature deviations are not used in order to ensure that privacy is maximally preserved.
								;If feature deviations are used, duplicate cases may be deemed private.
								(null) ;feature_deviations
								p_parameter
								1 ;dt = 1 means return computed distance to each case
								(null) ;weight
								(rand)
								(null) ;radius
								"precise"
							)
						))
				))
				(first (values closest_dist_to_closest_case))
			)

			(apply "min"
				(values (compute_on_contained_entities
					(append
						filtering_queries
						(compute_entity_distance_contributions
							1 ;entities_returned
							feature_labels
							entity_ids_to_compute
							feature_weights
							queryDistanceTypeMap
							query_feature_attributes_map
							(if use_feature_deviations (get hyperparam_map "featureDeviations") (get hyperparam_map "nullUncertainties"))
							p_parameter
							1 ;dt = 1 means return computed distance to the case
							(null) ;weight_feature
							(rand)
							(null) ;radius
							"precise"
						)
					)
				))
			)
		)
	)
)
