(null

	;Helper method to create the actual full contained entity path by interleaving traineeContainer with each name in the path
	#!ConvertNamePathToEntityPath
	(weave (range traineeContainer 1 (size path) 1) path)

	;method to recurse down the the hierarchy to output the currently contained hierarchy as a nested assoc
	;with (false) for trainees that are stored independently
	#GetHierarchy
	(let
		(assoc children (indices childTraineeIsContainedMap))

		(zip
			children
			(map
				(lambda
					(if (get childTraineeIsContainedMap (current_value))
						(call_entity (list traineeContainer (current_value 1)) "GetHierarchy")

						;can't traverse down trainees that are stored externally
						(false)
					)
				)
				children
			)
		)
	)

	;Returns the full entity path to a child trainee provided its unique trainee id if it is contained in the hierarchy.
	;Iterates down the hierarchy searching for a trainee that matches the specified id, returns null if not found or
	;a string error if found but trainee is stored externally as an independent trainee.
	;
	;parameters:
	; id: unique id of trainee
	; path: optional, list of strings, entity path to parent of trainee
	#GetEntityPathById
	(declare
		(assoc
			path (list)
			id (null)
		)

		;this id is a child
		(if (contains_index containedTraineeIdToNameMap id)
			(let
				(assoc name (get containedTraineeIdToNameMap id))
				(if (get childTraineeIsContainedMap name)
					(conclude (append path traineeContainer name))
					;else it's stored externally
					(conclude "Specified an independently stored trainee.")
				)
			)
		)

		(declare (assoc
			child_name (null)
			contained_trainees (contained_entities traineeContainer)
			output_path (null)
		))

		;traverse contained hierarchy searching all id->name lookups to find specified id, then generate path if id is found
		(while (< (current_index) (size contained_trainees))
			(assign (assoc child_name (get contained_trainees (current_index 1)) ))

			(assign (assoc
				output_path
					(call_entity (list traineeContainer child_name) "GetEntityPathById" (assoc
						path (append path traineeContainer child_name)
						id id
					))
			))

			(if (or
					(~ "string" output_path)
					(~ (list) output_path)
				)
				(conclude (conclude output_path))
			)
		)

		(null)
	)

	;Validates, finds and returns the matching full entity path for a specified subtrainee.
	;output is in the format of (list traineeContainer child1 traineeContainer child2)
	;
	;parameters:
	; name_path: optional,  list of strings specifying the user-friendly path to the child subtrainee.
	;		May be an incomplete path as long as it uniquely identifies the trainee.
	; id: optional, unique id of the subtrainee. Ignored if name_path is specified.
	; child_should_not_exist: optional, boolean.  when true, checks that the specified child does not already exist and errors if it does.
	; child_must_be_contained: optional, boolean.  default true. when false true won't error out of child is stored externally
	#ResolveChildEntityPath
	(declare
		(assoc
			name_path (null)
			id (null)
			child_should_not_exist (false)
			child_must_be_contained (true)
		)

		;use id instead of name_path if provided only id
		(if (and (= 0 (size name_path)) id)
			(let
				(assoc child_entity_path (call GetEntityPathById (assoc id id)))
				(conclude
					(if (!= (null) child_entity_path)
						child_entity_path
						"Invalid trainee id specified."
					)
				)
			)
		)

		(if (and (= (null) id) (= 0 (size name_path)))
			(conclude (null))
		)

		(declare (assoc
			path_length (- (size name_path) 1)
			entity_path (list)
			child_name (null)
		))

		;traverse down the path to validate it
		(while (<= (current_index) path_length)
			(assign (assoc
				child_name (get name_path (current_index 1))
				child_is_contained_map (retrieve_from_entity entity_path "childTraineeIsContainedMap")
			))

			;if this is the last trainee in the path and it should not exist
			(if (and child_should_not_exist (= (current_index) path_length))
				(if (contains_index child_is_contained_map child_name)
					(conclude (conclude "Specified trainee is already in the hierarchy."))
				)

				;else child must exist
				(if (not (contains_index child_is_contained_map child_name))
					(conclude (conclude "Invalid name path specified."))

					(and child_must_be_contained (= (false) (get child_is_contained_map child_name)))
					(conclude (conclude "Specified an independently stored trainee."))
				)
			)

			(accum (assoc
				entity_path (list traineeContainer child_name)
			))
		)

		;output entity path
		entity_path
	)

	;Method to update this trainee's Parent's is_contained status, used when a trainee is saved as an independent external trainee.
	;The parent's is_contained value for this trainee and all its child trainees will then also be set to false.
	;
	;parameters:
	; child_entity_path: path to child trainee
	; is_contained: boolean, true means this child is contained inside traineeContainer, false means it is stored and loaded independently
	#UpdateParentsIsContainedMap
	(seq
		(declare (assoc path_to_parent (trunc child_entity_path -2) ))
		(accum_to_entities path_to_parent (assoc
			childTraineeIsContainedMap (associate (last child_entity_path) is_contained)
		))
	)

	;Store the name -> is_contained for the specified child in its parent and update the child's parentId
	;
	;parameters:
	; child_id: optional, unique id of child trainee to add
	; child_entity_path: path to child trainee in the format of a list with repeating pairs of [traineeContainer child_name]
	;	for each layer of hierarchy. e.g., (list traineeContainer first_child traineeContainer grand_child) for a 2 level hirearchy
	; is_contained: boolean, default true, meaning this child is contained inside traineeContainer, false means it is stored and loaded independently
	#AddChildTraineeReferences
	(declare
		(assoc is_contained (true))

		(declare (assoc
			path_to_parent (trunc child_entity_path -2)
			child_name (last child_entity_path)
		))

		;if child_id wasn't specified, set it to child's traineeId if it exists
		(if (= (null) child_id)
			(assign (assoc child_id (retrieve_from_entity child_entity_path "traineeId") ))
		)

		(accum_to_entities path_to_parent (assoc
			childTraineeIsContainedMap (associate child_name is_contained)
		))

		(if child_id
			(accum_to_entities path_to_parent (assoc
				containedTraineeIdToNameMap (associate child_id child_name)
				containedTraineeNameToIdMap (associate child_name child_id)
			))
		)

		;set the parentId for the child
		(assign_to_entities child_entity_path (assoc
			parentId (retrieve_from_entity path_to_parent "traineeId")
		))
	)

	;Removes all hierarchy references to a child trainee given the path to the child.
	;
	;parameters:
	; child_entity_path: path to child trainee to remove in the format of: (list traineeContainer child1 traineeContainer child2 etc..)
	#RemoveChildTraineeReferences
	(seq
		(declare (assoc
			path_to_parent (trunc child_entity_path -2)
			child_name (last child_entity_path)
		))

		(declare (assoc
			child_id (get (retrieve_from_entity path_to_parent "containedTraineeNameToIdMap") child_name)
		))

		(declare (assoc
			parent_contained_trainee_name_to_id_map (retrieve_from_entity path_to_parent "containedTraineeNameToIdMap")
			parent_contained_trainee_id_to_name_map (retrieve_from_entity path_to_parent "containedTraineeIdToNameMap")
			parent_child_trainee_is_contained_map (retrieve_from_entity path_to_parent "childTraineeIsContainedMap")
		))

		(assign_to_entities path_to_parent (assoc
			containedTraineeNameToIdMap (remove parent_contained_trainee_name_to_id_map child_name)
			containedTraineeIdToNameMap (remove parent_contained_trainee_id_to_name_map child_id)
			childTraineeIsContainedMap (remove parent_child_trainee_is_contained_map child_name)
		))
	)

)