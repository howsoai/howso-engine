;Module for trainee_template.
;Contains methods for the updating and merging of cases and case histories.
(null

	;merges cases specified by cases_to_merge
	;returns the number of duplicates merged
	;parameter:
	; cases_to_merge : list of case ids to merge into one
	#^MergeSpecifiedDuplicateCases
	(let
		(assoc
			;make a list of all replay references from all cases involved
			all_replay_references
				(map
					(lambda (retrieve_from_entity (current_value) internalLabelSession))
					cases_to_merge
				)


			case_to_keep (first cases_to_merge)
			duplicate_cases_map (zip (tail cases_to_merge))

			unique_replays_referenced (null)
		)

		;model has changed so clear out these cached value
		(call ClearCachedCountsAndEntropies)

		;destroy duplicate cases
		(map (lambda (destroy_entities (current_index))) duplicate_cases_map)

		;get unique sessions referenced
		(assign (assoc unique_replays_referenced (values all_replay_references (true) )))

		;replace all references to cases that use any of the cases merged
		; with the first element of all_replay_references (the newly merged case)
		(map
			(lambda (assign_to_entities
				(current_value)
					(assoc
						".replay_steps"
						(map (lambda
								;keep the current case only if it isn't in the duplicate list
								(if
									(contains_index duplicate_cases_map (current_value))
									(get_value case_to_keep)

									(current_value)
								)
							)
							(retrieve_from_entity (current_value 1) ".replay_steps")
						)
					)
			))

			unique_replays_referenced
		)

		;ouput the number of merged dupes
		(size duplicate_cases_map)
	)

	;finds any cases that have zero distance and merges the cases: combines their lists and updates any references in associated replays
	; parameters:
	; features: list of features
	#MergeDuplicateCases
	(declare
		(assoc
			features (list)

			;local variable, not a parameter
			hyperparam_map
				(call GetHyperparameters (assoc
					feature ".targetless"
					mode "robust"
					weight_feature ".none"
				))
			feature_deviations  (if (get hyperparam_map "useDeviations") (get hyperparam_map "featureDeviations") (get hyperparam_map "nullUncertainties") )
			query_feature_attributes_map (get hyperparam_map "featureDomainAttributes")
		)


		;for all cases, combine duplicates
		(map
			(lambda (let
				(assoc
					cases_same_position
						;if the case entity still exists (might have already been deleted by another iteration)
						(if (contains_entity (current_value 1))
							;find those identical to it
							(contained_entities (list
								(query_within_generalized_distance
									0.0
									features
									(retrieve_from_entity (current_value 2) features)
									;weights can always be null since only looking for distances of 0
									(null)
									queryDistanceTypeMap
									query_feature_attributes_map
									feature_deviations
									(get hyperparam_map "p")
									1 ;dt
									(null) ;don't need a case weight
									;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
									"fixed rand seed"
									(null) ; radius
									numericalPrecision
								)
							))
							;otherwise empty list
							(list)
						)
				)

				;if there's more than one like it (itself is included)
				(if (< 1 (size cases_same_position))
					(call ^MergeSpecifiedDuplicateCases (assoc cases_to_merge cases_same_position))
				)
			))

			(call AllCases)
		)
	)

	;Edit feature values for the specified cases.
	;Cases are specified by either case_indices or by the condition. If neither is provided, edits all cases.
	;returns null if invalid features specified or an assoc with "count"
	;
	;parameters:
	; features: list of names of feature to edit
	; feature_values: list of values corresponding to features
	; case_indices: optional, list of pair (list) of session id and index, where index is the original 0-based session_training_index of the case as
	; 		it was trained. If specified, ignores condition and condition_session
	; condition_session: optional, if specified ignores condition and operates on cases for the specified session id
	; condition: assoc of feature->value(s)
	;		no value = must have feature
	;   	- for continuous or numeric ordinal features:
	;			one value = must equal exactly the value or be close to it for fuzzy match
	;			two values = inclusive between
	;   	- for nominal or string ordinal features:
	;			n values = must match any of these values exactly
	; num_cases: optional, limit on the number of cases to edit; If set to zero there will be no limit.
	;		If null, will be set to k if precision is "similar" or no limit if precision is "exact". default is null
	; precision: optional string,  default is 'exact', used only with 'condition' parameter, will find exact matches if 'exact' and similar cases if 'similar'.
	; session: the session id when this call is being made
	#EditCases
	(declare
		(assoc
			features (list)
			feature_values (list)
			case_indices (list)
			condition (assoc)
			condition_session (null)
			num_cases (null)
			precision "exact"
			session "none"
		)

		;can't edit invalid or internal features
		(declare (assoc
			has_invalid_features
				(size (filter
					;leave only invalid features
					(lambda (contains_index untrainableFeatureCharacterSet (first (current_value))) )
					features
				))

			;store the originally passed in values as-is for history tracking
			unencoded_feature_values (get_value feature_values)
			session_indices_map (assoc)
		))
		(if has_invalid_features (conclude (null)))

		;encode feature values if necessary
		(if hasFeaturesNeedEncodingFromInput
			(assign (assoc
				feature_values
					(call ConvertFromInput (assoc
						feature_values feature_values
						features features
					))
			))
		)


		(declare (assoc
			case_ids
				;if case_indices are provided, pull cases by those
				(if (size case_indices)
					(call GetCaseIds (assoc case_indices case_indices))

					;otherwise pull cases by condition/quantity
					(or (size condition) (!= (null) num_cases) )
					(call GetCasesByCondition (assoc
						condition condition
						condition_session condition_session
						precision precision
						num_cases num_cases
					))

					;else pull all cases
					(call AllCases)
				)
		))

		(if case_ids
			(map
				(lambda
					(call UpdateCaseWithHistory (assoc
						case_id (current_value 1)
						features features
						feature_values feature_values
						unencoded_feature_values unencoded_feature_values
						session session
					))
				)
				case_ids
			)
		)

		(call !UpdateNullCounts (assoc features features))

		(accum_to_entities (assoc revision 1))

		;return number of case ids edited
		(assoc "count" (size case_ids))
	)

	;update a cases's history with specified values
	;
	;parameters:
	; case_id: case id of case whose history is being updated
	; features: list of feature names that are being edited
	; feature_values: list of encoded values for storing into the case
	; unencoded_feature_values: list of original values the featurse are being set to for history
	; session: the session id when this call is being made
	#UpdateCaseWithHistory
	(declare
		(assoc
			case_id (null)
			features (list)
			feature_values (list)
			unencoded_feature_values (list)
			session "none"
		)

		;pull previous case values pre-edit
		(declare (assoc previous_values (retrieve_from_entity case_id features) ))
		(if hasEncodedFeatures
			(assign (assoc
				previous_values
					(call ConvertToOutput (assoc
						features features
						feature_values previous_values
					))
			))
		)

		(declare (assoc
			edit_events
				(map
					(lambda
						(assoc
							"feature" (current_value 1)
							"type" "edit"
							"value" (get unencoded_feature_values (current_index 1))
							"previous_value" (get previous_values (current_index 1))
						)
					)
					features
				)
		))

		(declare (assoc
			case_edit_history
				;if the case has no edit history, create the label for it with an empty assoc as the value
				(if (not (contains_label case_id internalLabelCaseEditHistory))
					(seq
						;need to explicitly add the internalLabelCaseEditHistory label to the case
						(call StoreCaseValues (assoc case_values_map (associate case_id (assoc)) label_name internalLabelCaseEditHistory))
						(assoc)
					)

					;else retrieve the existing edit history
					(retrieve_from_entity case_id internalLabelCaseEditHistory)
				)
		))

		;update the history record for this case
		(assign (assoc
			case_edit_history
				;if making updates to a session already in the history, append to that session history
				(if (contains_index case_edit_history session)
					(let
						;get the list of edits for this session
						(assoc session_history_list (get case_edit_history session))
						;add to the list of edits the current edit event
						(accum (assoc session_history_list edit_events))
						;output the appended new list of edits to the edit history
						(append case_edit_history (associate session session_history_list))
					)

					;output the created history entry for this session
					(append case_edit_history (associate session edit_events))
				)
		))

		;write the updated values along with the history to the case
		(assign_to_entities
			case_id
			(append
				(zip features feature_values)
				(associate internalLabelCaseEditHistory case_edit_history)
			)
		)
	)


	;adds edit history to an individual case
	;example format of case_edit_history label as stored in each case entity:
	;	(assoc
	;		"sessionId_A"
	;			(list
	;				(assoc "feature" "A"  "type" "set" "value" 5)
	;				(assoc "feature" "B"  "type" "remove")
	;			)
	;		"sessionId_B"
	;			(list (assoc "feature" "C" "type" "set" "value" (null)))
	;	)
	;parameters:
	; edit_type : set, impute or remove
	; case : entity id of case to edit
	; feature : feature that was edited
	; feature_value : optional value feature was set to
	; session : session id of edit
	#AddCaseEditHistory
	(declare
		(assoc
			;edit type should be either set or remove, but if neither is specified will defailt to a generic 'edit'
			edit_type "edit"
			case (null)
			feature ""
			feature_value (null)
			session "none"
		)

		(if (!= (null) case)
			(let
				(assoc
					edit_event
						(if (= edit_type "remove")
							(assoc "feature" feature "type" edit_type)

							(assoc "feature" feature "type" edit_type "value" feature_value)
						)
					;pull previous case values pre-edit
					previous_value (retrieve_from_entity case feature)
				)

				(if hasEncodedFeatures
					(assign (assoc
						previous_value
							(first
								(call ConvertToOutput (assoc
									features (list feature)
									feature_values (list previous_value)
								))
							)
					))
				)
				(accum (assoc edit_event (assoc "previous_value" previous_value)))

				;if the case has no edit history, create the label for it with an empty assoc as the value
				(if (not (contains_label case internalLabelCaseEditHistory))
					(call StoreCaseValues (assoc case_values_map (associate case (assoc)) label_name internalLabelCaseEditHistory))
				)

				(declare (assoc case_edit_history (retrieve_from_entity case internalLabelCaseEditHistory)))

				;if making updates to a session already in the history, append to that session history
				(if (contains_index case_edit_history session)
					(let
						;get the list of edits for this session
						(assoc session_history_list (get case_edit_history session))
						;add to the list of edits the current edit event
						(accum (assoc session_history_list (list edit_event)))
						;append the new list of edits to the edit history
						(accum (assoc case_edit_history (associate session session_history_list)))
					)

					;else create the history entry for this session
					(accum (assoc case_edit_history (associate session (list edit_event))))
				)

				;store the updated value into case_edit_history label
				(assign_to_entities case (associate internalLabelCaseEditHistory case_edit_history))
			)
		)
	)

	;Iterate over all the passed in cases and accumulate their corresponding neighbor weights into the neighbors' weight_feature
	;parameters:
	; features: feature set to use for finding neighbors
	; cases: list of lists of values (non model-stored cases) for whose neighbors to accumulate weights for.
	; accumulate_weight_feature : name of feature into which to accumulate neighbors' influences as weight.
	#AccumulateCaseInfluenceWeights
	(declare
		(assoc
			features defaultFeatures
			cases (list)
			accumulate_weight_feature ".case_weight"
		)

		(declare (assoc
			hyperparam_map
				(call GetHyperparameters (assoc
					feature ".targetless"
					context_features features
					mode "robust"
					weight_feature ".none"
				))
			;default value of 1 for the accumulate_weight_feature
			new_weight_label_and_value (zip_labels (list accumulate_weight_feature) (list 1))
		))

		(map
			(lambda (let
				(assoc
					case_values (current_value 1)
					closest_cases_map (assoc)
					total_weight 0
				)

				(assign (assoc
					;map of case_id -> weight
					closest_cases_map
						(compute_on_contained_entities (list
							(query_nearest_generalized_distance
								(get hyperparam_map "k")
								features
								case_values
								(get hyperparam_map "featureWeights")
								queryDistanceTypeMap
								(get hyperparam_map "featureDomainAttributes")
								 (if (get hyperparam_map "useDeviations") (get hyperparam_map "featureDeviations") (get hyperparam_map "nullUncertainties"))
								(get hyperparam_map "p")
								(get hyperparam_map "dt")
								(if (!= weight_feature ".none") weight_feature (null))
								;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
								"fixed rand seed"
								(null) ;radius
								numericalPrecision
							)
						))
				))

				;if there are perfect matches (value is infinite), keep only those and set their weight to 1
				(if (contains_value (values closest_cases_map) .infinity)
					(assign (assoc
						closest_cases_map
							;keep only perfect matches
							(map 1 (filter (lambda (= (current_value) .infinity)) closest_cases_map) )
					))
				)

				(assign (assoc total_weight (apply "+" (values closest_cases_map))))

				;iterate over all the closest cases and accumulate the normalized weight to each one
				(map
					(lambda (seq
						;if accumulate_weight_feature label doesn't exist in this case, add it with a weight `1`
						(if (not (contains_label (current_index) accumulate_weight_feature))
							(accum_entity_roots (current_index) new_weight_label_and_value)
						)

						(accum_to_entities (current_index) (associate accumulate_weight_feature (/ (current_value 1) total_weight)))
					))
					closest_cases_map
				)
			))
			cases
		)
	)

	;Iterate over the specified model cases, pull their weight and distribute it to their corresponding neighbors into the neighbors' distribute_weight_feature
	;parameters:
	; features: feature set to use for finding neighbors
	; case_ids: list of model case ids whose weights need to be distributed
	; distribute_weight_feature : name of feature into which to pull cases' weight and distribute neighbors' influences as weight.
	#DistributeCaseInfluenceWeights
	(declare
		(assoc
			features defaultFeatures
			case_ids (list)
			distribute_weight_feature ".case_weight"
		)

		(declare (assoc
			hyperparam_map
				(call GetHyperparameters (assoc
					feature ".targetless"
					context_features features
					mode "robust"
					weight_feature ".none"
				))
			;default value of 1 for the accumulate_weight_feature
			new_weight_label_and_value (zip_labels (list distribute_weight_feature) (list 1))
		))

		;ensure the weight feature isn't among the features being used to find cases for distribution
		(assign (assoc features (filter (lambda (!= distribute_weight_feature (current_value))) features) ))

		(map
			(lambda (let
				(assoc
					case (current_value 1)
					closest_cases_map (assoc)
					total_weight 0
					;case weight value that needs to be distributed among the neighbors
					case_weight (retrieve_from_entity (current_value 1) distribute_weight_feature)
				)

				;if case doesn't have a weight, default it to 1.0
				(if (= (null) case_weight)
					(assign (assoc case_weight 1.0))
				)

				(assign (assoc
					;map of case_id -> weight
					closest_cases_map
						(compute_on_contained_entities (list
							(query_not_in_entity_list (list case))
							(query_nearest_generalized_distance
								(get hyperparam_map "k")
								features
								(retrieve_from_entity case features)
								(get hyperparam_map "featureWeights")
								queryDistanceTypeMap
								(get hyperparam_map "featureDomainAttributes")
								 (if (get hyperparam_map "useDeviations") (get hyperparam_map "featureDeviations") (get hyperparam_map "nullUncertainties"))
								(get hyperparam_map "p")
								(get hyperparam_map "dt")
								distribute_weight_feature
								;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
								"fixed rand seed"
								(null) ;radius
								numericalPrecision
							)
						))
				))

				;if there are perfect matches (value is infinite), keep only those and set their weight to 1
				(if (contains_value (values closest_cases_map) .infinity)
					(assign (assoc
						closest_cases_map
							;keep only perfect matches
							(map 1 (filter (lambda (= (current_value) .infinity)) closest_cases_map) )
					))
				)

				(assign (assoc total_weight (apply "+" (values closest_cases_map))))

				;iterate over all the closest cases and accumulate the normalized weight to each one
				(map
					(lambda (seq
						;if distribute_weight_feature label doesn't exist in this case, add it with a weight `1`
						(if (not (contains_label (current_index) distribute_weight_feature))
							(accum_entity_roots (current_index) new_weight_label_and_value)
						)

						;distribute the corresponding portion of this case's weight based on the neighbor's influence
						(accum_to_entities
							(current_index)
								(associate
									distribute_weight_feature (* case_weight (/ (current_value 1) total_weight))
								)
						)
					))
					closest_cases_map
				)
			))
			case_ids
		)
	)

	;Holds out random cases and returns the name of the contained entity holding them.
	;
	;parameters:
	; num_samples : number of random samples to hold out
	; rand_seed : random seed to use for selection of cases
	#HoldOutRandomCases
	(declare
		(assoc rand_seed (rand))

		(declare (assoc holdout_entity_name (concat "_temp" rand_seed) ))

		(create_entities holdout_entity_name (null))

		(map
			(lambda
				(move_entities (current_value) (list holdout_entity_name (current_value 1)))
			)
			(call AllCases (assoc num num_samples rand_seed rand_seed))
		)

		holdout_entity_name
	)

	;Restores cases that were being held in entity named 'holdout_entity_name' back to the model
	;
	;parameters:
	; holdout_entity_name: name of entity that was returned whyn HoldOutRandomCases was called
	#RestoreHeldOutCases
	(declare
		(assoc holdout_entity_name (null))

		;restore the validation cases from backup
		(if (!= (null) holdout_entity_name)
			(seq
				(map
					(lambda
						(move_entities (list holdout_entity_name (current_value 1)) (current_value))
					)
					(contained_entities holdout_entity_name)
				)

				(destroy_entities holdout_entity_name)
			)
		)
	)

)
