;Module for trainee_template.
;Contains methods for calculating conviction for cases.
(null

	;computes various data, such as familiarity convictions and distance contribution for each case in the model and stores them into specified features.
	;
	;parameters:
	; familiarity_conviction_addition: true or string, if true will use default value of "familiarity_conviction_addition" for feature name
	; familiarity_conviction_removal: true or string, if true will use default value of "familiarity_conviction_removal" for feature name
	; p_value_of_addition: true or string, default is false. if true will use default value of 'p_value_of_addition' for feature name
	; p_value_of_removal: true or string, default is false. if true will use default value of 'p_value_of_removal' for feature name
	; distance_contribution: true or string, if true will use default value of "distance_contribution" for feature name
	; similarity_conviction: true or string, if true will use default value of "similarity_conviction" for feature name
	; features: list of features for which to calculate conviction, will default to trainee's default features if unspecified
	; influence_weight_entropy: true or string, if true will use default value of "influence_weight_entropy"
	; case_ids: the list of case ids for the model to calculate conviction for
	; use_case_weights: flag, if set to true will scale influence weights by each case's weight_feature weight
	; weight_feature: optional, default '.case_weight'.  name of feature whose values to use as case weights
	#ReactIntoFeatures
	(declare
		(assoc
			features (null)
			case_ids (null)
			familiarity_conviction_addition (null)
			familiarity_conviction_removal (null)
			p_value_of_addition (null)
			p_value_of_removal (null)
			distance_contribution (null)
			similarity_conviction (null)
			influence_weight_entropy (null)
			use_case_weights (false)
			weight_feature ".case_weight"

			;not a parameter
			valid_weight_feature (false)
			warnings (assoc)
		)

		;if no parameters specified, do nothing
		(if
			(= (null)
			   familiarity_conviction_addition familiarity_conviction_removal distance_contribution
			   p_value_of_addition p_value_of_removal similarity_conviction influence_weight_entropy
			)
			(conclude (true))
		)

		;if any of the compute options are true, overtrite with their corresponding default feature names
		(if (= (true) familiarity_conviction_addition)
			(assign (assoc familiarity_conviction_addition "familiarity_conviction_addition"))
		)
		(if (= (true) familiarity_conviction_removal)
			(assign (assoc familiarity_conviction_removal "familiarity_conviction_removal"))
		)
		(if (= (true) p_value_of_addition)
			(assign (assoc p_value_of_addition "p_value_of_addition"))
		)
		(if (= (true) p_value_of_removal)
			(assign (assoc p_value_of_removal "p_value_of_removal"))
		)
		(if (= (true) distance_contribution)
			(assign (assoc distance_contribution "distance_contribution"))
		)
		(if (= (true) similarity_conviction)
			(assign (assoc similarity_conviction "similarity_conviction"))
		)
		(if (= (true) influence_weight_entropy)
			(assign (assoc influence_weight_entropy "influence_weight_entropy"))
		)

		(if (and
				(!= (null) similarity_conviction)
				(or (= (null) distance_contribution) (= (false) distance_contribution))
				(= (null) case_ids)
			)
			;if computing similarity_conviction for all cases, distance_contribution is needed for all cases
			(assign (assoc distance_contribution "distance_contribution"))
		)

		(if (= (null) features)
			(assign (assoc features defaultFeatures))
		)

		;if user doesn't want to use case weights, change weight_feature to '.none'
		(if (not use_case_weights)
			(assign (assoc weight_feature ".none"))

			;else using case weights, weight feature is valid if it's custom (not .case_weight) or hasPopulatedCaseWeight
			(assign (assoc valid_weight_feature (or hasPopulatedCaseWeight (!= weight_feature ".case_weight"))))
		)

		(declare (assoc
			hyperparam_map
				(call GetHyperparameters (assoc
					feature ".targetless"
					mode "robust"
					context_features features
					weight_feature weight_feature
				))
			model_size (call GetNumTrainingCases)
		))

		(declare (assoc
			feature_weights (get hyperparam_map "featureWeights")
			feature_deviations  (if (get hyperparam_map "useDeviations") (get hyperparam_map "featureDeviations") (get hyperparam_map "nullUncertainties") )
			closest_k (get hyperparam_map "k")
			query_feature_attributes_map (get hyperparam_map "featureDomainAttributes")
		))

		;output a warning when trainee has not been analyzed (using default hyperparameters w/o residuals)
		(if (and
				(= (false) (get hyperparam_map "allFeatureResidualsCached"))
				(= (list ".default") (get hyperparam_map "paramPath"))
			)
			(accum (assoc
				warnings (assoc "Results may be inaccurate because trainee has not been analyzed for targetless flows.\nRun 'analyze()' prior to calling this method.")
			))

			;warn if specified weight_feature hasn't been analyzed
			(and use_case_weights (!= weight_feature (get hyperparam_map (list "paramPath" 2))))
			(accum (assoc
				warnings
					(associate (concat
						"Results may be inaccurate because trainee has not been analyzed with case weights.\n"
						"Run 'analyze()' with use_case_weights=true, weight_feature='" weight_feature "' "
						"prior to calling this method."
					))
			))
		)

		;closest k must be at least 2 smaller than model size, i.e., a model of 5 needs a K of 3 or less:
		;when knocking out a case during conviction calculations, each remaining case searches for K cases around itself
		;meaning that the K must be at least 2 less than the model size
		(if (< model_size (+ closest_k 2))
			(assign (assoc closest_k (- model_size 2)))
		)

		(if (or familiarity_conviction_addition p_value_of_addition)
			;calculates the conviction for each case, making a map of case id -> conviction
			(let
				(assoc
					entropies_map
						(compute_on_contained_entities (list
							||(compute_entity_kl_divergences
								closest_k
								features
								case_ids
								feature_weights
								queryDistanceTypeMap
								query_feature_attributes_map
								feature_deviations
								(get hyperparam_map "p")
								(get hyperparam_map "dt")
								(if valid_weight_feature weight_feature (null))
								;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
								"fixed rand seed"
								(null) ;radius
								numericalPrecision
							)
						))
				)

				(if p_value_of_addition
					(call StoreCaseValues (assoc
						label_name p_value_of_addition
						case_values_map
							(map
								(lambda (exp (- (current_value))) )
								entropies_map
							)
					))
				)

				(if familiarity_conviction_addition
					(let
						(assoc avg_entropy (/ (apply "+" (values entropies_map)) (size entropies_map) ) )

						(assign_to_entities (assoc
							storedCaseConvictionsFeatureAddition familiarity_conviction_addition
							storedConvictionsFeatureSet (sort features)
						))

						;store the conviction for the cases into the specified label name
						(call StoreCaseValues (assoc
							label_name familiarity_conviction_addition
							case_values_map
								;store convictions into entropies_map by dividing avg_entropy by each individual entropy
								(if (= 0 avg_entropy)
									(map (lambda 1.0) entropies_map)

									(map (lambda (/ avg_entropy (current_value))) entropies_map)
								)
						))
					)
				)
			)
		)

		(if (or familiarity_conviction_removal p_value_of_removal)
			;calculates the conviction for each case, making a map of case id -> conviction
			(let
				(assoc
					entropies_map
						(compute_on_contained_entities (list
							||(compute_entity_kl_divergences
								closest_k
								features
								case_ids
								feature_weights
								queryDistanceTypeMap
								query_feature_attributes_map
								feature_deviations
								(get hyperparam_map "p")
								(get hyperparam_map "dt")
								(if valid_weight_feature weight_feature (null))
								;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
								"fixed rand seed"
								(null) ;radius
								numericalPrecision
								(true) ;conviction of removal
							)
						))
				)

				(if p_value_of_removal
					(call StoreCaseValues (assoc
						label_name p_value_of_removal
						case_values_map
							(map
								(lambda (exp (- (current_value))) )
								entropies_map
							)
					))
				)

				(if familiarity_conviction_removal
					(let
						(assoc avg_entropy (/ (apply "+" (values entropies_map)) (size entropies_map) ) )

						(call StoreCaseValues (assoc
							label_name familiarity_conviction_removal
							case_values_map
								;store convictions into entropies_map by dividing avg_entropy by each individual entropy
								(if (= 0 avg_entropy)
									(map (lambda 1.0) entropies_map)

									(map (lambda (/ avg_entropy (current_value))) entropies_map)
								)
						))
					)
				)
			)
		)

		(if distance_contribution
			(let
				(assoc
					case_to_dc_map
						(compute_on_contained_entities (list
							||(compute_entity_distance_contributions
								closest_k
								features
								case_ids
								feature_weights
								queryDistanceTypeMap
								query_feature_attributes_map
								feature_deviations
								(get hyperparam_map "p")
								(get hyperparam_map "dt")
								(if valid_weight_feature weight_feature (null))
								;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
								"fixed rand seed"
								(null) ;radius
								numericalPrecision
							)
						))
				)

				(call StoreCaseValues (assoc
					label_name distance_contribution
					case_values_map case_to_dc_map
				))

				;if computing for the whole model, update the calculated average distance contribution
				(if (= (null) case_ids)
					(assign_to_entities (assoc
						averageModelCaseDistanceContribution
							(/
								(apply "+" (values case_to_dc_map))
								(size case_to_dc_map)
							)
					))
				)
			)
		)

		(if similarity_conviction
			(seq
				(if (= (null) case_ids)
					(assign (assoc case_ids (call AllCases)))
				)
				(declare (assoc
					similarity_convictions_map
						||(map
							(lambda
								(call SimilarityConviction (assoc
									features features
									feature_values (retrieve_from_entity (current_index 1) features)
									use_case_weights use_case_weights
									weight_feature weight_feature
									filtering_queries (list (query_not_in_entity_list (list (current_index 3)) ))
									ignore_case_id (current_index 1)
								))
							)
							(zip case_ids)
						)
				))

				(call StoreCaseValues (assoc
					label_name similarity_conviction
					case_values_map similarity_convictions_map
				))
			)
		)

		(if influence_weight_entropy
			(call ComputeAndStoreInfluenceWeightEntropies (assoc
				context_features features
				label_name influence_weight_entropy
			))
		)

		(accum_to_entities (assoc revision 1))

		;output warnings
		warnings
	)

	;Used by Impute to compute the familiarity conviction of addition for a given case in the model
	; features: list of features
	; case_id : the entity id of the case we want conviction for
	#ComputeCaseAdditionFamiliarityConviction
	(declare
		(assoc
			features (list)
			case_id (null)
		)

		;if the model is too small, just return 0, otherwise compute conviction
		(if (<= (call GetNumTrainingCases) 2)
			(conclude 0)
		)

		;if convictions have already been calculated and stored for this feature set, just retrieve them
		(if (and
				(!= (null) storedCaseConvictionsFeatureAddition)
				(= storedConvictionsFeatureSet (sort features))
			)
			(conclude (retrieve_from_entity case_id storedCaseConvictionsFeatureAddition))
		)

		;calculate and store them and then retrieve the value for this case
		(call ReactIntoFeatures (assoc
			features features
			familiarity_conviction_addition (true)
		))

		(retrieve_from_entity case_id storedCaseConvictionsFeatureAddition)
	)

	;Helper method to compute and cache average case entropy of addition for the model
	#CacheAverageModelCaseEntropyAddition
	(let
		(assoc
			entropies_map
				(compute_on_contained_entities (list
					||(compute_entity_kl_divergences
						closest_k
						features
						(null)
						feature_weights
						queryDistanceTypeMap
						query_feature_attributes_map
						feature_deviations
						(get hyperparam_map "p")
						(get hyperparam_map "dt")
						(if valid_weight_feature weight_feature (null))
						;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
						"fixed rand seed"
						(null) ;radius
						numericalPrecision
					)
				))
		)

		(assign_to_entities (assoc
			averageModelCaseEntropyAddition
				(/
					(apply "+" (values entropies_map))
					(size entropies_map)
				)
		))
	)

	;Helper method to compute and cache average case entropy of removal for the model
	#CacheAverageModelCaseEntropyRemoval
	(let
		(assoc
			entropies_map
				(compute_on_contained_entities (list
					||(compute_entity_kl_divergences
						closest_k
						features
						(null)
						feature_weights
						queryDistanceTypeMap
						query_feature_attributes_map
						feature_deviations
						(get hyperparam_map "p")
						(get hyperparam_map "dt")
						(if valid_weight_feature weight_feature (null))
						;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
						"fixed rand seed"
						(null) ;radius
						numericalPrecision
						(true) ;conviction_of_removal
					)
				))
		)

		(assign_to_entities (assoc
			averageModelCaseEntropyRemoval
				(/
					(apply "+" (values entropies_map))
					(size entropies_map)
				)
		))
	)

	;Helper method to compute and cache average case distance contribution for the model
	#CacheAverageModelCaseDistanceContribution
	(let
		(assoc
			base_model_distance_contributions_map
				(compute_on_contained_entities (list
					||(compute_entity_distance_contributions
						closest_k
						features
						(null)
						feature_weights
						queryDistanceTypeMap
						query_feature_attributes_map
						feature_deviations
						(get hyperparam_map "p")
						(get hyperparam_map "dt")
						(if valid_weight_feature weight_feature (null))
						;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
						"fixed rand seed"
						(null) ;radius
						numericalPrecision
					)
				))
		)

		(assign_to_entities (assoc
			averageModelCaseDistanceContribution
				(/
					(apply "+" (values base_model_distance_contributions_map))
					(size base_model_distance_contributions_map)
				)
		))
	)

	;Helper method to compute model avg distance contribution and new cases' avg distance contribution
	#ComputeNewCasesDistanceContributions
	(let
		(assoc
			combined_model_distance_contributions_map
				(compute_on_contained_entities (list
					||(compute_entity_distance_contributions
						closest_k
						features
						(null)
						feature_weights
						queryDistanceTypeMap
						query_feature_attributes_map
						feature_deviations
						(get hyperparam_map "p")
						(get hyperparam_map "dt")
						(if valid_weight_feature weight_feature (null))
						;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
						"fixed rand seed"
						(null) ;radius
						numericalPrecision
					)
				))
		)

		(assign (assoc
			combined_model_average_distance_contributions
				(/
					(apply "+" (values combined_model_distance_contributions_map))
					(size combined_model_distance_contributions_map)
				)
			avg_new_cases_distance_contribution
				(/
					(apply "+" (unzip combined_model_distance_contributions_map new_case_ids))
					(size new_case_ids)
				)
		))
	)

	;Helper method to compute model avg new cases familarity convction of addition and p value of addition
	#ComputeNewCasesFamiliarityConvictionAddition
	(seq
		;compute entropies of the new cases
		(assign (assoc
			new_case_entropies_value
				(compute_on_contained_entities (list
					||(compute_entity_group_kl_divergence
						closest_k
						features
						new_case_ids
						feature_weights
						queryDistanceTypeMap
						query_feature_attributes_map
						feature_deviations
						(get hyperparam_map "p")
						(get hyperparam_map "dt")
						(if valid_weight_feature weight_feature (null))
						;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
						"fixed rand seed"
						(null) ;radius
						numericalPrecision
					)
				))
		))
		(assign (assoc
			average_new_cases_conviction_addition
				(if familiarity_conviction_addition
					;if the average entropy is 0, that means all cases have entropy of 0, thus return 1 for conviction
					(if (= 0 averageModelCaseEntropyAddition)
						1.0

						;return conviction by taking the average case entropy dividing be the average new case entropy
						(/ averageModelCaseEntropyAddition (/ new_case_entropies_value (size new_case_ids)))
					)
				)
			p_value_of_addition_value
				(if p_value_of_addition
					(exp (- (/ new_case_entropies_value (size new_case_ids))) )
				)
			kl_divergence_addition_value (/ new_case_entropies_value (size new_case_ids))
		))
	)

	;Helper method to compute model avg new cases familarity convction of removal and p value of removal
	#ComputeNewCasesFamiliarityConvictionRemoval
	(seq
		;compute entropies of the new cases
		(assign (assoc
			new_case_entropies_value
				(compute_on_contained_entities (list
					||(compute_entity_group_kl_divergence
						closest_k
						features
						new_case_ids
						feature_weights
						queryDistanceTypeMap
						query_feature_attributes_map
						feature_deviations
						(get hyperparam_map "p")
						(get hyperparam_map "dt")
						(if valid_weight_feature weight_feature (null))
						;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
						"fixed rand seed"
						(null) ;radius
						numericalPrecision
						(true) ;conviction_of_removal
					)
				))
		))
		(assign (assoc
			average_new_cases_conviction_removal
				(if familiarity_conviction_removal
					;if the average entropy is 0, that means all cases have entropy of 0, thus return 1 for conviction
					(if (= 0 averageModelCaseEntropyRemoval)
						1.0

						;return conviction by taking the average case entropy dividing be the average new case entropy
						(/ averageModelCaseEntropyRemoval (/ new_case_entropies_value (size new_case_ids)))
					)
				)
			p_value_of_removal_value
				(if p_value_of_removal
					(exp (- (/ new_case_entropies_value (size new_case_ids))) )
				)
			kl_divergence_removal_value (/ new_case_entropies_value (size new_case_ids))
		))
	)

	;Compute and output similarity conviction of a case
	;
	;parameters:
	; features: list of features
	; feature_values: list of corresponding feature values
	; filtering_queries: (optional) list of filtering queries (such as ignoring a specific case) during computation
	#SimilarityConviction
	(declare
		(assoc
			features (list)
			feature_values (null)
			filtering_queries (list)
			use_case_weights (false)
			weight_feature ".case_weight"
		)

		(declare (assoc
			new_case_dc
				(call ComputeCandidateCaseDistanceContribution (assoc
					features features
					feature_values feature_values
					filtering_queries filtering_queries
					use_case_weights use_case_weights
					weight_feature weight_feature
				))
			num_cases_with_distance_contribution
				(contained_entities (list
					(query_exists "distance_contribution")
					(query_count)
				))
			local_model_cases
				(contained_entities (append
					filtering_queries
					(query_nearest_generalized_distance
						(min min_regional_model_size_by_percent (max k_parameter regionalModelMinSize))
						features
						feature_values
						(get hyperparam_map "featureWeights")
						queryDistanceTypeMap
						(get hyperparam_map "featureDomainAttributes")
						 (if (get hyperparam_map "useDeviations") (get hyperparam_map "featureDeviations") (get hyperparam_map "nullUncertainties"))
						(get hyperparam_map "p")
						(get hyperparam_map "dt")
						(if use_case_weights weight_feature (null))
						;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
						"fixed rand seed"
						(null) ;radius
						numericalPrecision
					)
				))
			local_distance_contributions_map (assoc)
		))

		(if (!= num_cases_with_distance_contribution (call GetNumTrainingCases))
			;not all cases have distance_contribution, must calculate distance_contribution for nearest neighbors
			(assign (assoc
				local_distance_contributions_map
					(compute_on_contained_entities (append
						filtering_queries
						||(compute_entity_distance_contributions
							(get hyperparam_map "k")
							features
							local_model_cases
							(get hyperparam_map "featureWeights")
							queryDistanceTypeMap
							(get hyperparam_map "featureDomainAttributes")
							 (if (get hyperparam_map "useDeviations") (get hyperparam_map "featureDeviations") (get hyperparam_map "nullUncertainties"))
							(get hyperparam_map "p")
							(get hyperparam_map "dt")
							(if use_case_weights weight_feature (null))
							;use a fixed random seed to guarantee deterministic behavior for reacts (named "fixed rand seed")
							"fixed rand seed"
							(null) ;radius
							numericalPrecision
						)
					))
			))

			;cases have distance_contribution, just retrieve them from the local cases
			(assign (assoc
				local_distance_contributions_map
					(map
						(lambda
							(retrieve_from_entity (current_index) "distance_contribution")
						)
						(zip local_model_cases)
					)
			))
		)

		;average local cases' distance contributions
		(declare (assoc
			local_expected_distance_contribution
				(/
					 (apply "+" (values local_distance_contributions_map))
					 (size local_distance_contributions_map)
				)
		))

		;output similarity conviction as ratio of expected / calculated distance contribution
		(/ local_expected_distance_contribution new_case_dc)
	)

	;compute distance contribution for the specified feature values of a hypothetical candidate case
	;returns the distance contribution value

	;parameters:
	; features: list of features
	; feature_values: list of corresponding feature values
	;   optional hyperparameters for the query may also be passed in and are explicitly listed below in the declare block
	#ComputeCandidateCaseDistanceContribution
	(declare
		(assoc
			features (list)
			feature_values (list)

			filtering_queries (list)
			feature_weights (null)
			feature_deviations (null)
			p_parameter (null)
			query_closest_k (null)
			dt_parameter (null)
			model_size (null)
			use_case_weights (false)
			weight_feature ".case_weight"
		)

		;if parameters aren't passed in, set them here
		(if (= (null) p_parameter)
			(let
				(assoc
					hyperparam_map
						(call GetHyperparameters (assoc
							feature ".targetless"
							mode "robust"
							context_features features
							weight_feature weight_feature
						))
				)

				(assign (assoc
					feature_weights (get hyperparam_map "featureWeights")
					feature_deviations  (if (get hyperparam_map "useDeviations") (get hyperparam_map "featureDeviations") (get hyperparam_map "nullUncertainties") )
					model_size (call GetNumTrainingCases)
					dt_parameter (get hyperparam_map "dt")
					p_parameter (get hyperparam_map "p")
					query_closest_k (get hyperparam_map "k")
					query_feature_attributes_map (get hyperparam_map "featureDomainAttributes")
				))
			)
		)

		(declare (assoc
			number_of_closest_k_neighbors query_closest_k
			;map of case -> distance to feature_values
			closest_cases_distances_map (assoc)
			non_zero_distances 0
			done (false)
			harmonic_mean_of_non_zero_neighbors 0
		))

		(while (not done)
			(assign (assoc
				closest_cases_distances_map
					(compute_on_contained_entities (append
						filtering_queries
						(query_nearest_generalized_distance
							query_closest_k
							features
							feature_values
							feature_weights
							queryDistanceTypeMap
							query_feature_attributes_map
							feature_deviations
							p_parameter
							1 ;dt is since we just want actual distances
							(if use_case_weights weight_feature (null))
							(rand)
							(null) ;radius
							numericalPrecision
						)
					))
			))

			(assign (assoc
				non_zero_distances (filter (lambda (!= (current_value) 0)) (values closest_cases_distances_map))
			))

			(if (or (> (size non_zero_distances) 0) (= query_closest_k model_size))
				(assign (assoc done (true)))

				;else double the k and try again, don't go past the model size
				(assign (assoc query_closest_k (min (* 2 query_closest_k) model_size)))
			)
		)

		;query_closest_k is larger than it started if had to expand search, grab only the smallest of the distances
		(if (> query_closest_k number_of_closest_k_neighbors )
			(seq
				;the new scale is going to be the 1 smallest + number of 0s
				(assign (assoc number_of_closest_k_neighbors (+ 1 (- query_closest_k (size non_zero_distances) )) ))
				;keep the smallest of the distances
				(assign (assoc non_zero_distances (list (apply "min" non_zero_distances)) ))
			)
		)

		;if the distance weight exponent is not the default value of -1, apply the negative value of it to all the distances
		(if (!= -1 dt_parameter)
			(assign (assoc
				non_zero_distances
					(map (lambda (pow (current_value) (- dt_parameter))) non_zero_distances)
			))
		)

		(assign (assoc
			;calculate the harmonic mean of all the neighbors that have a non-zero distance
			;by taking the generalized_distance for p = -1 and multiplying it by the size of the list
			harmonic_mean_of_non_zero_neighbors
				(*
					(generalized_distance
						(null) ;weights
						(null) ;types
						(null) ;limits
						(null) ;feature_deviations
						-1     ;p parameter
						non_zero_distances
					)
					(size non_zero_distances)
				)
		))

		;if all the neighbors have zero distance, return a 0
		(if (= 0 (size non_zero_distances))
			0

			;else scale the harmonic mean by corresponding count of zero distance neighbors
			(/
				harmonic_mean_of_non_zero_neighbors
				(+ 1 (- number_of_closest_k_neighbors (size non_zero_distances)) )
			)
		)
	)
)