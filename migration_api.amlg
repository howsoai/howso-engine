;Howso API Labels:
;
;	"clean_data"
;	"clear_conviction_thresholds"
;	"compute_conviction_of_features"
;	"batch_react_group"
;	"create_trainee"
;	"delete"
;	"get_num_training_cases"
;	"edit_cases"
;	"get_sessions"
;	"get_session_metadata"
;	"set_session_metadata"
;	"get_session_indices"
;	'get_session_training_indices"
;	"impute"
;	"load"
;	"train"
;	"react"
;	"react_series"
;	"batch_react"
;	"append_to_series_store"
;	"remove_series_store"
;	"remove_session"
;	"get_cases"
;	"save"
;	"copy_subtrainee"
;	"rename_subtrainee"
;	"set_conviction_upper_threshold"
;	"set_conviction_lower_threshold"
;	"set_feature_attributes"
;	"get_feature_attributes"
;	"get_metadata"
;	"set_metadata"
;	"set_substitute_feature_values"
;	"get_substitute_feature_values"
;	"react_into_features"
;	"retrieve_extreme_cases_for_feature"
;	"auto_analyze"
;	"analyze"
;	"set_random_seed"
;	"get_internal_parameters"
;	"set_internal_parameters"
;	"set_auto_ablation_params"
;	"get_auto_ablation_params"
;	"set_auto_analyze_params"
;	"move_cases"
;	"remove_cases"
;	"reset_parameter_defaults"
;	"get_trainee_version"
;	"remove_feature"
;	"add_feature"
;	"react_into_trainee"
;	"get_feature_residuals"
;	"get_feature_mda"
;	"get_feature_contributions"
;	"get_prediction_stats"
;	"get_marginal_stats"
;	"pairwise_distances"
;	"distances"
;	"set_influence_weight_threshold"
;	"export_trainee"
;	"upgrade_trainee"
;	"get_api"
;	"get_revision"
;	"evaluate"
;	"get_hierarchy"
;	"execute_on_subtrainee"
;

;performs the training and management of trainees
(null







	;method that rewrites the trainee code such that any comments that start with '^^^' are parsed as code to print out debug info
	#!parse_debug_print
		(seq
			(assign_entity_roots trainee
				(rewrite
					(lambda
						(let
							(assoc
								comments (get_comments (current_value 1))
								;list to hold indivdiual lines of 'debug' comments that should be parsed as code
								debug_code (list)
							)
							(if (!= (null) comments)
								(let
									(assoc chars (explode comments))
									(declare (assoc
										carriage_indices (filter (lambda (= (get chars (current_value)) "\r")) (indices chars))
										prev_index 0
									))
									(accum (assoc carriage_indices (size chars)))

									(declare (assoc
										individual_comment_lines
											(map
												(lambda
													(let
														(assoc line (apply "concat" (unzip chars (range prev_index (- (current_value 1) 1)))))
														;adjust for "\r\n"
														(assign (assoc prev_index (+ 2 (current_value 1))))
														line
													)
												)
												carriage_indices
											)
									))

									(map
										(lambda
											;if comment starts with ^^^, parse it as code
											(if (= "^^^" (trunc (current_value) 3))
												(accum (assoc debug_code (tail (current_value 1) (- (size (current_value 1)) 3)  )))
											)
										)
										individual_comment_lines
									)
								)
							)

							(set_labels
								;if there is debug code, pre-pend it above its code block, and then change from 'list' to 'seq' to
								;ensure that the original code block isn't encompassed in a list
								(if (size debug_code)
									(set_type
										(append
											(map
												(lambda (parse (current_value)))
												debug_code
											)
											(get_value (current_value))
										)
										"seq"
									)

									;else just output the code
									(get_value (current_value))
								)

								(get_labels (current_value))
							)
						)
					)
					(retrieve_entity_root trainee 1)
				)
			)
			(assign_to_entities trainee (assoc debug_print debug_print ))
		)

)
